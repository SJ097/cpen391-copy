
tutorial1_8.elf:     file format elf32-littlenios2
tutorial1_8.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800022c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000f63c memsz 0x0000f63c flags r-x
    LOAD off    0x0001065c vaddr 0x0800f65c paddr 0x08011148 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012c34 vaddr 0x08012c34 paddr 0x08012c34 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f0f4  0800022c  0800022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000033c  0800f320  0800f320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0800f65c  08011148  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08012c34  08012c34  00012c34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012148  2**0
                  CONTENTS
  7 .sdram        00000000  08012d94  08012d94  00012148  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012148  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cb0  00000000  00000000  00012170  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000228da  00000000  00000000  00012e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008b46  00000000  00000000  000356fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aae0  00000000  00000000  0003e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f98  00000000  00000000  00048d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003574  00000000  00000000  0004acb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016c93  00000000  00000000  0004e22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00064ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00064ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000692a0  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000692a3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000692af  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000692b0  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000692b1  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000692bc  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000692c7  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  000692d2  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000023  00000000  00000000  000692dd  2**0
                  CONTENTS, READONLY
 27 .jdi          00004321  00000000  00000000  00069300  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00044d19  00000000  00000000  0006d621  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
0800022c l    d  .text	00000000 .text
0800f320 l    d  .rodata	00000000 .rodata
0800f65c l    d  .rwdata	00000000 .rwdata
08012c34 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08012d94 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tutorial1_8_bsp//obj/HAL/src/crt0.o
08000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800f3a2 l     O .rodata	00000010 zeroes.4181
0800f3b2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080025ec l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004194 l     F .text	00000008 __fp_lock
0800419c l     F .text	00000008 __fp_unlock
080041b0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800f65c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800faa0 l     O .rwdata	00000020 lc_ctype_charset
0800fa80 l     O .rwdata	00000020 lc_message_charset
0800fac0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800f3e4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08006bd8 l     F .text	000000fc __sprint_r.part.0
0800f518 l     O .rodata	00000010 blanks.4125
0800f508 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a27c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cbcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ccf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800cd20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ce28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800cf24 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d008 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d1ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08011138 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d470 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d5c0 l     F .text	00000038 alt_dev_reg
080100a8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800d898 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800da9c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800e218 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800e6b0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800e808 l     F .text	00000050 alt_get_errno
0800e858 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08012c68 g     O .bss	00000004 alt_instruction_exception_handler
08006720 g     F .text	00000074 _mprec_log10
0800680c g     F .text	0000008c __any_on
08008aa8 g     F .text	00000054 _isatty_r
0800f3f0 g     O .rodata	00000028 __mprec_tinytens
0800d134 g     F .text	00000078 alt_main
08012c94 g     O .bss	00000100 alt_irq
08008afc g     F .text	0000005c _lseek_r
08011148 g       *ABS*	00000000 __flash_rwdata_start
0800b5ec g     F .text	00000084 .hidden __eqdf2
08012d94 g       *ABS*	00000000 __alt_heap_start
08000360 g     F .text	0000003c printf
08009420 g     F .text	0000009c _wcrtomb_r
08006a38 g     F .text	0000005c __sseek
080044f8 g     F .text	00000010 __sinit
080092b0 g     F .text	00000154 __swbuf_r
08004acc g     F .text	0000007c _setlocale_r
08004350 g     F .text	00000078 __sfmoreglue
0800d1cc g     F .text	00000020 __malloc_unlock
08008b58 g     F .text	0000015c memmove
080044e0 g     F .text	00000018 _cleanup
08005850 g     F .text	000000a8 _Balloc
0800b670 g     F .text	000000e0 .hidden __gtdf2
0800ec48 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080085ac g     F .text	00000058 _fstat_r
08012c4c g     O .bss	00000004 errno
080069b4 g     F .text	00000008 __seofread
08012c54 g     O .bss	00000004 alt_argv
08019108 g       *ABS*	00000000 _gp
0800ff28 g     O .rwdata	00000180 alt_fd_list
0800ec68 g     F .text	00000090 alt_find_dev
080055f4 g     F .text	00000138 memcpy
080041a4 g     F .text	0000000c _cleanup_r
0800c9f4 g     F .text	000000d0 .hidden __floatsidf
0800e790 g     F .text	00000078 alt_io_redirect
0800b750 g     F .text	000000e0 .hidden __ltdf2
0800f320 g       *ABS*	00000000 __DTOR_END__
0800eee0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08006898 g     F .text	00000074 __fpclassifyd
0800667c g     F .text	000000a4 __ratio
08008110 g     F .text	00000024 __vfiprintf_internal
0800dc98 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000334 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a398 g     F .text	00000008 .hidden __udivsi3
0800ce78 g     F .text	000000ac isatty
0800f440 g     O .rodata	000000c8 __mprec_tens
08004b48 g     F .text	0000000c __locale_charset
08012c48 g     O .bss	00000004 __malloc_top_pad
08011110 g     O .rwdata	00000004 __mb_cur_max
08004b78 g     F .text	0000000c _localeconv_r
08008604 g     F .text	000004a4 __sfvwrite_r
08005c78 g     F .text	0000003c __i2b
0800690c g     F .text	00000054 _sbrk_r
08008cb4 g     F .text	0000005c _read_r
08011130 g     O .rwdata	00000004 alt_max_fd
080082bc g     F .text	00000100 _fclose_r
08004164 g     F .text	00000030 fflush
08012c44 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a3d0 g     F .text	0000089c .hidden __adddf3
08006424 g     F .text	0000011c __b2d
08009c60 g     F .text	0000061c .hidden __umoddi3
0800d058 g     F .text	000000dc lseek
08011108 g     O .rwdata	00000004 _global_impure_ptr
08008d10 g     F .text	000005a0 _realloc_r
08012d94 g       *ABS*	00000000 __bss_end
0800e5c0 g     F .text	000000f0 alt_iic_isr_register
0800eb44 g     F .text	00000104 alt_tick
08009620 g     F .text	00000640 .hidden __udivdi3
080083d0 g     F .text	00000184 _fputwc_r
0800f418 g     O .rodata	00000028 __mprec_bigtens
08005a5c g     F .text	00000104 __s2b
0800cac4 g     F .text	000000a4 .hidden __floatunsidf
080061cc g     F .text	00000060 __mcmp
08004518 g     F .text	00000018 __fp_lock_all
0800e574 g     F .text	0000004c alt_ic_irq_enabled
0800eaac g     F .text	00000098 alt_alarm_stop
08012c5c g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d0 alt_irq_handler
0800ff00 g     O .rwdata	00000028 alt_dev_null
0800e1fc g     F .text	0000001c alt_dcache_flush_all
08005b60 g     F .text	00000068 __hi0bits
0800c96c g     F .text	00000088 .hidden __fixdfsi
08011148 g       *ABS*	00000000 __ram_rwdata_end
08011128 g     O .rwdata	00000008 alt_dev_list
0800d4c0 g     F .text	00000100 write
0800f65c g       *ABS*	00000000 __ram_rodata_end
0800cd70 g     F .text	000000b8 fstat
0800b750 g     F .text	000000e0 .hidden __ledf2
08005f44 g     F .text	00000140 __pow5mult
08006cec g     F .text	00001424 ___vfiprintf_internal_r
08012c3c g     O .bss	00000004 __nlocale_changed
0800a3a0 g     F .text	00000008 .hidden __umodsi3
08012d94 g       *ABS*	00000000 end
0800d7d4 g     F .text	000000c4 altera_avalon_jtag_uart_init
080001cc g     F .exceptions	00000060 alt_instruction_exception_entry
0800f320 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800cb68 g     F .text	00000064 .hidden __clzsi2
0800dea4 g     F .text	00000218 altera_avalon_jtag_uart_write
08004508 g     F .text	00000004 __sfp_lock_acquire
0800550c g     F .text	000000e8 memchr
0800039c g     F .text	000020fc ___vfprintf_internal_r
0800466c g     F .text	000002f0 _free_r
08004b54 g     F .text	00000010 __locale_mb_cur_max
0800f158 g     F .text	00000194 __call_exitprocs
08012c38 g     O .bss	00000004 __mlocale_changed
08011114 g     O .rwdata	00000004 __malloc_sbrk_base
0800022c g     F .text	0000003c _start
08012c60 g     O .bss	00000004 _alt_tick_rate
08006084 g     F .text	00000148 __lshift
08012c64 g     O .bss	00000004 _alt_nticks
0800d23c g     F .text	00000104 read
0800d62c g     F .text	00000044 alt_sys_init
0800f044 g     F .text	00000114 __register_exitproc
08005cb4 g     F .text	00000290 __multiply
0800db44 g     F .text	00000068 altera_avalon_jtag_uart_close
0800a3a8 g     F .text	00000028 .hidden __mulsi3
0800f65c g       *ABS*	00000000 __ram_rwdata_start
0800f320 g       *ABS*	00000000 __ram_rodata_start
08012c6c g     O .bss	00000028 __malloc_current_mallinfo
08006540 g     F .text	0000013c __d2b
0800d670 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ee0c g     F .text	000000d4 alt_get_fd
08008190 g     F .text	00000054 _close_r
0800efc8 g     F .text	0000007c memcmp
0800d730 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08012d94 g       *ABS*	00000000 __alt_stack_base
0800d780 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080024bc g     F .text	00000130 __swsetup_r
0800ac6c g     F .text	00000980 .hidden __divdf3
080043c8 g     F .text	00000118 __sfp
08006794 g     F .text	00000078 __copybits
0800faf8 g     O .rwdata	00000408 __malloc_av_
08004514 g     F .text	00000004 __sinit_lock_release
0800b830 g     F .text	0000086c .hidden __muldf3
08006960 g     F .text	00000054 __sread
0800ecf8 g     F .text	00000114 alt_find_file
0800e268 g     F .text	000000a4 alt_dev_llist_insert
0800d1ac g     F .text	00000020 __malloc_lock
0800d3c0 g     F .text	000000b0 sbrk
08003f3c g     F .text	00000228 _fflush_r
080081e4 g     F .text	000000d8 _calloc_r
08012c34 g       *ABS*	00000000 __bss_start
0800572c g     F .text	00000124 memset
08000268 g     F .text	000000cc main
08012c58 g     O .bss	00000004 alt_envp
08012c40 g     O .bss	00000004 __malloc_max_total_mem
0800d6d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009404 g     F .text	0000001c __swbuf
08006a94 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080083bc g     F .text	00000014 fclose
08002814 g     F .text	00001728 _dtoa_r
08004d64 g     F .text	000007a8 _malloc_r
08009594 g     F .text	00000030 __ascii_wctomb
08011134 g     O .rwdata	00000004 alt_errno
0800495c g     F .text	000000b8 _fwalk
0800a2e8 g     F .text	00000054 .hidden __divsi3
08004548 g     F .text	00000124 _malloc_trim_r
0800f320 g       *ABS*	00000000 __CTOR_END__
08006a9c g     F .text	000000a4 strcmp
0800f320 g       *ABS*	00000000 __flash_rodata_start
0800f320 g       *ABS*	00000000 __DTOR_LIST__
0800b5ec g     F .text	00000084 .hidden __nedf2
0800d5f8 g     F .text	00000034 alt_irq_init
0800d340 g     F .text	00000080 alt_release_fd
0800f528 g     O .rodata	00000100 .hidden __clz_tab
08012c34 g     O .bss	00000004 _PathLocale
0800ef7c g     F .text	00000014 atexit
08008134 g     F .text	0000005c _write_r
08004b84 g     F .text	0000001c setlocale
0801110c g     O .rwdata	00000004 _impure_ptr
08012c50 g     O .bss	00000004 alt_argc
0800e368 g     F .text	0000005c _do_dtors
08004b70 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080063c4 g     F .text	00000060 __ulp
08004530 g     F .text	00000018 __fp_unlock_all
08011120 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004ba0 g     F .text	0000000c localeconv
0800e3e0 g     F .text	00000050 alt_ic_isr_register
08011148 g       *ABS*	00000000 _edata
08012d94 g       *ABS*	00000000 _end
0800022c g       *ABS*	00000000 __ram_exceptions_end
0800dbac g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800e4d0 g     F .text	000000a4 alt_ic_irq_disable
080069bc g     F .text	0000007c __swrite
08011118 g     O .rwdata	00000004 __malloc_trim_threshold
08004b64 g     F .text	0000000c __locale_msgcharset
0800ef90 g     F .text	00000038 exit
08004a14 g     F .text	000000b8 _fwalk_reent
0800622c g     F .text	00000198 __mdiff
0800a33c g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800450c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800f2ec g     F .text	00000034 _exit
0800e0bc g     F .text	00000140 alt_alarm_start
08004bac g     F .text	000001b8 __smakebuf_r
08006b40 g     F .text	00000098 strlen
0800e94c g     F .text	00000160 open
0800b670 g     F .text	000000e0 .hidden __gedf2
0801111c g     O .rwdata	00000004 __wctomb
08006cd4 g     F .text	00000018 __sprint_r
0800e3c4 g     F .text	0000001c alt_icache_flush_all
0801113c g     O .rwdata	00000004 alt_priority_mask
0800e430 g     F .text	000000a0 alt_ic_irq_enable
08002498 g     F .text	00000024 __vfprintf_internal
080095c4 g     F .text	0000005c _wctomb_r
0800c09c g     F .text	000008d0 .hidden __subdf3
08005bc8 g     F .text	000000b0 __lo0bits
08011140 g     O .rwdata	00000008 alt_alarm_list
0800e30c g     F .text	0000005c _do_ctors
080094bc g     F .text	000000d8 wcrtomb
0800cc1c g     F .text	000000d8 close
0800cf88 g     F .text	00000080 alt_load
08008554 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08004510 g     F .text	00000004 __sinit_lock_acquire
08005920 g     F .text	0000013c __multadd
080058f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408b14 	ori	at,at,556
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001cc0 	call	80001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	108b2504 	addi	r2,r2,11412
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	108b2504 	addi	r2,r2,11412
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	e037883a 	mov	sp,fp
 80001bc:	dfc00117 	ldw	ra,4(sp)
 80001c0:	df000017 	ldw	fp,0(sp)
 80001c4:	dec00204 	addi	sp,sp,8
 80001c8:	f800283a 	ret

080001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001cc:	defffb04 	addi	sp,sp,-20
 80001d0:	dfc00415 	stw	ra,16(sp)
 80001d4:	df000315 	stw	fp,12(sp)
 80001d8:	df000304 	addi	fp,sp,12
 80001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e0:	00bfffc4 	movi	r2,-1
 80001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001ec:	d0a6d817 	ldw	r2,-25760(gp)
 80001f0:	10000726 	beq	r2,zero,8000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f4:	d0a6d817 	ldw	r2,-25760(gp)
 80001f8:	e0fffd17 	ldw	r3,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	e17fff17 	ldw	r5,-4(fp)
 8000204:	e1bffe17 	ldw	r6,-8(fp)
 8000208:	103ee83a 	callr	r2
 800020c:	00000206 	br	8000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000214:	0005883a 	mov	r2,zero
}
 8000218:	e037883a 	mov	sp,fp
 800021c:	dfc00117 	ldw	ra,4(sp)
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00204 	addi	sp,sp,8
 8000228:	f800283a 	ret

Disassembly of section .text:

0800022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 800022c:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000234:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000238:	d6a44214 	ori	gp,gp,37128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 800023c:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000240:	108b0d14 	ori	r2,r2,11316

    movhi r3, %hi(__bss_end)
 8000244:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000248:	18cb6514 	ori	r3,r3,11668

    beq r2, r3, 1f
 800024c:	10c00326 	beq	r2,r3,800025c <_start+0x30>

0:
    stw zero, (r2)
 8000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000258:	10fffd36 	bltu	r2,r3,8000250 <__alt_data_end+0xfc000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 800025c:	800cf880 	call	800cf88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000260:	800d1340 	call	800d134 <alt_main>

08000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000264:	003fff06 	br	8000264 <__alt_data_end+0xfc000264>

08000268 <main>:
#include <io.h>

#define bit_flipper_base (volatile int *) 0x2010

int main()
{
 8000268:	defffd04 	addi	sp,sp,-12
 800026c:	dfc00215 	stw	ra,8(sp)
 8000270:	df000115 	stw	fp,4(sp)
 8000274:	df000104 	addi	fp,sp,4
	int v = 0x05; // arbitrary value
 8000278:	00800144 	movi	r2,5
 800027c:	e0bfff15 	stw	r2,-4(fp)

	IOWR_32DIRECT(bit_flipper_base,0,v); // write the value to the component
 8000280:	00880404 	movi	r2,8208
 8000284:	e0ffff17 	ldw	r3,-4(fp)
 8000288:	10c00035 	stwio	r3,0(r2)
	 printf("value is now %x\n", IORD_32DIRECT(bit_flipper_base,4));
 800028c:	00880504 	movi	r2,8212
 8000290:	10800037 	ldwio	r2,0(r2)
 8000294:	01020074 	movhi	r4,2049
 8000298:	213cc804 	addi	r4,r4,-3296
 800029c:	100b883a 	mov	r5,r2
 80002a0:	80003600 	call	8000360 <printf>
	 // increment what is in the component

	 IOWR_32DIRECT(0x2010,4,0); // does not matter what you write. Note offset is 4
 80002a4:	0007883a 	mov	r3,zero
 80002a8:	00880504 	movi	r2,8212
 80002ac:	10c00035 	stwio	r3,0(r2)
	  printf("value is now %x\n", IORD_32DIRECT(bit_flipper_base,4));
 80002b0:	00880504 	movi	r2,8212
 80002b4:	10800037 	ldwio	r2,0(r2)
 80002b8:	01020074 	movhi	r4,2049
 80002bc:	213cc804 	addi	r4,r4,-3296
 80002c0:	100b883a 	mov	r5,r2
 80002c4:	80003600 	call	8000360 <printf>
	  // increment it again
	  IOWR_32DIRECT(0x2010,4,0); // does not matter what you write. Note offset is 4
 80002c8:	0007883a 	mov	r3,zero
 80002cc:	00880504 	movi	r2,8212
 80002d0:	10c00035 	stwio	r3,0(r2)
	  printf("value is now %x\n", IORD_32DIRECT(bit_flipper_base,4));
 80002d4:	00880504 	movi	r2,8212
 80002d8:	10800037 	ldwio	r2,0(r2)
 80002dc:	01020074 	movhi	r4,2049
 80002e0:	213cc804 	addi	r4,r4,-3296
 80002e4:	100b883a 	mov	r5,r2
 80002e8:	80003600 	call	8000360 <printf>
	  // get the value in reverse bit order
	  printf("reverse bit order %x\n", IORD_32DIRECT(bit_flipper_base,0));
 80002ec:	00880404 	movi	r2,8208
 80002f0:	10800037 	ldwio	r2,0(r2)
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	213ccd04 	addi	r4,r4,-3276
 80002fc:	100b883a 	mov	r5,r2
 8000300:	80003600 	call	8000360 <printf>
	  // get the complement of the value
	  printf("complement sis %x\n", IORD_32DIRECT(bit_flipper_base,8));
 8000304:	00880604 	movi	r2,8216
 8000308:	10800037 	ldwio	r2,0(r2)
 800030c:	01020074 	movhi	r4,2049
 8000310:	213cd304 	addi	r4,r4,-3252
 8000314:	100b883a 	mov	r5,r2
 8000318:	80003600 	call	8000360 <printf>
	 					return(0);
 800031c:	0005883a 	mov	r2,zero
}
 8000320:	e037883a 	mov	sp,fp
 8000324:	dfc00117 	ldw	ra,4(sp)
 8000328:	df000017 	ldw	fp,0(sp)
 800032c:	dec00204 	addi	sp,sp,8
 8000330:	f800283a 	ret

08000334 <_printf_r>:
 8000334:	defffd04 	addi	sp,sp,-12
 8000338:	dfc00015 	stw	ra,0(sp)
 800033c:	d9800115 	stw	r6,4(sp)
 8000340:	d9c00215 	stw	r7,8(sp)
 8000344:	280d883a 	mov	r6,r5
 8000348:	21400217 	ldw	r5,8(r4)
 800034c:	d9c00104 	addi	r7,sp,4
 8000350:	800039c0 	call	800039c <___vfprintf_internal_r>
 8000354:	dfc00017 	ldw	ra,0(sp)
 8000358:	dec00304 	addi	sp,sp,12
 800035c:	f800283a 	ret

08000360 <printf>:
 8000360:	defffc04 	addi	sp,sp,-16
 8000364:	dfc00015 	stw	ra,0(sp)
 8000368:	d9400115 	stw	r5,4(sp)
 800036c:	d9800215 	stw	r6,8(sp)
 8000370:	d9c00315 	stw	r7,12(sp)
 8000374:	00820074 	movhi	r2,2049
 8000378:	10844304 	addi	r2,r2,4364
 800037c:	10800017 	ldw	r2,0(r2)
 8000380:	200b883a 	mov	r5,r4
 8000384:	d9800104 	addi	r6,sp,4
 8000388:	11000217 	ldw	r4,8(r2)
 800038c:	80024980 	call	8002498 <__vfprintf_internal>
 8000390:	dfc00017 	ldw	ra,0(sp)
 8000394:	dec00404 	addi	sp,sp,16
 8000398:	f800283a 	ret

0800039c <___vfprintf_internal_r>:
 800039c:	defeb604 	addi	sp,sp,-1320
 80003a0:	dfc14915 	stw	ra,1316(sp)
 80003a4:	ddc14715 	stw	r23,1308(sp)
 80003a8:	dd814615 	stw	r22,1304(sp)
 80003ac:	202f883a 	mov	r23,r4
 80003b0:	282d883a 	mov	r22,r5
 80003b4:	d9812a15 	stw	r6,1192(sp)
 80003b8:	d9c12d15 	stw	r7,1204(sp)
 80003bc:	df014815 	stw	fp,1312(sp)
 80003c0:	dd414515 	stw	r21,1300(sp)
 80003c4:	dd014415 	stw	r20,1296(sp)
 80003c8:	dcc14315 	stw	r19,1292(sp)
 80003cc:	dc814215 	stw	r18,1288(sp)
 80003d0:	dc414115 	stw	r17,1284(sp)
 80003d4:	dc014015 	stw	r16,1280(sp)
 80003d8:	8004b780 	call	8004b78 <_localeconv_r>
 80003dc:	10800017 	ldw	r2,0(r2)
 80003e0:	1009883a 	mov	r4,r2
 80003e4:	d8813515 	stw	r2,1236(sp)
 80003e8:	8006b400 	call	8006b40 <strlen>
 80003ec:	d8813815 	stw	r2,1248(sp)
 80003f0:	b8000226 	beq	r23,zero,80003fc <___vfprintf_internal_r+0x60>
 80003f4:	b8800e17 	ldw	r2,56(r23)
 80003f8:	10010526 	beq	r2,zero,8000810 <___vfprintf_internal_r+0x474>
 80003fc:	b0c0030b 	ldhu	r3,12(r22)
 8000400:	1908000c 	andi	r4,r3,8192
 8000404:	1805883a 	mov	r2,r3
 8000408:	2000071e 	bne	r4,zero,8000428 <___vfprintf_internal_r+0x8c>
 800040c:	b1001917 	ldw	r4,100(r22)
 8000410:	18880014 	ori	r2,r3,8192
 8000414:	00f7ffc4 	movi	r3,-8193
 8000418:	20c8703a 	and	r4,r4,r3
 800041c:	b080030d 	sth	r2,12(r22)
 8000420:	1007883a 	mov	r3,r2
 8000424:	b1001915 	stw	r4,100(r22)
 8000428:	1100020c 	andi	r4,r2,8
 800042c:	2000a826 	beq	r4,zero,80006d0 <___vfprintf_internal_r+0x334>
 8000430:	b1000417 	ldw	r4,16(r22)
 8000434:	2000a626 	beq	r4,zero,80006d0 <___vfprintf_internal_r+0x334>
 8000438:	1080068c 	andi	r2,r2,26
 800043c:	01000284 	movi	r4,10
 8000440:	1100ac26 	beq	r2,r4,80006f4 <___vfprintf_internal_r+0x358>
 8000444:	d8c10e04 	addi	r3,sp,1080
 8000448:	d9010dc4 	addi	r4,sp,1079
 800044c:	d9400404 	addi	r5,sp,16
 8000450:	05020074 	movhi	r20,2049
 8000454:	1905c83a 	sub	r2,r3,r4
 8000458:	a53ce884 	addi	r20,r20,-3166
 800045c:	d8c12815 	stw	r3,1184(sp)
 8000460:	d9012915 	stw	r4,1188(sp)
 8000464:	d9411e15 	stw	r5,1144(sp)
 8000468:	d8012015 	stw	zero,1152(sp)
 800046c:	d8011f15 	stw	zero,1148(sp)
 8000470:	d8013315 	stw	zero,1228(sp)
 8000474:	d8013715 	stw	zero,1244(sp)
 8000478:	d8013915 	stw	zero,1252(sp)
 800047c:	d8013b15 	stw	zero,1260(sp)
 8000480:	d8013a15 	stw	zero,1256(sp)
 8000484:	d8012f15 	stw	zero,1212(sp)
 8000488:	2811883a 	mov	r8,r5
 800048c:	d8813c15 	stw	r2,1264(sp)
 8000490:	d8c12a17 	ldw	r3,1192(sp)
 8000494:	18800007 	ldb	r2,0(r3)
 8000498:	10021326 	beq	r2,zero,8000ce8 <___vfprintf_internal_r+0x94c>
 800049c:	00c00944 	movi	r3,37
 80004a0:	dc012a17 	ldw	r16,1192(sp)
 80004a4:	10c0021e 	bne	r2,r3,80004b0 <___vfprintf_internal_r+0x114>
 80004a8:	00001606 	br	8000504 <___vfprintf_internal_r+0x168>
 80004ac:	10c08526 	beq	r2,r3,80006c4 <___vfprintf_internal_r+0x328>
 80004b0:	84000044 	addi	r16,r16,1
 80004b4:	80800007 	ldb	r2,0(r16)
 80004b8:	103ffc1e 	bne	r2,zero,80004ac <__alt_data_end+0xfc0004ac>
 80004bc:	d9012a17 	ldw	r4,1192(sp)
 80004c0:	8123c83a 	sub	r17,r16,r4
 80004c4:	88000f26 	beq	r17,zero,8000504 <___vfprintf_internal_r+0x168>
 80004c8:	d8812a17 	ldw	r2,1192(sp)
 80004cc:	d8c12017 	ldw	r3,1152(sp)
 80004d0:	44400115 	stw	r17,4(r8)
 80004d4:	40800015 	stw	r2,0(r8)
 80004d8:	d8811f17 	ldw	r2,1148(sp)
 80004dc:	1c47883a 	add	r3,r3,r17
 80004e0:	d8c12015 	stw	r3,1152(sp)
 80004e4:	10800044 	addi	r2,r2,1
 80004e8:	d8811f15 	stw	r2,1148(sp)
 80004ec:	00c001c4 	movi	r3,7
 80004f0:	1880b516 	blt	r3,r2,80007c8 <___vfprintf_internal_r+0x42c>
 80004f4:	42000204 	addi	r8,r8,8
 80004f8:	d8c12f17 	ldw	r3,1212(sp)
 80004fc:	1c47883a 	add	r3,r3,r17
 8000500:	d8c12f15 	stw	r3,1212(sp)
 8000504:	80800007 	ldb	r2,0(r16)
 8000508:	1000b626 	beq	r2,zero,80007e4 <___vfprintf_internal_r+0x448>
 800050c:	80800044 	addi	r2,r16,1
 8000510:	84000047 	ldb	r16,1(r16)
 8000514:	0027883a 	mov	r19,zero
 8000518:	0039883a 	mov	fp,zero
 800051c:	dcc12b05 	stb	r19,1196(sp)
 8000520:	d8012785 	stb	zero,1182(sp)
 8000524:	027fffc4 	movi	r9,-1
 8000528:	d8012e15 	stw	zero,1208(sp)
 800052c:	04401604 	movi	r17,88
 8000530:	04800244 	movi	r18,9
 8000534:	da012a15 	stw	r8,1192(sp)
 8000538:	e027883a 	mov	r19,fp
 800053c:	17000044 	addi	fp,r2,1
 8000540:	80bff804 	addi	r2,r16,-32
 8000544:	88831236 	bltu	r17,r2,8001190 <___vfprintf_internal_r+0xdf4>
 8000548:	100490ba 	slli	r2,r2,2
 800054c:	01020034 	movhi	r4,2048
 8000550:	21015804 	addi	r4,r4,1376
 8000554:	1105883a 	add	r2,r2,r4
 8000558:	10800017 	ldw	r2,0(r2)
 800055c:	1000683a 	jmp	r2
 8000560:	080010ac 	andhi	zero,at,66
 8000564:	08001190 	cmplti	zero,at,70
 8000568:	08001190 	cmplti	zero,at,70
 800056c:	080010c8 	cmpgei	zero,at,67
 8000570:	08001190 	cmplti	zero,at,70
 8000574:	08001190 	cmplti	zero,at,70
 8000578:	08001190 	cmplti	zero,at,70
 800057c:	08001190 	cmplti	zero,at,70
 8000580:	08001190 	cmplti	zero,at,70
 8000584:	08001190 	cmplti	zero,at,70
 8000588:	080010d8 	cmpnei	zero,at,67
 800058c:	08001100 	call	800110 <__alt_mem_onchip_memory2_0+0x800110>
 8000590:	08001190 	cmplti	zero,at,70
 8000594:	0800081c 	xori	zero,at,32
 8000598:	0800082c 	andhi	zero,at,32
 800059c:	08001190 	cmplti	zero,at,70
 80005a0:	0800087c 	xorhi	zero,at,33
 80005a4:	0800088c 	andi	zero,at,34
 80005a8:	0800088c 	andi	zero,at,34
 80005ac:	0800088c 	andi	zero,at,34
 80005b0:	0800088c 	andi	zero,at,34
 80005b4:	0800088c 	andi	zero,at,34
 80005b8:	0800088c 	andi	zero,at,34
 80005bc:	0800088c 	andi	zero,at,34
 80005c0:	0800088c 	andi	zero,at,34
 80005c4:	0800088c 	andi	zero,at,34
 80005c8:	08001190 	cmplti	zero,at,70
 80005cc:	08001190 	cmplti	zero,at,70
 80005d0:	08001190 	cmplti	zero,at,70
 80005d4:	08001190 	cmplti	zero,at,70
 80005d8:	08001190 	cmplti	zero,at,70
 80005dc:	08001190 	cmplti	zero,at,70
 80005e0:	08001190 	cmplti	zero,at,70
 80005e4:	08001190 	cmplti	zero,at,70
 80005e8:	08001190 	cmplti	zero,at,70
 80005ec:	08001190 	cmplti	zero,at,70
 80005f0:	080008d0 	cmplti	zero,at,35
 80005f4:	08000cf0 	cmpltui	zero,at,51
 80005f8:	08001190 	cmplti	zero,at,70
 80005fc:	08000cf0 	cmpltui	zero,at,51
 8000600:	08001190 	cmplti	zero,at,70
 8000604:	08001190 	cmplti	zero,at,70
 8000608:	08001190 	cmplti	zero,at,70
 800060c:	08001190 	cmplti	zero,at,70
 8000610:	08000d98 	cmpnei	zero,at,54
 8000614:	08001190 	cmplti	zero,at,70
 8000618:	08001190 	cmplti	zero,at,70
 800061c:	08000da8 	cmpgeui	zero,at,54
 8000620:	08001190 	cmplti	zero,at,70
 8000624:	08001190 	cmplti	zero,at,70
 8000628:	08001190 	cmplti	zero,at,70
 800062c:	08001190 	cmplti	zero,at,70
 8000630:	08001190 	cmplti	zero,at,70
 8000634:	08000dec 	andhi	zero,at,55
 8000638:	08001190 	cmplti	zero,at,70
 800063c:	08001190 	cmplti	zero,at,70
 8000640:	08000e24 	muli	zero,at,56
 8000644:	08001190 	cmplti	zero,at,70
 8000648:	08001190 	cmplti	zero,at,70
 800064c:	08001190 	cmplti	zero,at,70
 8000650:	08001190 	cmplti	zero,at,70
 8000654:	08001190 	cmplti	zero,at,70
 8000658:	08001190 	cmplti	zero,at,70
 800065c:	08001190 	cmplti	zero,at,70
 8000660:	08001190 	cmplti	zero,at,70
 8000664:	08001190 	cmplti	zero,at,70
 8000668:	08001190 	cmplti	zero,at,70
 800066c:	08001060 	cmpeqi	zero,at,65
 8000670:	0800100c 	andi	zero,at,64
 8000674:	08000cf0 	cmpltui	zero,at,51
 8000678:	08000cf0 	cmpltui	zero,at,51
 800067c:	08000cf0 	cmpltui	zero,at,51
 8000680:	08001050 	cmplti	zero,at,65
 8000684:	0800100c 	andi	zero,at,64
 8000688:	08001190 	cmplti	zero,at,70
 800068c:	08001190 	cmplti	zero,at,70
 8000690:	08000f28 	cmpgeui	zero,at,60
 8000694:	08001190 	cmplti	zero,at,70
 8000698:	08000f40 	call	8000f4 <__alt_mem_onchip_memory2_0+0x8000f4>
 800069c:	08000f80 	call	8000f8 <__alt_mem_onchip_memory2_0+0x8000f8>
 80006a0:	08000fc0 	call	8000fc <__alt_mem_onchip_memory2_0+0x8000fc>
 80006a4:	08000e8c 	andi	zero,at,58
 80006a8:	08001190 	cmplti	zero,at,70
 80006ac:	08001114 	ori	zero,at,68
 80006b0:	08001190 	cmplti	zero,at,70
 80006b4:	08000e9c 	xori	zero,at,58
 80006b8:	08001190 	cmplti	zero,at,70
 80006bc:	08001190 	cmplti	zero,at,70
 80006c0:	08000edc 	xori	zero,at,59
 80006c4:	d9412a17 	ldw	r5,1192(sp)
 80006c8:	8163c83a 	sub	r17,r16,r5
 80006cc:	003f7d06 	br	80004c4 <__alt_data_end+0xfc0004c4>
 80006d0:	b809883a 	mov	r4,r23
 80006d4:	b00b883a 	mov	r5,r22
 80006d8:	80024bc0 	call	80024bc <__swsetup_r>
 80006dc:	10002d1e 	bne	r2,zero,8000794 <___vfprintf_internal_r+0x3f8>
 80006e0:	b0c0030b 	ldhu	r3,12(r22)
 80006e4:	01000284 	movi	r4,10
 80006e8:	1805883a 	mov	r2,r3
 80006ec:	1080068c 	andi	r2,r2,26
 80006f0:	113f541e 	bne	r2,r4,8000444 <__alt_data_end+0xfc000444>
 80006f4:	b080038b 	ldhu	r2,14(r22)
 80006f8:	113fffcc 	andi	r4,r2,65535
 80006fc:	2120001c 	xori	r4,r4,32768
 8000700:	21200004 	addi	r4,r4,-32768
 8000704:	203f4f16 	blt	r4,zero,8000444 <__alt_data_end+0xfc000444>
 8000708:	b2c01917 	ldw	r11,100(r22)
 800070c:	b2800717 	ldw	r10,28(r22)
 8000710:	b2400917 	ldw	r9,36(r22)
 8000714:	d9812a17 	ldw	r6,1192(sp)
 8000718:	d9c12d17 	ldw	r7,1204(sp)
 800071c:	02010004 	movi	r8,1024
 8000720:	18ffff4c 	andi	r3,r3,65533
 8000724:	d881078d 	sth	r2,1054(sp)
 8000728:	b809883a 	mov	r4,r23
 800072c:	d8800404 	addi	r2,sp,16
 8000730:	d9410404 	addi	r5,sp,1040
 8000734:	d8c1070d 	sth	r3,1052(sp)
 8000738:	dac11d15 	stw	r11,1140(sp)
 800073c:	da810b15 	stw	r10,1068(sp)
 8000740:	da410d15 	stw	r9,1076(sp)
 8000744:	d8810415 	stw	r2,1040(sp)
 8000748:	d8810815 	stw	r2,1056(sp)
 800074c:	da010615 	stw	r8,1048(sp)
 8000750:	da010915 	stw	r8,1060(sp)
 8000754:	d8010a15 	stw	zero,1064(sp)
 8000758:	800039c0 	call	800039c <___vfprintf_internal_r>
 800075c:	1021883a 	mov	r16,r2
 8000760:	10000416 	blt	r2,zero,8000774 <___vfprintf_internal_r+0x3d8>
 8000764:	b809883a 	mov	r4,r23
 8000768:	d9410404 	addi	r5,sp,1040
 800076c:	8003f3c0 	call	8003f3c <_fflush_r>
 8000770:	1007301e 	bne	r2,zero,8002434 <___vfprintf_internal_r+0x2098>
 8000774:	d881070b 	ldhu	r2,1052(sp)
 8000778:	1080100c 	andi	r2,r2,64
 800077c:	10000326 	beq	r2,zero,800078c <___vfprintf_internal_r+0x3f0>
 8000780:	b080030b 	ldhu	r2,12(r22)
 8000784:	10801014 	ori	r2,r2,64
 8000788:	b080030d 	sth	r2,12(r22)
 800078c:	8005883a 	mov	r2,r16
 8000790:	00000106 	br	8000798 <___vfprintf_internal_r+0x3fc>
 8000794:	00bfffc4 	movi	r2,-1
 8000798:	dfc14917 	ldw	ra,1316(sp)
 800079c:	df014817 	ldw	fp,1312(sp)
 80007a0:	ddc14717 	ldw	r23,1308(sp)
 80007a4:	dd814617 	ldw	r22,1304(sp)
 80007a8:	dd414517 	ldw	r21,1300(sp)
 80007ac:	dd014417 	ldw	r20,1296(sp)
 80007b0:	dcc14317 	ldw	r19,1292(sp)
 80007b4:	dc814217 	ldw	r18,1288(sp)
 80007b8:	dc414117 	ldw	r17,1284(sp)
 80007bc:	dc014017 	ldw	r16,1280(sp)
 80007c0:	dec14a04 	addi	sp,sp,1320
 80007c4:	f800283a 	ret
 80007c8:	b809883a 	mov	r4,r23
 80007cc:	b00b883a 	mov	r5,r22
 80007d0:	d9811e04 	addi	r6,sp,1144
 80007d4:	8006cd40 	call	8006cd4 <__sprint_r>
 80007d8:	1000081e 	bne	r2,zero,80007fc <___vfprintf_internal_r+0x460>
 80007dc:	da000404 	addi	r8,sp,16
 80007e0:	003f4506 	br	80004f8 <__alt_data_end+0xfc0004f8>
 80007e4:	d8812017 	ldw	r2,1152(sp)
 80007e8:	10000426 	beq	r2,zero,80007fc <___vfprintf_internal_r+0x460>
 80007ec:	b809883a 	mov	r4,r23
 80007f0:	b00b883a 	mov	r5,r22
 80007f4:	d9811e04 	addi	r6,sp,1144
 80007f8:	8006cd40 	call	8006cd4 <__sprint_r>
 80007fc:	b080030b 	ldhu	r2,12(r22)
 8000800:	1080100c 	andi	r2,r2,64
 8000804:	103fe31e 	bne	r2,zero,8000794 <__alt_data_end+0xfc000794>
 8000808:	d8812f17 	ldw	r2,1212(sp)
 800080c:	003fe206 	br	8000798 <__alt_data_end+0xfc000798>
 8000810:	b809883a 	mov	r4,r23
 8000814:	80044f80 	call	80044f8 <__sinit>
 8000818:	003ef806 	br	80003fc <__alt_data_end+0xfc0003fc>
 800081c:	e005883a 	mov	r2,fp
 8000820:	9cc00114 	ori	r19,r19,4
 8000824:	e4000007 	ldb	r16,0(fp)
 8000828:	003f4406 	br	800053c <__alt_data_end+0xfc00053c>
 800082c:	e4000007 	ldb	r16,0(fp)
 8000830:	01000a84 	movi	r4,42
 8000834:	e0800044 	addi	r2,fp,1
 8000838:	8106f626 	beq	r16,r4,8002414 <___vfprintf_internal_r+0x2078>
 800083c:	857ff404 	addi	r21,r16,-48
 8000840:	1039883a 	mov	fp,r2
 8000844:	0013883a 	mov	r9,zero
 8000848:	957f3d36 	bltu	r18,r21,8000540 <__alt_data_end+0xfc000540>
 800084c:	0009883a 	mov	r4,zero
 8000850:	01400284 	movi	r5,10
 8000854:	800a3a80 	call	800a3a8 <__mulsi3>
 8000858:	e4000007 	ldb	r16,0(fp)
 800085c:	a889883a 	add	r4,r21,r2
 8000860:	e7000044 	addi	fp,fp,1
 8000864:	857ff404 	addi	r21,r16,-48
 8000868:	957ff92e 	bgeu	r18,r21,8000850 <__alt_data_end+0xfc000850>
 800086c:	2013883a 	mov	r9,r4
 8000870:	203f330e 	bge	r4,zero,8000540 <__alt_data_end+0xfc000540>
 8000874:	027fffc4 	movi	r9,-1
 8000878:	003f3106 	br	8000540 <__alt_data_end+0xfc000540>
 800087c:	9cc02014 	ori	r19,r19,128
 8000880:	e005883a 	mov	r2,fp
 8000884:	e4000007 	ldb	r16,0(fp)
 8000888:	003f2c06 	br	800053c <__alt_data_end+0xfc00053c>
 800088c:	857ff404 	addi	r21,r16,-48
 8000890:	d8012e15 	stw	zero,1208(sp)
 8000894:	e021883a 	mov	r16,fp
 8000898:	0009883a 	mov	r4,zero
 800089c:	da412c15 	stw	r9,1200(sp)
 80008a0:	01400284 	movi	r5,10
 80008a4:	800a3a80 	call	800a3a8 <__mulsi3>
 80008a8:	81400007 	ldb	r5,0(r16)
 80008ac:	1549883a 	add	r4,r2,r21
 80008b0:	e7000044 	addi	fp,fp,1
 80008b4:	2d7ff404 	addi	r21,r5,-48
 80008b8:	e021883a 	mov	r16,fp
 80008bc:	957ff82e 	bgeu	r18,r21,80008a0 <__alt_data_end+0xfc0008a0>
 80008c0:	2821883a 	mov	r16,r5
 80008c4:	d9012e15 	stw	r4,1208(sp)
 80008c8:	da412c17 	ldw	r9,1200(sp)
 80008cc:	003f1c06 	br	8000540 <__alt_data_end+0xfc000540>
 80008d0:	da012a17 	ldw	r8,1192(sp)
 80008d4:	df012a15 	stw	fp,1192(sp)
 80008d8:	9839883a 	mov	fp,r19
 80008dc:	dcc12b03 	ldbu	r19,1196(sp)
 80008e0:	e7000414 	ori	fp,fp,16
 80008e4:	e080080c 	andi	r2,fp,32
 80008e8:	dcc12785 	stb	r19,1182(sp)
 80008ec:	d8c12d17 	ldw	r3,1204(sp)
 80008f0:	1001ce26 	beq	r2,zero,800102c <___vfprintf_internal_r+0xc90>
 80008f4:	d9012d17 	ldw	r4,1204(sp)
 80008f8:	18800117 	ldw	r2,4(r3)
 80008fc:	1c800017 	ldw	r18,0(r3)
 8000900:	21000204 	addi	r4,r4,8
 8000904:	d9012d15 	stw	r4,1204(sp)
 8000908:	102b883a 	mov	r21,r2
 800090c:	10044916 	blt	r2,zero,8001a34 <___vfprintf_internal_r+0x1698>
 8000910:	dcc12783 	ldbu	r19,1182(sp)
 8000914:	da413215 	stw	r9,1224(sp)
 8000918:	00800044 	movi	r2,1
 800091c:	9546b03a 	or	r3,r18,r21
 8000920:	48000216 	blt	r9,zero,800092c <___vfprintf_internal_r+0x590>
 8000924:	013fdfc4 	movi	r4,-129
 8000928:	e138703a 	and	fp,fp,r4
 800092c:	1802251e 	bne	r3,zero,80011c4 <___vfprintf_internal_r+0xe28>
 8000930:	48031726 	beq	r9,zero,8001590 <___vfprintf_internal_r+0x11f4>
 8000934:	10803fcc 	andi	r2,r2,255
 8000938:	00c00044 	movi	r3,1
 800093c:	10c24526 	beq	r2,r3,8001254 <___vfprintf_internal_r+0xeb8>
 8000940:	00c00084 	movi	r3,2
 8000944:	10c33426 	beq	r2,r3,8001618 <___vfprintf_internal_r+0x127c>
 8000948:	d8c10e04 	addi	r3,sp,1080
 800094c:	9008d0fa 	srli	r4,r18,3
 8000950:	a80a977a 	slli	r5,r21,29
 8000954:	a82ad0fa 	srli	r21,r21,3
 8000958:	948001cc 	andi	r18,r18,7
 800095c:	90800c04 	addi	r2,r18,48
 8000960:	18ffffc4 	addi	r3,r3,-1
 8000964:	2924b03a 	or	r18,r5,r4
 8000968:	18800005 	stb	r2,0(r3)
 800096c:	9548b03a 	or	r4,r18,r21
 8000970:	203ff61e 	bne	r4,zero,800094c <__alt_data_end+0xfc00094c>
 8000974:	e100004c 	andi	r4,fp,1
 8000978:	d8c13115 	stw	r3,1220(sp)
 800097c:	20039a1e 	bne	r4,zero,80017e8 <___vfprintf_internal_r+0x144c>
 8000980:	d8812817 	ldw	r2,1184(sp)
 8000984:	10e3c83a 	sub	r17,r2,r3
 8000988:	8805883a 	mov	r2,r17
 800098c:	8a40010e 	bge	r17,r9,8000994 <___vfprintf_internal_r+0x5f8>
 8000990:	4805883a 	mov	r2,r9
 8000994:	d8812b15 	stw	r2,1196(sp)
 8000998:	d8013415 	stw	zero,1232(sp)
 800099c:	98803fcc 	andi	r2,r19,255
 80009a0:	1080201c 	xori	r2,r2,128
 80009a4:	10bfe004 	addi	r2,r2,-128
 80009a8:	10000326 	beq	r2,zero,80009b8 <___vfprintf_internal_r+0x61c>
 80009ac:	d8c12b17 	ldw	r3,1196(sp)
 80009b0:	18c00044 	addi	r3,r3,1
 80009b4:	d8c12b15 	stw	r3,1196(sp)
 80009b8:	e0c0008c 	andi	r3,fp,2
 80009bc:	d8c12c15 	stw	r3,1200(sp)
 80009c0:	18000326 	beq	r3,zero,80009d0 <___vfprintf_internal_r+0x634>
 80009c4:	d8c12b17 	ldw	r3,1196(sp)
 80009c8:	18c00084 	addi	r3,r3,2
 80009cc:	d8c12b15 	stw	r3,1196(sp)
 80009d0:	e0c0210c 	andi	r3,fp,132
 80009d4:	d8c13015 	stw	r3,1216(sp)
 80009d8:	1801f81e 	bne	r3,zero,80011bc <___vfprintf_internal_r+0xe20>
 80009dc:	d9012e17 	ldw	r4,1208(sp)
 80009e0:	d8c12b17 	ldw	r3,1196(sp)
 80009e4:	20ebc83a 	sub	r21,r4,r3
 80009e8:	0541f40e 	bge	zero,r21,80011bc <___vfprintf_internal_r+0xe20>
 80009ec:	02400404 	movi	r9,16
 80009f0:	d8c12017 	ldw	r3,1152(sp)
 80009f4:	d8811f17 	ldw	r2,1148(sp)
 80009f8:	4d45750e 	bge	r9,r21,8001fd0 <___vfprintf_internal_r+0x1c34>
 80009fc:	01420074 	movhi	r5,2049
 8000a00:	297cec84 	addi	r5,r5,-3150
 8000a04:	d9413615 	stw	r5,1240(sp)
 8000a08:	4827883a 	mov	r19,r9
 8000a0c:	048001c4 	movi	r18,7
 8000a10:	00000306 	br	8000a20 <___vfprintf_internal_r+0x684>
 8000a14:	ad7ffc04 	addi	r21,r21,-16
 8000a18:	42000204 	addi	r8,r8,8
 8000a1c:	9d40130e 	bge	r19,r21,8000a6c <___vfprintf_internal_r+0x6d0>
 8000a20:	01020074 	movhi	r4,2049
 8000a24:	18c00404 	addi	r3,r3,16
 8000a28:	10800044 	addi	r2,r2,1
 8000a2c:	213cec84 	addi	r4,r4,-3150
 8000a30:	41000015 	stw	r4,0(r8)
 8000a34:	44c00115 	stw	r19,4(r8)
 8000a38:	d8c12015 	stw	r3,1152(sp)
 8000a3c:	d8811f15 	stw	r2,1148(sp)
 8000a40:	90bff40e 	bge	r18,r2,8000a14 <__alt_data_end+0xfc000a14>
 8000a44:	b809883a 	mov	r4,r23
 8000a48:	b00b883a 	mov	r5,r22
 8000a4c:	d9811e04 	addi	r6,sp,1144
 8000a50:	8006cd40 	call	8006cd4 <__sprint_r>
 8000a54:	103f691e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8000a58:	ad7ffc04 	addi	r21,r21,-16
 8000a5c:	d8c12017 	ldw	r3,1152(sp)
 8000a60:	d8811f17 	ldw	r2,1148(sp)
 8000a64:	da000404 	addi	r8,sp,16
 8000a68:	9d7fed16 	blt	r19,r21,8000a20 <__alt_data_end+0xfc000a20>
 8000a6c:	d9413617 	ldw	r5,1240(sp)
 8000a70:	a8c7883a 	add	r3,r21,r3
 8000a74:	10800044 	addi	r2,r2,1
 8000a78:	41400015 	stw	r5,0(r8)
 8000a7c:	45400115 	stw	r21,4(r8)
 8000a80:	d8c12015 	stw	r3,1152(sp)
 8000a84:	d8811f15 	stw	r2,1148(sp)
 8000a88:	010001c4 	movi	r4,7
 8000a8c:	20832b16 	blt	r4,r2,800173c <___vfprintf_internal_r+0x13a0>
 8000a90:	d8812787 	ldb	r2,1182(sp)
 8000a94:	42000204 	addi	r8,r8,8
 8000a98:	10000c26 	beq	r2,zero,8000acc <___vfprintf_internal_r+0x730>
 8000a9c:	d8811f17 	ldw	r2,1148(sp)
 8000aa0:	d9012784 	addi	r4,sp,1182
 8000aa4:	18c00044 	addi	r3,r3,1
 8000aa8:	10800044 	addi	r2,r2,1
 8000aac:	41000015 	stw	r4,0(r8)
 8000ab0:	01000044 	movi	r4,1
 8000ab4:	41000115 	stw	r4,4(r8)
 8000ab8:	d8c12015 	stw	r3,1152(sp)
 8000abc:	d8811f15 	stw	r2,1148(sp)
 8000ac0:	010001c4 	movi	r4,7
 8000ac4:	2082c416 	blt	r4,r2,80015d8 <___vfprintf_internal_r+0x123c>
 8000ac8:	42000204 	addi	r8,r8,8
 8000acc:	d8812c17 	ldw	r2,1200(sp)
 8000ad0:	10000c26 	beq	r2,zero,8000b04 <___vfprintf_internal_r+0x768>
 8000ad4:	d8811f17 	ldw	r2,1148(sp)
 8000ad8:	d9012704 	addi	r4,sp,1180
 8000adc:	18c00084 	addi	r3,r3,2
 8000ae0:	10800044 	addi	r2,r2,1
 8000ae4:	41000015 	stw	r4,0(r8)
 8000ae8:	01000084 	movi	r4,2
 8000aec:	41000115 	stw	r4,4(r8)
 8000af0:	d8c12015 	stw	r3,1152(sp)
 8000af4:	d8811f15 	stw	r2,1148(sp)
 8000af8:	010001c4 	movi	r4,7
 8000afc:	2082be16 	blt	r4,r2,80015f8 <___vfprintf_internal_r+0x125c>
 8000b00:	42000204 	addi	r8,r8,8
 8000b04:	d9013017 	ldw	r4,1216(sp)
 8000b08:	00802004 	movi	r2,128
 8000b0c:	20822026 	beq	r4,r2,8001390 <___vfprintf_internal_r+0xff4>
 8000b10:	d9413217 	ldw	r5,1224(sp)
 8000b14:	2c67c83a 	sub	r19,r5,r17
 8000b18:	04c0260e 	bge	zero,r19,8000bb4 <___vfprintf_internal_r+0x818>
 8000b1c:	05400404 	movi	r21,16
 8000b20:	d8811f17 	ldw	r2,1148(sp)
 8000b24:	acc4720e 	bge	r21,r19,8001cf0 <___vfprintf_internal_r+0x1954>
 8000b28:	01420074 	movhi	r5,2049
 8000b2c:	297ce884 	addi	r5,r5,-3166
 8000b30:	d9412c15 	stw	r5,1200(sp)
 8000b34:	048001c4 	movi	r18,7
 8000b38:	00000306 	br	8000b48 <___vfprintf_internal_r+0x7ac>
 8000b3c:	9cfffc04 	addi	r19,r19,-16
 8000b40:	42000204 	addi	r8,r8,8
 8000b44:	acc0110e 	bge	r21,r19,8000b8c <___vfprintf_internal_r+0x7f0>
 8000b48:	18c00404 	addi	r3,r3,16
 8000b4c:	10800044 	addi	r2,r2,1
 8000b50:	45000015 	stw	r20,0(r8)
 8000b54:	45400115 	stw	r21,4(r8)
 8000b58:	d8c12015 	stw	r3,1152(sp)
 8000b5c:	d8811f15 	stw	r2,1148(sp)
 8000b60:	90bff60e 	bge	r18,r2,8000b3c <__alt_data_end+0xfc000b3c>
 8000b64:	b809883a 	mov	r4,r23
 8000b68:	b00b883a 	mov	r5,r22
 8000b6c:	d9811e04 	addi	r6,sp,1144
 8000b70:	8006cd40 	call	8006cd4 <__sprint_r>
 8000b74:	103f211e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8000b78:	9cfffc04 	addi	r19,r19,-16
 8000b7c:	d8c12017 	ldw	r3,1152(sp)
 8000b80:	d8811f17 	ldw	r2,1148(sp)
 8000b84:	da000404 	addi	r8,sp,16
 8000b88:	acffef16 	blt	r21,r19,8000b48 <__alt_data_end+0xfc000b48>
 8000b8c:	d9012c17 	ldw	r4,1200(sp)
 8000b90:	1cc7883a 	add	r3,r3,r19
 8000b94:	10800044 	addi	r2,r2,1
 8000b98:	41000015 	stw	r4,0(r8)
 8000b9c:	44c00115 	stw	r19,4(r8)
 8000ba0:	d8c12015 	stw	r3,1152(sp)
 8000ba4:	d8811f15 	stw	r2,1148(sp)
 8000ba8:	010001c4 	movi	r4,7
 8000bac:	20828216 	blt	r4,r2,80015b8 <___vfprintf_internal_r+0x121c>
 8000bb0:	42000204 	addi	r8,r8,8
 8000bb4:	e080400c 	andi	r2,fp,256
 8000bb8:	1001ac1e 	bne	r2,zero,800126c <___vfprintf_internal_r+0xed0>
 8000bbc:	d8811f17 	ldw	r2,1148(sp)
 8000bc0:	d9413117 	ldw	r5,1220(sp)
 8000bc4:	1c47883a 	add	r3,r3,r17
 8000bc8:	10800044 	addi	r2,r2,1
 8000bcc:	41400015 	stw	r5,0(r8)
 8000bd0:	44400115 	stw	r17,4(r8)
 8000bd4:	d8c12015 	stw	r3,1152(sp)
 8000bd8:	d8811f15 	stw	r2,1148(sp)
 8000bdc:	010001c4 	movi	r4,7
 8000be0:	20825d16 	blt	r4,r2,8001558 <___vfprintf_internal_r+0x11bc>
 8000be4:	42000204 	addi	r8,r8,8
 8000be8:	e080010c 	andi	r2,fp,4
 8000bec:	10003126 	beq	r2,zero,8000cb4 <___vfprintf_internal_r+0x918>
 8000bf0:	d8812e17 	ldw	r2,1208(sp)
 8000bf4:	d9012b17 	ldw	r4,1196(sp)
 8000bf8:	1121c83a 	sub	r16,r2,r4
 8000bfc:	04002d0e 	bge	zero,r16,8000cb4 <___vfprintf_internal_r+0x918>
 8000c00:	04400404 	movi	r17,16
 8000c04:	d8811f17 	ldw	r2,1148(sp)
 8000c08:	8c05340e 	bge	r17,r16,80020dc <___vfprintf_internal_r+0x1d40>
 8000c0c:	01020074 	movhi	r4,2049
 8000c10:	213cec84 	addi	r4,r4,-3150
 8000c14:	d9013615 	stw	r4,1240(sp)
 8000c18:	048001c4 	movi	r18,7
 8000c1c:	00000306 	br	8000c2c <___vfprintf_internal_r+0x890>
 8000c20:	843ffc04 	addi	r16,r16,-16
 8000c24:	42000204 	addi	r8,r8,8
 8000c28:	8c00130e 	bge	r17,r16,8000c78 <___vfprintf_internal_r+0x8dc>
 8000c2c:	01420074 	movhi	r5,2049
 8000c30:	18c00404 	addi	r3,r3,16
 8000c34:	10800044 	addi	r2,r2,1
 8000c38:	297cec84 	addi	r5,r5,-3150
 8000c3c:	41400015 	stw	r5,0(r8)
 8000c40:	44400115 	stw	r17,4(r8)
 8000c44:	d8c12015 	stw	r3,1152(sp)
 8000c48:	d8811f15 	stw	r2,1148(sp)
 8000c4c:	90bff40e 	bge	r18,r2,8000c20 <__alt_data_end+0xfc000c20>
 8000c50:	b809883a 	mov	r4,r23
 8000c54:	b00b883a 	mov	r5,r22
 8000c58:	d9811e04 	addi	r6,sp,1144
 8000c5c:	8006cd40 	call	8006cd4 <__sprint_r>
 8000c60:	103ee61e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8000c64:	843ffc04 	addi	r16,r16,-16
 8000c68:	d8c12017 	ldw	r3,1152(sp)
 8000c6c:	d8811f17 	ldw	r2,1148(sp)
 8000c70:	da000404 	addi	r8,sp,16
 8000c74:	8c3fed16 	blt	r17,r16,8000c2c <__alt_data_end+0xfc000c2c>
 8000c78:	d9013617 	ldw	r4,1240(sp)
 8000c7c:	1c07883a 	add	r3,r3,r16
 8000c80:	10800044 	addi	r2,r2,1
 8000c84:	41000015 	stw	r4,0(r8)
 8000c88:	44000115 	stw	r16,4(r8)
 8000c8c:	d8c12015 	stw	r3,1152(sp)
 8000c90:	d8811f15 	stw	r2,1148(sp)
 8000c94:	010001c4 	movi	r4,7
 8000c98:	2080060e 	bge	r4,r2,8000cb4 <___vfprintf_internal_r+0x918>
 8000c9c:	b809883a 	mov	r4,r23
 8000ca0:	b00b883a 	mov	r5,r22
 8000ca4:	d9811e04 	addi	r6,sp,1144
 8000ca8:	8006cd40 	call	8006cd4 <__sprint_r>
 8000cac:	103ed31e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8000cb0:	d8c12017 	ldw	r3,1152(sp)
 8000cb4:	df012b17 	ldw	fp,1196(sp)
 8000cb8:	d9412e17 	ldw	r5,1208(sp)
 8000cbc:	e140010e 	bge	fp,r5,8000cc4 <___vfprintf_internal_r+0x928>
 8000cc0:	2839883a 	mov	fp,r5
 8000cc4:	d8812f17 	ldw	r2,1212(sp)
 8000cc8:	1705883a 	add	r2,r2,fp
 8000ccc:	d8812f15 	stw	r2,1212(sp)
 8000cd0:	1802291e 	bne	r3,zero,8001578 <___vfprintf_internal_r+0x11dc>
 8000cd4:	d8c12a17 	ldw	r3,1192(sp)
 8000cd8:	d8011f15 	stw	zero,1148(sp)
 8000cdc:	da000404 	addi	r8,sp,16
 8000ce0:	18800007 	ldb	r2,0(r3)
 8000ce4:	103ded1e 	bne	r2,zero,800049c <__alt_data_end+0xfc00049c>
 8000ce8:	dc012a17 	ldw	r16,1192(sp)
 8000cec:	003e0506 	br	8000504 <__alt_data_end+0xfc000504>
 8000cf0:	d9012d17 	ldw	r4,1204(sp)
 8000cf4:	d9412d17 	ldw	r5,1204(sp)
 8000cf8:	da012a17 	ldw	r8,1192(sp)
 8000cfc:	21000017 	ldw	r4,0(r4)
 8000d00:	29400117 	ldw	r5,4(r5)
 8000d04:	df012a15 	stw	fp,1192(sp)
 8000d08:	9839883a 	mov	fp,r19
 8000d0c:	dcc12b03 	ldbu	r19,1196(sp)
 8000d10:	d9013715 	stw	r4,1244(sp)
 8000d14:	d9413915 	stw	r5,1252(sp)
 8000d18:	da013f15 	stw	r8,1276(sp)
 8000d1c:	da413e15 	stw	r9,1272(sp)
 8000d20:	dcc12785 	stb	r19,1182(sp)
 8000d24:	80068980 	call	8006898 <__fpclassifyd>
 8000d28:	d8c12d17 	ldw	r3,1204(sp)
 8000d2c:	04400044 	movi	r17,1
 8000d30:	da013f17 	ldw	r8,1276(sp)
 8000d34:	1c800204 	addi	r18,r3,8
 8000d38:	da413e17 	ldw	r9,1272(sp)
 8000d3c:	d9013717 	ldw	r4,1244(sp)
 8000d40:	d9413917 	ldw	r5,1252(sp)
 8000d44:	1443451e 	bne	r2,r17,8001a5c <___vfprintf_internal_r+0x16c0>
 8000d48:	000d883a 	mov	r6,zero
 8000d4c:	000f883a 	mov	r7,zero
 8000d50:	800b7500 	call	800b750 <__ledf2>
 8000d54:	da013f17 	ldw	r8,1276(sp)
 8000d58:	1004fe16 	blt	r2,zero,8002154 <___vfprintf_internal_r+0x1db8>
 8000d5c:	dcc12783 	ldbu	r19,1182(sp)
 8000d60:	008011c4 	movi	r2,71
 8000d64:	14045d0e 	bge	r2,r16,8001edc <___vfprintf_internal_r+0x1b40>
 8000d68:	01420074 	movhi	r5,2049
 8000d6c:	297cd904 	addi	r5,r5,-3228
 8000d70:	d9413115 	stw	r5,1220(sp)
 8000d74:	00c000c4 	movi	r3,3
 8000d78:	00bfdfc4 	movi	r2,-129
 8000d7c:	d8c12b15 	stw	r3,1196(sp)
 8000d80:	e0b8703a 	and	fp,fp,r2
 8000d84:	dc812d15 	stw	r18,1204(sp)
 8000d88:	1823883a 	mov	r17,r3
 8000d8c:	d8013215 	stw	zero,1224(sp)
 8000d90:	d8013415 	stw	zero,1232(sp)
 8000d94:	003f0106 	br	800099c <__alt_data_end+0xfc00099c>
 8000d98:	9cc00214 	ori	r19,r19,8
 8000d9c:	e005883a 	mov	r2,fp
 8000da0:	e4000007 	ldb	r16,0(fp)
 8000da4:	003de506 	br	800053c <__alt_data_end+0xfc00053c>
 8000da8:	da012a17 	ldw	r8,1192(sp)
 8000dac:	df012a15 	stw	fp,1192(sp)
 8000db0:	9f000414 	ori	fp,r19,16
 8000db4:	e0c0080c 	andi	r3,fp,32
 8000db8:	d8812d17 	ldw	r2,1204(sp)
 8000dbc:	18007626 	beq	r3,zero,8000f98 <___vfprintf_internal_r+0xbfc>
 8000dc0:	d9412d17 	ldw	r5,1204(sp)
 8000dc4:	14800017 	ldw	r18,0(r2)
 8000dc8:	15400117 	ldw	r21,4(r2)
 8000dcc:	29400204 	addi	r5,r5,8
 8000dd0:	d9412d15 	stw	r5,1204(sp)
 8000dd4:	0005883a 	mov	r2,zero
 8000dd8:	9546b03a 	or	r3,r18,r21
 8000ddc:	d8012785 	stb	zero,1182(sp)
 8000de0:	da413215 	stw	r9,1224(sp)
 8000de4:	0027883a 	mov	r19,zero
 8000de8:	003ecd06 	br	8000920 <__alt_data_end+0xfc000920>
 8000dec:	da012a17 	ldw	r8,1192(sp)
 8000df0:	df012a15 	stw	fp,1192(sp)
 8000df4:	9f000414 	ori	fp,r19,16
 8000df8:	e0c0080c 	andi	r3,fp,32
 8000dfc:	d8812d17 	ldw	r2,1204(sp)
 8000e00:	18002c26 	beq	r3,zero,8000eb4 <___vfprintf_internal_r+0xb18>
 8000e04:	d9012d17 	ldw	r4,1204(sp)
 8000e08:	14800017 	ldw	r18,0(r2)
 8000e0c:	15400117 	ldw	r21,4(r2)
 8000e10:	21000204 	addi	r4,r4,8
 8000e14:	d9012d15 	stw	r4,1204(sp)
 8000e18:	00800044 	movi	r2,1
 8000e1c:	9546b03a 	or	r3,r18,r21
 8000e20:	003fee06 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8000e24:	da012a17 	ldw	r8,1192(sp)
 8000e28:	df012a15 	stw	fp,1192(sp)
 8000e2c:	9839883a 	mov	fp,r19
 8000e30:	dcc12b03 	ldbu	r19,1196(sp)
 8000e34:	01420074 	movhi	r5,2049
 8000e38:	297cdc04 	addi	r5,r5,-3216
 8000e3c:	dcc12785 	stb	r19,1182(sp)
 8000e40:	d9413b15 	stw	r5,1260(sp)
 8000e44:	e0c0080c 	andi	r3,fp,32
 8000e48:	d8812d17 	ldw	r2,1204(sp)
 8000e4c:	18002e26 	beq	r3,zero,8000f08 <___vfprintf_internal_r+0xb6c>
 8000e50:	d9412d17 	ldw	r5,1204(sp)
 8000e54:	14800017 	ldw	r18,0(r2)
 8000e58:	15400117 	ldw	r21,4(r2)
 8000e5c:	29400204 	addi	r5,r5,8
 8000e60:	d9412d15 	stw	r5,1204(sp)
 8000e64:	e080004c 	andi	r2,fp,1
 8000e68:	10025c26 	beq	r2,zero,80017dc <___vfprintf_internal_r+0x1440>
 8000e6c:	9546b03a 	or	r3,r18,r21
 8000e70:	18038f26 	beq	r3,zero,8001cb0 <___vfprintf_internal_r+0x1914>
 8000e74:	00800c04 	movi	r2,48
 8000e78:	d8812705 	stb	r2,1180(sp)
 8000e7c:	dc012745 	stb	r16,1181(sp)
 8000e80:	e7000094 	ori	fp,fp,2
 8000e84:	00800084 	movi	r2,2
 8000e88:	003fd406 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8000e8c:	9cc00814 	ori	r19,r19,32
 8000e90:	e005883a 	mov	r2,fp
 8000e94:	e4000007 	ldb	r16,0(fp)
 8000e98:	003da806 	br	800053c <__alt_data_end+0xfc00053c>
 8000e9c:	da012a17 	ldw	r8,1192(sp)
 8000ea0:	df012a15 	stw	fp,1192(sp)
 8000ea4:	9839883a 	mov	fp,r19
 8000ea8:	e0c0080c 	andi	r3,fp,32
 8000eac:	d8812d17 	ldw	r2,1204(sp)
 8000eb0:	183fd41e 	bne	r3,zero,8000e04 <__alt_data_end+0xfc000e04>
 8000eb4:	e0c0040c 	andi	r3,fp,16
 8000eb8:	18035f26 	beq	r3,zero,8001c38 <___vfprintf_internal_r+0x189c>
 8000ebc:	d9412d17 	ldw	r5,1204(sp)
 8000ec0:	14800017 	ldw	r18,0(r2)
 8000ec4:	002b883a 	mov	r21,zero
 8000ec8:	29400104 	addi	r5,r5,4
 8000ecc:	d9412d15 	stw	r5,1204(sp)
 8000ed0:	00800044 	movi	r2,1
 8000ed4:	9007883a 	mov	r3,r18
 8000ed8:	003fc006 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8000edc:	da012a17 	ldw	r8,1192(sp)
 8000ee0:	df012a15 	stw	fp,1192(sp)
 8000ee4:	9839883a 	mov	fp,r19
 8000ee8:	dcc12b03 	ldbu	r19,1196(sp)
 8000eec:	01020074 	movhi	r4,2049
 8000ef0:	213ce104 	addi	r4,r4,-3196
 8000ef4:	d9013b15 	stw	r4,1260(sp)
 8000ef8:	dcc12785 	stb	r19,1182(sp)
 8000efc:	e0c0080c 	andi	r3,fp,32
 8000f00:	d8812d17 	ldw	r2,1204(sp)
 8000f04:	183fd21e 	bne	r3,zero,8000e50 <__alt_data_end+0xfc000e50>
 8000f08:	e0c0040c 	andi	r3,fp,16
 8000f0c:	18035426 	beq	r3,zero,8001c60 <___vfprintf_internal_r+0x18c4>
 8000f10:	d8c12d17 	ldw	r3,1204(sp)
 8000f14:	14800017 	ldw	r18,0(r2)
 8000f18:	002b883a 	mov	r21,zero
 8000f1c:	18c00104 	addi	r3,r3,4
 8000f20:	d8c12d15 	stw	r3,1204(sp)
 8000f24:	003fcf06 	br	8000e64 <__alt_data_end+0xfc000e64>
 8000f28:	e4000007 	ldb	r16,0(fp)
 8000f2c:	00801b04 	movi	r2,108
 8000f30:	8083f726 	beq	r16,r2,8001f10 <___vfprintf_internal_r+0x1b74>
 8000f34:	9cc00414 	ori	r19,r19,16
 8000f38:	e005883a 	mov	r2,fp
 8000f3c:	003d7f06 	br	800053c <__alt_data_end+0xfc00053c>
 8000f40:	da012a17 	ldw	r8,1192(sp)
 8000f44:	df012a15 	stw	fp,1192(sp)
 8000f48:	9839883a 	mov	fp,r19
 8000f4c:	dcc12b03 	ldbu	r19,1196(sp)
 8000f50:	e080080c 	andi	r2,fp,32
 8000f54:	dcc12785 	stb	r19,1182(sp)
 8000f58:	10032226 	beq	r2,zero,8001be4 <___vfprintf_internal_r+0x1848>
 8000f5c:	d9412d17 	ldw	r5,1204(sp)
 8000f60:	d9012f17 	ldw	r4,1212(sp)
 8000f64:	28800017 	ldw	r2,0(r5)
 8000f68:	2007d7fa 	srai	r3,r4,31
 8000f6c:	29400104 	addi	r5,r5,4
 8000f70:	d9412d15 	stw	r5,1204(sp)
 8000f74:	11000015 	stw	r4,0(r2)
 8000f78:	10c00115 	stw	r3,4(r2)
 8000f7c:	003d4406 	br	8000490 <__alt_data_end+0xfc000490>
 8000f80:	da012a17 	ldw	r8,1192(sp)
 8000f84:	df012a15 	stw	fp,1192(sp)
 8000f88:	9839883a 	mov	fp,r19
 8000f8c:	e0c0080c 	andi	r3,fp,32
 8000f90:	d8812d17 	ldw	r2,1204(sp)
 8000f94:	183f8a1e 	bne	r3,zero,8000dc0 <__alt_data_end+0xfc000dc0>
 8000f98:	e0c0040c 	andi	r3,fp,16
 8000f9c:	18031c26 	beq	r3,zero,8001c10 <___vfprintf_internal_r+0x1874>
 8000fa0:	14800017 	ldw	r18,0(r2)
 8000fa4:	d8812d17 	ldw	r2,1204(sp)
 8000fa8:	002b883a 	mov	r21,zero
 8000fac:	9007883a 	mov	r3,r18
 8000fb0:	10800104 	addi	r2,r2,4
 8000fb4:	d8812d15 	stw	r2,1204(sp)
 8000fb8:	0005883a 	mov	r2,zero
 8000fbc:	003f8706 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8000fc0:	d9412d17 	ldw	r5,1204(sp)
 8000fc4:	00800c04 	movi	r2,48
 8000fc8:	d8812705 	stb	r2,1180(sp)
 8000fcc:	2c800017 	ldw	r18,0(r5)
 8000fd0:	00801e04 	movi	r2,120
 8000fd4:	d8812745 	stb	r2,1181(sp)
 8000fd8:	00820074 	movhi	r2,2049
 8000fdc:	10bce104 	addi	r2,r2,-3196
 8000fe0:	29400104 	addi	r5,r5,4
 8000fe4:	da012a17 	ldw	r8,1192(sp)
 8000fe8:	d8813b15 	stw	r2,1260(sp)
 8000fec:	df012a15 	stw	fp,1192(sp)
 8000ff0:	002b883a 	mov	r21,zero
 8000ff4:	9f000094 	ori	fp,r19,2
 8000ff8:	d9412d15 	stw	r5,1204(sp)
 8000ffc:	00800084 	movi	r2,2
 8001000:	04001e04 	movi	r16,120
 8001004:	9007883a 	mov	r3,r18
 8001008:	003f7406 	br	8000ddc <__alt_data_end+0xfc000ddc>
 800100c:	da012a17 	ldw	r8,1192(sp)
 8001010:	df012a15 	stw	fp,1192(sp)
 8001014:	9839883a 	mov	fp,r19
 8001018:	dcc12b03 	ldbu	r19,1196(sp)
 800101c:	e080080c 	andi	r2,fp,32
 8001020:	d8c12d17 	ldw	r3,1204(sp)
 8001024:	dcc12785 	stb	r19,1182(sp)
 8001028:	103e321e 	bne	r2,zero,80008f4 <__alt_data_end+0xfc0008f4>
 800102c:	e080040c 	andi	r2,fp,16
 8001030:	10031326 	beq	r2,zero,8001c80 <___vfprintf_internal_r+0x18e4>
 8001034:	1c800017 	ldw	r18,0(r3)
 8001038:	d9412d17 	ldw	r5,1204(sp)
 800103c:	902bd7fa 	srai	r21,r18,31
 8001040:	29400104 	addi	r5,r5,4
 8001044:	d9412d15 	stw	r5,1204(sp)
 8001048:	a805883a 	mov	r2,r21
 800104c:	003e2f06 	br	800090c <__alt_data_end+0xfc00090c>
 8001050:	9cc01014 	ori	r19,r19,64
 8001054:	e005883a 	mov	r2,fp
 8001058:	e4000007 	ldb	r16,0(fp)
 800105c:	003d3706 	br	800053c <__alt_data_end+0xfc00053c>
 8001060:	d8c12d17 	ldw	r3,1204(sp)
 8001064:	d9012d17 	ldw	r4,1204(sp)
 8001068:	da012a17 	ldw	r8,1192(sp)
 800106c:	18800017 	ldw	r2,0(r3)
 8001070:	21000104 	addi	r4,r4,4
 8001074:	00c00044 	movi	r3,1
 8001078:	df012a15 	stw	fp,1192(sp)
 800107c:	d8c12b15 	stw	r3,1196(sp)
 8001080:	9839883a 	mov	fp,r19
 8001084:	d8012785 	stb	zero,1182(sp)
 8001088:	d8810405 	stb	r2,1040(sp)
 800108c:	d9012d15 	stw	r4,1204(sp)
 8001090:	1823883a 	mov	r17,r3
 8001094:	d8c10404 	addi	r3,sp,1040
 8001098:	d8013215 	stw	zero,1224(sp)
 800109c:	d8013415 	stw	zero,1232(sp)
 80010a0:	d8c13115 	stw	r3,1220(sp)
 80010a4:	0005883a 	mov	r2,zero
 80010a8:	003e4306 	br	80009b8 <__alt_data_end+0xfc0009b8>
 80010ac:	d8812b07 	ldb	r2,1196(sp)
 80010b0:	1002fc1e 	bne	r2,zero,8001ca4 <___vfprintf_internal_r+0x1908>
 80010b4:	00c00804 	movi	r3,32
 80010b8:	d8c12b05 	stb	r3,1196(sp)
 80010bc:	e005883a 	mov	r2,fp
 80010c0:	e4000007 	ldb	r16,0(fp)
 80010c4:	003d1d06 	br	800053c <__alt_data_end+0xfc00053c>
 80010c8:	9cc00054 	ori	r19,r19,1
 80010cc:	e005883a 	mov	r2,fp
 80010d0:	e4000007 	ldb	r16,0(fp)
 80010d4:	003d1906 	br	800053c <__alt_data_end+0xfc00053c>
 80010d8:	d9012d17 	ldw	r4,1204(sp)
 80010dc:	d9412d17 	ldw	r5,1204(sp)
 80010e0:	21000017 	ldw	r4,0(r4)
 80010e4:	28c00104 	addi	r3,r5,4
 80010e8:	d9012e15 	stw	r4,1208(sp)
 80010ec:	20038c16 	blt	r4,zero,8001f20 <___vfprintf_internal_r+0x1b84>
 80010f0:	d8c12d15 	stw	r3,1204(sp)
 80010f4:	e005883a 	mov	r2,fp
 80010f8:	e4000007 	ldb	r16,0(fp)
 80010fc:	003d0f06 	br	800053c <__alt_data_end+0xfc00053c>
 8001100:	00c00ac4 	movi	r3,43
 8001104:	d8c12b05 	stb	r3,1196(sp)
 8001108:	e005883a 	mov	r2,fp
 800110c:	e4000007 	ldb	r16,0(fp)
 8001110:	003d0a06 	br	800053c <__alt_data_end+0xfc00053c>
 8001114:	d8c12d17 	ldw	r3,1204(sp)
 8001118:	d9012d17 	ldw	r4,1204(sp)
 800111c:	da012a17 	ldw	r8,1192(sp)
 8001120:	18c00017 	ldw	r3,0(r3)
 8001124:	df012a15 	stw	fp,1192(sp)
 8001128:	d8012785 	stb	zero,1182(sp)
 800112c:	d8c13115 	stw	r3,1220(sp)
 8001130:	9839883a 	mov	fp,r19
 8001134:	24800104 	addi	r18,r4,4
 8001138:	1803f726 	beq	r3,zero,8002118 <___vfprintf_internal_r+0x1d7c>
 800113c:	d9013117 	ldw	r4,1220(sp)
 8001140:	48038916 	blt	r9,zero,8001f68 <___vfprintf_internal_r+0x1bcc>
 8001144:	480d883a 	mov	r6,r9
 8001148:	000b883a 	mov	r5,zero
 800114c:	da013f15 	stw	r8,1276(sp)
 8001150:	da413e15 	stw	r9,1272(sp)
 8001154:	800550c0 	call	800550c <memchr>
 8001158:	da013f17 	ldw	r8,1276(sp)
 800115c:	da413e17 	ldw	r9,1272(sp)
 8001160:	10045926 	beq	r2,zero,80022c8 <___vfprintf_internal_r+0x1f2c>
 8001164:	d8c13117 	ldw	r3,1220(sp)
 8001168:	10e3c83a 	sub	r17,r2,r3
 800116c:	4c433516 	blt	r9,r17,8001e44 <___vfprintf_internal_r+0x1aa8>
 8001170:	8805883a 	mov	r2,r17
 8001174:	88038116 	blt	r17,zero,8001f7c <___vfprintf_internal_r+0x1be0>
 8001178:	dcc12783 	ldbu	r19,1182(sp)
 800117c:	d8812b15 	stw	r2,1196(sp)
 8001180:	dc812d15 	stw	r18,1204(sp)
 8001184:	d8013215 	stw	zero,1224(sp)
 8001188:	d8013415 	stw	zero,1232(sp)
 800118c:	003e0306 	br	800099c <__alt_data_end+0xfc00099c>
 8001190:	da012a17 	ldw	r8,1192(sp)
 8001194:	df012a15 	stw	fp,1192(sp)
 8001198:	9839883a 	mov	fp,r19
 800119c:	dcc12b03 	ldbu	r19,1196(sp)
 80011a0:	dcc12785 	stb	r19,1182(sp)
 80011a4:	803d8f26 	beq	r16,zero,80007e4 <__alt_data_end+0xfc0007e4>
 80011a8:	00c00044 	movi	r3,1
 80011ac:	d8c12b15 	stw	r3,1196(sp)
 80011b0:	dc010405 	stb	r16,1040(sp)
 80011b4:	d8012785 	stb	zero,1182(sp)
 80011b8:	003fb506 	br	8001090 <__alt_data_end+0xfc001090>
 80011bc:	d8c12017 	ldw	r3,1152(sp)
 80011c0:	003e3506 	br	8000a98 <__alt_data_end+0xfc000a98>
 80011c4:	10803fcc 	andi	r2,r2,255
 80011c8:	00c00044 	movi	r3,1
 80011cc:	10fddc1e 	bne	r2,r3,8000940 <__alt_data_end+0xfc000940>
 80011d0:	a800021e 	bne	r21,zero,80011dc <___vfprintf_internal_r+0xe40>
 80011d4:	00800244 	movi	r2,9
 80011d8:	14801e2e 	bgeu	r2,r18,8001254 <___vfprintf_internal_r+0xeb8>
 80011dc:	dc012b15 	stw	r16,1196(sp)
 80011e0:	dc410e04 	addi	r17,sp,1080
 80011e4:	9021883a 	mov	r16,r18
 80011e8:	da012c15 	stw	r8,1200(sp)
 80011ec:	a825883a 	mov	r18,r21
 80011f0:	482b883a 	mov	r21,r9
 80011f4:	8009883a 	mov	r4,r16
 80011f8:	900b883a 	mov	r5,r18
 80011fc:	01800284 	movi	r6,10
 8001200:	000f883a 	mov	r7,zero
 8001204:	8009c600 	call	8009c60 <__umoddi3>
 8001208:	10800c04 	addi	r2,r2,48
 800120c:	8c7fffc4 	addi	r17,r17,-1
 8001210:	8009883a 	mov	r4,r16
 8001214:	900b883a 	mov	r5,r18
 8001218:	01800284 	movi	r6,10
 800121c:	000f883a 	mov	r7,zero
 8001220:	88800005 	stb	r2,0(r17)
 8001224:	80096200 	call	8009620 <__udivdi3>
 8001228:	1021883a 	mov	r16,r2
 800122c:	10c4b03a 	or	r2,r2,r3
 8001230:	1825883a 	mov	r18,r3
 8001234:	103fef1e 	bne	r2,zero,80011f4 <__alt_data_end+0xfc0011f4>
 8001238:	d9012817 	ldw	r4,1184(sp)
 800123c:	dc413115 	stw	r17,1220(sp)
 8001240:	dc012b17 	ldw	r16,1196(sp)
 8001244:	da012c17 	ldw	r8,1200(sp)
 8001248:	a813883a 	mov	r9,r21
 800124c:	2463c83a 	sub	r17,r4,r17
 8001250:	003dcd06 	br	8000988 <__alt_data_end+0xfc000988>
 8001254:	94800c04 	addi	r18,r18,48
 8001258:	d8c10dc4 	addi	r3,sp,1079
 800125c:	dc810dc5 	stb	r18,1079(sp)
 8001260:	dc413c17 	ldw	r17,1264(sp)
 8001264:	d8c13115 	stw	r3,1220(sp)
 8001268:	003dc706 	br	8000988 <__alt_data_end+0xfc000988>
 800126c:	00801944 	movi	r2,101
 8001270:	1400720e 	bge	r2,r16,800143c <___vfprintf_internal_r+0x10a0>
 8001274:	d9013717 	ldw	r4,1244(sp)
 8001278:	d9413917 	ldw	r5,1252(sp)
 800127c:	000d883a 	mov	r6,zero
 8001280:	000f883a 	mov	r7,zero
 8001284:	d8c13d15 	stw	r3,1268(sp)
 8001288:	da013f15 	stw	r8,1276(sp)
 800128c:	800b5ec0 	call	800b5ec <__eqdf2>
 8001290:	d8c13d17 	ldw	r3,1268(sp)
 8001294:	da013f17 	ldw	r8,1276(sp)
 8001298:	1000f41e 	bne	r2,zero,800166c <___vfprintf_internal_r+0x12d0>
 800129c:	d8811f17 	ldw	r2,1148(sp)
 80012a0:	01020074 	movhi	r4,2049
 80012a4:	213ce804 	addi	r4,r4,-3168
 80012a8:	18c00044 	addi	r3,r3,1
 80012ac:	10800044 	addi	r2,r2,1
 80012b0:	41000015 	stw	r4,0(r8)
 80012b4:	01000044 	movi	r4,1
 80012b8:	41000115 	stw	r4,4(r8)
 80012bc:	d8c12015 	stw	r3,1152(sp)
 80012c0:	d8811f15 	stw	r2,1148(sp)
 80012c4:	010001c4 	movi	r4,7
 80012c8:	20828d16 	blt	r4,r2,8001d00 <___vfprintf_internal_r+0x1964>
 80012cc:	42000204 	addi	r8,r8,8
 80012d0:	d8812617 	ldw	r2,1176(sp)
 80012d4:	d9413317 	ldw	r5,1228(sp)
 80012d8:	11400216 	blt	r2,r5,80012e4 <___vfprintf_internal_r+0xf48>
 80012dc:	e080004c 	andi	r2,fp,1
 80012e0:	103e4126 	beq	r2,zero,8000be8 <__alt_data_end+0xfc000be8>
 80012e4:	d8813817 	ldw	r2,1248(sp)
 80012e8:	d9013517 	ldw	r4,1236(sp)
 80012ec:	d9413817 	ldw	r5,1248(sp)
 80012f0:	1887883a 	add	r3,r3,r2
 80012f4:	d8811f17 	ldw	r2,1148(sp)
 80012f8:	41000015 	stw	r4,0(r8)
 80012fc:	41400115 	stw	r5,4(r8)
 8001300:	10800044 	addi	r2,r2,1
 8001304:	d8c12015 	stw	r3,1152(sp)
 8001308:	d8811f15 	stw	r2,1148(sp)
 800130c:	010001c4 	movi	r4,7
 8001310:	20830916 	blt	r4,r2,8001f38 <___vfprintf_internal_r+0x1b9c>
 8001314:	42000204 	addi	r8,r8,8
 8001318:	d8813317 	ldw	r2,1228(sp)
 800131c:	143fffc4 	addi	r16,r2,-1
 8001320:	043e310e 	bge	zero,r16,8000be8 <__alt_data_end+0xfc000be8>
 8001324:	04400404 	movi	r17,16
 8001328:	d8811f17 	ldw	r2,1148(sp)
 800132c:	8c007e0e 	bge	r17,r16,8001528 <___vfprintf_internal_r+0x118c>
 8001330:	01420074 	movhi	r5,2049
 8001334:	297ce884 	addi	r5,r5,-3166
 8001338:	d9412c15 	stw	r5,1200(sp)
 800133c:	04c001c4 	movi	r19,7
 8001340:	00000306 	br	8001350 <___vfprintf_internal_r+0xfb4>
 8001344:	42000204 	addi	r8,r8,8
 8001348:	843ffc04 	addi	r16,r16,-16
 800134c:	8c00790e 	bge	r17,r16,8001534 <___vfprintf_internal_r+0x1198>
 8001350:	18c00404 	addi	r3,r3,16
 8001354:	10800044 	addi	r2,r2,1
 8001358:	45000015 	stw	r20,0(r8)
 800135c:	44400115 	stw	r17,4(r8)
 8001360:	d8c12015 	stw	r3,1152(sp)
 8001364:	d8811f15 	stw	r2,1148(sp)
 8001368:	98bff60e 	bge	r19,r2,8001344 <__alt_data_end+0xfc001344>
 800136c:	b809883a 	mov	r4,r23
 8001370:	b00b883a 	mov	r5,r22
 8001374:	d9811e04 	addi	r6,sp,1144
 8001378:	8006cd40 	call	8006cd4 <__sprint_r>
 800137c:	103d1f1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001380:	d8c12017 	ldw	r3,1152(sp)
 8001384:	d8811f17 	ldw	r2,1148(sp)
 8001388:	da000404 	addi	r8,sp,16
 800138c:	003fee06 	br	8001348 <__alt_data_end+0xfc001348>
 8001390:	d9412e17 	ldw	r5,1208(sp)
 8001394:	d8812b17 	ldw	r2,1196(sp)
 8001398:	28a7c83a 	sub	r19,r5,r2
 800139c:	04fddc0e 	bge	zero,r19,8000b10 <__alt_data_end+0xfc000b10>
 80013a0:	05400404 	movi	r21,16
 80013a4:	d8811f17 	ldw	r2,1148(sp)
 80013a8:	acc3870e 	bge	r21,r19,80021c8 <___vfprintf_internal_r+0x1e2c>
 80013ac:	01420074 	movhi	r5,2049
 80013b0:	297ce884 	addi	r5,r5,-3166
 80013b4:	d9412c15 	stw	r5,1200(sp)
 80013b8:	048001c4 	movi	r18,7
 80013bc:	00000306 	br	80013cc <___vfprintf_internal_r+0x1030>
 80013c0:	9cfffc04 	addi	r19,r19,-16
 80013c4:	42000204 	addi	r8,r8,8
 80013c8:	acc0110e 	bge	r21,r19,8001410 <___vfprintf_internal_r+0x1074>
 80013cc:	18c00404 	addi	r3,r3,16
 80013d0:	10800044 	addi	r2,r2,1
 80013d4:	45000015 	stw	r20,0(r8)
 80013d8:	45400115 	stw	r21,4(r8)
 80013dc:	d8c12015 	stw	r3,1152(sp)
 80013e0:	d8811f15 	stw	r2,1148(sp)
 80013e4:	90bff60e 	bge	r18,r2,80013c0 <__alt_data_end+0xfc0013c0>
 80013e8:	b809883a 	mov	r4,r23
 80013ec:	b00b883a 	mov	r5,r22
 80013f0:	d9811e04 	addi	r6,sp,1144
 80013f4:	8006cd40 	call	8006cd4 <__sprint_r>
 80013f8:	103d001e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80013fc:	9cfffc04 	addi	r19,r19,-16
 8001400:	d8c12017 	ldw	r3,1152(sp)
 8001404:	d8811f17 	ldw	r2,1148(sp)
 8001408:	da000404 	addi	r8,sp,16
 800140c:	acffef16 	blt	r21,r19,80013cc <__alt_data_end+0xfc0013cc>
 8001410:	d9012c17 	ldw	r4,1200(sp)
 8001414:	1cc7883a 	add	r3,r3,r19
 8001418:	10800044 	addi	r2,r2,1
 800141c:	41000015 	stw	r4,0(r8)
 8001420:	44c00115 	stw	r19,4(r8)
 8001424:	d8c12015 	stw	r3,1152(sp)
 8001428:	d8811f15 	stw	r2,1148(sp)
 800142c:	010001c4 	movi	r4,7
 8001430:	20817816 	blt	r4,r2,8001a14 <___vfprintf_internal_r+0x1678>
 8001434:	42000204 	addi	r8,r8,8
 8001438:	003db506 	br	8000b10 <__alt_data_end+0xfc000b10>
 800143c:	d9413317 	ldw	r5,1228(sp)
 8001440:	00800044 	movi	r2,1
 8001444:	18c00044 	addi	r3,r3,1
 8001448:	11413e0e 	bge	r2,r5,8001944 <___vfprintf_internal_r+0x15a8>
 800144c:	dc011f17 	ldw	r16,1148(sp)
 8001450:	d8813117 	ldw	r2,1220(sp)
 8001454:	d8c12015 	stw	r3,1152(sp)
 8001458:	84000044 	addi	r16,r16,1
 800145c:	40800015 	stw	r2,0(r8)
 8001460:	00800044 	movi	r2,1
 8001464:	40800115 	stw	r2,4(r8)
 8001468:	dc011f15 	stw	r16,1148(sp)
 800146c:	008001c4 	movi	r2,7
 8001470:	14015616 	blt	r2,r16,80019cc <___vfprintf_internal_r+0x1630>
 8001474:	42000204 	addi	r8,r8,8
 8001478:	d9013817 	ldw	r4,1248(sp)
 800147c:	d9413517 	ldw	r5,1236(sp)
 8001480:	84000044 	addi	r16,r16,1
 8001484:	1907883a 	add	r3,r3,r4
 8001488:	41400015 	stw	r5,0(r8)
 800148c:	41000115 	stw	r4,4(r8)
 8001490:	d8c12015 	stw	r3,1152(sp)
 8001494:	dc011f15 	stw	r16,1148(sp)
 8001498:	008001c4 	movi	r2,7
 800149c:	14015416 	blt	r2,r16,80019f0 <___vfprintf_internal_r+0x1654>
 80014a0:	44400204 	addi	r17,r8,8
 80014a4:	d9013717 	ldw	r4,1244(sp)
 80014a8:	d9413917 	ldw	r5,1252(sp)
 80014ac:	000d883a 	mov	r6,zero
 80014b0:	000f883a 	mov	r7,zero
 80014b4:	d8c13d15 	stw	r3,1268(sp)
 80014b8:	800b5ec0 	call	800b5ec <__eqdf2>
 80014bc:	d8c13d17 	ldw	r3,1268(sp)
 80014c0:	1000a726 	beq	r2,zero,8001760 <___vfprintf_internal_r+0x13c4>
 80014c4:	d9013317 	ldw	r4,1228(sp)
 80014c8:	d9413117 	ldw	r5,1220(sp)
 80014cc:	84000044 	addi	r16,r16,1
 80014d0:	20bfffc4 	addi	r2,r4,-1
 80014d4:	1887883a 	add	r3,r3,r2
 80014d8:	29000044 	addi	r4,r5,1
 80014dc:	88800115 	stw	r2,4(r17)
 80014e0:	89000015 	stw	r4,0(r17)
 80014e4:	d8c12015 	stw	r3,1152(sp)
 80014e8:	dc011f15 	stw	r16,1148(sp)
 80014ec:	008001c4 	movi	r2,7
 80014f0:	14012d16 	blt	r2,r16,80019a8 <___vfprintf_internal_r+0x160c>
 80014f4:	8c400204 	addi	r17,r17,8
 80014f8:	d9413a17 	ldw	r5,1256(sp)
 80014fc:	dcc122c4 	addi	r19,sp,1163
 8001500:	84000044 	addi	r16,r16,1
 8001504:	28c7883a 	add	r3,r5,r3
 8001508:	8cc00015 	stw	r19,0(r17)
 800150c:	89400115 	stw	r5,4(r17)
 8001510:	d8c12015 	stw	r3,1152(sp)
 8001514:	dc011f15 	stw	r16,1148(sp)
 8001518:	008001c4 	movi	r2,7
 800151c:	14000e16 	blt	r2,r16,8001558 <___vfprintf_internal_r+0x11bc>
 8001520:	8a000204 	addi	r8,r17,8
 8001524:	003db006 	br	8000be8 <__alt_data_end+0xfc000be8>
 8001528:	01020074 	movhi	r4,2049
 800152c:	213ce884 	addi	r4,r4,-3166
 8001530:	d9012c15 	stw	r4,1200(sp)
 8001534:	d9012c17 	ldw	r4,1200(sp)
 8001538:	1c07883a 	add	r3,r3,r16
 800153c:	44000115 	stw	r16,4(r8)
 8001540:	41000015 	stw	r4,0(r8)
 8001544:	10800044 	addi	r2,r2,1
 8001548:	d8c12015 	stw	r3,1152(sp)
 800154c:	d8811f15 	stw	r2,1148(sp)
 8001550:	010001c4 	movi	r4,7
 8001554:	20bda30e 	bge	r4,r2,8000be4 <__alt_data_end+0xfc000be4>
 8001558:	b809883a 	mov	r4,r23
 800155c:	b00b883a 	mov	r5,r22
 8001560:	d9811e04 	addi	r6,sp,1144
 8001564:	8006cd40 	call	8006cd4 <__sprint_r>
 8001568:	103ca41e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800156c:	d8c12017 	ldw	r3,1152(sp)
 8001570:	da000404 	addi	r8,sp,16
 8001574:	003d9c06 	br	8000be8 <__alt_data_end+0xfc000be8>
 8001578:	b809883a 	mov	r4,r23
 800157c:	b00b883a 	mov	r5,r22
 8001580:	d9811e04 	addi	r6,sp,1144
 8001584:	8006cd40 	call	8006cd4 <__sprint_r>
 8001588:	103dd226 	beq	r2,zero,8000cd4 <__alt_data_end+0xfc000cd4>
 800158c:	003c9b06 	br	80007fc <__alt_data_end+0xfc0007fc>
 8001590:	10803fcc 	andi	r2,r2,255
 8001594:	1000311e 	bne	r2,zero,800165c <___vfprintf_internal_r+0x12c0>
 8001598:	e080004c 	andi	r2,fp,1
 800159c:	10002f26 	beq	r2,zero,800165c <___vfprintf_internal_r+0x12c0>
 80015a0:	00800c04 	movi	r2,48
 80015a4:	d8c10dc4 	addi	r3,sp,1079
 80015a8:	d8810dc5 	stb	r2,1079(sp)
 80015ac:	dc413c17 	ldw	r17,1264(sp)
 80015b0:	d8c13115 	stw	r3,1220(sp)
 80015b4:	003cf406 	br	8000988 <__alt_data_end+0xfc000988>
 80015b8:	b809883a 	mov	r4,r23
 80015bc:	b00b883a 	mov	r5,r22
 80015c0:	d9811e04 	addi	r6,sp,1144
 80015c4:	8006cd40 	call	8006cd4 <__sprint_r>
 80015c8:	103c8c1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80015cc:	d8c12017 	ldw	r3,1152(sp)
 80015d0:	da000404 	addi	r8,sp,16
 80015d4:	003d7706 	br	8000bb4 <__alt_data_end+0xfc000bb4>
 80015d8:	b809883a 	mov	r4,r23
 80015dc:	b00b883a 	mov	r5,r22
 80015e0:	d9811e04 	addi	r6,sp,1144
 80015e4:	8006cd40 	call	8006cd4 <__sprint_r>
 80015e8:	103c841e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80015ec:	d8c12017 	ldw	r3,1152(sp)
 80015f0:	da000404 	addi	r8,sp,16
 80015f4:	003d3506 	br	8000acc <__alt_data_end+0xfc000acc>
 80015f8:	b809883a 	mov	r4,r23
 80015fc:	b00b883a 	mov	r5,r22
 8001600:	d9811e04 	addi	r6,sp,1144
 8001604:	8006cd40 	call	8006cd4 <__sprint_r>
 8001608:	103c7c1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800160c:	d8c12017 	ldw	r3,1152(sp)
 8001610:	da000404 	addi	r8,sp,16
 8001614:	003d3b06 	br	8000b04 <__alt_data_end+0xfc000b04>
 8001618:	d9413b17 	ldw	r5,1260(sp)
 800161c:	d8c10e04 	addi	r3,sp,1080
 8001620:	908003cc 	andi	r2,r18,15
 8001624:	a808973a 	slli	r4,r21,28
 8001628:	2885883a 	add	r2,r5,r2
 800162c:	9024d13a 	srli	r18,r18,4
 8001630:	10800003 	ldbu	r2,0(r2)
 8001634:	a82ad13a 	srli	r21,r21,4
 8001638:	18ffffc4 	addi	r3,r3,-1
 800163c:	24a4b03a 	or	r18,r4,r18
 8001640:	18800005 	stb	r2,0(r3)
 8001644:	9544b03a 	or	r2,r18,r21
 8001648:	103ff51e 	bne	r2,zero,8001620 <__alt_data_end+0xfc001620>
 800164c:	d9412817 	ldw	r5,1184(sp)
 8001650:	d8c13115 	stw	r3,1220(sp)
 8001654:	28e3c83a 	sub	r17,r5,r3
 8001658:	003ccb06 	br	8000988 <__alt_data_end+0xfc000988>
 800165c:	d8c10e04 	addi	r3,sp,1080
 8001660:	0023883a 	mov	r17,zero
 8001664:	d8c13115 	stw	r3,1220(sp)
 8001668:	003cc706 	br	8000988 <__alt_data_end+0xfc000988>
 800166c:	dc012617 	ldw	r16,1176(sp)
 8001670:	0401ab0e 	bge	zero,r16,8001d20 <___vfprintf_internal_r+0x1984>
 8001674:	d8813317 	ldw	r2,1228(sp)
 8001678:	d9413117 	ldw	r5,1220(sp)
 800167c:	d9013417 	ldw	r4,1232(sp)
 8001680:	1023883a 	mov	r17,r2
 8001684:	28a1883a 	add	r16,r5,r2
 8001688:	2080010e 	bge	r4,r2,8001690 <___vfprintf_internal_r+0x12f4>
 800168c:	2023883a 	mov	r17,r4
 8001690:	04400b0e 	bge	zero,r17,80016c0 <___vfprintf_internal_r+0x1324>
 8001694:	d8811f17 	ldw	r2,1148(sp)
 8001698:	d9413117 	ldw	r5,1220(sp)
 800169c:	1c47883a 	add	r3,r3,r17
 80016a0:	10800044 	addi	r2,r2,1
 80016a4:	41400015 	stw	r5,0(r8)
 80016a8:	44400115 	stw	r17,4(r8)
 80016ac:	d8c12015 	stw	r3,1152(sp)
 80016b0:	d8811f15 	stw	r2,1148(sp)
 80016b4:	010001c4 	movi	r4,7
 80016b8:	20826716 	blt	r4,r2,8002058 <___vfprintf_internal_r+0x1cbc>
 80016bc:	42000204 	addi	r8,r8,8
 80016c0:	88026316 	blt	r17,zero,8002050 <___vfprintf_internal_r+0x1cb4>
 80016c4:	d8813417 	ldw	r2,1232(sp)
 80016c8:	1463c83a 	sub	r17,r2,r17
 80016cc:	0440590e 	bge	zero,r17,8001834 <___vfprintf_internal_r+0x1498>
 80016d0:	04c00404 	movi	r19,16
 80016d4:	d8811f17 	ldw	r2,1148(sp)
 80016d8:	9c41770e 	bge	r19,r17,8001cb8 <___vfprintf_internal_r+0x191c>
 80016dc:	01420074 	movhi	r5,2049
 80016e0:	297ce884 	addi	r5,r5,-3166
 80016e4:	d9412c15 	stw	r5,1200(sp)
 80016e8:	054001c4 	movi	r21,7
 80016ec:	00000306 	br	80016fc <___vfprintf_internal_r+0x1360>
 80016f0:	42000204 	addi	r8,r8,8
 80016f4:	8c7ffc04 	addi	r17,r17,-16
 80016f8:	9c41720e 	bge	r19,r17,8001cc4 <___vfprintf_internal_r+0x1928>
 80016fc:	18c00404 	addi	r3,r3,16
 8001700:	10800044 	addi	r2,r2,1
 8001704:	45000015 	stw	r20,0(r8)
 8001708:	44c00115 	stw	r19,4(r8)
 800170c:	d8c12015 	stw	r3,1152(sp)
 8001710:	d8811f15 	stw	r2,1148(sp)
 8001714:	a8bff60e 	bge	r21,r2,80016f0 <__alt_data_end+0xfc0016f0>
 8001718:	b809883a 	mov	r4,r23
 800171c:	b00b883a 	mov	r5,r22
 8001720:	d9811e04 	addi	r6,sp,1144
 8001724:	8006cd40 	call	8006cd4 <__sprint_r>
 8001728:	103c341e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800172c:	d8c12017 	ldw	r3,1152(sp)
 8001730:	d8811f17 	ldw	r2,1148(sp)
 8001734:	da000404 	addi	r8,sp,16
 8001738:	003fee06 	br	80016f4 <__alt_data_end+0xfc0016f4>
 800173c:	b809883a 	mov	r4,r23
 8001740:	b00b883a 	mov	r5,r22
 8001744:	d9811e04 	addi	r6,sp,1144
 8001748:	8006cd40 	call	8006cd4 <__sprint_r>
 800174c:	103c2b1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001750:	d8c12017 	ldw	r3,1152(sp)
 8001754:	d8812787 	ldb	r2,1182(sp)
 8001758:	da000404 	addi	r8,sp,16
 800175c:	003cce06 	br	8000a98 <__alt_data_end+0xfc000a98>
 8001760:	d8813317 	ldw	r2,1228(sp)
 8001764:	14ffffc4 	addi	r19,r2,-1
 8001768:	04ff630e 	bge	zero,r19,80014f8 <__alt_data_end+0xfc0014f8>
 800176c:	05400404 	movi	r21,16
 8001770:	acc0810e 	bge	r21,r19,8001978 <___vfprintf_internal_r+0x15dc>
 8001774:	01420074 	movhi	r5,2049
 8001778:	297ce884 	addi	r5,r5,-3166
 800177c:	d9412c15 	stw	r5,1200(sp)
 8001780:	01c001c4 	movi	r7,7
 8001784:	00000306 	br	8001794 <___vfprintf_internal_r+0x13f8>
 8001788:	8c400204 	addi	r17,r17,8
 800178c:	9cfffc04 	addi	r19,r19,-16
 8001790:	acc07c0e 	bge	r21,r19,8001984 <___vfprintf_internal_r+0x15e8>
 8001794:	18c00404 	addi	r3,r3,16
 8001798:	84000044 	addi	r16,r16,1
 800179c:	8d000015 	stw	r20,0(r17)
 80017a0:	8d400115 	stw	r21,4(r17)
 80017a4:	d8c12015 	stw	r3,1152(sp)
 80017a8:	dc011f15 	stw	r16,1148(sp)
 80017ac:	3c3ff60e 	bge	r7,r16,8001788 <__alt_data_end+0xfc001788>
 80017b0:	b809883a 	mov	r4,r23
 80017b4:	b00b883a 	mov	r5,r22
 80017b8:	d9811e04 	addi	r6,sp,1144
 80017bc:	d9c13d15 	stw	r7,1268(sp)
 80017c0:	8006cd40 	call	8006cd4 <__sprint_r>
 80017c4:	d9c13d17 	ldw	r7,1268(sp)
 80017c8:	103c0c1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80017cc:	d8c12017 	ldw	r3,1152(sp)
 80017d0:	dc011f17 	ldw	r16,1148(sp)
 80017d4:	dc400404 	addi	r17,sp,16
 80017d8:	003fec06 	br	800178c <__alt_data_end+0xfc00178c>
 80017dc:	00800084 	movi	r2,2
 80017e0:	9546b03a 	or	r3,r18,r21
 80017e4:	003d7d06 	br	8000ddc <__alt_data_end+0xfc000ddc>
 80017e8:	10803fcc 	andi	r2,r2,255
 80017ec:	1080201c 	xori	r2,r2,128
 80017f0:	10bfe004 	addi	r2,r2,-128
 80017f4:	01000c04 	movi	r4,48
 80017f8:	1101d726 	beq	r2,r4,8001f58 <___vfprintf_internal_r+0x1bbc>
 80017fc:	d9413117 	ldw	r5,1220(sp)
 8001800:	d8812817 	ldw	r2,1184(sp)
 8001804:	193fffc5 	stb	r4,-1(r3)
 8001808:	297fffc4 	addi	r5,r5,-1
 800180c:	d9413115 	stw	r5,1220(sp)
 8001810:	1163c83a 	sub	r17,r2,r5
 8001814:	003c5c06 	br	8000988 <__alt_data_end+0xfc000988>
 8001818:	b809883a 	mov	r4,r23
 800181c:	b00b883a 	mov	r5,r22
 8001820:	d9811e04 	addi	r6,sp,1144
 8001824:	8006cd40 	call	8006cd4 <__sprint_r>
 8001828:	103bf41e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800182c:	d8c12017 	ldw	r3,1152(sp)
 8001830:	da000404 	addi	r8,sp,16
 8001834:	d9413117 	ldw	r5,1220(sp)
 8001838:	d9013417 	ldw	r4,1232(sp)
 800183c:	d8812617 	ldw	r2,1176(sp)
 8001840:	2923883a 	add	r17,r5,r4
 8001844:	d9413317 	ldw	r5,1228(sp)
 8001848:	11400216 	blt	r2,r5,8001854 <___vfprintf_internal_r+0x14b8>
 800184c:	e100004c 	andi	r4,fp,1
 8001850:	20000d26 	beq	r4,zero,8001888 <___vfprintf_internal_r+0x14ec>
 8001854:	d9013817 	ldw	r4,1248(sp)
 8001858:	d9413517 	ldw	r5,1236(sp)
 800185c:	1907883a 	add	r3,r3,r4
 8001860:	d9011f17 	ldw	r4,1148(sp)
 8001864:	41400015 	stw	r5,0(r8)
 8001868:	d9413817 	ldw	r5,1248(sp)
 800186c:	21000044 	addi	r4,r4,1
 8001870:	d8c12015 	stw	r3,1152(sp)
 8001874:	41400115 	stw	r5,4(r8)
 8001878:	d9011f15 	stw	r4,1148(sp)
 800187c:	014001c4 	movi	r5,7
 8001880:	2901fd16 	blt	r5,r4,8002078 <___vfprintf_internal_r+0x1cdc>
 8001884:	42000204 	addi	r8,r8,8
 8001888:	d9013317 	ldw	r4,1228(sp)
 800188c:	2085c83a 	sub	r2,r4,r2
 8001890:	8449c83a 	sub	r4,r16,r17
 8001894:	1021883a 	mov	r16,r2
 8001898:	2080010e 	bge	r4,r2,80018a0 <___vfprintf_internal_r+0x1504>
 800189c:	2021883a 	mov	r16,r4
 80018a0:	04000a0e 	bge	zero,r16,80018cc <___vfprintf_internal_r+0x1530>
 80018a4:	d9011f17 	ldw	r4,1148(sp)
 80018a8:	1c07883a 	add	r3,r3,r16
 80018ac:	44400015 	stw	r17,0(r8)
 80018b0:	21000044 	addi	r4,r4,1
 80018b4:	44000115 	stw	r16,4(r8)
 80018b8:	d8c12015 	stw	r3,1152(sp)
 80018bc:	d9011f15 	stw	r4,1148(sp)
 80018c0:	014001c4 	movi	r5,7
 80018c4:	29020916 	blt	r5,r4,80020ec <___vfprintf_internal_r+0x1d50>
 80018c8:	42000204 	addi	r8,r8,8
 80018cc:	80020116 	blt	r16,zero,80020d4 <___vfprintf_internal_r+0x1d38>
 80018d0:	1421c83a 	sub	r16,r2,r16
 80018d4:	043cc40e 	bge	zero,r16,8000be8 <__alt_data_end+0xfc000be8>
 80018d8:	04400404 	movi	r17,16
 80018dc:	d8811f17 	ldw	r2,1148(sp)
 80018e0:	8c3f110e 	bge	r17,r16,8001528 <__alt_data_end+0xfc001528>
 80018e4:	01420074 	movhi	r5,2049
 80018e8:	297ce884 	addi	r5,r5,-3166
 80018ec:	d9412c15 	stw	r5,1200(sp)
 80018f0:	04c001c4 	movi	r19,7
 80018f4:	00000306 	br	8001904 <___vfprintf_internal_r+0x1568>
 80018f8:	42000204 	addi	r8,r8,8
 80018fc:	843ffc04 	addi	r16,r16,-16
 8001900:	8c3f0c0e 	bge	r17,r16,8001534 <__alt_data_end+0xfc001534>
 8001904:	18c00404 	addi	r3,r3,16
 8001908:	10800044 	addi	r2,r2,1
 800190c:	45000015 	stw	r20,0(r8)
 8001910:	44400115 	stw	r17,4(r8)
 8001914:	d8c12015 	stw	r3,1152(sp)
 8001918:	d8811f15 	stw	r2,1148(sp)
 800191c:	98bff60e 	bge	r19,r2,80018f8 <__alt_data_end+0xfc0018f8>
 8001920:	b809883a 	mov	r4,r23
 8001924:	b00b883a 	mov	r5,r22
 8001928:	d9811e04 	addi	r6,sp,1144
 800192c:	8006cd40 	call	8006cd4 <__sprint_r>
 8001930:	103bb21e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001934:	d8c12017 	ldw	r3,1152(sp)
 8001938:	d8811f17 	ldw	r2,1148(sp)
 800193c:	da000404 	addi	r8,sp,16
 8001940:	003fee06 	br	80018fc <__alt_data_end+0xfc0018fc>
 8001944:	e088703a 	and	r4,fp,r2
 8001948:	203ec01e 	bne	r4,zero,800144c <__alt_data_end+0xfc00144c>
 800194c:	dc011f17 	ldw	r16,1148(sp)
 8001950:	d9013117 	ldw	r4,1220(sp)
 8001954:	40800115 	stw	r2,4(r8)
 8001958:	84000044 	addi	r16,r16,1
 800195c:	41000015 	stw	r4,0(r8)
 8001960:	d8c12015 	stw	r3,1152(sp)
 8001964:	dc011f15 	stw	r16,1148(sp)
 8001968:	008001c4 	movi	r2,7
 800196c:	14000e16 	blt	r2,r16,80019a8 <___vfprintf_internal_r+0x160c>
 8001970:	44400204 	addi	r17,r8,8
 8001974:	003ee006 	br	80014f8 <__alt_data_end+0xfc0014f8>
 8001978:	01020074 	movhi	r4,2049
 800197c:	213ce884 	addi	r4,r4,-3166
 8001980:	d9012c15 	stw	r4,1200(sp)
 8001984:	d8812c17 	ldw	r2,1200(sp)
 8001988:	1cc7883a 	add	r3,r3,r19
 800198c:	84000044 	addi	r16,r16,1
 8001990:	88800015 	stw	r2,0(r17)
 8001994:	8cc00115 	stw	r19,4(r17)
 8001998:	d8c12015 	stw	r3,1152(sp)
 800199c:	dc011f15 	stw	r16,1148(sp)
 80019a0:	008001c4 	movi	r2,7
 80019a4:	143ed30e 	bge	r2,r16,80014f4 <__alt_data_end+0xfc0014f4>
 80019a8:	b809883a 	mov	r4,r23
 80019ac:	b00b883a 	mov	r5,r22
 80019b0:	d9811e04 	addi	r6,sp,1144
 80019b4:	8006cd40 	call	8006cd4 <__sprint_r>
 80019b8:	103b901e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80019bc:	d8c12017 	ldw	r3,1152(sp)
 80019c0:	dc011f17 	ldw	r16,1148(sp)
 80019c4:	dc400404 	addi	r17,sp,16
 80019c8:	003ecb06 	br	80014f8 <__alt_data_end+0xfc0014f8>
 80019cc:	b809883a 	mov	r4,r23
 80019d0:	b00b883a 	mov	r5,r22
 80019d4:	d9811e04 	addi	r6,sp,1144
 80019d8:	8006cd40 	call	8006cd4 <__sprint_r>
 80019dc:	103b871e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 80019e0:	d8c12017 	ldw	r3,1152(sp)
 80019e4:	dc011f17 	ldw	r16,1148(sp)
 80019e8:	da000404 	addi	r8,sp,16
 80019ec:	003ea206 	br	8001478 <__alt_data_end+0xfc001478>
 80019f0:	b809883a 	mov	r4,r23
 80019f4:	b00b883a 	mov	r5,r22
 80019f8:	d9811e04 	addi	r6,sp,1144
 80019fc:	8006cd40 	call	8006cd4 <__sprint_r>
 8001a00:	103b7e1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001a04:	d8c12017 	ldw	r3,1152(sp)
 8001a08:	dc011f17 	ldw	r16,1148(sp)
 8001a0c:	dc400404 	addi	r17,sp,16
 8001a10:	003ea406 	br	80014a4 <__alt_data_end+0xfc0014a4>
 8001a14:	b809883a 	mov	r4,r23
 8001a18:	b00b883a 	mov	r5,r22
 8001a1c:	d9811e04 	addi	r6,sp,1144
 8001a20:	8006cd40 	call	8006cd4 <__sprint_r>
 8001a24:	103b751e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001a28:	d8c12017 	ldw	r3,1152(sp)
 8001a2c:	da000404 	addi	r8,sp,16
 8001a30:	003c3706 	br	8000b10 <__alt_data_end+0xfc000b10>
 8001a34:	04a5c83a 	sub	r18,zero,r18
 8001a38:	9004c03a 	cmpne	r2,r18,zero
 8001a3c:	056bc83a 	sub	r21,zero,r21
 8001a40:	a8abc83a 	sub	r21,r21,r2
 8001a44:	04c00b44 	movi	r19,45
 8001a48:	dcc12785 	stb	r19,1182(sp)
 8001a4c:	da413215 	stw	r9,1224(sp)
 8001a50:	00800044 	movi	r2,1
 8001a54:	9546b03a 	or	r3,r18,r21
 8001a58:	003bb106 	br	8000920 <__alt_data_end+0xfc000920>
 8001a5c:	da013f15 	stw	r8,1276(sp)
 8001a60:	da413e15 	stw	r9,1272(sp)
 8001a64:	80068980 	call	8006898 <__fpclassifyd>
 8001a68:	da013f17 	ldw	r8,1276(sp)
 8001a6c:	da413e17 	ldw	r9,1272(sp)
 8001a70:	1000e526 	beq	r2,zero,8001e08 <___vfprintf_internal_r+0x1a6c>
 8001a74:	04fff7c4 	movi	r19,-33
 8001a78:	00bfffc4 	movi	r2,-1
 8001a7c:	84e6703a 	and	r19,r16,r19
 8001a80:	48822926 	beq	r9,r2,8002328 <___vfprintf_internal_r+0x1f8c>
 8001a84:	008011c4 	movi	r2,71
 8001a88:	98821626 	beq	r19,r2,80022e4 <___vfprintf_internal_r+0x1f48>
 8001a8c:	d9013917 	ldw	r4,1252(sp)
 8001a90:	e0c04014 	ori	r3,fp,256
 8001a94:	d8c12d15 	stw	r3,1204(sp)
 8001a98:	20021f16 	blt	r4,zero,8002318 <___vfprintf_internal_r+0x1f7c>
 8001a9c:	dc413917 	ldw	r17,1252(sp)
 8001aa0:	d8012b05 	stb	zero,1196(sp)
 8001aa4:	00801984 	movi	r2,102
 8001aa8:	80814d26 	beq	r16,r2,8001fe0 <___vfprintf_internal_r+0x1c44>
 8001aac:	00801184 	movi	r2,70
 8001ab0:	80814b26 	beq	r16,r2,8001fe0 <___vfprintf_internal_r+0x1c44>
 8001ab4:	00801144 	movi	r2,69
 8001ab8:	98821d26 	beq	r19,r2,8002330 <___vfprintf_internal_r+0x1f94>
 8001abc:	482b883a 	mov	r21,r9
 8001ac0:	d8812604 	addi	r2,sp,1176
 8001ac4:	d8800115 	stw	r2,4(sp)
 8001ac8:	d9413717 	ldw	r5,1244(sp)
 8001acc:	d8812504 	addi	r2,sp,1172
 8001ad0:	d8800215 	stw	r2,8(sp)
 8001ad4:	d8812104 	addi	r2,sp,1156
 8001ad8:	dd400015 	stw	r21,0(sp)
 8001adc:	d8800315 	stw	r2,12(sp)
 8001ae0:	b809883a 	mov	r4,r23
 8001ae4:	880d883a 	mov	r6,r17
 8001ae8:	01c00084 	movi	r7,2
 8001aec:	da013f15 	stw	r8,1276(sp)
 8001af0:	da413e15 	stw	r9,1272(sp)
 8001af4:	80028140 	call	8002814 <_dtoa_r>
 8001af8:	d8813115 	stw	r2,1220(sp)
 8001afc:	008019c4 	movi	r2,103
 8001b00:	da013f17 	ldw	r8,1276(sp)
 8001b04:	da413e17 	ldw	r9,1272(sp)
 8001b08:	80800226 	beq	r16,r2,8001b14 <___vfprintf_internal_r+0x1778>
 8001b0c:	008011c4 	movi	r2,71
 8001b10:	8081451e 	bne	r16,r2,8002028 <___vfprintf_internal_r+0x1c8c>
 8001b14:	e080004c 	andi	r2,fp,1
 8001b18:	10021e26 	beq	r2,zero,8002394 <___vfprintf_internal_r+0x1ff8>
 8001b1c:	d8c13117 	ldw	r3,1220(sp)
 8001b20:	1d55883a 	add	r10,r3,r21
 8001b24:	d9013717 	ldw	r4,1244(sp)
 8001b28:	880b883a 	mov	r5,r17
 8001b2c:	000d883a 	mov	r6,zero
 8001b30:	000f883a 	mov	r7,zero
 8001b34:	da013f15 	stw	r8,1276(sp)
 8001b38:	da413e15 	stw	r9,1272(sp)
 8001b3c:	da813d15 	stw	r10,1268(sp)
 8001b40:	800b5ec0 	call	800b5ec <__eqdf2>
 8001b44:	da013f17 	ldw	r8,1276(sp)
 8001b48:	da413e17 	ldw	r9,1272(sp)
 8001b4c:	da813d17 	ldw	r10,1268(sp)
 8001b50:	1001a126 	beq	r2,zero,80021d8 <___vfprintf_internal_r+0x1e3c>
 8001b54:	d8812117 	ldw	r2,1156(sp)
 8001b58:	1280062e 	bgeu	r2,r10,8001b74 <___vfprintf_internal_r+0x17d8>
 8001b5c:	01000c04 	movi	r4,48
 8001b60:	10c00044 	addi	r3,r2,1
 8001b64:	d8c12115 	stw	r3,1156(sp)
 8001b68:	11000005 	stb	r4,0(r2)
 8001b6c:	d8812117 	ldw	r2,1156(sp)
 8001b70:	12bffb36 	bltu	r2,r10,8001b60 <__alt_data_end+0xfc001b60>
 8001b74:	d8c13117 	ldw	r3,1220(sp)
 8001b78:	10c5c83a 	sub	r2,r2,r3
 8001b7c:	d8813315 	stw	r2,1228(sp)
 8001b80:	008011c4 	movi	r2,71
 8001b84:	98818926 	beq	r19,r2,80021ac <___vfprintf_internal_r+0x1e10>
 8001b88:	00801944 	movi	r2,101
 8001b8c:	14023c0e 	bge	r2,r16,8002480 <___vfprintf_internal_r+0x20e4>
 8001b90:	d8c12617 	ldw	r3,1176(sp)
 8001b94:	00801984 	movi	r2,102
 8001b98:	d8c13415 	stw	r3,1232(sp)
 8001b9c:	8081ef26 	beq	r16,r2,800235c <___vfprintf_internal_r+0x1fc0>
 8001ba0:	d8c13417 	ldw	r3,1232(sp)
 8001ba4:	d9013317 	ldw	r4,1228(sp)
 8001ba8:	1901e316 	blt	r3,r4,8002338 <___vfprintf_internal_r+0x1f9c>
 8001bac:	e080004c 	andi	r2,fp,1
 8001bb0:	1001f426 	beq	r2,zero,8002384 <___vfprintf_internal_r+0x1fe8>
 8001bb4:	d8c13417 	ldw	r3,1232(sp)
 8001bb8:	1c400044 	addi	r17,r3,1
 8001bbc:	8839883a 	mov	fp,r17
 8001bc0:	8801e416 	blt	r17,zero,8002354 <___vfprintf_internal_r+0x1fb8>
 8001bc4:	dd412b07 	ldb	r21,1196(sp)
 8001bc8:	a801701e 	bne	r21,zero,800218c <___vfprintf_internal_r+0x1df0>
 8001bcc:	df012b15 	stw	fp,1196(sp)
 8001bd0:	dcc12783 	ldbu	r19,1182(sp)
 8001bd4:	df012d17 	ldw	fp,1204(sp)
 8001bd8:	d8013215 	stw	zero,1224(sp)
 8001bdc:	dc812d15 	stw	r18,1204(sp)
 8001be0:	003b6e06 	br	800099c <__alt_data_end+0xfc00099c>
 8001be4:	e080040c 	andi	r2,fp,16
 8001be8:	1000b51e 	bne	r2,zero,8001ec0 <___vfprintf_internal_r+0x1b24>
 8001bec:	e080100c 	andi	r2,fp,64
 8001bf0:	10015b26 	beq	r2,zero,8002160 <___vfprintf_internal_r+0x1dc4>
 8001bf4:	d9012d17 	ldw	r4,1204(sp)
 8001bf8:	d9412f17 	ldw	r5,1212(sp)
 8001bfc:	20800017 	ldw	r2,0(r4)
 8001c00:	21000104 	addi	r4,r4,4
 8001c04:	d9012d15 	stw	r4,1204(sp)
 8001c08:	1140000d 	sth	r5,0(r2)
 8001c0c:	003a2006 	br	8000490 <__alt_data_end+0xfc000490>
 8001c10:	e0c0100c 	andi	r3,fp,64
 8001c14:	1800a226 	beq	r3,zero,8001ea0 <___vfprintf_internal_r+0x1b04>
 8001c18:	d8c12d17 	ldw	r3,1204(sp)
 8001c1c:	1480000b 	ldhu	r18,0(r2)
 8001c20:	002b883a 	mov	r21,zero
 8001c24:	18c00104 	addi	r3,r3,4
 8001c28:	d8c12d15 	stw	r3,1204(sp)
 8001c2c:	0005883a 	mov	r2,zero
 8001c30:	9007883a 	mov	r3,r18
 8001c34:	003c6906 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8001c38:	e0c0100c 	andi	r3,fp,64
 8001c3c:	18009026 	beq	r3,zero,8001e80 <___vfprintf_internal_r+0x1ae4>
 8001c40:	1480000b 	ldhu	r18,0(r2)
 8001c44:	d8812d17 	ldw	r2,1204(sp)
 8001c48:	002b883a 	mov	r21,zero
 8001c4c:	9007883a 	mov	r3,r18
 8001c50:	10800104 	addi	r2,r2,4
 8001c54:	d8812d15 	stw	r2,1204(sp)
 8001c58:	00800044 	movi	r2,1
 8001c5c:	003c5f06 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8001c60:	e0c0100c 	andi	r3,fp,64
 8001c64:	18008026 	beq	r3,zero,8001e68 <___vfprintf_internal_r+0x1acc>
 8001c68:	d9012d17 	ldw	r4,1204(sp)
 8001c6c:	1480000b 	ldhu	r18,0(r2)
 8001c70:	002b883a 	mov	r21,zero
 8001c74:	21000104 	addi	r4,r4,4
 8001c78:	d9012d15 	stw	r4,1204(sp)
 8001c7c:	003c7906 	br	8000e64 <__alt_data_end+0xfc000e64>
 8001c80:	e080100c 	andi	r2,fp,64
 8001c84:	10007126 	beq	r2,zero,8001e4c <___vfprintf_internal_r+0x1ab0>
 8001c88:	1c80000f 	ldh	r18,0(r3)
 8001c8c:	d8812d17 	ldw	r2,1204(sp)
 8001c90:	902bd7fa 	srai	r21,r18,31
 8001c94:	10800104 	addi	r2,r2,4
 8001c98:	d8812d15 	stw	r2,1204(sp)
 8001c9c:	a805883a 	mov	r2,r21
 8001ca0:	003b1a06 	br	800090c <__alt_data_end+0xfc00090c>
 8001ca4:	e4000007 	ldb	r16,0(fp)
 8001ca8:	e005883a 	mov	r2,fp
 8001cac:	003a2306 	br	800053c <__alt_data_end+0xfc00053c>
 8001cb0:	00800084 	movi	r2,2
 8001cb4:	003c4906 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8001cb8:	01020074 	movhi	r4,2049
 8001cbc:	213ce884 	addi	r4,r4,-3166
 8001cc0:	d9012c15 	stw	r4,1200(sp)
 8001cc4:	d9012c17 	ldw	r4,1200(sp)
 8001cc8:	1c47883a 	add	r3,r3,r17
 8001ccc:	10800044 	addi	r2,r2,1
 8001cd0:	41000015 	stw	r4,0(r8)
 8001cd4:	44400115 	stw	r17,4(r8)
 8001cd8:	d8c12015 	stw	r3,1152(sp)
 8001cdc:	d8811f15 	stw	r2,1148(sp)
 8001ce0:	010001c4 	movi	r4,7
 8001ce4:	20becc16 	blt	r4,r2,8001818 <__alt_data_end+0xfc001818>
 8001ce8:	42000204 	addi	r8,r8,8
 8001cec:	003ed106 	br	8001834 <__alt_data_end+0xfc001834>
 8001cf0:	01020074 	movhi	r4,2049
 8001cf4:	213ce884 	addi	r4,r4,-3166
 8001cf8:	d9012c15 	stw	r4,1200(sp)
 8001cfc:	003ba306 	br	8000b8c <__alt_data_end+0xfc000b8c>
 8001d00:	b809883a 	mov	r4,r23
 8001d04:	b00b883a 	mov	r5,r22
 8001d08:	d9811e04 	addi	r6,sp,1144
 8001d0c:	8006cd40 	call	8006cd4 <__sprint_r>
 8001d10:	103aba1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001d14:	d8c12017 	ldw	r3,1152(sp)
 8001d18:	da000404 	addi	r8,sp,16
 8001d1c:	003d6c06 	br	80012d0 <__alt_data_end+0xfc0012d0>
 8001d20:	d8811f17 	ldw	r2,1148(sp)
 8001d24:	01420074 	movhi	r5,2049
 8001d28:	01000044 	movi	r4,1
 8001d2c:	18c00044 	addi	r3,r3,1
 8001d30:	10800044 	addi	r2,r2,1
 8001d34:	297ce804 	addi	r5,r5,-3168
 8001d38:	41000115 	stw	r4,4(r8)
 8001d3c:	41400015 	stw	r5,0(r8)
 8001d40:	d8c12015 	stw	r3,1152(sp)
 8001d44:	d8811f15 	stw	r2,1148(sp)
 8001d48:	010001c4 	movi	r4,7
 8001d4c:	20806716 	blt	r4,r2,8001eec <___vfprintf_internal_r+0x1b50>
 8001d50:	42000204 	addi	r8,r8,8
 8001d54:	8000041e 	bne	r16,zero,8001d68 <___vfprintf_internal_r+0x19cc>
 8001d58:	d8813317 	ldw	r2,1228(sp)
 8001d5c:	1000021e 	bne	r2,zero,8001d68 <___vfprintf_internal_r+0x19cc>
 8001d60:	e080004c 	andi	r2,fp,1
 8001d64:	103ba026 	beq	r2,zero,8000be8 <__alt_data_end+0xfc000be8>
 8001d68:	d9013817 	ldw	r4,1248(sp)
 8001d6c:	d8811f17 	ldw	r2,1148(sp)
 8001d70:	d9413517 	ldw	r5,1236(sp)
 8001d74:	1907883a 	add	r3,r3,r4
 8001d78:	10800044 	addi	r2,r2,1
 8001d7c:	41000115 	stw	r4,4(r8)
 8001d80:	41400015 	stw	r5,0(r8)
 8001d84:	d8c12015 	stw	r3,1152(sp)
 8001d88:	d8811f15 	stw	r2,1148(sp)
 8001d8c:	010001c4 	movi	r4,7
 8001d90:	20815716 	blt	r4,r2,80022f0 <___vfprintf_internal_r+0x1f54>
 8001d94:	42000204 	addi	r8,r8,8
 8001d98:	0421c83a 	sub	r16,zero,r16
 8001d9c:	0400810e 	bge	zero,r16,8001fa4 <___vfprintf_internal_r+0x1c08>
 8001da0:	04400404 	movi	r17,16
 8001da4:	8c00bd0e 	bge	r17,r16,800209c <___vfprintf_internal_r+0x1d00>
 8001da8:	01420074 	movhi	r5,2049
 8001dac:	297ce884 	addi	r5,r5,-3166
 8001db0:	d9412c15 	stw	r5,1200(sp)
 8001db4:	04c001c4 	movi	r19,7
 8001db8:	00000306 	br	8001dc8 <___vfprintf_internal_r+0x1a2c>
 8001dbc:	42000204 	addi	r8,r8,8
 8001dc0:	843ffc04 	addi	r16,r16,-16
 8001dc4:	8c00b80e 	bge	r17,r16,80020a8 <___vfprintf_internal_r+0x1d0c>
 8001dc8:	18c00404 	addi	r3,r3,16
 8001dcc:	10800044 	addi	r2,r2,1
 8001dd0:	45000015 	stw	r20,0(r8)
 8001dd4:	44400115 	stw	r17,4(r8)
 8001dd8:	d8c12015 	stw	r3,1152(sp)
 8001ddc:	d8811f15 	stw	r2,1148(sp)
 8001de0:	98bff60e 	bge	r19,r2,8001dbc <__alt_data_end+0xfc001dbc>
 8001de4:	b809883a 	mov	r4,r23
 8001de8:	b00b883a 	mov	r5,r22
 8001dec:	d9811e04 	addi	r6,sp,1144
 8001df0:	8006cd40 	call	8006cd4 <__sprint_r>
 8001df4:	103a811e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001df8:	d8c12017 	ldw	r3,1152(sp)
 8001dfc:	d8811f17 	ldw	r2,1148(sp)
 8001e00:	da000404 	addi	r8,sp,16
 8001e04:	003fee06 	br	8001dc0 <__alt_data_end+0xfc001dc0>
 8001e08:	008011c4 	movi	r2,71
 8001e0c:	1400db16 	blt	r2,r16,800217c <___vfprintf_internal_r+0x1de0>
 8001e10:	01020074 	movhi	r4,2049
 8001e14:	213cda04 	addi	r4,r4,-3224
 8001e18:	d9013115 	stw	r4,1220(sp)
 8001e1c:	00c000c4 	movi	r3,3
 8001e20:	00bfdfc4 	movi	r2,-129
 8001e24:	d8c12b15 	stw	r3,1196(sp)
 8001e28:	e0b8703a 	and	fp,fp,r2
 8001e2c:	dcc12783 	ldbu	r19,1182(sp)
 8001e30:	dc812d15 	stw	r18,1204(sp)
 8001e34:	1823883a 	mov	r17,r3
 8001e38:	d8013215 	stw	zero,1224(sp)
 8001e3c:	d8013415 	stw	zero,1232(sp)
 8001e40:	003ad606 	br	800099c <__alt_data_end+0xfc00099c>
 8001e44:	4823883a 	mov	r17,r9
 8001e48:	003cc906 	br	8001170 <__alt_data_end+0xfc001170>
 8001e4c:	1c800017 	ldw	r18,0(r3)
 8001e50:	d8c12d17 	ldw	r3,1204(sp)
 8001e54:	902bd7fa 	srai	r21,r18,31
 8001e58:	18c00104 	addi	r3,r3,4
 8001e5c:	d8c12d15 	stw	r3,1204(sp)
 8001e60:	a805883a 	mov	r2,r21
 8001e64:	003aa906 	br	800090c <__alt_data_end+0xfc00090c>
 8001e68:	d9412d17 	ldw	r5,1204(sp)
 8001e6c:	14800017 	ldw	r18,0(r2)
 8001e70:	002b883a 	mov	r21,zero
 8001e74:	29400104 	addi	r5,r5,4
 8001e78:	d9412d15 	stw	r5,1204(sp)
 8001e7c:	003bf906 	br	8000e64 <__alt_data_end+0xfc000e64>
 8001e80:	d8c12d17 	ldw	r3,1204(sp)
 8001e84:	14800017 	ldw	r18,0(r2)
 8001e88:	002b883a 	mov	r21,zero
 8001e8c:	18c00104 	addi	r3,r3,4
 8001e90:	d8c12d15 	stw	r3,1204(sp)
 8001e94:	00800044 	movi	r2,1
 8001e98:	9007883a 	mov	r3,r18
 8001e9c:	003bcf06 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8001ea0:	d9012d17 	ldw	r4,1204(sp)
 8001ea4:	14800017 	ldw	r18,0(r2)
 8001ea8:	002b883a 	mov	r21,zero
 8001eac:	21000104 	addi	r4,r4,4
 8001eb0:	d9012d15 	stw	r4,1204(sp)
 8001eb4:	0005883a 	mov	r2,zero
 8001eb8:	9007883a 	mov	r3,r18
 8001ebc:	003bc706 	br	8000ddc <__alt_data_end+0xfc000ddc>
 8001ec0:	d9412d17 	ldw	r5,1204(sp)
 8001ec4:	d8c12f17 	ldw	r3,1212(sp)
 8001ec8:	28800017 	ldw	r2,0(r5)
 8001ecc:	29400104 	addi	r5,r5,4
 8001ed0:	d9412d15 	stw	r5,1204(sp)
 8001ed4:	10c00015 	stw	r3,0(r2)
 8001ed8:	00396d06 	br	8000490 <__alt_data_end+0xfc000490>
 8001edc:	01020074 	movhi	r4,2049
 8001ee0:	213cd804 	addi	r4,r4,-3232
 8001ee4:	d9013115 	stw	r4,1220(sp)
 8001ee8:	003ba206 	br	8000d74 <__alt_data_end+0xfc000d74>
 8001eec:	b809883a 	mov	r4,r23
 8001ef0:	b00b883a 	mov	r5,r22
 8001ef4:	d9811e04 	addi	r6,sp,1144
 8001ef8:	8006cd40 	call	8006cd4 <__sprint_r>
 8001efc:	103a3f1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001f00:	dc012617 	ldw	r16,1176(sp)
 8001f04:	d8c12017 	ldw	r3,1152(sp)
 8001f08:	da000404 	addi	r8,sp,16
 8001f0c:	003f9106 	br	8001d54 <__alt_data_end+0xfc001d54>
 8001f10:	e0800044 	addi	r2,fp,1
 8001f14:	9cc00814 	ori	r19,r19,32
 8001f18:	e4000047 	ldb	r16,1(fp)
 8001f1c:	00398706 	br	800053c <__alt_data_end+0xfc00053c>
 8001f20:	d8812e17 	ldw	r2,1208(sp)
 8001f24:	d8c12d15 	stw	r3,1204(sp)
 8001f28:	0085c83a 	sub	r2,zero,r2
 8001f2c:	d8812e15 	stw	r2,1208(sp)
 8001f30:	e005883a 	mov	r2,fp
 8001f34:	003a3a06 	br	8000820 <__alt_data_end+0xfc000820>
 8001f38:	b809883a 	mov	r4,r23
 8001f3c:	b00b883a 	mov	r5,r22
 8001f40:	d9811e04 	addi	r6,sp,1144
 8001f44:	8006cd40 	call	8006cd4 <__sprint_r>
 8001f48:	103a2c1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001f4c:	d8c12017 	ldw	r3,1152(sp)
 8001f50:	da000404 	addi	r8,sp,16
 8001f54:	003cf006 	br	8001318 <__alt_data_end+0xfc001318>
 8001f58:	d8c12817 	ldw	r3,1184(sp)
 8001f5c:	d9013117 	ldw	r4,1220(sp)
 8001f60:	1923c83a 	sub	r17,r3,r4
 8001f64:	003a8806 	br	8000988 <__alt_data_end+0xfc000988>
 8001f68:	da013f15 	stw	r8,1276(sp)
 8001f6c:	8006b400 	call	8006b40 <strlen>
 8001f70:	1023883a 	mov	r17,r2
 8001f74:	da013f17 	ldw	r8,1276(sp)
 8001f78:	883c7f0e 	bge	r17,zero,8001178 <__alt_data_end+0xfc001178>
 8001f7c:	0005883a 	mov	r2,zero
 8001f80:	003c7d06 	br	8001178 <__alt_data_end+0xfc001178>
 8001f84:	b809883a 	mov	r4,r23
 8001f88:	b00b883a 	mov	r5,r22
 8001f8c:	d9811e04 	addi	r6,sp,1144
 8001f90:	8006cd40 	call	8006cd4 <__sprint_r>
 8001f94:	103a191e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8001f98:	d8c12017 	ldw	r3,1152(sp)
 8001f9c:	d8811f17 	ldw	r2,1148(sp)
 8001fa0:	da000404 	addi	r8,sp,16
 8001fa4:	d9413317 	ldw	r5,1228(sp)
 8001fa8:	d9013117 	ldw	r4,1220(sp)
 8001fac:	10800044 	addi	r2,r2,1
 8001fb0:	28c7883a 	add	r3,r5,r3
 8001fb4:	41000015 	stw	r4,0(r8)
 8001fb8:	41400115 	stw	r5,4(r8)
 8001fbc:	d8c12015 	stw	r3,1152(sp)
 8001fc0:	d8811f15 	stw	r2,1148(sp)
 8001fc4:	010001c4 	movi	r4,7
 8001fc8:	20bb060e 	bge	r4,r2,8000be4 <__alt_data_end+0xfc000be4>
 8001fcc:	003d6206 	br	8001558 <__alt_data_end+0xfc001558>
 8001fd0:	01020074 	movhi	r4,2049
 8001fd4:	213cec84 	addi	r4,r4,-3150
 8001fd8:	d9013615 	stw	r4,1240(sp)
 8001fdc:	003aa306 	br	8000a6c <__alt_data_end+0xfc000a6c>
 8001fe0:	d8812604 	addi	r2,sp,1176
 8001fe4:	d8800115 	stw	r2,4(sp)
 8001fe8:	d9413717 	ldw	r5,1244(sp)
 8001fec:	d8812504 	addi	r2,sp,1172
 8001ff0:	d8800215 	stw	r2,8(sp)
 8001ff4:	d8812104 	addi	r2,sp,1156
 8001ff8:	da400015 	stw	r9,0(sp)
 8001ffc:	d8800315 	stw	r2,12(sp)
 8002000:	b809883a 	mov	r4,r23
 8002004:	880d883a 	mov	r6,r17
 8002008:	01c000c4 	movi	r7,3
 800200c:	da013f15 	stw	r8,1276(sp)
 8002010:	da413e15 	stw	r9,1272(sp)
 8002014:	80028140 	call	8002814 <_dtoa_r>
 8002018:	da413e17 	ldw	r9,1272(sp)
 800201c:	da013f17 	ldw	r8,1276(sp)
 8002020:	d8813115 	stw	r2,1220(sp)
 8002024:	482b883a 	mov	r21,r9
 8002028:	d8c13117 	ldw	r3,1220(sp)
 800202c:	00801184 	movi	r2,70
 8002030:	1d55883a 	add	r10,r3,r21
 8002034:	98bebb1e 	bne	r19,r2,8001b24 <__alt_data_end+0xfc001b24>
 8002038:	19000007 	ldb	r4,0(r3)
 800203c:	00800c04 	movi	r2,48
 8002040:	2080dd26 	beq	r4,r2,80023b8 <___vfprintf_internal_r+0x201c>
 8002044:	d8c12617 	ldw	r3,1176(sp)
 8002048:	50d5883a 	add	r10,r10,r3
 800204c:	003eb506 	br	8001b24 <__alt_data_end+0xfc001b24>
 8002050:	0023883a 	mov	r17,zero
 8002054:	003d9b06 	br	80016c4 <__alt_data_end+0xfc0016c4>
 8002058:	b809883a 	mov	r4,r23
 800205c:	b00b883a 	mov	r5,r22
 8002060:	d9811e04 	addi	r6,sp,1144
 8002064:	8006cd40 	call	8006cd4 <__sprint_r>
 8002068:	1039e41e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800206c:	d8c12017 	ldw	r3,1152(sp)
 8002070:	da000404 	addi	r8,sp,16
 8002074:	003d9206 	br	80016c0 <__alt_data_end+0xfc0016c0>
 8002078:	b809883a 	mov	r4,r23
 800207c:	b00b883a 	mov	r5,r22
 8002080:	d9811e04 	addi	r6,sp,1144
 8002084:	8006cd40 	call	8006cd4 <__sprint_r>
 8002088:	1039dc1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 800208c:	d8812617 	ldw	r2,1176(sp)
 8002090:	d8c12017 	ldw	r3,1152(sp)
 8002094:	da000404 	addi	r8,sp,16
 8002098:	003dfb06 	br	8001888 <__alt_data_end+0xfc001888>
 800209c:	01020074 	movhi	r4,2049
 80020a0:	213ce884 	addi	r4,r4,-3166
 80020a4:	d9012c15 	stw	r4,1200(sp)
 80020a8:	d9012c17 	ldw	r4,1200(sp)
 80020ac:	1c07883a 	add	r3,r3,r16
 80020b0:	10800044 	addi	r2,r2,1
 80020b4:	41000015 	stw	r4,0(r8)
 80020b8:	44000115 	stw	r16,4(r8)
 80020bc:	d8c12015 	stw	r3,1152(sp)
 80020c0:	d8811f15 	stw	r2,1148(sp)
 80020c4:	010001c4 	movi	r4,7
 80020c8:	20bfae16 	blt	r4,r2,8001f84 <__alt_data_end+0xfc001f84>
 80020cc:	42000204 	addi	r8,r8,8
 80020d0:	003fb406 	br	8001fa4 <__alt_data_end+0xfc001fa4>
 80020d4:	0021883a 	mov	r16,zero
 80020d8:	003dfd06 	br	80018d0 <__alt_data_end+0xfc0018d0>
 80020dc:	01420074 	movhi	r5,2049
 80020e0:	297cec84 	addi	r5,r5,-3150
 80020e4:	d9413615 	stw	r5,1240(sp)
 80020e8:	003ae306 	br	8000c78 <__alt_data_end+0xfc000c78>
 80020ec:	b809883a 	mov	r4,r23
 80020f0:	b00b883a 	mov	r5,r22
 80020f4:	d9811e04 	addi	r6,sp,1144
 80020f8:	8006cd40 	call	8006cd4 <__sprint_r>
 80020fc:	1039bf1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8002100:	d8812617 	ldw	r2,1176(sp)
 8002104:	d9413317 	ldw	r5,1228(sp)
 8002108:	d8c12017 	ldw	r3,1152(sp)
 800210c:	da000404 	addi	r8,sp,16
 8002110:	2885c83a 	sub	r2,r5,r2
 8002114:	003ded06 	br	80018cc <__alt_data_end+0xfc0018cc>
 8002118:	00800184 	movi	r2,6
 800211c:	1240012e 	bgeu	r2,r9,8002124 <___vfprintf_internal_r+0x1d88>
 8002120:	1013883a 	mov	r9,r2
 8002124:	4823883a 	mov	r17,r9
 8002128:	4805883a 	mov	r2,r9
 800212c:	4800b216 	blt	r9,zero,80023f8 <___vfprintf_internal_r+0x205c>
 8002130:	01420074 	movhi	r5,2049
 8002134:	297ce604 	addi	r5,r5,-3176
 8002138:	d8812b15 	stw	r2,1196(sp)
 800213c:	dc812d15 	stw	r18,1204(sp)
 8002140:	d8013215 	stw	zero,1224(sp)
 8002144:	d8013415 	stw	zero,1232(sp)
 8002148:	d9413115 	stw	r5,1220(sp)
 800214c:	0005883a 	mov	r2,zero
 8002150:	003a1906 	br	80009b8 <__alt_data_end+0xfc0009b8>
 8002154:	04c00b44 	movi	r19,45
 8002158:	dcc12785 	stb	r19,1182(sp)
 800215c:	003b0006 	br	8000d60 <__alt_data_end+0xfc000d60>
 8002160:	d8c12d17 	ldw	r3,1204(sp)
 8002164:	d9012f17 	ldw	r4,1212(sp)
 8002168:	18800017 	ldw	r2,0(r3)
 800216c:	18c00104 	addi	r3,r3,4
 8002170:	d8c12d15 	stw	r3,1204(sp)
 8002174:	11000015 	stw	r4,0(r2)
 8002178:	0038c506 	br	8000490 <__alt_data_end+0xfc000490>
 800217c:	01420074 	movhi	r5,2049
 8002180:	297cdb04 	addi	r5,r5,-3220
 8002184:	d9413115 	stw	r5,1220(sp)
 8002188:	003f2406 	br	8001e1c <__alt_data_end+0xfc001e1c>
 800218c:	00800b44 	movi	r2,45
 8002190:	d8812785 	stb	r2,1182(sp)
 8002194:	df012b15 	stw	fp,1196(sp)
 8002198:	d8013215 	stw	zero,1224(sp)
 800219c:	df012d17 	ldw	fp,1204(sp)
 80021a0:	00800b44 	movi	r2,45
 80021a4:	dc812d15 	stw	r18,1204(sp)
 80021a8:	003a0006 	br	80009ac <__alt_data_end+0xfc0009ac>
 80021ac:	d8c12617 	ldw	r3,1176(sp)
 80021b0:	00bfff44 	movi	r2,-3
 80021b4:	18800a16 	blt	r3,r2,80021e0 <___vfprintf_internal_r+0x1e44>
 80021b8:	48c00916 	blt	r9,r3,80021e0 <___vfprintf_internal_r+0x1e44>
 80021bc:	d8c13415 	stw	r3,1232(sp)
 80021c0:	040019c4 	movi	r16,103
 80021c4:	003e7606 	br	8001ba0 <__alt_data_end+0xfc001ba0>
 80021c8:	01020074 	movhi	r4,2049
 80021cc:	213ce884 	addi	r4,r4,-3166
 80021d0:	d9012c15 	stw	r4,1200(sp)
 80021d4:	003c8e06 	br	8001410 <__alt_data_end+0xfc001410>
 80021d8:	5005883a 	mov	r2,r10
 80021dc:	003e6506 	br	8001b74 <__alt_data_end+0xfc001b74>
 80021e0:	843fff84 	addi	r16,r16,-2
 80021e4:	1d7fffc4 	addi	r21,r3,-1
 80021e8:	dd412615 	stw	r21,1176(sp)
 80021ec:	dc0122c5 	stb	r16,1163(sp)
 80021f0:	a8009216 	blt	r21,zero,800243c <___vfprintf_internal_r+0x20a0>
 80021f4:	00800ac4 	movi	r2,43
 80021f8:	d8812305 	stb	r2,1164(sp)
 80021fc:	00800244 	movi	r2,9
 8002200:	1540660e 	bge	r2,r21,800239c <___vfprintf_internal_r+0x2000>
 8002204:	dcc122c4 	addi	r19,sp,1163
 8002208:	dc012c15 	stw	r16,1200(sp)
 800220c:	4023883a 	mov	r17,r8
 8002210:	9821883a 	mov	r16,r19
 8002214:	a809883a 	mov	r4,r21
 8002218:	01400284 	movi	r5,10
 800221c:	800a33c0 	call	800a33c <__modsi3>
 8002220:	10800c04 	addi	r2,r2,48
 8002224:	843fffc4 	addi	r16,r16,-1
 8002228:	a809883a 	mov	r4,r21
 800222c:	01400284 	movi	r5,10
 8002230:	80800005 	stb	r2,0(r16)
 8002234:	800a2e80 	call	800a2e8 <__divsi3>
 8002238:	01000244 	movi	r4,9
 800223c:	102b883a 	mov	r21,r2
 8002240:	20bff416 	blt	r4,r2,8002214 <__alt_data_end+0xfc002214>
 8002244:	8811883a 	mov	r8,r17
 8002248:	10800c04 	addi	r2,r2,48
 800224c:	8023883a 	mov	r17,r16
 8002250:	897fffc4 	addi	r5,r17,-1
 8002254:	88bfffc5 	stb	r2,-1(r17)
 8002258:	dc012c17 	ldw	r16,1200(sp)
 800225c:	2cc08a2e 	bgeu	r5,r19,8002488 <___vfprintf_internal_r+0x20ec>
 8002260:	d9812384 	addi	r6,sp,1166
 8002264:	344dc83a 	sub	r6,r6,r17
 8002268:	d9012344 	addi	r4,sp,1165
 800226c:	998d883a 	add	r6,r19,r6
 8002270:	00000106 	br	8002278 <___vfprintf_internal_r+0x1edc>
 8002274:	28800003 	ldbu	r2,0(r5)
 8002278:	20800005 	stb	r2,0(r4)
 800227c:	21000044 	addi	r4,r4,1
 8002280:	29400044 	addi	r5,r5,1
 8002284:	21bffb1e 	bne	r4,r6,8002274 <__alt_data_end+0xfc002274>
 8002288:	d8812304 	addi	r2,sp,1164
 800228c:	1445c83a 	sub	r2,r2,r17
 8002290:	d9412344 	addi	r5,sp,1165
 8002294:	2885883a 	add	r2,r5,r2
 8002298:	14e7c83a 	sub	r19,r2,r19
 800229c:	d8813317 	ldw	r2,1228(sp)
 80022a0:	d8c13317 	ldw	r3,1228(sp)
 80022a4:	dcc13a15 	stw	r19,1256(sp)
 80022a8:	14e3883a 	add	r17,r2,r19
 80022ac:	00800044 	movi	r2,1
 80022b0:	10c0550e 	bge	r2,r3,8002408 <___vfprintf_internal_r+0x206c>
 80022b4:	8c400044 	addi	r17,r17,1
 80022b8:	8839883a 	mov	fp,r17
 80022bc:	88005016 	blt	r17,zero,8002400 <___vfprintf_internal_r+0x2064>
 80022c0:	d8013415 	stw	zero,1232(sp)
 80022c4:	003e3f06 	br	8001bc4 <__alt_data_end+0xfc001bc4>
 80022c8:	da412b15 	stw	r9,1196(sp)
 80022cc:	dcc12783 	ldbu	r19,1182(sp)
 80022d0:	4823883a 	mov	r17,r9
 80022d4:	dc812d15 	stw	r18,1204(sp)
 80022d8:	d8013215 	stw	zero,1224(sp)
 80022dc:	d8013415 	stw	zero,1232(sp)
 80022e0:	0039ae06 	br	800099c <__alt_data_end+0xfc00099c>
 80022e4:	483de91e 	bne	r9,zero,8001a8c <__alt_data_end+0xfc001a8c>
 80022e8:	8813883a 	mov	r9,r17
 80022ec:	003de706 	br	8001a8c <__alt_data_end+0xfc001a8c>
 80022f0:	b809883a 	mov	r4,r23
 80022f4:	b00b883a 	mov	r5,r22
 80022f8:	d9811e04 	addi	r6,sp,1144
 80022fc:	8006cd40 	call	8006cd4 <__sprint_r>
 8002300:	10393e1e 	bne	r2,zero,80007fc <__alt_data_end+0xfc0007fc>
 8002304:	dc012617 	ldw	r16,1176(sp)
 8002308:	d8c12017 	ldw	r3,1152(sp)
 800230c:	d8811f17 	ldw	r2,1148(sp)
 8002310:	da000404 	addi	r8,sp,16
 8002314:	003ea006 	br	8001d98 <__alt_data_end+0xfc001d98>
 8002318:	00c00b44 	movi	r3,45
 800231c:	2460003c 	xorhi	r17,r4,32768
 8002320:	d8c12b05 	stb	r3,1196(sp)
 8002324:	003ddf06 	br	8001aa4 <__alt_data_end+0xfc001aa4>
 8002328:	02400184 	movi	r9,6
 800232c:	003dd706 	br	8001a8c <__alt_data_end+0xfc001a8c>
 8002330:	4d400044 	addi	r21,r9,1
 8002334:	003de206 	br	8001ac0 <__alt_data_end+0xfc001ac0>
 8002338:	d8c13417 	ldw	r3,1232(sp)
 800233c:	00c0490e 	bge	zero,r3,8002464 <___vfprintf_internal_r+0x20c8>
 8002340:	04400044 	movi	r17,1
 8002344:	d9013317 	ldw	r4,1228(sp)
 8002348:	8923883a 	add	r17,r17,r4
 800234c:	8839883a 	mov	fp,r17
 8002350:	883e1c0e 	bge	r17,zero,8001bc4 <__alt_data_end+0xfc001bc4>
 8002354:	0039883a 	mov	fp,zero
 8002358:	003e1a06 	br	8001bc4 <__alt_data_end+0xfc001bc4>
 800235c:	00c03b0e 	bge	zero,r3,800244c <___vfprintf_internal_r+0x20b0>
 8002360:	4800021e 	bne	r9,zero,800236c <___vfprintf_internal_r+0x1fd0>
 8002364:	e080004c 	andi	r2,fp,1
 8002368:	10000626 	beq	r2,zero,8002384 <___vfprintf_internal_r+0x1fe8>
 800236c:	d8c13417 	ldw	r3,1232(sp)
 8002370:	4a400044 	addi	r9,r9,1
 8002374:	1a63883a 	add	r17,r3,r9
 8002378:	8839883a 	mov	fp,r17
 800237c:	883e110e 	bge	r17,zero,8001bc4 <__alt_data_end+0xfc001bc4>
 8002380:	003ff406 	br	8002354 <__alt_data_end+0xfc002354>
 8002384:	1839883a 	mov	fp,r3
 8002388:	18004116 	blt	r3,zero,8002490 <___vfprintf_internal_r+0x20f4>
 800238c:	dc413417 	ldw	r17,1232(sp)
 8002390:	003e0c06 	br	8001bc4 <__alt_data_end+0xfc001bc4>
 8002394:	d8812117 	ldw	r2,1156(sp)
 8002398:	003df606 	br	8001b74 <__alt_data_end+0xfc001b74>
 800239c:	00800c04 	movi	r2,48
 80023a0:	a8c00c04 	addi	r3,r21,48
 80023a4:	d8812345 	stb	r2,1165(sp)
 80023a8:	d8c12385 	stb	r3,1166(sp)
 80023ac:	d88123c4 	addi	r2,sp,1167
 80023b0:	dcc122c4 	addi	r19,sp,1163
 80023b4:	003fb806 	br	8002298 <__alt_data_end+0xfc002298>
 80023b8:	d9013717 	ldw	r4,1244(sp)
 80023bc:	880b883a 	mov	r5,r17
 80023c0:	000d883a 	mov	r6,zero
 80023c4:	000f883a 	mov	r7,zero
 80023c8:	da013f15 	stw	r8,1276(sp)
 80023cc:	da413e15 	stw	r9,1272(sp)
 80023d0:	da813d15 	stw	r10,1268(sp)
 80023d4:	800b5ec0 	call	800b5ec <__eqdf2>
 80023d8:	da013f17 	ldw	r8,1276(sp)
 80023dc:	da413e17 	ldw	r9,1272(sp)
 80023e0:	da813d17 	ldw	r10,1268(sp)
 80023e4:	103f1726 	beq	r2,zero,8002044 <__alt_data_end+0xfc002044>
 80023e8:	00800044 	movi	r2,1
 80023ec:	1547c83a 	sub	r3,r2,r21
 80023f0:	d8c12615 	stw	r3,1176(sp)
 80023f4:	003f1406 	br	8002048 <__alt_data_end+0xfc002048>
 80023f8:	0005883a 	mov	r2,zero
 80023fc:	003f4c06 	br	8002130 <__alt_data_end+0xfc002130>
 8002400:	0039883a 	mov	fp,zero
 8002404:	003fae06 	br	80022c0 <__alt_data_end+0xfc0022c0>
 8002408:	e084703a 	and	r2,fp,r2
 800240c:	103faa26 	beq	r2,zero,80022b8 <__alt_data_end+0xfc0022b8>
 8002410:	003fa806 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002414:	d9412d17 	ldw	r5,1204(sp)
 8002418:	2a400017 	ldw	r9,0(r5)
 800241c:	28c00104 	addi	r3,r5,4
 8002420:	d8c12d15 	stw	r3,1204(sp)
 8002424:	483ebc0e 	bge	r9,zero,8001f18 <__alt_data_end+0xfc001f18>
 8002428:	027fffc4 	movi	r9,-1
 800242c:	e4000047 	ldb	r16,1(fp)
 8002430:	00384206 	br	800053c <__alt_data_end+0xfc00053c>
 8002434:	043fffc4 	movi	r16,-1
 8002438:	0038ce06 	br	8000774 <__alt_data_end+0xfc000774>
 800243c:	00800b44 	movi	r2,45
 8002440:	056bc83a 	sub	r21,zero,r21
 8002444:	d8812305 	stb	r2,1164(sp)
 8002448:	003f6c06 	br	80021fc <__alt_data_end+0xfc0021fc>
 800244c:	4800081e 	bne	r9,zero,8002470 <___vfprintf_internal_r+0x20d4>
 8002450:	e080004c 	andi	r2,fp,1
 8002454:	1000061e 	bne	r2,zero,8002470 <___vfprintf_internal_r+0x20d4>
 8002458:	07000044 	movi	fp,1
 800245c:	e023883a 	mov	r17,fp
 8002460:	003dd806 	br	8001bc4 <__alt_data_end+0xfc001bc4>
 8002464:	04400084 	movi	r17,2
 8002468:	88e3c83a 	sub	r17,r17,r3
 800246c:	003fb506 	br	8002344 <__alt_data_end+0xfc002344>
 8002470:	4c400084 	addi	r17,r9,2
 8002474:	8839883a 	mov	fp,r17
 8002478:	883dd20e 	bge	r17,zero,8001bc4 <__alt_data_end+0xfc001bc4>
 800247c:	003fb506 	br	8002354 <__alt_data_end+0xfc002354>
 8002480:	d8c12617 	ldw	r3,1176(sp)
 8002484:	003f5706 	br	80021e4 <__alt_data_end+0xfc0021e4>
 8002488:	d8812344 	addi	r2,sp,1165
 800248c:	003f8206 	br	8002298 <__alt_data_end+0xfc002298>
 8002490:	0039883a 	mov	fp,zero
 8002494:	003fbd06 	br	800238c <__alt_data_end+0xfc00238c>

08002498 <__vfprintf_internal>:
 8002498:	2007883a 	mov	r3,r4
 800249c:	01020074 	movhi	r4,2049
 80024a0:	21044304 	addi	r4,r4,4364
 80024a4:	21000017 	ldw	r4,0(r4)
 80024a8:	2805883a 	mov	r2,r5
 80024ac:	300f883a 	mov	r7,r6
 80024b0:	180b883a 	mov	r5,r3
 80024b4:	100d883a 	mov	r6,r2
 80024b8:	800039c1 	jmpi	800039c <___vfprintf_internal_r>

080024bc <__swsetup_r>:
 80024bc:	00820074 	movhi	r2,2049
 80024c0:	defffd04 	addi	sp,sp,-12
 80024c4:	10844304 	addi	r2,r2,4364
 80024c8:	dc400115 	stw	r17,4(sp)
 80024cc:	2023883a 	mov	r17,r4
 80024d0:	11000017 	ldw	r4,0(r2)
 80024d4:	dc000015 	stw	r16,0(sp)
 80024d8:	dfc00215 	stw	ra,8(sp)
 80024dc:	2821883a 	mov	r16,r5
 80024e0:	20000226 	beq	r4,zero,80024ec <__swsetup_r+0x30>
 80024e4:	20c00e17 	ldw	r3,56(r4)
 80024e8:	18002e26 	beq	r3,zero,80025a4 <__swsetup_r+0xe8>
 80024ec:	8080030b 	ldhu	r2,12(r16)
 80024f0:	10c0020c 	andi	r3,r2,8
 80024f4:	100d883a 	mov	r6,r2
 80024f8:	18000f26 	beq	r3,zero,8002538 <__swsetup_r+0x7c>
 80024fc:	80c00417 	ldw	r3,16(r16)
 8002500:	18001526 	beq	r3,zero,8002558 <__swsetup_r+0x9c>
 8002504:	1100004c 	andi	r4,r2,1
 8002508:	20001c1e 	bne	r4,zero,800257c <__swsetup_r+0xc0>
 800250c:	1080008c 	andi	r2,r2,2
 8002510:	1000261e 	bne	r2,zero,80025ac <__swsetup_r+0xf0>
 8002514:	80800517 	ldw	r2,20(r16)
 8002518:	80800215 	stw	r2,8(r16)
 800251c:	18001c26 	beq	r3,zero,8002590 <__swsetup_r+0xd4>
 8002520:	0005883a 	mov	r2,zero
 8002524:	dfc00217 	ldw	ra,8(sp)
 8002528:	dc400117 	ldw	r17,4(sp)
 800252c:	dc000017 	ldw	r16,0(sp)
 8002530:	dec00304 	addi	sp,sp,12
 8002534:	f800283a 	ret
 8002538:	3080040c 	andi	r2,r6,16
 800253c:	10001726 	beq	r2,zero,800259c <__swsetup_r+0xe0>
 8002540:	3080010c 	andi	r2,r6,4
 8002544:	10001b1e 	bne	r2,zero,80025b4 <__swsetup_r+0xf8>
 8002548:	80c00417 	ldw	r3,16(r16)
 800254c:	30800214 	ori	r2,r6,8
 8002550:	8080030d 	sth	r2,12(r16)
 8002554:	183feb1e 	bne	r3,zero,8002504 <__alt_data_end+0xfc002504>
 8002558:	1140a00c 	andi	r5,r2,640
 800255c:	01008004 	movi	r4,512
 8002560:	293fe826 	beq	r5,r4,8002504 <__alt_data_end+0xfc002504>
 8002564:	8809883a 	mov	r4,r17
 8002568:	800b883a 	mov	r5,r16
 800256c:	8004bac0 	call	8004bac <__smakebuf_r>
 8002570:	8080030b 	ldhu	r2,12(r16)
 8002574:	80c00417 	ldw	r3,16(r16)
 8002578:	003fe206 	br	8002504 <__alt_data_end+0xfc002504>
 800257c:	80800517 	ldw	r2,20(r16)
 8002580:	80000215 	stw	zero,8(r16)
 8002584:	0085c83a 	sub	r2,zero,r2
 8002588:	80800615 	stw	r2,24(r16)
 800258c:	183fe41e 	bne	r3,zero,8002520 <__alt_data_end+0xfc002520>
 8002590:	8080030b 	ldhu	r2,12(r16)
 8002594:	1080200c 	andi	r2,r2,128
 8002598:	103fe226 	beq	r2,zero,8002524 <__alt_data_end+0xfc002524>
 800259c:	00bfffc4 	movi	r2,-1
 80025a0:	003fe006 	br	8002524 <__alt_data_end+0xfc002524>
 80025a4:	80044f80 	call	80044f8 <__sinit>
 80025a8:	003fd006 	br	80024ec <__alt_data_end+0xfc0024ec>
 80025ac:	0005883a 	mov	r2,zero
 80025b0:	003fd906 	br	8002518 <__alt_data_end+0xfc002518>
 80025b4:	81400c17 	ldw	r5,48(r16)
 80025b8:	28000626 	beq	r5,zero,80025d4 <__swsetup_r+0x118>
 80025bc:	80801004 	addi	r2,r16,64
 80025c0:	28800326 	beq	r5,r2,80025d0 <__swsetup_r+0x114>
 80025c4:	8809883a 	mov	r4,r17
 80025c8:	800466c0 	call	800466c <_free_r>
 80025cc:	8180030b 	ldhu	r6,12(r16)
 80025d0:	80000c15 	stw	zero,48(r16)
 80025d4:	80c00417 	ldw	r3,16(r16)
 80025d8:	00bff6c4 	movi	r2,-37
 80025dc:	118c703a 	and	r6,r2,r6
 80025e0:	80000115 	stw	zero,4(r16)
 80025e4:	80c00015 	stw	r3,0(r16)
 80025e8:	003fd806 	br	800254c <__alt_data_end+0xfc00254c>

080025ec <quorem>:
 80025ec:	defff204 	addi	sp,sp,-56
 80025f0:	ddc00b15 	stw	r23,44(sp)
 80025f4:	20800417 	ldw	r2,16(r4)
 80025f8:	2dc00417 	ldw	r23,16(r5)
 80025fc:	dfc00d15 	stw	ra,52(sp)
 8002600:	df000c15 	stw	fp,48(sp)
 8002604:	dd800a15 	stw	r22,40(sp)
 8002608:	dd400915 	stw	r21,36(sp)
 800260c:	dd000815 	stw	r20,32(sp)
 8002610:	dcc00715 	stw	r19,28(sp)
 8002614:	dc800615 	stw	r18,24(sp)
 8002618:	dc400515 	stw	r17,20(sp)
 800261c:	dc000415 	stw	r16,16(sp)
 8002620:	15c07a16 	blt	r2,r23,800280c <quorem+0x220>
 8002624:	bdffffc4 	addi	r23,r23,-1
 8002628:	bde9883a 	add	r20,r23,r23
 800262c:	28c00504 	addi	r3,r5,20
 8002630:	a529883a 	add	r20,r20,r20
 8002634:	1d39883a 	add	fp,r3,r20
 8002638:	24c00504 	addi	r19,r4,20
 800263c:	d9400215 	stw	r5,8(sp)
 8002640:	9d29883a 	add	r20,r19,r20
 8002644:	e1400017 	ldw	r5,0(fp)
 8002648:	d9000015 	stw	r4,0(sp)
 800264c:	a1000017 	ldw	r4,0(r20)
 8002650:	29400044 	addi	r5,r5,1
 8002654:	d8c00115 	stw	r3,4(sp)
 8002658:	dd000315 	stw	r20,12(sp)
 800265c:	800a3980 	call	800a398 <__udivsi3>
 8002660:	1025883a 	mov	r18,r2
 8002664:	10003026 	beq	r2,zero,8002728 <quorem+0x13c>
 8002668:	dc400117 	ldw	r17,4(sp)
 800266c:	9829883a 	mov	r20,r19
 8002670:	002d883a 	mov	r22,zero
 8002674:	0021883a 	mov	r16,zero
 8002678:	8d400017 	ldw	r21,0(r17)
 800267c:	900b883a 	mov	r5,r18
 8002680:	8c400104 	addi	r17,r17,4
 8002684:	a93fffcc 	andi	r4,r21,65535
 8002688:	800a3a80 	call	800a3a8 <__mulsi3>
 800268c:	a808d43a 	srli	r4,r21,16
 8002690:	900b883a 	mov	r5,r18
 8002694:	b0ad883a 	add	r22,r22,r2
 8002698:	800a3a80 	call	800a3a8 <__mulsi3>
 800269c:	a1000017 	ldw	r4,0(r20)
 80026a0:	b00cd43a 	srli	r6,r22,16
 80026a4:	b0ffffcc 	andi	r3,r22,65535
 80026a8:	217fffcc 	andi	r5,r4,65535
 80026ac:	2c21883a 	add	r16,r5,r16
 80026b0:	80c7c83a 	sub	r3,r16,r3
 80026b4:	2008d43a 	srli	r4,r4,16
 80026b8:	3085883a 	add	r2,r6,r2
 80026bc:	1821d43a 	srai	r16,r3,16
 80026c0:	117fffcc 	andi	r5,r2,65535
 80026c4:	2149c83a 	sub	r4,r4,r5
 80026c8:	2421883a 	add	r16,r4,r16
 80026cc:	8008943a 	slli	r4,r16,16
 80026d0:	18ffffcc 	andi	r3,r3,65535
 80026d4:	102cd43a 	srli	r22,r2,16
 80026d8:	20c8b03a 	or	r4,r4,r3
 80026dc:	a1000015 	stw	r4,0(r20)
 80026e0:	8021d43a 	srai	r16,r16,16
 80026e4:	a5000104 	addi	r20,r20,4
 80026e8:	e47fe32e 	bgeu	fp,r17,8002678 <__alt_data_end+0xfc002678>
 80026ec:	d8c00317 	ldw	r3,12(sp)
 80026f0:	18800017 	ldw	r2,0(r3)
 80026f4:	10000c1e 	bne	r2,zero,8002728 <quorem+0x13c>
 80026f8:	18bfff04 	addi	r2,r3,-4
 80026fc:	9880082e 	bgeu	r19,r2,8002720 <quorem+0x134>
 8002700:	18ffff17 	ldw	r3,-4(r3)
 8002704:	18000326 	beq	r3,zero,8002714 <quorem+0x128>
 8002708:	00000506 	br	8002720 <quorem+0x134>
 800270c:	10c00017 	ldw	r3,0(r2)
 8002710:	1800031e 	bne	r3,zero,8002720 <quorem+0x134>
 8002714:	10bfff04 	addi	r2,r2,-4
 8002718:	bdffffc4 	addi	r23,r23,-1
 800271c:	98bffb36 	bltu	r19,r2,800270c <__alt_data_end+0xfc00270c>
 8002720:	d8c00017 	ldw	r3,0(sp)
 8002724:	1dc00415 	stw	r23,16(r3)
 8002728:	d9000017 	ldw	r4,0(sp)
 800272c:	d9400217 	ldw	r5,8(sp)
 8002730:	80061cc0 	call	80061cc <__mcmp>
 8002734:	10002816 	blt	r2,zero,80027d8 <quorem+0x1ec>
 8002738:	dc400117 	ldw	r17,4(sp)
 800273c:	94800044 	addi	r18,r18,1
 8002740:	980d883a 	mov	r6,r19
 8002744:	0007883a 	mov	r3,zero
 8002748:	31000017 	ldw	r4,0(r6)
 800274c:	89400017 	ldw	r5,0(r17)
 8002750:	31800104 	addi	r6,r6,4
 8002754:	20bfffcc 	andi	r2,r4,65535
 8002758:	10c7883a 	add	r3,r2,r3
 800275c:	28bfffcc 	andi	r2,r5,65535
 8002760:	1885c83a 	sub	r2,r3,r2
 8002764:	280ad43a 	srli	r5,r5,16
 8002768:	2008d43a 	srli	r4,r4,16
 800276c:	1007d43a 	srai	r3,r2,16
 8002770:	10bfffcc 	andi	r2,r2,65535
 8002774:	2149c83a 	sub	r4,r4,r5
 8002778:	20c9883a 	add	r4,r4,r3
 800277c:	200a943a 	slli	r5,r4,16
 8002780:	8c400104 	addi	r17,r17,4
 8002784:	2007d43a 	srai	r3,r4,16
 8002788:	2884b03a 	or	r2,r5,r2
 800278c:	30bfff15 	stw	r2,-4(r6)
 8002790:	e47fed2e 	bgeu	fp,r17,8002748 <__alt_data_end+0xfc002748>
 8002794:	bdc5883a 	add	r2,r23,r23
 8002798:	1085883a 	add	r2,r2,r2
 800279c:	9887883a 	add	r3,r19,r2
 80027a0:	18800017 	ldw	r2,0(r3)
 80027a4:	10000c1e 	bne	r2,zero,80027d8 <quorem+0x1ec>
 80027a8:	18bfff04 	addi	r2,r3,-4
 80027ac:	9880082e 	bgeu	r19,r2,80027d0 <quorem+0x1e4>
 80027b0:	18ffff17 	ldw	r3,-4(r3)
 80027b4:	18000326 	beq	r3,zero,80027c4 <quorem+0x1d8>
 80027b8:	00000506 	br	80027d0 <quorem+0x1e4>
 80027bc:	10c00017 	ldw	r3,0(r2)
 80027c0:	1800031e 	bne	r3,zero,80027d0 <quorem+0x1e4>
 80027c4:	10bfff04 	addi	r2,r2,-4
 80027c8:	bdffffc4 	addi	r23,r23,-1
 80027cc:	98bffb36 	bltu	r19,r2,80027bc <__alt_data_end+0xfc0027bc>
 80027d0:	d8c00017 	ldw	r3,0(sp)
 80027d4:	1dc00415 	stw	r23,16(r3)
 80027d8:	9005883a 	mov	r2,r18
 80027dc:	dfc00d17 	ldw	ra,52(sp)
 80027e0:	df000c17 	ldw	fp,48(sp)
 80027e4:	ddc00b17 	ldw	r23,44(sp)
 80027e8:	dd800a17 	ldw	r22,40(sp)
 80027ec:	dd400917 	ldw	r21,36(sp)
 80027f0:	dd000817 	ldw	r20,32(sp)
 80027f4:	dcc00717 	ldw	r19,28(sp)
 80027f8:	dc800617 	ldw	r18,24(sp)
 80027fc:	dc400517 	ldw	r17,20(sp)
 8002800:	dc000417 	ldw	r16,16(sp)
 8002804:	dec00e04 	addi	sp,sp,56
 8002808:	f800283a 	ret
 800280c:	0005883a 	mov	r2,zero
 8002810:	003ff206 	br	80027dc <__alt_data_end+0xfc0027dc>

08002814 <_dtoa_r>:
 8002814:	20801017 	ldw	r2,64(r4)
 8002818:	deffde04 	addi	sp,sp,-136
 800281c:	dd401d15 	stw	r21,116(sp)
 8002820:	dcc01b15 	stw	r19,108(sp)
 8002824:	dc801a15 	stw	r18,104(sp)
 8002828:	dc401915 	stw	r17,100(sp)
 800282c:	dc001815 	stw	r16,96(sp)
 8002830:	dfc02115 	stw	ra,132(sp)
 8002834:	df002015 	stw	fp,128(sp)
 8002838:	ddc01f15 	stw	r23,124(sp)
 800283c:	dd801e15 	stw	r22,120(sp)
 8002840:	dd001c15 	stw	r20,112(sp)
 8002844:	d9c00315 	stw	r7,12(sp)
 8002848:	2021883a 	mov	r16,r4
 800284c:	302b883a 	mov	r21,r6
 8002850:	2825883a 	mov	r18,r5
 8002854:	dc402417 	ldw	r17,144(sp)
 8002858:	3027883a 	mov	r19,r6
 800285c:	10000826 	beq	r2,zero,8002880 <_dtoa_r+0x6c>
 8002860:	21801117 	ldw	r6,68(r4)
 8002864:	00c00044 	movi	r3,1
 8002868:	100b883a 	mov	r5,r2
 800286c:	1986983a 	sll	r3,r3,r6
 8002870:	11800115 	stw	r6,4(r2)
 8002874:	10c00215 	stw	r3,8(r2)
 8002878:	80058f80 	call	80058f8 <_Bfree>
 800287c:	80001015 	stw	zero,64(r16)
 8002880:	a8002d16 	blt	r21,zero,8002938 <_dtoa_r+0x124>
 8002884:	88000015 	stw	zero,0(r17)
 8002888:	a8dffc2c 	andhi	r3,r21,32752
 800288c:	009ffc34 	movhi	r2,32752
 8002890:	18801b26 	beq	r3,r2,8002900 <_dtoa_r+0xec>
 8002894:	9009883a 	mov	r4,r18
 8002898:	980b883a 	mov	r5,r19
 800289c:	000d883a 	mov	r6,zero
 80028a0:	000f883a 	mov	r7,zero
 80028a4:	800b5ec0 	call	800b5ec <__eqdf2>
 80028a8:	10002a1e 	bne	r2,zero,8002954 <_dtoa_r+0x140>
 80028ac:	d8c02317 	ldw	r3,140(sp)
 80028b0:	d9002517 	ldw	r4,148(sp)
 80028b4:	00800044 	movi	r2,1
 80028b8:	18800015 	stw	r2,0(r3)
 80028bc:	2001a226 	beq	r4,zero,8002f48 <_dtoa_r+0x734>
 80028c0:	00820074 	movhi	r2,2049
 80028c4:	10bce844 	addi	r2,r2,-3167
 80028c8:	20800015 	stw	r2,0(r4)
 80028cc:	10bfffc4 	addi	r2,r2,-1
 80028d0:	dfc02117 	ldw	ra,132(sp)
 80028d4:	df002017 	ldw	fp,128(sp)
 80028d8:	ddc01f17 	ldw	r23,124(sp)
 80028dc:	dd801e17 	ldw	r22,120(sp)
 80028e0:	dd401d17 	ldw	r21,116(sp)
 80028e4:	dd001c17 	ldw	r20,112(sp)
 80028e8:	dcc01b17 	ldw	r19,108(sp)
 80028ec:	dc801a17 	ldw	r18,104(sp)
 80028f0:	dc401917 	ldw	r17,100(sp)
 80028f4:	dc001817 	ldw	r16,96(sp)
 80028f8:	dec02204 	addi	sp,sp,136
 80028fc:	f800283a 	ret
 8002900:	d8c02317 	ldw	r3,140(sp)
 8002904:	0089c3c4 	movi	r2,9999
 8002908:	18800015 	stw	r2,0(r3)
 800290c:	90017c26 	beq	r18,zero,8002f00 <_dtoa_r+0x6ec>
 8002910:	00820074 	movhi	r2,2049
 8002914:	10bcf404 	addi	r2,r2,-3120
 8002918:	d9002517 	ldw	r4,148(sp)
 800291c:	203fec26 	beq	r4,zero,80028d0 <__alt_data_end+0xfc0028d0>
 8002920:	10c000c7 	ldb	r3,3(r2)
 8002924:	18017d1e 	bne	r3,zero,8002f1c <_dtoa_r+0x708>
 8002928:	10c000c4 	addi	r3,r2,3
 800292c:	d9802517 	ldw	r6,148(sp)
 8002930:	30c00015 	stw	r3,0(r6)
 8002934:	003fe606 	br	80028d0 <__alt_data_end+0xfc0028d0>
 8002938:	04e00034 	movhi	r19,32768
 800293c:	9cffffc4 	addi	r19,r19,-1
 8002940:	00800044 	movi	r2,1
 8002944:	ace6703a 	and	r19,r21,r19
 8002948:	88800015 	stw	r2,0(r17)
 800294c:	982b883a 	mov	r21,r19
 8002950:	003fcd06 	br	8002888 <__alt_data_end+0xfc002888>
 8002954:	d8800204 	addi	r2,sp,8
 8002958:	a822d53a 	srli	r17,r21,20
 800295c:	d8800015 	stw	r2,0(sp)
 8002960:	8009883a 	mov	r4,r16
 8002964:	900b883a 	mov	r5,r18
 8002968:	980d883a 	mov	r6,r19
 800296c:	d9c00104 	addi	r7,sp,4
 8002970:	80065400 	call	8006540 <__d2b>
 8002974:	1039883a 	mov	fp,r2
 8002978:	88016a1e 	bne	r17,zero,8002f24 <_dtoa_r+0x710>
 800297c:	dd000217 	ldw	r20,8(sp)
 8002980:	dc400117 	ldw	r17,4(sp)
 8002984:	00befbc4 	movi	r2,-1041
 8002988:	a463883a 	add	r17,r20,r17
 800298c:	8882ea16 	blt	r17,r2,8003538 <_dtoa_r+0xd24>
 8002990:	00bf0384 	movi	r2,-1010
 8002994:	1445c83a 	sub	r2,r2,r17
 8002998:	89010484 	addi	r4,r17,1042
 800299c:	a8aa983a 	sll	r21,r21,r2
 80029a0:	9108d83a 	srl	r4,r18,r4
 80029a4:	a908b03a 	or	r4,r21,r4
 80029a8:	800cac40 	call	800cac4 <__floatunsidf>
 80029ac:	017f8434 	movhi	r5,65040
 80029b0:	01800044 	movi	r6,1
 80029b4:	1009883a 	mov	r4,r2
 80029b8:	194b883a 	add	r5,r3,r5
 80029bc:	8c7fffc4 	addi	r17,r17,-1
 80029c0:	d9800f15 	stw	r6,60(sp)
 80029c4:	000d883a 	mov	r6,zero
 80029c8:	01cffe34 	movhi	r7,16376
 80029cc:	800c09c0 	call	800c09c <__subdf3>
 80029d0:	0198dbf4 	movhi	r6,25455
 80029d4:	01cff4f4 	movhi	r7,16339
 80029d8:	1009883a 	mov	r4,r2
 80029dc:	180b883a 	mov	r5,r3
 80029e0:	3190d844 	addi	r6,r6,17249
 80029e4:	39e1e9c4 	addi	r7,r7,-30809
 80029e8:	800b8300 	call	800b830 <__muldf3>
 80029ec:	01a2d874 	movhi	r6,35681
 80029f0:	01cff1f4 	movhi	r7,16327
 80029f4:	180b883a 	mov	r5,r3
 80029f8:	31b22cc4 	addi	r6,r6,-14157
 80029fc:	39e28a04 	addi	r7,r7,-30168
 8002a00:	1009883a 	mov	r4,r2
 8002a04:	800a3d00 	call	800a3d0 <__adddf3>
 8002a08:	8809883a 	mov	r4,r17
 8002a0c:	102d883a 	mov	r22,r2
 8002a10:	182b883a 	mov	r21,r3
 8002a14:	800c9f40 	call	800c9f4 <__floatsidf>
 8002a18:	019427f4 	movhi	r6,20639
 8002a1c:	01cff4f4 	movhi	r7,16339
 8002a20:	1009883a 	mov	r4,r2
 8002a24:	180b883a 	mov	r5,r3
 8002a28:	319e7ec4 	addi	r6,r6,31227
 8002a2c:	39d104c4 	addi	r7,r7,17427
 8002a30:	800b8300 	call	800b830 <__muldf3>
 8002a34:	b009883a 	mov	r4,r22
 8002a38:	a80b883a 	mov	r5,r21
 8002a3c:	100d883a 	mov	r6,r2
 8002a40:	180f883a 	mov	r7,r3
 8002a44:	800a3d00 	call	800a3d0 <__adddf3>
 8002a48:	1009883a 	mov	r4,r2
 8002a4c:	180b883a 	mov	r5,r3
 8002a50:	102d883a 	mov	r22,r2
 8002a54:	182b883a 	mov	r21,r3
 8002a58:	800c96c0 	call	800c96c <__fixdfsi>
 8002a5c:	b009883a 	mov	r4,r22
 8002a60:	a80b883a 	mov	r5,r21
 8002a64:	000d883a 	mov	r6,zero
 8002a68:	000f883a 	mov	r7,zero
 8002a6c:	d8800515 	stw	r2,20(sp)
 8002a70:	800b7500 	call	800b750 <__ledf2>
 8002a74:	10023116 	blt	r2,zero,800333c <_dtoa_r+0xb28>
 8002a78:	d8c00517 	ldw	r3,20(sp)
 8002a7c:	00800584 	movi	r2,22
 8002a80:	10c21f36 	bltu	r2,r3,8003300 <_dtoa_r+0xaec>
 8002a84:	180490fa 	slli	r2,r3,3
 8002a88:	00c20074 	movhi	r3,2049
 8002a8c:	18fd1004 	addi	r3,r3,-3008
 8002a90:	1885883a 	add	r2,r3,r2
 8002a94:	11000017 	ldw	r4,0(r2)
 8002a98:	11400117 	ldw	r5,4(r2)
 8002a9c:	900d883a 	mov	r6,r18
 8002aa0:	980f883a 	mov	r7,r19
 8002aa4:	800b6700 	call	800b670 <__gedf2>
 8002aa8:	0082a70e 	bge	zero,r2,8003548 <_dtoa_r+0xd34>
 8002aac:	d9000517 	ldw	r4,20(sp)
 8002ab0:	d8000c15 	stw	zero,48(sp)
 8002ab4:	213fffc4 	addi	r4,r4,-1
 8002ab8:	d9000515 	stw	r4,20(sp)
 8002abc:	a463c83a 	sub	r17,r20,r17
 8002ac0:	8dbfffc4 	addi	r22,r17,-1
 8002ac4:	b0021916 	blt	r22,zero,800332c <_dtoa_r+0xb18>
 8002ac8:	d8000815 	stw	zero,32(sp)
 8002acc:	d8800517 	ldw	r2,20(sp)
 8002ad0:	10020e16 	blt	r2,zero,800330c <_dtoa_r+0xaf8>
 8002ad4:	b0ad883a 	add	r22,r22,r2
 8002ad8:	d8800a15 	stw	r2,40(sp)
 8002adc:	d8000915 	stw	zero,36(sp)
 8002ae0:	d8c00317 	ldw	r3,12(sp)
 8002ae4:	00800244 	movi	r2,9
 8002ae8:	10c11a36 	bltu	r2,r3,8002f54 <_dtoa_r+0x740>
 8002aec:	00800144 	movi	r2,5
 8002af0:	10c4fc0e 	bge	r2,r3,8003ee4 <_dtoa_r+0x16d0>
 8002af4:	18ffff04 	addi	r3,r3,-4
 8002af8:	d8c00315 	stw	r3,12(sp)
 8002afc:	0029883a 	mov	r20,zero
 8002b00:	d9800317 	ldw	r6,12(sp)
 8002b04:	008000c4 	movi	r2,3
 8002b08:	3083bd26 	beq	r6,r2,8003a00 <_dtoa_r+0x11ec>
 8002b0c:	1183670e 	bge	r2,r6,80038ac <_dtoa_r+0x1098>
 8002b10:	d8c00317 	ldw	r3,12(sp)
 8002b14:	00800104 	movi	r2,4
 8002b18:	1882e726 	beq	r3,r2,80036b8 <_dtoa_r+0xea4>
 8002b1c:	00800144 	movi	r2,5
 8002b20:	1884f21e 	bne	r3,r2,8003eec <_dtoa_r+0x16d8>
 8002b24:	00800044 	movi	r2,1
 8002b28:	d8800b15 	stw	r2,44(sp)
 8002b2c:	d8c02217 	ldw	r3,136(sp)
 8002b30:	d9000517 	ldw	r4,20(sp)
 8002b34:	1907883a 	add	r3,r3,r4
 8002b38:	19800044 	addi	r6,r3,1
 8002b3c:	d8c00d15 	stw	r3,52(sp)
 8002b40:	d9800615 	stw	r6,24(sp)
 8002b44:	0183c30e 	bge	zero,r6,8003a54 <_dtoa_r+0x1240>
 8002b48:	d9800617 	ldw	r6,24(sp)
 8002b4c:	3023883a 	mov	r17,r6
 8002b50:	80001115 	stw	zero,68(r16)
 8002b54:	008005c4 	movi	r2,23
 8002b58:	1184f62e 	bgeu	r2,r6,8003f34 <_dtoa_r+0x1720>
 8002b5c:	00c00044 	movi	r3,1
 8002b60:	00800104 	movi	r2,4
 8002b64:	1085883a 	add	r2,r2,r2
 8002b68:	11000504 	addi	r4,r2,20
 8002b6c:	180b883a 	mov	r5,r3
 8002b70:	18c00044 	addi	r3,r3,1
 8002b74:	313ffb2e 	bgeu	r6,r4,8002b64 <__alt_data_end+0xfc002b64>
 8002b78:	81401115 	stw	r5,68(r16)
 8002b7c:	8009883a 	mov	r4,r16
 8002b80:	80058500 	call	8005850 <_Balloc>
 8002b84:	d8800715 	stw	r2,28(sp)
 8002b88:	80801015 	stw	r2,64(r16)
 8002b8c:	00800384 	movi	r2,14
 8002b90:	1440fd36 	bltu	r2,r17,8002f88 <_dtoa_r+0x774>
 8002b94:	a000fc26 	beq	r20,zero,8002f88 <_dtoa_r+0x774>
 8002b98:	d8800517 	ldw	r2,20(sp)
 8002b9c:	0083b90e 	bge	zero,r2,8003a84 <_dtoa_r+0x1270>
 8002ba0:	d8c00517 	ldw	r3,20(sp)
 8002ba4:	108003cc 	andi	r2,r2,15
 8002ba8:	100490fa 	slli	r2,r2,3
 8002bac:	182fd13a 	srai	r23,r3,4
 8002bb0:	00c20074 	movhi	r3,2049
 8002bb4:	18fd1004 	addi	r3,r3,-3008
 8002bb8:	1885883a 	add	r2,r3,r2
 8002bbc:	b8c0040c 	andi	r3,r23,16
 8002bc0:	12c00017 	ldw	r11,0(r2)
 8002bc4:	12800117 	ldw	r10,4(r2)
 8002bc8:	18039726 	beq	r3,zero,8003a28 <_dtoa_r+0x1214>
 8002bcc:	00820074 	movhi	r2,2049
 8002bd0:	10bd0604 	addi	r2,r2,-3048
 8002bd4:	11800817 	ldw	r6,32(r2)
 8002bd8:	11c00917 	ldw	r7,36(r2)
 8002bdc:	9009883a 	mov	r4,r18
 8002be0:	980b883a 	mov	r5,r19
 8002be4:	da801615 	stw	r10,88(sp)
 8002be8:	dac01515 	stw	r11,84(sp)
 8002bec:	800ac6c0 	call	800ac6c <__divdf3>
 8002bf0:	da801617 	ldw	r10,88(sp)
 8002bf4:	dac01517 	ldw	r11,84(sp)
 8002bf8:	bdc003cc 	andi	r23,r23,15
 8002bfc:	044000c4 	movi	r17,3
 8002c00:	d8800e15 	stw	r2,56(sp)
 8002c04:	182b883a 	mov	r21,r3
 8002c08:	b8001126 	beq	r23,zero,8002c50 <_dtoa_r+0x43c>
 8002c0c:	05020074 	movhi	r20,2049
 8002c10:	a53d0604 	addi	r20,r20,-3048
 8002c14:	5805883a 	mov	r2,r11
 8002c18:	5007883a 	mov	r3,r10
 8002c1c:	b980004c 	andi	r6,r23,1
 8002c20:	1009883a 	mov	r4,r2
 8002c24:	b82fd07a 	srai	r23,r23,1
 8002c28:	180b883a 	mov	r5,r3
 8002c2c:	30000426 	beq	r6,zero,8002c40 <_dtoa_r+0x42c>
 8002c30:	a1800017 	ldw	r6,0(r20)
 8002c34:	a1c00117 	ldw	r7,4(r20)
 8002c38:	8c400044 	addi	r17,r17,1
 8002c3c:	800b8300 	call	800b830 <__muldf3>
 8002c40:	a5000204 	addi	r20,r20,8
 8002c44:	b83ff51e 	bne	r23,zero,8002c1c <__alt_data_end+0xfc002c1c>
 8002c48:	1017883a 	mov	r11,r2
 8002c4c:	1815883a 	mov	r10,r3
 8002c50:	d9000e17 	ldw	r4,56(sp)
 8002c54:	a80b883a 	mov	r5,r21
 8002c58:	580d883a 	mov	r6,r11
 8002c5c:	500f883a 	mov	r7,r10
 8002c60:	800ac6c0 	call	800ac6c <__divdf3>
 8002c64:	1029883a 	mov	r20,r2
 8002c68:	182b883a 	mov	r21,r3
 8002c6c:	d9800c17 	ldw	r6,48(sp)
 8002c70:	30000626 	beq	r6,zero,8002c8c <_dtoa_r+0x478>
 8002c74:	a009883a 	mov	r4,r20
 8002c78:	a80b883a 	mov	r5,r21
 8002c7c:	000d883a 	mov	r6,zero
 8002c80:	01cffc34 	movhi	r7,16368
 8002c84:	800b7500 	call	800b750 <__ledf2>
 8002c88:	10043216 	blt	r2,zero,8003d54 <_dtoa_r+0x1540>
 8002c8c:	8809883a 	mov	r4,r17
 8002c90:	800c9f40 	call	800c9f4 <__floatsidf>
 8002c94:	1009883a 	mov	r4,r2
 8002c98:	180b883a 	mov	r5,r3
 8002c9c:	a00d883a 	mov	r6,r20
 8002ca0:	a80f883a 	mov	r7,r21
 8002ca4:	800b8300 	call	800b830 <__muldf3>
 8002ca8:	000d883a 	mov	r6,zero
 8002cac:	1009883a 	mov	r4,r2
 8002cb0:	180b883a 	mov	r5,r3
 8002cb4:	01d00734 	movhi	r7,16412
 8002cb8:	800a3d00 	call	800a3d0 <__adddf3>
 8002cbc:	1023883a 	mov	r17,r2
 8002cc0:	d9800617 	ldw	r6,24(sp)
 8002cc4:	00bf3034 	movhi	r2,64704
 8002cc8:	1885883a 	add	r2,r3,r2
 8002ccc:	d8800e15 	stw	r2,56(sp)
 8002cd0:	30032e26 	beq	r6,zero,800398c <_dtoa_r+0x1178>
 8002cd4:	d8c00517 	ldw	r3,20(sp)
 8002cd8:	da800617 	ldw	r10,24(sp)
 8002cdc:	d8c01215 	stw	r3,72(sp)
 8002ce0:	d9000b17 	ldw	r4,44(sp)
 8002ce4:	2003b026 	beq	r4,zero,8003ba8 <_dtoa_r+0x1394>
 8002ce8:	50bfffc4 	addi	r2,r10,-1
 8002cec:	100490fa 	slli	r2,r2,3
 8002cf0:	00c20074 	movhi	r3,2049
 8002cf4:	18fd1004 	addi	r3,r3,-3008
 8002cf8:	1885883a 	add	r2,r3,r2
 8002cfc:	11800017 	ldw	r6,0(r2)
 8002d00:	11c00117 	ldw	r7,4(r2)
 8002d04:	d8800717 	ldw	r2,28(sp)
 8002d08:	0009883a 	mov	r4,zero
 8002d0c:	014ff834 	movhi	r5,16352
 8002d10:	da801615 	stw	r10,88(sp)
 8002d14:	15c00044 	addi	r23,r2,1
 8002d18:	800ac6c0 	call	800ac6c <__divdf3>
 8002d1c:	d9c00e17 	ldw	r7,56(sp)
 8002d20:	880d883a 	mov	r6,r17
 8002d24:	1009883a 	mov	r4,r2
 8002d28:	180b883a 	mov	r5,r3
 8002d2c:	800c09c0 	call	800c09c <__subdf3>
 8002d30:	a80b883a 	mov	r5,r21
 8002d34:	a009883a 	mov	r4,r20
 8002d38:	d8c01015 	stw	r3,64(sp)
 8002d3c:	d8800e15 	stw	r2,56(sp)
 8002d40:	800c96c0 	call	800c96c <__fixdfsi>
 8002d44:	1009883a 	mov	r4,r2
 8002d48:	d8801715 	stw	r2,92(sp)
 8002d4c:	800c9f40 	call	800c9f4 <__floatsidf>
 8002d50:	a009883a 	mov	r4,r20
 8002d54:	a80b883a 	mov	r5,r21
 8002d58:	100d883a 	mov	r6,r2
 8002d5c:	180f883a 	mov	r7,r3
 8002d60:	800c09c0 	call	800c09c <__subdf3>
 8002d64:	da001717 	ldw	r8,92(sp)
 8002d68:	1829883a 	mov	r20,r3
 8002d6c:	d8c00717 	ldw	r3,28(sp)
 8002d70:	d9000e17 	ldw	r4,56(sp)
 8002d74:	d9401017 	ldw	r5,64(sp)
 8002d78:	42000c04 	addi	r8,r8,48
 8002d7c:	1023883a 	mov	r17,r2
 8002d80:	1a000005 	stb	r8,0(r3)
 8002d84:	880d883a 	mov	r6,r17
 8002d88:	a00f883a 	mov	r7,r20
 8002d8c:	402b883a 	mov	r21,r8
 8002d90:	800b6700 	call	800b670 <__gedf2>
 8002d94:	00844516 	blt	zero,r2,8003eac <_dtoa_r+0x1698>
 8002d98:	0009883a 	mov	r4,zero
 8002d9c:	014ffc34 	movhi	r5,16368
 8002da0:	880d883a 	mov	r6,r17
 8002da4:	a00f883a 	mov	r7,r20
 8002da8:	800c09c0 	call	800c09c <__subdf3>
 8002dac:	d9000e17 	ldw	r4,56(sp)
 8002db0:	d9401017 	ldw	r5,64(sp)
 8002db4:	100d883a 	mov	r6,r2
 8002db8:	180f883a 	mov	r7,r3
 8002dbc:	800b6700 	call	800b670 <__gedf2>
 8002dc0:	da801617 	ldw	r10,88(sp)
 8002dc4:	00843616 	blt	zero,r2,8003ea0 <_dtoa_r+0x168c>
 8002dc8:	00800044 	movi	r2,1
 8002dcc:	12806e0e 	bge	r2,r10,8002f88 <_dtoa_r+0x774>
 8002dd0:	d9000717 	ldw	r4,28(sp)
 8002dd4:	dd801315 	stw	r22,76(sp)
 8002dd8:	dc001115 	stw	r16,68(sp)
 8002ddc:	2295883a 	add	r10,r4,r10
 8002de0:	dcc01415 	stw	r19,80(sp)
 8002de4:	502d883a 	mov	r22,r10
 8002de8:	dcc01017 	ldw	r19,64(sp)
 8002dec:	b821883a 	mov	r16,r23
 8002df0:	dc801015 	stw	r18,64(sp)
 8002df4:	dc800e17 	ldw	r18,56(sp)
 8002df8:	00000906 	br	8002e20 <_dtoa_r+0x60c>
 8002dfc:	800c09c0 	call	800c09c <__subdf3>
 8002e00:	1009883a 	mov	r4,r2
 8002e04:	180b883a 	mov	r5,r3
 8002e08:	900d883a 	mov	r6,r18
 8002e0c:	980f883a 	mov	r7,r19
 8002e10:	800b7500 	call	800b750 <__ledf2>
 8002e14:	10040e16 	blt	r2,zero,8003e50 <_dtoa_r+0x163c>
 8002e18:	b821883a 	mov	r16,r23
 8002e1c:	bd841026 	beq	r23,r22,8003e60 <_dtoa_r+0x164c>
 8002e20:	9009883a 	mov	r4,r18
 8002e24:	980b883a 	mov	r5,r19
 8002e28:	000d883a 	mov	r6,zero
 8002e2c:	01d00934 	movhi	r7,16420
 8002e30:	800b8300 	call	800b830 <__muldf3>
 8002e34:	000d883a 	mov	r6,zero
 8002e38:	01d00934 	movhi	r7,16420
 8002e3c:	8809883a 	mov	r4,r17
 8002e40:	a00b883a 	mov	r5,r20
 8002e44:	1025883a 	mov	r18,r2
 8002e48:	1827883a 	mov	r19,r3
 8002e4c:	800b8300 	call	800b830 <__muldf3>
 8002e50:	180b883a 	mov	r5,r3
 8002e54:	1009883a 	mov	r4,r2
 8002e58:	1823883a 	mov	r17,r3
 8002e5c:	1029883a 	mov	r20,r2
 8002e60:	800c96c0 	call	800c96c <__fixdfsi>
 8002e64:	1009883a 	mov	r4,r2
 8002e68:	102b883a 	mov	r21,r2
 8002e6c:	800c9f40 	call	800c9f4 <__floatsidf>
 8002e70:	a009883a 	mov	r4,r20
 8002e74:	880b883a 	mov	r5,r17
 8002e78:	100d883a 	mov	r6,r2
 8002e7c:	180f883a 	mov	r7,r3
 8002e80:	800c09c0 	call	800c09c <__subdf3>
 8002e84:	ad400c04 	addi	r21,r21,48
 8002e88:	1009883a 	mov	r4,r2
 8002e8c:	180b883a 	mov	r5,r3
 8002e90:	900d883a 	mov	r6,r18
 8002e94:	980f883a 	mov	r7,r19
 8002e98:	85400005 	stb	r21,0(r16)
 8002e9c:	1023883a 	mov	r17,r2
 8002ea0:	1829883a 	mov	r20,r3
 8002ea4:	800b7500 	call	800b750 <__ledf2>
 8002ea8:	bdc00044 	addi	r23,r23,1
 8002eac:	0009883a 	mov	r4,zero
 8002eb0:	014ffc34 	movhi	r5,16368
 8002eb4:	880d883a 	mov	r6,r17
 8002eb8:	a00f883a 	mov	r7,r20
 8002ebc:	103fcf0e 	bge	r2,zero,8002dfc <__alt_data_end+0xfc002dfc>
 8002ec0:	d9801217 	ldw	r6,72(sp)
 8002ec4:	dc001117 	ldw	r16,68(sp)
 8002ec8:	d9800515 	stw	r6,20(sp)
 8002ecc:	8009883a 	mov	r4,r16
 8002ed0:	e00b883a 	mov	r5,fp
 8002ed4:	80058f80 	call	80058f8 <_Bfree>
 8002ed8:	d8c00517 	ldw	r3,20(sp)
 8002edc:	d9002317 	ldw	r4,140(sp)
 8002ee0:	d9802517 	ldw	r6,148(sp)
 8002ee4:	b8000005 	stb	zero,0(r23)
 8002ee8:	18800044 	addi	r2,r3,1
 8002eec:	20800015 	stw	r2,0(r4)
 8002ef0:	30027226 	beq	r6,zero,80038bc <_dtoa_r+0x10a8>
 8002ef4:	35c00015 	stw	r23,0(r6)
 8002ef8:	d8800717 	ldw	r2,28(sp)
 8002efc:	003e7406 	br	80028d0 <__alt_data_end+0xfc0028d0>
 8002f00:	00800434 	movhi	r2,16
 8002f04:	10bfffc4 	addi	r2,r2,-1
 8002f08:	a8aa703a 	and	r21,r21,r2
 8002f0c:	a83e801e 	bne	r21,zero,8002910 <__alt_data_end+0xfc002910>
 8002f10:	00820074 	movhi	r2,2049
 8002f14:	10bcf104 	addi	r2,r2,-3132
 8002f18:	003e7f06 	br	8002918 <__alt_data_end+0xfc002918>
 8002f1c:	10c00204 	addi	r3,r2,8
 8002f20:	003e8206 	br	800292c <__alt_data_end+0xfc00292c>
 8002f24:	01400434 	movhi	r5,16
 8002f28:	297fffc4 	addi	r5,r5,-1
 8002f2c:	994a703a 	and	r5,r19,r5
 8002f30:	9009883a 	mov	r4,r18
 8002f34:	8c7f0044 	addi	r17,r17,-1023
 8002f38:	294ffc34 	orhi	r5,r5,16368
 8002f3c:	dd000217 	ldw	r20,8(sp)
 8002f40:	d8000f15 	stw	zero,60(sp)
 8002f44:	003e9f06 	br	80029c4 <__alt_data_end+0xfc0029c4>
 8002f48:	00820074 	movhi	r2,2049
 8002f4c:	10bce804 	addi	r2,r2,-3168
 8002f50:	003e5f06 	br	80028d0 <__alt_data_end+0xfc0028d0>
 8002f54:	80001115 	stw	zero,68(r16)
 8002f58:	8009883a 	mov	r4,r16
 8002f5c:	000b883a 	mov	r5,zero
 8002f60:	80058500 	call	8005850 <_Balloc>
 8002f64:	01bfffc4 	movi	r6,-1
 8002f68:	d8800715 	stw	r2,28(sp)
 8002f6c:	80801015 	stw	r2,64(r16)
 8002f70:	00800044 	movi	r2,1
 8002f74:	d9800615 	stw	r6,24(sp)
 8002f78:	d8800b15 	stw	r2,44(sp)
 8002f7c:	d8002215 	stw	zero,136(sp)
 8002f80:	d9800d15 	stw	r6,52(sp)
 8002f84:	d8000315 	stw	zero,12(sp)
 8002f88:	d8800117 	ldw	r2,4(sp)
 8002f8c:	10008e16 	blt	r2,zero,80031c8 <_dtoa_r+0x9b4>
 8002f90:	d9000517 	ldw	r4,20(sp)
 8002f94:	00c00384 	movi	r3,14
 8002f98:	19008b16 	blt	r3,r4,80031c8 <_dtoa_r+0x9b4>
 8002f9c:	200490fa 	slli	r2,r4,3
 8002fa0:	00c20074 	movhi	r3,2049
 8002fa4:	d9802217 	ldw	r6,136(sp)
 8002fa8:	18fd1004 	addi	r3,r3,-3008
 8002fac:	1885883a 	add	r2,r3,r2
 8002fb0:	14400017 	ldw	r17,0(r2)
 8002fb4:	15000117 	ldw	r20,4(r2)
 8002fb8:	3001c716 	blt	r6,zero,80036d8 <_dtoa_r+0xec4>
 8002fbc:	880d883a 	mov	r6,r17
 8002fc0:	a00f883a 	mov	r7,r20
 8002fc4:	9009883a 	mov	r4,r18
 8002fc8:	980b883a 	mov	r5,r19
 8002fcc:	800ac6c0 	call	800ac6c <__divdf3>
 8002fd0:	180b883a 	mov	r5,r3
 8002fd4:	1009883a 	mov	r4,r2
 8002fd8:	800c96c0 	call	800c96c <__fixdfsi>
 8002fdc:	1009883a 	mov	r4,r2
 8002fe0:	102d883a 	mov	r22,r2
 8002fe4:	800c9f40 	call	800c9f4 <__floatsidf>
 8002fe8:	1009883a 	mov	r4,r2
 8002fec:	180b883a 	mov	r5,r3
 8002ff0:	880d883a 	mov	r6,r17
 8002ff4:	a00f883a 	mov	r7,r20
 8002ff8:	800b8300 	call	800b830 <__muldf3>
 8002ffc:	9009883a 	mov	r4,r18
 8003000:	980b883a 	mov	r5,r19
 8003004:	100d883a 	mov	r6,r2
 8003008:	180f883a 	mov	r7,r3
 800300c:	800c09c0 	call	800c09c <__subdf3>
 8003010:	d9000717 	ldw	r4,28(sp)
 8003014:	d9800617 	ldw	r6,24(sp)
 8003018:	180b883a 	mov	r5,r3
 800301c:	b0c00c04 	addi	r3,r22,48
 8003020:	20c00005 	stb	r3,0(r4)
 8003024:	25c00044 	addi	r23,r4,1
 8003028:	01000044 	movi	r4,1
 800302c:	1011883a 	mov	r8,r2
 8003030:	2807883a 	mov	r3,r5
 8003034:	31003d26 	beq	r6,r4,800312c <_dtoa_r+0x918>
 8003038:	000d883a 	mov	r6,zero
 800303c:	01d00934 	movhi	r7,16420
 8003040:	1009883a 	mov	r4,r2
 8003044:	800b8300 	call	800b830 <__muldf3>
 8003048:	1009883a 	mov	r4,r2
 800304c:	180b883a 	mov	r5,r3
 8003050:	000d883a 	mov	r6,zero
 8003054:	000f883a 	mov	r7,zero
 8003058:	1027883a 	mov	r19,r2
 800305c:	182b883a 	mov	r21,r3
 8003060:	800b5ec0 	call	800b5ec <__eqdf2>
 8003064:	103f9926 	beq	r2,zero,8002ecc <__alt_data_end+0xfc002ecc>
 8003068:	d8c00617 	ldw	r3,24(sp)
 800306c:	d9000717 	ldw	r4,28(sp)
 8003070:	b825883a 	mov	r18,r23
 8003074:	18bfffc4 	addi	r2,r3,-1
 8003078:	20ad883a 	add	r22,r4,r2
 800307c:	dc000315 	stw	r16,12(sp)
 8003080:	00000a06 	br	80030ac <_dtoa_r+0x898>
 8003084:	800b8300 	call	800b830 <__muldf3>
 8003088:	1009883a 	mov	r4,r2
 800308c:	180b883a 	mov	r5,r3
 8003090:	000d883a 	mov	r6,zero
 8003094:	000f883a 	mov	r7,zero
 8003098:	1027883a 	mov	r19,r2
 800309c:	182b883a 	mov	r21,r3
 80030a0:	b825883a 	mov	r18,r23
 80030a4:	800b5ec0 	call	800b5ec <__eqdf2>
 80030a8:	10022626 	beq	r2,zero,8003944 <_dtoa_r+0x1130>
 80030ac:	880d883a 	mov	r6,r17
 80030b0:	a00f883a 	mov	r7,r20
 80030b4:	9809883a 	mov	r4,r19
 80030b8:	a80b883a 	mov	r5,r21
 80030bc:	800ac6c0 	call	800ac6c <__divdf3>
 80030c0:	180b883a 	mov	r5,r3
 80030c4:	1009883a 	mov	r4,r2
 80030c8:	800c96c0 	call	800c96c <__fixdfsi>
 80030cc:	1009883a 	mov	r4,r2
 80030d0:	1021883a 	mov	r16,r2
 80030d4:	800c9f40 	call	800c9f4 <__floatsidf>
 80030d8:	1009883a 	mov	r4,r2
 80030dc:	180b883a 	mov	r5,r3
 80030e0:	880d883a 	mov	r6,r17
 80030e4:	a00f883a 	mov	r7,r20
 80030e8:	800b8300 	call	800b830 <__muldf3>
 80030ec:	9809883a 	mov	r4,r19
 80030f0:	a80b883a 	mov	r5,r21
 80030f4:	100d883a 	mov	r6,r2
 80030f8:	180f883a 	mov	r7,r3
 80030fc:	800c09c0 	call	800c09c <__subdf3>
 8003100:	82000c04 	addi	r8,r16,48
 8003104:	92000005 	stb	r8,0(r18)
 8003108:	1009883a 	mov	r4,r2
 800310c:	180b883a 	mov	r5,r3
 8003110:	000d883a 	mov	r6,zero
 8003114:	01d00934 	movhi	r7,16420
 8003118:	1011883a 	mov	r8,r2
 800311c:	bdc00044 	addi	r23,r23,1
 8003120:	95bfd81e 	bne	r18,r22,8003084 <__alt_data_end+0xfc003084>
 8003124:	802d883a 	mov	r22,r16
 8003128:	dc000317 	ldw	r16,12(sp)
 800312c:	4009883a 	mov	r4,r8
 8003130:	180b883a 	mov	r5,r3
 8003134:	400d883a 	mov	r6,r8
 8003138:	180f883a 	mov	r7,r3
 800313c:	800a3d00 	call	800a3d0 <__adddf3>
 8003140:	8809883a 	mov	r4,r17
 8003144:	a00b883a 	mov	r5,r20
 8003148:	100d883a 	mov	r6,r2
 800314c:	180f883a 	mov	r7,r3
 8003150:	1027883a 	mov	r19,r2
 8003154:	1825883a 	mov	r18,r3
 8003158:	800b7500 	call	800b750 <__ledf2>
 800315c:	10000816 	blt	r2,zero,8003180 <_dtoa_r+0x96c>
 8003160:	8809883a 	mov	r4,r17
 8003164:	a00b883a 	mov	r5,r20
 8003168:	980d883a 	mov	r6,r19
 800316c:	900f883a 	mov	r7,r18
 8003170:	800b5ec0 	call	800b5ec <__eqdf2>
 8003174:	103f551e 	bne	r2,zero,8002ecc <__alt_data_end+0xfc002ecc>
 8003178:	b580004c 	andi	r22,r22,1
 800317c:	b03f5326 	beq	r22,zero,8002ecc <__alt_data_end+0xfc002ecc>
 8003180:	bd7fffc3 	ldbu	r21,-1(r23)
 8003184:	b8bfffc4 	addi	r2,r23,-1
 8003188:	1007883a 	mov	r3,r2
 800318c:	01400e44 	movi	r5,57
 8003190:	d9800717 	ldw	r6,28(sp)
 8003194:	00000506 	br	80031ac <_dtoa_r+0x998>
 8003198:	18ffffc4 	addi	r3,r3,-1
 800319c:	30825e26 	beq	r6,r2,8003b18 <_dtoa_r+0x1304>
 80031a0:	1d400003 	ldbu	r21,0(r3)
 80031a4:	102f883a 	mov	r23,r2
 80031a8:	10bfffc4 	addi	r2,r2,-1
 80031ac:	a9003fcc 	andi	r4,r21,255
 80031b0:	2100201c 	xori	r4,r4,128
 80031b4:	213fe004 	addi	r4,r4,-128
 80031b8:	217ff726 	beq	r4,r5,8003198 <__alt_data_end+0xfc003198>
 80031bc:	aa000044 	addi	r8,r21,1
 80031c0:	12000005 	stb	r8,0(r2)
 80031c4:	003f4106 	br	8002ecc <__alt_data_end+0xfc002ecc>
 80031c8:	d8c00b17 	ldw	r3,44(sp)
 80031cc:	18006726 	beq	r3,zero,800336c <_dtoa_r+0xb58>
 80031d0:	d9000317 	ldw	r4,12(sp)
 80031d4:	00c00044 	movi	r3,1
 80031d8:	19016a0e 	bge	r3,r4,8003784 <_dtoa_r+0xf70>
 80031dc:	d8800617 	ldw	r2,24(sp)
 80031e0:	d8c00917 	ldw	r3,36(sp)
 80031e4:	157fffc4 	addi	r21,r2,-1
 80031e8:	1d420716 	blt	r3,r21,8003a08 <_dtoa_r+0x11f4>
 80031ec:	1d6bc83a 	sub	r21,r3,r21
 80031f0:	d8800617 	ldw	r2,24(sp)
 80031f4:	1002c716 	blt	r2,zero,8003d14 <_dtoa_r+0x1500>
 80031f8:	dd000817 	ldw	r20,32(sp)
 80031fc:	d8800617 	ldw	r2,24(sp)
 8003200:	d9800817 	ldw	r6,32(sp)
 8003204:	8009883a 	mov	r4,r16
 8003208:	01400044 	movi	r5,1
 800320c:	308d883a 	add	r6,r6,r2
 8003210:	d9800815 	stw	r6,32(sp)
 8003214:	b0ad883a 	add	r22,r22,r2
 8003218:	8005c780 	call	8005c78 <__i2b>
 800321c:	1023883a 	mov	r17,r2
 8003220:	a0000826 	beq	r20,zero,8003244 <_dtoa_r+0xa30>
 8003224:	0580070e 	bge	zero,r22,8003244 <_dtoa_r+0xa30>
 8003228:	b005883a 	mov	r2,r22
 800322c:	a5812016 	blt	r20,r22,80036b0 <_dtoa_r+0xe9c>
 8003230:	d8c00817 	ldw	r3,32(sp)
 8003234:	a0a9c83a 	sub	r20,r20,r2
 8003238:	b0adc83a 	sub	r22,r22,r2
 800323c:	1887c83a 	sub	r3,r3,r2
 8003240:	d8c00815 	stw	r3,32(sp)
 8003244:	d9000917 	ldw	r4,36(sp)
 8003248:	0100140e 	bge	zero,r4,800329c <_dtoa_r+0xa88>
 800324c:	d9800b17 	ldw	r6,44(sp)
 8003250:	3001e526 	beq	r6,zero,80039e8 <_dtoa_r+0x11d4>
 8003254:	05400e0e 	bge	zero,r21,8003290 <_dtoa_r+0xa7c>
 8003258:	880b883a 	mov	r5,r17
 800325c:	8009883a 	mov	r4,r16
 8003260:	a80d883a 	mov	r6,r21
 8003264:	8005f440 	call	8005f44 <__pow5mult>
 8003268:	e00d883a 	mov	r6,fp
 800326c:	8009883a 	mov	r4,r16
 8003270:	100b883a 	mov	r5,r2
 8003274:	1023883a 	mov	r17,r2
 8003278:	8005cb40 	call	8005cb4 <__multiply>
 800327c:	102f883a 	mov	r23,r2
 8003280:	e00b883a 	mov	r5,fp
 8003284:	8009883a 	mov	r4,r16
 8003288:	80058f80 	call	80058f8 <_Bfree>
 800328c:	b839883a 	mov	fp,r23
 8003290:	d8800917 	ldw	r2,36(sp)
 8003294:	154dc83a 	sub	r6,r2,r21
 8003298:	3001281e 	bne	r6,zero,800373c <_dtoa_r+0xf28>
 800329c:	05c00044 	movi	r23,1
 80032a0:	8009883a 	mov	r4,r16
 80032a4:	b80b883a 	mov	r5,r23
 80032a8:	8005c780 	call	8005c78 <__i2b>
 80032ac:	d8c00a17 	ldw	r3,40(sp)
 80032b0:	102b883a 	mov	r21,r2
 80032b4:	00c0310e 	bge	zero,r3,800337c <_dtoa_r+0xb68>
 80032b8:	8009883a 	mov	r4,r16
 80032bc:	100b883a 	mov	r5,r2
 80032c0:	180d883a 	mov	r6,r3
 80032c4:	8005f440 	call	8005f44 <__pow5mult>
 80032c8:	d9000317 	ldw	r4,12(sp)
 80032cc:	102b883a 	mov	r21,r2
 80032d0:	b9011f0e 	bge	r23,r4,8003750 <_dtoa_r+0xf3c>
 80032d4:	0027883a 	mov	r19,zero
 80032d8:	a8800417 	ldw	r2,16(r21)
 80032dc:	10800104 	addi	r2,r2,4
 80032e0:	1085883a 	add	r2,r2,r2
 80032e4:	1085883a 	add	r2,r2,r2
 80032e8:	a885883a 	add	r2,r21,r2
 80032ec:	11000017 	ldw	r4,0(r2)
 80032f0:	8005b600 	call	8005b60 <__hi0bits>
 80032f4:	00c00804 	movi	r3,32
 80032f8:	1885c83a 	sub	r2,r3,r2
 80032fc:	00002506 	br	8003394 <_dtoa_r+0xb80>
 8003300:	01800044 	movi	r6,1
 8003304:	d9800c15 	stw	r6,48(sp)
 8003308:	003dec06 	br	8002abc <__alt_data_end+0xfc002abc>
 800330c:	d8c00817 	ldw	r3,32(sp)
 8003310:	d9000517 	ldw	r4,20(sp)
 8003314:	d8000a15 	stw	zero,40(sp)
 8003318:	1907c83a 	sub	r3,r3,r4
 800331c:	010dc83a 	sub	r6,zero,r4
 8003320:	d8c00815 	stw	r3,32(sp)
 8003324:	d9800915 	stw	r6,36(sp)
 8003328:	003ded06 	br	8002ae0 <__alt_data_end+0xfc002ae0>
 800332c:	05adc83a 	sub	r22,zero,r22
 8003330:	dd800815 	stw	r22,32(sp)
 8003334:	002d883a 	mov	r22,zero
 8003338:	003de406 	br	8002acc <__alt_data_end+0xfc002acc>
 800333c:	d9000517 	ldw	r4,20(sp)
 8003340:	800c9f40 	call	800c9f4 <__floatsidf>
 8003344:	1009883a 	mov	r4,r2
 8003348:	180b883a 	mov	r5,r3
 800334c:	b00d883a 	mov	r6,r22
 8003350:	a80f883a 	mov	r7,r21
 8003354:	800b5ec0 	call	800b5ec <__eqdf2>
 8003358:	103dc726 	beq	r2,zero,8002a78 <__alt_data_end+0xfc002a78>
 800335c:	d8800517 	ldw	r2,20(sp)
 8003360:	10bfffc4 	addi	r2,r2,-1
 8003364:	d8800515 	stw	r2,20(sp)
 8003368:	003dc306 	br	8002a78 <__alt_data_end+0xfc002a78>
 800336c:	dd400917 	ldw	r21,36(sp)
 8003370:	dd000817 	ldw	r20,32(sp)
 8003374:	0023883a 	mov	r17,zero
 8003378:	003fa906 	br	8003220 <__alt_data_end+0xfc003220>
 800337c:	d9800317 	ldw	r6,12(sp)
 8003380:	b981670e 	bge	r23,r6,8003920 <_dtoa_r+0x110c>
 8003384:	0027883a 	mov	r19,zero
 8003388:	d8c00a17 	ldw	r3,40(sp)
 800338c:	183fd21e 	bne	r3,zero,80032d8 <__alt_data_end+0xfc0032d8>
 8003390:	00800044 	movi	r2,1
 8003394:	1585883a 	add	r2,r2,r22
 8003398:	108007cc 	andi	r2,r2,31
 800339c:	10005f26 	beq	r2,zero,800351c <_dtoa_r+0xd08>
 80033a0:	00c00804 	movi	r3,32
 80033a4:	1887c83a 	sub	r3,r3,r2
 80033a8:	01000104 	movi	r4,4
 80033ac:	20c2dd0e 	bge	r4,r3,8003f24 <_dtoa_r+0x1710>
 80033b0:	d9000817 	ldw	r4,32(sp)
 80033b4:	00c00704 	movi	r3,28
 80033b8:	1885c83a 	sub	r2,r3,r2
 80033bc:	2089883a 	add	r4,r4,r2
 80033c0:	d9000815 	stw	r4,32(sp)
 80033c4:	a0a9883a 	add	r20,r20,r2
 80033c8:	b0ad883a 	add	r22,r22,r2
 80033cc:	d8800817 	ldw	r2,32(sp)
 80033d0:	0080050e 	bge	zero,r2,80033e8 <_dtoa_r+0xbd4>
 80033d4:	e00b883a 	mov	r5,fp
 80033d8:	8009883a 	mov	r4,r16
 80033dc:	100d883a 	mov	r6,r2
 80033e0:	80060840 	call	8006084 <__lshift>
 80033e4:	1039883a 	mov	fp,r2
 80033e8:	0580050e 	bge	zero,r22,8003400 <_dtoa_r+0xbec>
 80033ec:	a80b883a 	mov	r5,r21
 80033f0:	8009883a 	mov	r4,r16
 80033f4:	b00d883a 	mov	r6,r22
 80033f8:	80060840 	call	8006084 <__lshift>
 80033fc:	102b883a 	mov	r21,r2
 8003400:	d8c00c17 	ldw	r3,48(sp)
 8003404:	1801161e 	bne	r3,zero,8003860 <_dtoa_r+0x104c>
 8003408:	d8c00617 	ldw	r3,24(sp)
 800340c:	00c12d0e 	bge	zero,r3,80038c4 <_dtoa_r+0x10b0>
 8003410:	d8c00b17 	ldw	r3,44(sp)
 8003414:	1800571e 	bne	r3,zero,8003574 <_dtoa_r+0xd60>
 8003418:	dc800717 	ldw	r18,28(sp)
 800341c:	dcc00617 	ldw	r19,24(sp)
 8003420:	9029883a 	mov	r20,r18
 8003424:	00000206 	br	8003430 <_dtoa_r+0xc1c>
 8003428:	80059200 	call	8005920 <__multadd>
 800342c:	1039883a 	mov	fp,r2
 8003430:	e009883a 	mov	r4,fp
 8003434:	a80b883a 	mov	r5,r21
 8003438:	80025ec0 	call	80025ec <quorem>
 800343c:	10800c04 	addi	r2,r2,48
 8003440:	90800005 	stb	r2,0(r18)
 8003444:	94800044 	addi	r18,r18,1
 8003448:	9507c83a 	sub	r3,r18,r20
 800344c:	8009883a 	mov	r4,r16
 8003450:	e00b883a 	mov	r5,fp
 8003454:	01800284 	movi	r6,10
 8003458:	000f883a 	mov	r7,zero
 800345c:	1cfff216 	blt	r3,r19,8003428 <__alt_data_end+0xfc003428>
 8003460:	1011883a 	mov	r8,r2
 8003464:	d8800617 	ldw	r2,24(sp)
 8003468:	00822e0e 	bge	zero,r2,8003d24 <_dtoa_r+0x1510>
 800346c:	d9000717 	ldw	r4,28(sp)
 8003470:	0025883a 	mov	r18,zero
 8003474:	20af883a 	add	r23,r4,r2
 8003478:	e00b883a 	mov	r5,fp
 800347c:	01800044 	movi	r6,1
 8003480:	8009883a 	mov	r4,r16
 8003484:	da001715 	stw	r8,92(sp)
 8003488:	80060840 	call	8006084 <__lshift>
 800348c:	1009883a 	mov	r4,r2
 8003490:	a80b883a 	mov	r5,r21
 8003494:	1039883a 	mov	fp,r2
 8003498:	80061cc0 	call	80061cc <__mcmp>
 800349c:	da001717 	ldw	r8,92(sp)
 80034a0:	00816e0e 	bge	zero,r2,8003a5c <_dtoa_r+0x1248>
 80034a4:	b93fffc3 	ldbu	r4,-1(r23)
 80034a8:	b8bfffc4 	addi	r2,r23,-1
 80034ac:	1007883a 	mov	r3,r2
 80034b0:	01800e44 	movi	r6,57
 80034b4:	d9c00717 	ldw	r7,28(sp)
 80034b8:	00000506 	br	80034d0 <_dtoa_r+0xcbc>
 80034bc:	18ffffc4 	addi	r3,r3,-1
 80034c0:	38811926 	beq	r7,r2,8003928 <_dtoa_r+0x1114>
 80034c4:	19000003 	ldbu	r4,0(r3)
 80034c8:	102f883a 	mov	r23,r2
 80034cc:	10bfffc4 	addi	r2,r2,-1
 80034d0:	21403fcc 	andi	r5,r4,255
 80034d4:	2940201c 	xori	r5,r5,128
 80034d8:	297fe004 	addi	r5,r5,-128
 80034dc:	29bff726 	beq	r5,r6,80034bc <__alt_data_end+0xfc0034bc>
 80034e0:	21000044 	addi	r4,r4,1
 80034e4:	11000005 	stb	r4,0(r2)
 80034e8:	8009883a 	mov	r4,r16
 80034ec:	a80b883a 	mov	r5,r21
 80034f0:	80058f80 	call	80058f8 <_Bfree>
 80034f4:	883e7526 	beq	r17,zero,8002ecc <__alt_data_end+0xfc002ecc>
 80034f8:	90000426 	beq	r18,zero,800350c <_dtoa_r+0xcf8>
 80034fc:	94400326 	beq	r18,r17,800350c <_dtoa_r+0xcf8>
 8003500:	8009883a 	mov	r4,r16
 8003504:	900b883a 	mov	r5,r18
 8003508:	80058f80 	call	80058f8 <_Bfree>
 800350c:	8009883a 	mov	r4,r16
 8003510:	880b883a 	mov	r5,r17
 8003514:	80058f80 	call	80058f8 <_Bfree>
 8003518:	003e6c06 	br	8002ecc <__alt_data_end+0xfc002ecc>
 800351c:	00800704 	movi	r2,28
 8003520:	d9800817 	ldw	r6,32(sp)
 8003524:	a0a9883a 	add	r20,r20,r2
 8003528:	b0ad883a 	add	r22,r22,r2
 800352c:	308d883a 	add	r6,r6,r2
 8003530:	d9800815 	stw	r6,32(sp)
 8003534:	003fa506 	br	80033cc <__alt_data_end+0xfc0033cc>
 8003538:	013efb84 	movi	r4,-1042
 800353c:	246bc83a 	sub	r21,r4,r17
 8003540:	9548983a 	sll	r4,r18,r21
 8003544:	003d1806 	br	80029a8 <__alt_data_end+0xfc0029a8>
 8003548:	d8000c15 	stw	zero,48(sp)
 800354c:	003d5b06 	br	8002abc <__alt_data_end+0xfc002abc>
 8003550:	880b883a 	mov	r5,r17
 8003554:	8009883a 	mov	r4,r16
 8003558:	01800284 	movi	r6,10
 800355c:	000f883a 	mov	r7,zero
 8003560:	80059200 	call	8005920 <__multadd>
 8003564:	1023883a 	mov	r17,r2
 8003568:	d8800d17 	ldw	r2,52(sp)
 800356c:	0082550e 	bge	zero,r2,8003ec4 <_dtoa_r+0x16b0>
 8003570:	d8800615 	stw	r2,24(sp)
 8003574:	0500050e 	bge	zero,r20,800358c <_dtoa_r+0xd78>
 8003578:	880b883a 	mov	r5,r17
 800357c:	8009883a 	mov	r4,r16
 8003580:	a00d883a 	mov	r6,r20
 8003584:	80060840 	call	8006084 <__lshift>
 8003588:	1023883a 	mov	r17,r2
 800358c:	98016a1e 	bne	r19,zero,8003b38 <_dtoa_r+0x1324>
 8003590:	8829883a 	mov	r20,r17
 8003594:	d9000617 	ldw	r4,24(sp)
 8003598:	dcc00717 	ldw	r19,28(sp)
 800359c:	9480004c 	andi	r18,r18,1
 80035a0:	20bfffc4 	addi	r2,r4,-1
 80035a4:	9885883a 	add	r2,r19,r2
 80035a8:	d8800415 	stw	r2,16(sp)
 80035ac:	dc800615 	stw	r18,24(sp)
 80035b0:	e009883a 	mov	r4,fp
 80035b4:	a80b883a 	mov	r5,r21
 80035b8:	80025ec0 	call	80025ec <quorem>
 80035bc:	e009883a 	mov	r4,fp
 80035c0:	880b883a 	mov	r5,r17
 80035c4:	102f883a 	mov	r23,r2
 80035c8:	80061cc0 	call	80061cc <__mcmp>
 80035cc:	8009883a 	mov	r4,r16
 80035d0:	a80b883a 	mov	r5,r21
 80035d4:	a00d883a 	mov	r6,r20
 80035d8:	102d883a 	mov	r22,r2
 80035dc:	800622c0 	call	800622c <__mdiff>
 80035e0:	1007883a 	mov	r3,r2
 80035e4:	10800317 	ldw	r2,12(r2)
 80035e8:	bc800c04 	addi	r18,r23,48
 80035ec:	1000971e 	bne	r2,zero,800384c <_dtoa_r+0x1038>
 80035f0:	180b883a 	mov	r5,r3
 80035f4:	e009883a 	mov	r4,fp
 80035f8:	d8c01515 	stw	r3,84(sp)
 80035fc:	80061cc0 	call	80061cc <__mcmp>
 8003600:	d8c01517 	ldw	r3,84(sp)
 8003604:	8009883a 	mov	r4,r16
 8003608:	d8801515 	stw	r2,84(sp)
 800360c:	180b883a 	mov	r5,r3
 8003610:	80058f80 	call	80058f8 <_Bfree>
 8003614:	d8801517 	ldw	r2,84(sp)
 8003618:	1000041e 	bne	r2,zero,800362c <_dtoa_r+0xe18>
 800361c:	d9800317 	ldw	r6,12(sp)
 8003620:	3000021e 	bne	r6,zero,800362c <_dtoa_r+0xe18>
 8003624:	d8c00617 	ldw	r3,24(sp)
 8003628:	18007626 	beq	r3,zero,8003804 <_dtoa_r+0xff0>
 800362c:	b0005b16 	blt	r22,zero,800379c <_dtoa_r+0xf88>
 8003630:	b000041e 	bne	r22,zero,8003644 <_dtoa_r+0xe30>
 8003634:	d9000317 	ldw	r4,12(sp)
 8003638:	2000021e 	bne	r4,zero,8003644 <_dtoa_r+0xe30>
 800363c:	d8c00617 	ldw	r3,24(sp)
 8003640:	18005626 	beq	r3,zero,800379c <_dtoa_r+0xf88>
 8003644:	00814d16 	blt	zero,r2,8003b7c <_dtoa_r+0x1368>
 8003648:	d8c00417 	ldw	r3,16(sp)
 800364c:	9d800044 	addi	r22,r19,1
 8003650:	9c800005 	stb	r18,0(r19)
 8003654:	b02f883a 	mov	r23,r22
 8003658:	98c14c26 	beq	r19,r3,8003b8c <_dtoa_r+0x1378>
 800365c:	e00b883a 	mov	r5,fp
 8003660:	8009883a 	mov	r4,r16
 8003664:	01800284 	movi	r6,10
 8003668:	000f883a 	mov	r7,zero
 800366c:	80059200 	call	8005920 <__multadd>
 8003670:	1039883a 	mov	fp,r2
 8003674:	8d006d26 	beq	r17,r20,800382c <_dtoa_r+0x1018>
 8003678:	880b883a 	mov	r5,r17
 800367c:	01800284 	movi	r6,10
 8003680:	000f883a 	mov	r7,zero
 8003684:	8009883a 	mov	r4,r16
 8003688:	80059200 	call	8005920 <__multadd>
 800368c:	a00b883a 	mov	r5,r20
 8003690:	8009883a 	mov	r4,r16
 8003694:	01800284 	movi	r6,10
 8003698:	000f883a 	mov	r7,zero
 800369c:	1023883a 	mov	r17,r2
 80036a0:	80059200 	call	8005920 <__multadd>
 80036a4:	1029883a 	mov	r20,r2
 80036a8:	b027883a 	mov	r19,r22
 80036ac:	003fc006 	br	80035b0 <__alt_data_end+0xfc0035b0>
 80036b0:	a005883a 	mov	r2,r20
 80036b4:	003ede06 	br	8003230 <__alt_data_end+0xfc003230>
 80036b8:	01000044 	movi	r4,1
 80036bc:	d9000b15 	stw	r4,44(sp)
 80036c0:	d9802217 	ldw	r6,136(sp)
 80036c4:	0180dc0e 	bge	zero,r6,8003a38 <_dtoa_r+0x1224>
 80036c8:	3023883a 	mov	r17,r6
 80036cc:	d9800d15 	stw	r6,52(sp)
 80036d0:	d9800615 	stw	r6,24(sp)
 80036d4:	003d1e06 	br	8002b50 <__alt_data_end+0xfc002b50>
 80036d8:	d8800617 	ldw	r2,24(sp)
 80036dc:	00be3716 	blt	zero,r2,8002fbc <__alt_data_end+0xfc002fbc>
 80036e0:	1000be1e 	bne	r2,zero,80039dc <_dtoa_r+0x11c8>
 80036e4:	8809883a 	mov	r4,r17
 80036e8:	a00b883a 	mov	r5,r20
 80036ec:	000d883a 	mov	r6,zero
 80036f0:	01d00534 	movhi	r7,16404
 80036f4:	800b8300 	call	800b830 <__muldf3>
 80036f8:	1009883a 	mov	r4,r2
 80036fc:	180b883a 	mov	r5,r3
 8003700:	900d883a 	mov	r6,r18
 8003704:	980f883a 	mov	r7,r19
 8003708:	800b6700 	call	800b670 <__gedf2>
 800370c:	002b883a 	mov	r21,zero
 8003710:	0023883a 	mov	r17,zero
 8003714:	10007a16 	blt	r2,zero,8003900 <_dtoa_r+0x10ec>
 8003718:	d9002217 	ldw	r4,136(sp)
 800371c:	ddc00717 	ldw	r23,28(sp)
 8003720:	0108303a 	nor	r4,zero,r4
 8003724:	d9000515 	stw	r4,20(sp)
 8003728:	8009883a 	mov	r4,r16
 800372c:	a80b883a 	mov	r5,r21
 8003730:	80058f80 	call	80058f8 <_Bfree>
 8003734:	883f751e 	bne	r17,zero,800350c <__alt_data_end+0xfc00350c>
 8003738:	003de406 	br	8002ecc <__alt_data_end+0xfc002ecc>
 800373c:	e00b883a 	mov	r5,fp
 8003740:	8009883a 	mov	r4,r16
 8003744:	8005f440 	call	8005f44 <__pow5mult>
 8003748:	1039883a 	mov	fp,r2
 800374c:	003ed306 	br	800329c <__alt_data_end+0xfc00329c>
 8003750:	903ee01e 	bne	r18,zero,80032d4 <__alt_data_end+0xfc0032d4>
 8003754:	00800434 	movhi	r2,16
 8003758:	10bfffc4 	addi	r2,r2,-1
 800375c:	9884703a 	and	r2,r19,r2
 8003760:	103f081e 	bne	r2,zero,8003384 <__alt_data_end+0xfc003384>
 8003764:	9cdffc2c 	andhi	r19,r19,32752
 8003768:	983f0626 	beq	r19,zero,8003384 <__alt_data_end+0xfc003384>
 800376c:	d8800817 	ldw	r2,32(sp)
 8003770:	b5800044 	addi	r22,r22,1
 8003774:	04c00044 	movi	r19,1
 8003778:	10800044 	addi	r2,r2,1
 800377c:	d8800815 	stw	r2,32(sp)
 8003780:	003f0106 	br	8003388 <__alt_data_end+0xfc003388>
 8003784:	d9800f17 	ldw	r6,60(sp)
 8003788:	30016826 	beq	r6,zero,8003d2c <_dtoa_r+0x1518>
 800378c:	10810cc4 	addi	r2,r2,1075
 8003790:	dd400917 	ldw	r21,36(sp)
 8003794:	dd000817 	ldw	r20,32(sp)
 8003798:	003e9906 	br	8003200 <__alt_data_end+0xfc003200>
 800379c:	9011883a 	mov	r8,r18
 80037a0:	4007883a 	mov	r3,r8
 80037a4:	e02d883a 	mov	r22,fp
 80037a8:	0080100e 	bge	zero,r2,80037ec <_dtoa_r+0xfd8>
 80037ac:	01800044 	movi	r6,1
 80037b0:	8009883a 	mov	r4,r16
 80037b4:	e00b883a 	mov	r5,fp
 80037b8:	da001515 	stw	r8,84(sp)
 80037bc:	da001715 	stw	r8,92(sp)
 80037c0:	80060840 	call	8006084 <__lshift>
 80037c4:	1009883a 	mov	r4,r2
 80037c8:	a80b883a 	mov	r5,r21
 80037cc:	102d883a 	mov	r22,r2
 80037d0:	80061cc0 	call	80061cc <__mcmp>
 80037d4:	d8c01517 	ldw	r3,84(sp)
 80037d8:	da001717 	ldw	r8,92(sp)
 80037dc:	0081a50e 	bge	zero,r2,8003e74 <_dtoa_r+0x1660>
 80037e0:	00800e44 	movi	r2,57
 80037e4:	40817b26 	beq	r8,r2,8003dd4 <_dtoa_r+0x15c0>
 80037e8:	40c00044 	addi	r3,r8,1
 80037ec:	8825883a 	mov	r18,r17
 80037f0:	9dc00044 	addi	r23,r19,1
 80037f4:	98c00005 	stb	r3,0(r19)
 80037f8:	a023883a 	mov	r17,r20
 80037fc:	b039883a 	mov	fp,r22
 8003800:	003f3906 	br	80034e8 <__alt_data_end+0xfc0034e8>
 8003804:	00800e44 	movi	r2,57
 8003808:	9011883a 	mov	r8,r18
 800380c:	90817226 	beq	r18,r2,8003dd8 <_dtoa_r+0x15c4>
 8003810:	0580010e 	bge	zero,r22,8003818 <_dtoa_r+0x1004>
 8003814:	ba000c44 	addi	r8,r23,49
 8003818:	8825883a 	mov	r18,r17
 800381c:	9dc00044 	addi	r23,r19,1
 8003820:	9a000005 	stb	r8,0(r19)
 8003824:	a023883a 	mov	r17,r20
 8003828:	003f2f06 	br	80034e8 <__alt_data_end+0xfc0034e8>
 800382c:	880b883a 	mov	r5,r17
 8003830:	8009883a 	mov	r4,r16
 8003834:	01800284 	movi	r6,10
 8003838:	000f883a 	mov	r7,zero
 800383c:	80059200 	call	8005920 <__multadd>
 8003840:	1023883a 	mov	r17,r2
 8003844:	1029883a 	mov	r20,r2
 8003848:	003f9706 	br	80036a8 <__alt_data_end+0xfc0036a8>
 800384c:	8009883a 	mov	r4,r16
 8003850:	180b883a 	mov	r5,r3
 8003854:	80058f80 	call	80058f8 <_Bfree>
 8003858:	00800044 	movi	r2,1
 800385c:	003f7306 	br	800362c <__alt_data_end+0xfc00362c>
 8003860:	e009883a 	mov	r4,fp
 8003864:	a80b883a 	mov	r5,r21
 8003868:	80061cc0 	call	80061cc <__mcmp>
 800386c:	103ee60e 	bge	r2,zero,8003408 <__alt_data_end+0xfc003408>
 8003870:	8009883a 	mov	r4,r16
 8003874:	e00b883a 	mov	r5,fp
 8003878:	01800284 	movi	r6,10
 800387c:	000f883a 	mov	r7,zero
 8003880:	80059200 	call	8005920 <__multadd>
 8003884:	d9000517 	ldw	r4,20(sp)
 8003888:	d9800b17 	ldw	r6,44(sp)
 800388c:	1039883a 	mov	fp,r2
 8003890:	213fffc4 	addi	r4,r4,-1
 8003894:	d9000515 	stw	r4,20(sp)
 8003898:	303f2d1e 	bne	r6,zero,8003550 <__alt_data_end+0xfc003550>
 800389c:	d9000d17 	ldw	r4,52(sp)
 80038a0:	0101780e 	bge	zero,r4,8003e84 <_dtoa_r+0x1670>
 80038a4:	d9000615 	stw	r4,24(sp)
 80038a8:	003edb06 	br	8003418 <__alt_data_end+0xfc003418>
 80038ac:	00800084 	movi	r2,2
 80038b0:	30818e1e 	bne	r6,r2,8003eec <_dtoa_r+0x16d8>
 80038b4:	d8000b15 	stw	zero,44(sp)
 80038b8:	003f8106 	br	80036c0 <__alt_data_end+0xfc0036c0>
 80038bc:	d8800717 	ldw	r2,28(sp)
 80038c0:	003c0306 	br	80028d0 <__alt_data_end+0xfc0028d0>
 80038c4:	d9000317 	ldw	r4,12(sp)
 80038c8:	00800084 	movi	r2,2
 80038cc:	113ed00e 	bge	r2,r4,8003410 <__alt_data_end+0xfc003410>
 80038d0:	d8c00617 	ldw	r3,24(sp)
 80038d4:	183f901e 	bne	r3,zero,8003718 <__alt_data_end+0xfc003718>
 80038d8:	a80b883a 	mov	r5,r21
 80038dc:	8009883a 	mov	r4,r16
 80038e0:	01800144 	movi	r6,5
 80038e4:	000f883a 	mov	r7,zero
 80038e8:	80059200 	call	8005920 <__multadd>
 80038ec:	e009883a 	mov	r4,fp
 80038f0:	100b883a 	mov	r5,r2
 80038f4:	102b883a 	mov	r21,r2
 80038f8:	80061cc0 	call	80061cc <__mcmp>
 80038fc:	00bf860e 	bge	zero,r2,8003718 <__alt_data_end+0xfc003718>
 8003900:	d9800717 	ldw	r6,28(sp)
 8003904:	00800c44 	movi	r2,49
 8003908:	30800005 	stb	r2,0(r6)
 800390c:	d8800517 	ldw	r2,20(sp)
 8003910:	35c00044 	addi	r23,r6,1
 8003914:	10800044 	addi	r2,r2,1
 8003918:	d8800515 	stw	r2,20(sp)
 800391c:	003f8206 	br	8003728 <__alt_data_end+0xfc003728>
 8003920:	903e981e 	bne	r18,zero,8003384 <__alt_data_end+0xfc003384>
 8003924:	003f8b06 	br	8003754 <__alt_data_end+0xfc003754>
 8003928:	d9800517 	ldw	r6,20(sp)
 800392c:	d8c00717 	ldw	r3,28(sp)
 8003930:	00800c44 	movi	r2,49
 8003934:	31800044 	addi	r6,r6,1
 8003938:	d9800515 	stw	r6,20(sp)
 800393c:	18800005 	stb	r2,0(r3)
 8003940:	003ee906 	br	80034e8 <__alt_data_end+0xfc0034e8>
 8003944:	dc000317 	ldw	r16,12(sp)
 8003948:	003d6006 	br	8002ecc <__alt_data_end+0xfc002ecc>
 800394c:	8809883a 	mov	r4,r17
 8003950:	800c9f40 	call	800c9f4 <__floatsidf>
 8003954:	a009883a 	mov	r4,r20
 8003958:	a80b883a 	mov	r5,r21
 800395c:	100d883a 	mov	r6,r2
 8003960:	180f883a 	mov	r7,r3
 8003964:	800b8300 	call	800b830 <__muldf3>
 8003968:	1009883a 	mov	r4,r2
 800396c:	180b883a 	mov	r5,r3
 8003970:	000d883a 	mov	r6,zero
 8003974:	01d00734 	movhi	r7,16412
 8003978:	800a3d00 	call	800a3d0 <__adddf3>
 800397c:	1023883a 	mov	r17,r2
 8003980:	00bf3034 	movhi	r2,64704
 8003984:	1885883a 	add	r2,r3,r2
 8003988:	d8800e15 	stw	r2,56(sp)
 800398c:	a009883a 	mov	r4,r20
 8003990:	a80b883a 	mov	r5,r21
 8003994:	000d883a 	mov	r6,zero
 8003998:	01d00534 	movhi	r7,16404
 800399c:	800c09c0 	call	800c09c <__subdf3>
 80039a0:	d9c00e17 	ldw	r7,56(sp)
 80039a4:	1009883a 	mov	r4,r2
 80039a8:	180b883a 	mov	r5,r3
 80039ac:	880d883a 	mov	r6,r17
 80039b0:	102b883a 	mov	r21,r2
 80039b4:	1829883a 	mov	r20,r3
 80039b8:	800b6700 	call	800b670 <__gedf2>
 80039bc:	00807716 	blt	zero,r2,8003b9c <_dtoa_r+0x1388>
 80039c0:	d8800e17 	ldw	r2,56(sp)
 80039c4:	a809883a 	mov	r4,r21
 80039c8:	a00b883a 	mov	r5,r20
 80039cc:	11e0003c 	xorhi	r7,r2,32768
 80039d0:	880d883a 	mov	r6,r17
 80039d4:	800b7500 	call	800b750 <__ledf2>
 80039d8:	103d6b0e 	bge	r2,zero,8002f88 <__alt_data_end+0xfc002f88>
 80039dc:	002b883a 	mov	r21,zero
 80039e0:	0023883a 	mov	r17,zero
 80039e4:	003f4c06 	br	8003718 <__alt_data_end+0xfc003718>
 80039e8:	d9800917 	ldw	r6,36(sp)
 80039ec:	e00b883a 	mov	r5,fp
 80039f0:	8009883a 	mov	r4,r16
 80039f4:	8005f440 	call	8005f44 <__pow5mult>
 80039f8:	1039883a 	mov	fp,r2
 80039fc:	003e2706 	br	800329c <__alt_data_end+0xfc00329c>
 8003a00:	d8000b15 	stw	zero,44(sp)
 8003a04:	003c4906 	br	8002b2c <__alt_data_end+0xfc002b2c>
 8003a08:	d9000917 	ldw	r4,36(sp)
 8003a0c:	d9800a17 	ldw	r6,40(sp)
 8003a10:	dd400915 	stw	r21,36(sp)
 8003a14:	a905c83a 	sub	r2,r21,r4
 8003a18:	308d883a 	add	r6,r6,r2
 8003a1c:	d9800a15 	stw	r6,40(sp)
 8003a20:	002b883a 	mov	r21,zero
 8003a24:	003df206 	br	80031f0 <__alt_data_end+0xfc0031f0>
 8003a28:	dc800e15 	stw	r18,56(sp)
 8003a2c:	982b883a 	mov	r21,r19
 8003a30:	04400084 	movi	r17,2
 8003a34:	003c7406 	br	8002c08 <__alt_data_end+0xfc002c08>
 8003a38:	04400044 	movi	r17,1
 8003a3c:	dc400d15 	stw	r17,52(sp)
 8003a40:	dc400615 	stw	r17,24(sp)
 8003a44:	dc402215 	stw	r17,136(sp)
 8003a48:	80001115 	stw	zero,68(r16)
 8003a4c:	000b883a 	mov	r5,zero
 8003a50:	003c4a06 	br	8002b7c <__alt_data_end+0xfc002b7c>
 8003a54:	3023883a 	mov	r17,r6
 8003a58:	003ffb06 	br	8003a48 <__alt_data_end+0xfc003a48>
 8003a5c:	1000021e 	bne	r2,zero,8003a68 <_dtoa_r+0x1254>
 8003a60:	4200004c 	andi	r8,r8,1
 8003a64:	403e8f1e 	bne	r8,zero,80034a4 <__alt_data_end+0xfc0034a4>
 8003a68:	01000c04 	movi	r4,48
 8003a6c:	00000106 	br	8003a74 <_dtoa_r+0x1260>
 8003a70:	102f883a 	mov	r23,r2
 8003a74:	b8bfffc4 	addi	r2,r23,-1
 8003a78:	10c00007 	ldb	r3,0(r2)
 8003a7c:	193ffc26 	beq	r3,r4,8003a70 <__alt_data_end+0xfc003a70>
 8003a80:	003e9906 	br	80034e8 <__alt_data_end+0xfc0034e8>
 8003a84:	d9000517 	ldw	r4,20(sp)
 8003a88:	012fc83a 	sub	r23,zero,r4
 8003a8c:	b800ad26 	beq	r23,zero,8003d44 <_dtoa_r+0x1530>
 8003a90:	b88003cc 	andi	r2,r23,15
 8003a94:	100490fa 	slli	r2,r2,3
 8003a98:	00c20074 	movhi	r3,2049
 8003a9c:	18fd1004 	addi	r3,r3,-3008
 8003aa0:	1885883a 	add	r2,r3,r2
 8003aa4:	11800017 	ldw	r6,0(r2)
 8003aa8:	11c00117 	ldw	r7,4(r2)
 8003aac:	b82fd13a 	srai	r23,r23,4
 8003ab0:	9009883a 	mov	r4,r18
 8003ab4:	980b883a 	mov	r5,r19
 8003ab8:	800b8300 	call	800b830 <__muldf3>
 8003abc:	1029883a 	mov	r20,r2
 8003ac0:	182b883a 	mov	r21,r3
 8003ac4:	b800f426 	beq	r23,zero,8003e98 <_dtoa_r+0x1684>
 8003ac8:	02020074 	movhi	r8,2049
 8003acc:	423d0604 	addi	r8,r8,-3048
 8003ad0:	8029883a 	mov	r20,r16
 8003ad4:	04400084 	movi	r17,2
 8003ad8:	4021883a 	mov	r16,r8
 8003adc:	b980004c 	andi	r6,r23,1
 8003ae0:	1009883a 	mov	r4,r2
 8003ae4:	b82fd07a 	srai	r23,r23,1
 8003ae8:	180b883a 	mov	r5,r3
 8003aec:	30000426 	beq	r6,zero,8003b00 <_dtoa_r+0x12ec>
 8003af0:	81800017 	ldw	r6,0(r16)
 8003af4:	81c00117 	ldw	r7,4(r16)
 8003af8:	8c400044 	addi	r17,r17,1
 8003afc:	800b8300 	call	800b830 <__muldf3>
 8003b00:	84000204 	addi	r16,r16,8
 8003b04:	b83ff51e 	bne	r23,zero,8003adc <__alt_data_end+0xfc003adc>
 8003b08:	a021883a 	mov	r16,r20
 8003b0c:	182b883a 	mov	r21,r3
 8003b10:	1029883a 	mov	r20,r2
 8003b14:	003c5506 	br	8002c6c <__alt_data_end+0xfc002c6c>
 8003b18:	d9800517 	ldw	r6,20(sp)
 8003b1c:	d9000717 	ldw	r4,28(sp)
 8003b20:	00c00c04 	movi	r3,48
 8003b24:	31800044 	addi	r6,r6,1
 8003b28:	d9800515 	stw	r6,20(sp)
 8003b2c:	20c00005 	stb	r3,0(r4)
 8003b30:	02000c44 	movi	r8,49
 8003b34:	003da206 	br	80031c0 <__alt_data_end+0xfc0031c0>
 8003b38:	89400117 	ldw	r5,4(r17)
 8003b3c:	8009883a 	mov	r4,r16
 8003b40:	80058500 	call	8005850 <_Balloc>
 8003b44:	89800417 	ldw	r6,16(r17)
 8003b48:	11000304 	addi	r4,r2,12
 8003b4c:	89400304 	addi	r5,r17,12
 8003b50:	31800084 	addi	r6,r6,2
 8003b54:	318d883a 	add	r6,r6,r6
 8003b58:	318d883a 	add	r6,r6,r6
 8003b5c:	1027883a 	mov	r19,r2
 8003b60:	80055f40 	call	80055f4 <memcpy>
 8003b64:	8009883a 	mov	r4,r16
 8003b68:	980b883a 	mov	r5,r19
 8003b6c:	01800044 	movi	r6,1
 8003b70:	80060840 	call	8006084 <__lshift>
 8003b74:	1029883a 	mov	r20,r2
 8003b78:	003e8606 	br	8003594 <__alt_data_end+0xfc003594>
 8003b7c:	00800e44 	movi	r2,57
 8003b80:	90809526 	beq	r18,r2,8003dd8 <_dtoa_r+0x15c4>
 8003b84:	92000044 	addi	r8,r18,1
 8003b88:	003f2306 	br	8003818 <__alt_data_end+0xfc003818>
 8003b8c:	9011883a 	mov	r8,r18
 8003b90:	8825883a 	mov	r18,r17
 8003b94:	a023883a 	mov	r17,r20
 8003b98:	003e3706 	br	8003478 <__alt_data_end+0xfc003478>
 8003b9c:	002b883a 	mov	r21,zero
 8003ba0:	0023883a 	mov	r17,zero
 8003ba4:	003f5606 	br	8003900 <__alt_data_end+0xfc003900>
 8003ba8:	51bfffc4 	addi	r6,r10,-1
 8003bac:	300490fa 	slli	r2,r6,3
 8003bb0:	00c20074 	movhi	r3,2049
 8003bb4:	18fd1004 	addi	r3,r3,-3008
 8003bb8:	1885883a 	add	r2,r3,r2
 8003bbc:	d9c00e17 	ldw	r7,56(sp)
 8003bc0:	11000017 	ldw	r4,0(r2)
 8003bc4:	11400117 	ldw	r5,4(r2)
 8003bc8:	d8800717 	ldw	r2,28(sp)
 8003bcc:	d9801015 	stw	r6,64(sp)
 8003bd0:	880d883a 	mov	r6,r17
 8003bd4:	da801615 	stw	r10,88(sp)
 8003bd8:	15c00044 	addi	r23,r2,1
 8003bdc:	800b8300 	call	800b830 <__muldf3>
 8003be0:	a80b883a 	mov	r5,r21
 8003be4:	a009883a 	mov	r4,r20
 8003be8:	d8c01115 	stw	r3,68(sp)
 8003bec:	d8800e15 	stw	r2,56(sp)
 8003bf0:	800c96c0 	call	800c96c <__fixdfsi>
 8003bf4:	1009883a 	mov	r4,r2
 8003bf8:	1023883a 	mov	r17,r2
 8003bfc:	800c9f40 	call	800c9f4 <__floatsidf>
 8003c00:	a009883a 	mov	r4,r20
 8003c04:	a80b883a 	mov	r5,r21
 8003c08:	100d883a 	mov	r6,r2
 8003c0c:	180f883a 	mov	r7,r3
 8003c10:	800c09c0 	call	800c09c <__subdf3>
 8003c14:	1813883a 	mov	r9,r3
 8003c18:	d8c00717 	ldw	r3,28(sp)
 8003c1c:	8c400c04 	addi	r17,r17,48
 8003c20:	1011883a 	mov	r8,r2
 8003c24:	1c400005 	stb	r17,0(r3)
 8003c28:	da801617 	ldw	r10,88(sp)
 8003c2c:	00800044 	movi	r2,1
 8003c30:	50802326 	beq	r10,r2,8003cc0 <_dtoa_r+0x14ac>
 8003c34:	d8800717 	ldw	r2,28(sp)
 8003c38:	b82b883a 	mov	r21,r23
 8003c3c:	dc001315 	stw	r16,76(sp)
 8003c40:	12a9883a 	add	r20,r2,r10
 8003c44:	4807883a 	mov	r3,r9
 8003c48:	4005883a 	mov	r2,r8
 8003c4c:	dc801415 	stw	r18,80(sp)
 8003c50:	000d883a 	mov	r6,zero
 8003c54:	01d00934 	movhi	r7,16420
 8003c58:	1009883a 	mov	r4,r2
 8003c5c:	180b883a 	mov	r5,r3
 8003c60:	800b8300 	call	800b830 <__muldf3>
 8003c64:	180b883a 	mov	r5,r3
 8003c68:	1009883a 	mov	r4,r2
 8003c6c:	1821883a 	mov	r16,r3
 8003c70:	1025883a 	mov	r18,r2
 8003c74:	800c96c0 	call	800c96c <__fixdfsi>
 8003c78:	1009883a 	mov	r4,r2
 8003c7c:	1023883a 	mov	r17,r2
 8003c80:	800c9f40 	call	800c9f4 <__floatsidf>
 8003c84:	9009883a 	mov	r4,r18
 8003c88:	800b883a 	mov	r5,r16
 8003c8c:	100d883a 	mov	r6,r2
 8003c90:	180f883a 	mov	r7,r3
 8003c94:	8c400c04 	addi	r17,r17,48
 8003c98:	800c09c0 	call	800c09c <__subdf3>
 8003c9c:	ad400044 	addi	r21,r21,1
 8003ca0:	ac7fffc5 	stb	r17,-1(r21)
 8003ca4:	ad3fea1e 	bne	r21,r20,8003c50 <__alt_data_end+0xfc003c50>
 8003ca8:	1813883a 	mov	r9,r3
 8003cac:	d8c01017 	ldw	r3,64(sp)
 8003cb0:	dc001317 	ldw	r16,76(sp)
 8003cb4:	dc801417 	ldw	r18,80(sp)
 8003cb8:	1011883a 	mov	r8,r2
 8003cbc:	b8ef883a 	add	r23,r23,r3
 8003cc0:	d9000e17 	ldw	r4,56(sp)
 8003cc4:	d9401117 	ldw	r5,68(sp)
 8003cc8:	000d883a 	mov	r6,zero
 8003ccc:	01cff834 	movhi	r7,16352
 8003cd0:	da001715 	stw	r8,92(sp)
 8003cd4:	da401515 	stw	r9,84(sp)
 8003cd8:	800a3d00 	call	800a3d0 <__adddf3>
 8003cdc:	da001717 	ldw	r8,92(sp)
 8003ce0:	da401517 	ldw	r9,84(sp)
 8003ce4:	1009883a 	mov	r4,r2
 8003ce8:	400d883a 	mov	r6,r8
 8003cec:	480f883a 	mov	r7,r9
 8003cf0:	180b883a 	mov	r5,r3
 8003cf4:	800b7500 	call	800b750 <__ledf2>
 8003cf8:	da001717 	ldw	r8,92(sp)
 8003cfc:	da401517 	ldw	r9,84(sp)
 8003d00:	10003b0e 	bge	r2,zero,8003df0 <_dtoa_r+0x15dc>
 8003d04:	d9001217 	ldw	r4,72(sp)
 8003d08:	bd7fffc3 	ldbu	r21,-1(r23)
 8003d0c:	d9000515 	stw	r4,20(sp)
 8003d10:	003d1c06 	br	8003184 <__alt_data_end+0xfc003184>
 8003d14:	d8c00817 	ldw	r3,32(sp)
 8003d18:	18a9c83a 	sub	r20,r3,r2
 8003d1c:	0005883a 	mov	r2,zero
 8003d20:	003d3706 	br	8003200 <__alt_data_end+0xfc003200>
 8003d24:	00800044 	movi	r2,1
 8003d28:	003dd006 	br	800346c <__alt_data_end+0xfc00346c>
 8003d2c:	d8c00217 	ldw	r3,8(sp)
 8003d30:	00800d84 	movi	r2,54
 8003d34:	dd400917 	ldw	r21,36(sp)
 8003d38:	10c5c83a 	sub	r2,r2,r3
 8003d3c:	dd000817 	ldw	r20,32(sp)
 8003d40:	003d2f06 	br	8003200 <__alt_data_end+0xfc003200>
 8003d44:	9029883a 	mov	r20,r18
 8003d48:	982b883a 	mov	r21,r19
 8003d4c:	04400084 	movi	r17,2
 8003d50:	003bc606 	br	8002c6c <__alt_data_end+0xfc002c6c>
 8003d54:	d8800617 	ldw	r2,24(sp)
 8003d58:	103efc26 	beq	r2,zero,800394c <__alt_data_end+0xfc00394c>
 8003d5c:	d8c00d17 	ldw	r3,52(sp)
 8003d60:	00fc890e 	bge	zero,r3,8002f88 <__alt_data_end+0xfc002f88>
 8003d64:	a80b883a 	mov	r5,r21
 8003d68:	a009883a 	mov	r4,r20
 8003d6c:	000d883a 	mov	r6,zero
 8003d70:	01d00934 	movhi	r7,16420
 8003d74:	800b8300 	call	800b830 <__muldf3>
 8003d78:	89000044 	addi	r4,r17,1
 8003d7c:	1029883a 	mov	r20,r2
 8003d80:	182b883a 	mov	r21,r3
 8003d84:	800c9f40 	call	800c9f4 <__floatsidf>
 8003d88:	a009883a 	mov	r4,r20
 8003d8c:	a80b883a 	mov	r5,r21
 8003d90:	100d883a 	mov	r6,r2
 8003d94:	180f883a 	mov	r7,r3
 8003d98:	800b8300 	call	800b830 <__muldf3>
 8003d9c:	1009883a 	mov	r4,r2
 8003da0:	180b883a 	mov	r5,r3
 8003da4:	000d883a 	mov	r6,zero
 8003da8:	01d00734 	movhi	r7,16412
 8003dac:	800a3d00 	call	800a3d0 <__adddf3>
 8003db0:	d9000517 	ldw	r4,20(sp)
 8003db4:	1023883a 	mov	r17,r2
 8003db8:	00bf3034 	movhi	r2,64704
 8003dbc:	213fffc4 	addi	r4,r4,-1
 8003dc0:	1885883a 	add	r2,r3,r2
 8003dc4:	d9001215 	stw	r4,72(sp)
 8003dc8:	d8800e15 	stw	r2,56(sp)
 8003dcc:	da800d17 	ldw	r10,52(sp)
 8003dd0:	003bc306 	br	8002ce0 <__alt_data_end+0xfc002ce0>
 8003dd4:	b039883a 	mov	fp,r22
 8003dd8:	01000e44 	movi	r4,57
 8003ddc:	8825883a 	mov	r18,r17
 8003de0:	9dc00044 	addi	r23,r19,1
 8003de4:	99000005 	stb	r4,0(r19)
 8003de8:	a023883a 	mov	r17,r20
 8003dec:	003dae06 	br	80034a8 <__alt_data_end+0xfc0034a8>
 8003df0:	d9800e17 	ldw	r6,56(sp)
 8003df4:	d9c01117 	ldw	r7,68(sp)
 8003df8:	0009883a 	mov	r4,zero
 8003dfc:	014ff834 	movhi	r5,16352
 8003e00:	da001715 	stw	r8,92(sp)
 8003e04:	da401515 	stw	r9,84(sp)
 8003e08:	800c09c0 	call	800c09c <__subdf3>
 8003e0c:	da001717 	ldw	r8,92(sp)
 8003e10:	da401517 	ldw	r9,84(sp)
 8003e14:	1009883a 	mov	r4,r2
 8003e18:	180b883a 	mov	r5,r3
 8003e1c:	400d883a 	mov	r6,r8
 8003e20:	480f883a 	mov	r7,r9
 8003e24:	800b6700 	call	800b670 <__gedf2>
 8003e28:	00bc570e 	bge	zero,r2,8002f88 <__alt_data_end+0xfc002f88>
 8003e2c:	01000c04 	movi	r4,48
 8003e30:	00000106 	br	8003e38 <_dtoa_r+0x1624>
 8003e34:	102f883a 	mov	r23,r2
 8003e38:	b8bfffc4 	addi	r2,r23,-1
 8003e3c:	10c00007 	ldb	r3,0(r2)
 8003e40:	193ffc26 	beq	r3,r4,8003e34 <__alt_data_end+0xfc003e34>
 8003e44:	d9801217 	ldw	r6,72(sp)
 8003e48:	d9800515 	stw	r6,20(sp)
 8003e4c:	003c1f06 	br	8002ecc <__alt_data_end+0xfc002ecc>
 8003e50:	d8801217 	ldw	r2,72(sp)
 8003e54:	dc001117 	ldw	r16,68(sp)
 8003e58:	d8800515 	stw	r2,20(sp)
 8003e5c:	003cc906 	br	8003184 <__alt_data_end+0xfc003184>
 8003e60:	dd801317 	ldw	r22,76(sp)
 8003e64:	dc001117 	ldw	r16,68(sp)
 8003e68:	dcc01417 	ldw	r19,80(sp)
 8003e6c:	dc801017 	ldw	r18,64(sp)
 8003e70:	003c4506 	br	8002f88 <__alt_data_end+0xfc002f88>
 8003e74:	103e5d1e 	bne	r2,zero,80037ec <__alt_data_end+0xfc0037ec>
 8003e78:	4080004c 	andi	r2,r8,1
 8003e7c:	103e5b26 	beq	r2,zero,80037ec <__alt_data_end+0xfc0037ec>
 8003e80:	003e5706 	br	80037e0 <__alt_data_end+0xfc0037e0>
 8003e84:	d8c00317 	ldw	r3,12(sp)
 8003e88:	00800084 	movi	r2,2
 8003e8c:	10c00a16 	blt	r2,r3,8003eb8 <_dtoa_r+0x16a4>
 8003e90:	d9000d17 	ldw	r4,52(sp)
 8003e94:	003e8306 	br	80038a4 <__alt_data_end+0xfc0038a4>
 8003e98:	04400084 	movi	r17,2
 8003e9c:	003b7306 	br	8002c6c <__alt_data_end+0xfc002c6c>
 8003ea0:	d9801217 	ldw	r6,72(sp)
 8003ea4:	d9800515 	stw	r6,20(sp)
 8003ea8:	003cb606 	br	8003184 <__alt_data_end+0xfc003184>
 8003eac:	d9001217 	ldw	r4,72(sp)
 8003eb0:	d9000515 	stw	r4,20(sp)
 8003eb4:	003c0506 	br	8002ecc <__alt_data_end+0xfc002ecc>
 8003eb8:	d9800d17 	ldw	r6,52(sp)
 8003ebc:	d9800615 	stw	r6,24(sp)
 8003ec0:	003e8306 	br	80038d0 <__alt_data_end+0xfc0038d0>
 8003ec4:	d9800317 	ldw	r6,12(sp)
 8003ec8:	00800084 	movi	r2,2
 8003ecc:	11800216 	blt	r2,r6,8003ed8 <_dtoa_r+0x16c4>
 8003ed0:	d8800d17 	ldw	r2,52(sp)
 8003ed4:	003da606 	br	8003570 <__alt_data_end+0xfc003570>
 8003ed8:	d8800d17 	ldw	r2,52(sp)
 8003edc:	d8800615 	stw	r2,24(sp)
 8003ee0:	003e7b06 	br	80038d0 <__alt_data_end+0xfc0038d0>
 8003ee4:	05000044 	movi	r20,1
 8003ee8:	003b0506 	br	8002b00 <__alt_data_end+0xfc002b00>
 8003eec:	8009883a 	mov	r4,r16
 8003ef0:	80001115 	stw	zero,68(r16)
 8003ef4:	000b883a 	mov	r5,zero
 8003ef8:	80058500 	call	8005850 <_Balloc>
 8003efc:	d8800715 	stw	r2,28(sp)
 8003f00:	d8c00717 	ldw	r3,28(sp)
 8003f04:	00bfffc4 	movi	r2,-1
 8003f08:	01000044 	movi	r4,1
 8003f0c:	d8800615 	stw	r2,24(sp)
 8003f10:	80c01015 	stw	r3,64(r16)
 8003f14:	d9000b15 	stw	r4,44(sp)
 8003f18:	d8002215 	stw	zero,136(sp)
 8003f1c:	d8800d15 	stw	r2,52(sp)
 8003f20:	003c1906 	br	8002f88 <__alt_data_end+0xfc002f88>
 8003f24:	193d2926 	beq	r3,r4,80033cc <__alt_data_end+0xfc0033cc>
 8003f28:	00c00f04 	movi	r3,60
 8003f2c:	1885c83a 	sub	r2,r3,r2
 8003f30:	003d7b06 	br	8003520 <__alt_data_end+0xfc003520>
 8003f34:	000b883a 	mov	r5,zero
 8003f38:	003b1006 	br	8002b7c <__alt_data_end+0xfc002b7c>

08003f3c <_fflush_r>:
 8003f3c:	defffb04 	addi	sp,sp,-20
 8003f40:	dcc00315 	stw	r19,12(sp)
 8003f44:	dc000015 	stw	r16,0(sp)
 8003f48:	dfc00415 	stw	ra,16(sp)
 8003f4c:	dc800215 	stw	r18,8(sp)
 8003f50:	dc400115 	stw	r17,4(sp)
 8003f54:	2027883a 	mov	r19,r4
 8003f58:	2821883a 	mov	r16,r5
 8003f5c:	20000226 	beq	r4,zero,8003f68 <_fflush_r+0x2c>
 8003f60:	20800e17 	ldw	r2,56(r4)
 8003f64:	10005326 	beq	r2,zero,80040b4 <_fflush_r+0x178>
 8003f68:	8080030b 	ldhu	r2,12(r16)
 8003f6c:	10ffffcc 	andi	r3,r2,65535
 8003f70:	18e0001c 	xori	r3,r3,32768
 8003f74:	18e00004 	addi	r3,r3,-32768
 8003f78:	18002c26 	beq	r3,zero,800402c <_fflush_r+0xf0>
 8003f7c:	10c0020c 	andi	r3,r2,8
 8003f80:	1800321e 	bne	r3,zero,800404c <_fflush_r+0x110>
 8003f84:	80c00117 	ldw	r3,4(r16)
 8003f88:	10820014 	ori	r2,r2,2048
 8003f8c:	8080030d 	sth	r2,12(r16)
 8003f90:	00c0570e 	bge	zero,r3,80040f0 <_fflush_r+0x1b4>
 8003f94:	82000a17 	ldw	r8,40(r16)
 8003f98:	40002426 	beq	r8,zero,800402c <_fflush_r+0xf0>
 8003f9c:	9c400017 	ldw	r17,0(r19)
 8003fa0:	10c4000c 	andi	r3,r2,4096
 8003fa4:	98000015 	stw	zero,0(r19)
 8003fa8:	18004626 	beq	r3,zero,80040c4 <_fflush_r+0x188>
 8003fac:	81801417 	ldw	r6,80(r16)
 8003fb0:	10c0010c 	andi	r3,r2,4
 8003fb4:	18000626 	beq	r3,zero,8003fd0 <_fflush_r+0x94>
 8003fb8:	80c00117 	ldw	r3,4(r16)
 8003fbc:	80800c17 	ldw	r2,48(r16)
 8003fc0:	30cdc83a 	sub	r6,r6,r3
 8003fc4:	10000226 	beq	r2,zero,8003fd0 <_fflush_r+0x94>
 8003fc8:	80800f17 	ldw	r2,60(r16)
 8003fcc:	308dc83a 	sub	r6,r6,r2
 8003fd0:	81400717 	ldw	r5,28(r16)
 8003fd4:	9809883a 	mov	r4,r19
 8003fd8:	000f883a 	mov	r7,zero
 8003fdc:	403ee83a 	callr	r8
 8003fe0:	00ffffc4 	movi	r3,-1
 8003fe4:	10c04526 	beq	r2,r3,80040fc <_fflush_r+0x1c0>
 8003fe8:	80c0030b 	ldhu	r3,12(r16)
 8003fec:	81000417 	ldw	r4,16(r16)
 8003ff0:	80000115 	stw	zero,4(r16)
 8003ff4:	197dffcc 	andi	r5,r3,63487
 8003ff8:	8140030d 	sth	r5,12(r16)
 8003ffc:	81000015 	stw	r4,0(r16)
 8004000:	18c4000c 	andi	r3,r3,4096
 8004004:	18000126 	beq	r3,zero,800400c <_fflush_r+0xd0>
 8004008:	80801415 	stw	r2,80(r16)
 800400c:	81400c17 	ldw	r5,48(r16)
 8004010:	9c400015 	stw	r17,0(r19)
 8004014:	28000526 	beq	r5,zero,800402c <_fflush_r+0xf0>
 8004018:	80801004 	addi	r2,r16,64
 800401c:	28800226 	beq	r5,r2,8004028 <_fflush_r+0xec>
 8004020:	9809883a 	mov	r4,r19
 8004024:	800466c0 	call	800466c <_free_r>
 8004028:	80000c15 	stw	zero,48(r16)
 800402c:	0005883a 	mov	r2,zero
 8004030:	dfc00417 	ldw	ra,16(sp)
 8004034:	dcc00317 	ldw	r19,12(sp)
 8004038:	dc800217 	ldw	r18,8(sp)
 800403c:	dc400117 	ldw	r17,4(sp)
 8004040:	dc000017 	ldw	r16,0(sp)
 8004044:	dec00504 	addi	sp,sp,20
 8004048:	f800283a 	ret
 800404c:	84800417 	ldw	r18,16(r16)
 8004050:	903ff626 	beq	r18,zero,800402c <__alt_data_end+0xfc00402c>
 8004054:	84400017 	ldw	r17,0(r16)
 8004058:	108000cc 	andi	r2,r2,3
 800405c:	84800015 	stw	r18,0(r16)
 8004060:	8ca3c83a 	sub	r17,r17,r18
 8004064:	10001526 	beq	r2,zero,80040bc <_fflush_r+0x180>
 8004068:	0005883a 	mov	r2,zero
 800406c:	80800215 	stw	r2,8(r16)
 8004070:	04400316 	blt	zero,r17,8004080 <_fflush_r+0x144>
 8004074:	003fed06 	br	800402c <__alt_data_end+0xfc00402c>
 8004078:	90a5883a 	add	r18,r18,r2
 800407c:	047feb0e 	bge	zero,r17,800402c <__alt_data_end+0xfc00402c>
 8004080:	80800917 	ldw	r2,36(r16)
 8004084:	81400717 	ldw	r5,28(r16)
 8004088:	880f883a 	mov	r7,r17
 800408c:	900d883a 	mov	r6,r18
 8004090:	9809883a 	mov	r4,r19
 8004094:	103ee83a 	callr	r2
 8004098:	88a3c83a 	sub	r17,r17,r2
 800409c:	00bff616 	blt	zero,r2,8004078 <__alt_data_end+0xfc004078>
 80040a0:	80c0030b 	ldhu	r3,12(r16)
 80040a4:	00bfffc4 	movi	r2,-1
 80040a8:	18c01014 	ori	r3,r3,64
 80040ac:	80c0030d 	sth	r3,12(r16)
 80040b0:	003fdf06 	br	8004030 <__alt_data_end+0xfc004030>
 80040b4:	80044f80 	call	80044f8 <__sinit>
 80040b8:	003fab06 	br	8003f68 <__alt_data_end+0xfc003f68>
 80040bc:	80800517 	ldw	r2,20(r16)
 80040c0:	003fea06 	br	800406c <__alt_data_end+0xfc00406c>
 80040c4:	81400717 	ldw	r5,28(r16)
 80040c8:	000d883a 	mov	r6,zero
 80040cc:	9809883a 	mov	r4,r19
 80040d0:	01c00044 	movi	r7,1
 80040d4:	403ee83a 	callr	r8
 80040d8:	100d883a 	mov	r6,r2
 80040dc:	00bfffc4 	movi	r2,-1
 80040e0:	30801326 	beq	r6,r2,8004130 <_fflush_r+0x1f4>
 80040e4:	8080030b 	ldhu	r2,12(r16)
 80040e8:	82000a17 	ldw	r8,40(r16)
 80040ec:	003fb006 	br	8003fb0 <__alt_data_end+0xfc003fb0>
 80040f0:	80c00f17 	ldw	r3,60(r16)
 80040f4:	00ffa716 	blt	zero,r3,8003f94 <__alt_data_end+0xfc003f94>
 80040f8:	003fcc06 	br	800402c <__alt_data_end+0xfc00402c>
 80040fc:	98c00017 	ldw	r3,0(r19)
 8004100:	183fb926 	beq	r3,zero,8003fe8 <__alt_data_end+0xfc003fe8>
 8004104:	01000744 	movi	r4,29
 8004108:	19000226 	beq	r3,r4,8004114 <_fflush_r+0x1d8>
 800410c:	01000584 	movi	r4,22
 8004110:	1900101e 	bne	r3,r4,8004154 <_fflush_r+0x218>
 8004114:	8080030b 	ldhu	r2,12(r16)
 8004118:	80c00417 	ldw	r3,16(r16)
 800411c:	80000115 	stw	zero,4(r16)
 8004120:	10bdffcc 	andi	r2,r2,63487
 8004124:	8080030d 	sth	r2,12(r16)
 8004128:	80c00015 	stw	r3,0(r16)
 800412c:	003fb706 	br	800400c <__alt_data_end+0xfc00400c>
 8004130:	98800017 	ldw	r2,0(r19)
 8004134:	103feb26 	beq	r2,zero,80040e4 <__alt_data_end+0xfc0040e4>
 8004138:	00c00744 	movi	r3,29
 800413c:	10c00226 	beq	r2,r3,8004148 <_fflush_r+0x20c>
 8004140:	00c00584 	movi	r3,22
 8004144:	10ffd61e 	bne	r2,r3,80040a0 <__alt_data_end+0xfc0040a0>
 8004148:	9c400015 	stw	r17,0(r19)
 800414c:	0005883a 	mov	r2,zero
 8004150:	003fb706 	br	8004030 <__alt_data_end+0xfc004030>
 8004154:	80c0030b 	ldhu	r3,12(r16)
 8004158:	18c01014 	ori	r3,r3,64
 800415c:	80c0030d 	sth	r3,12(r16)
 8004160:	003fb306 	br	8004030 <__alt_data_end+0xfc004030>

08004164 <fflush>:
 8004164:	20000526 	beq	r4,zero,800417c <fflush+0x18>
 8004168:	00820074 	movhi	r2,2049
 800416c:	10844304 	addi	r2,r2,4364
 8004170:	200b883a 	mov	r5,r4
 8004174:	11000017 	ldw	r4,0(r2)
 8004178:	8003f3c1 	jmpi	8003f3c <_fflush_r>
 800417c:	00820074 	movhi	r2,2049
 8004180:	10844204 	addi	r2,r2,4360
 8004184:	11000017 	ldw	r4,0(r2)
 8004188:	01420034 	movhi	r5,2048
 800418c:	294fcf04 	addi	r5,r5,16188
 8004190:	8004a141 	jmpi	8004a14 <_fwalk_reent>

08004194 <__fp_lock>:
 8004194:	0005883a 	mov	r2,zero
 8004198:	f800283a 	ret

0800419c <__fp_unlock>:
 800419c:	0005883a 	mov	r2,zero
 80041a0:	f800283a 	ret

080041a4 <_cleanup_r>:
 80041a4:	01420074 	movhi	r5,2049
 80041a8:	2960ef04 	addi	r5,r5,-31812
 80041ac:	800495c1 	jmpi	800495c <_fwalk>

080041b0 <__sinit.part.1>:
 80041b0:	defff604 	addi	sp,sp,-40
 80041b4:	00c20034 	movhi	r3,2048
 80041b8:	dfc00915 	stw	ra,36(sp)
 80041bc:	df000815 	stw	fp,32(sp)
 80041c0:	ddc00715 	stw	r23,28(sp)
 80041c4:	dd800615 	stw	r22,24(sp)
 80041c8:	dd400515 	stw	r21,20(sp)
 80041cc:	dd000415 	stw	r20,16(sp)
 80041d0:	dcc00315 	stw	r19,12(sp)
 80041d4:	dc800215 	stw	r18,8(sp)
 80041d8:	dc400115 	stw	r17,4(sp)
 80041dc:	dc000015 	stw	r16,0(sp)
 80041e0:	18d06904 	addi	r3,r3,16804
 80041e4:	24000117 	ldw	r16,4(r4)
 80041e8:	20c00f15 	stw	r3,60(r4)
 80041ec:	07000044 	movi	fp,1
 80041f0:	00c000c4 	movi	r3,3
 80041f4:	2080bb04 	addi	r2,r4,748
 80041f8:	20c0b915 	stw	r3,740(r4)
 80041fc:	27000e15 	stw	fp,56(r4)
 8004200:	2080ba15 	stw	r2,744(r4)
 8004204:	2000b815 	stw	zero,736(r4)
 8004208:	05c00204 	movi	r23,8
 800420c:	00800104 	movi	r2,4
 8004210:	2025883a 	mov	r18,r4
 8004214:	b80d883a 	mov	r6,r23
 8004218:	81001704 	addi	r4,r16,92
 800421c:	000b883a 	mov	r5,zero
 8004220:	80000015 	stw	zero,0(r16)
 8004224:	80000115 	stw	zero,4(r16)
 8004228:	80000215 	stw	zero,8(r16)
 800422c:	8080030d 	sth	r2,12(r16)
 8004230:	80001915 	stw	zero,100(r16)
 8004234:	8000038d 	sth	zero,14(r16)
 8004238:	80000415 	stw	zero,16(r16)
 800423c:	80000515 	stw	zero,20(r16)
 8004240:	80000615 	stw	zero,24(r16)
 8004244:	800572c0 	call	800572c <memset>
 8004248:	05820034 	movhi	r22,2048
 800424c:	94400217 	ldw	r17,8(r18)
 8004250:	05420034 	movhi	r21,2048
 8004254:	05020034 	movhi	r20,2048
 8004258:	04c20034 	movhi	r19,2048
 800425c:	b59a5804 	addi	r22,r22,26976
 8004260:	ad5a6f04 	addi	r21,r21,27068
 8004264:	a51a8e04 	addi	r20,r20,27192
 8004268:	9cdaa504 	addi	r19,r19,27284
 800426c:	85800815 	stw	r22,32(r16)
 8004270:	85400915 	stw	r21,36(r16)
 8004274:	85000a15 	stw	r20,40(r16)
 8004278:	84c00b15 	stw	r19,44(r16)
 800427c:	84000715 	stw	r16,28(r16)
 8004280:	00800284 	movi	r2,10
 8004284:	89001704 	addi	r4,r17,92
 8004288:	b80d883a 	mov	r6,r23
 800428c:	000b883a 	mov	r5,zero
 8004290:	88000015 	stw	zero,0(r17)
 8004294:	88000115 	stw	zero,4(r17)
 8004298:	88000215 	stw	zero,8(r17)
 800429c:	8880030d 	sth	r2,12(r17)
 80042a0:	88001915 	stw	zero,100(r17)
 80042a4:	8f00038d 	sth	fp,14(r17)
 80042a8:	88000415 	stw	zero,16(r17)
 80042ac:	88000515 	stw	zero,20(r17)
 80042b0:	88000615 	stw	zero,24(r17)
 80042b4:	800572c0 	call	800572c <memset>
 80042b8:	94000317 	ldw	r16,12(r18)
 80042bc:	00800484 	movi	r2,18
 80042c0:	8c400715 	stw	r17,28(r17)
 80042c4:	8d800815 	stw	r22,32(r17)
 80042c8:	8d400915 	stw	r21,36(r17)
 80042cc:	8d000a15 	stw	r20,40(r17)
 80042d0:	8cc00b15 	stw	r19,44(r17)
 80042d4:	8080030d 	sth	r2,12(r16)
 80042d8:	00800084 	movi	r2,2
 80042dc:	80000015 	stw	zero,0(r16)
 80042e0:	80000115 	stw	zero,4(r16)
 80042e4:	80000215 	stw	zero,8(r16)
 80042e8:	80001915 	stw	zero,100(r16)
 80042ec:	8080038d 	sth	r2,14(r16)
 80042f0:	80000415 	stw	zero,16(r16)
 80042f4:	80000515 	stw	zero,20(r16)
 80042f8:	80000615 	stw	zero,24(r16)
 80042fc:	81001704 	addi	r4,r16,92
 8004300:	000b883a 	mov	r5,zero
 8004304:	b80d883a 	mov	r6,r23
 8004308:	800572c0 	call	800572c <memset>
 800430c:	84000715 	stw	r16,28(r16)
 8004310:	85800815 	stw	r22,32(r16)
 8004314:	85400915 	stw	r21,36(r16)
 8004318:	85000a15 	stw	r20,40(r16)
 800431c:	84c00b15 	stw	r19,44(r16)
 8004320:	dfc00917 	ldw	ra,36(sp)
 8004324:	df000817 	ldw	fp,32(sp)
 8004328:	ddc00717 	ldw	r23,28(sp)
 800432c:	dd800617 	ldw	r22,24(sp)
 8004330:	dd400517 	ldw	r21,20(sp)
 8004334:	dd000417 	ldw	r20,16(sp)
 8004338:	dcc00317 	ldw	r19,12(sp)
 800433c:	dc800217 	ldw	r18,8(sp)
 8004340:	dc400117 	ldw	r17,4(sp)
 8004344:	dc000017 	ldw	r16,0(sp)
 8004348:	dec00a04 	addi	sp,sp,40
 800434c:	f800283a 	ret

08004350 <__sfmoreglue>:
 8004350:	defffc04 	addi	sp,sp,-16
 8004354:	dc800215 	stw	r18,8(sp)
 8004358:	2825883a 	mov	r18,r5
 800435c:	dc000015 	stw	r16,0(sp)
 8004360:	01401a04 	movi	r5,104
 8004364:	2021883a 	mov	r16,r4
 8004368:	9009883a 	mov	r4,r18
 800436c:	dfc00315 	stw	ra,12(sp)
 8004370:	dc400115 	stw	r17,4(sp)
 8004374:	800a3a80 	call	800a3a8 <__mulsi3>
 8004378:	8009883a 	mov	r4,r16
 800437c:	11400304 	addi	r5,r2,12
 8004380:	1023883a 	mov	r17,r2
 8004384:	8004d640 	call	8004d64 <_malloc_r>
 8004388:	1021883a 	mov	r16,r2
 800438c:	10000726 	beq	r2,zero,80043ac <__sfmoreglue+0x5c>
 8004390:	11000304 	addi	r4,r2,12
 8004394:	10000015 	stw	zero,0(r2)
 8004398:	14800115 	stw	r18,4(r2)
 800439c:	11000215 	stw	r4,8(r2)
 80043a0:	000b883a 	mov	r5,zero
 80043a4:	880d883a 	mov	r6,r17
 80043a8:	800572c0 	call	800572c <memset>
 80043ac:	8005883a 	mov	r2,r16
 80043b0:	dfc00317 	ldw	ra,12(sp)
 80043b4:	dc800217 	ldw	r18,8(sp)
 80043b8:	dc400117 	ldw	r17,4(sp)
 80043bc:	dc000017 	ldw	r16,0(sp)
 80043c0:	dec00404 	addi	sp,sp,16
 80043c4:	f800283a 	ret

080043c8 <__sfp>:
 80043c8:	00820074 	movhi	r2,2049
 80043cc:	defffb04 	addi	sp,sp,-20
 80043d0:	10844204 	addi	r2,r2,4360
 80043d4:	dc800215 	stw	r18,8(sp)
 80043d8:	14800017 	ldw	r18,0(r2)
 80043dc:	dcc00315 	stw	r19,12(sp)
 80043e0:	dfc00415 	stw	ra,16(sp)
 80043e4:	90800e17 	ldw	r2,56(r18)
 80043e8:	dc400115 	stw	r17,4(sp)
 80043ec:	dc000015 	stw	r16,0(sp)
 80043f0:	2027883a 	mov	r19,r4
 80043f4:	1000021e 	bne	r2,zero,8004400 <__sfp+0x38>
 80043f8:	9009883a 	mov	r4,r18
 80043fc:	80041b00 	call	80041b0 <__sinit.part.1>
 8004400:	9480b804 	addi	r18,r18,736
 8004404:	047fffc4 	movi	r17,-1
 8004408:	91400117 	ldw	r5,4(r18)
 800440c:	94000217 	ldw	r16,8(r18)
 8004410:	297fffc4 	addi	r5,r5,-1
 8004414:	28000a16 	blt	r5,zero,8004440 <__sfp+0x78>
 8004418:	8080030f 	ldh	r2,12(r16)
 800441c:	10000c26 	beq	r2,zero,8004450 <__sfp+0x88>
 8004420:	80c01d04 	addi	r3,r16,116
 8004424:	00000206 	br	8004430 <__sfp+0x68>
 8004428:	18bfe60f 	ldh	r2,-104(r3)
 800442c:	10000826 	beq	r2,zero,8004450 <__sfp+0x88>
 8004430:	297fffc4 	addi	r5,r5,-1
 8004434:	1c3ffd04 	addi	r16,r3,-12
 8004438:	18c01a04 	addi	r3,r3,104
 800443c:	2c7ffa1e 	bne	r5,r17,8004428 <__alt_data_end+0xfc004428>
 8004440:	90800017 	ldw	r2,0(r18)
 8004444:	10001d26 	beq	r2,zero,80044bc <__sfp+0xf4>
 8004448:	1025883a 	mov	r18,r2
 800444c:	003fee06 	br	8004408 <__alt_data_end+0xfc004408>
 8004450:	00bfffc4 	movi	r2,-1
 8004454:	8080038d 	sth	r2,14(r16)
 8004458:	00800044 	movi	r2,1
 800445c:	8080030d 	sth	r2,12(r16)
 8004460:	80001915 	stw	zero,100(r16)
 8004464:	80000015 	stw	zero,0(r16)
 8004468:	80000215 	stw	zero,8(r16)
 800446c:	80000115 	stw	zero,4(r16)
 8004470:	80000415 	stw	zero,16(r16)
 8004474:	80000515 	stw	zero,20(r16)
 8004478:	80000615 	stw	zero,24(r16)
 800447c:	81001704 	addi	r4,r16,92
 8004480:	000b883a 	mov	r5,zero
 8004484:	01800204 	movi	r6,8
 8004488:	800572c0 	call	800572c <memset>
 800448c:	8005883a 	mov	r2,r16
 8004490:	80000c15 	stw	zero,48(r16)
 8004494:	80000d15 	stw	zero,52(r16)
 8004498:	80001115 	stw	zero,68(r16)
 800449c:	80001215 	stw	zero,72(r16)
 80044a0:	dfc00417 	ldw	ra,16(sp)
 80044a4:	dcc00317 	ldw	r19,12(sp)
 80044a8:	dc800217 	ldw	r18,8(sp)
 80044ac:	dc400117 	ldw	r17,4(sp)
 80044b0:	dc000017 	ldw	r16,0(sp)
 80044b4:	dec00504 	addi	sp,sp,20
 80044b8:	f800283a 	ret
 80044bc:	9809883a 	mov	r4,r19
 80044c0:	01400104 	movi	r5,4
 80044c4:	80043500 	call	8004350 <__sfmoreglue>
 80044c8:	90800015 	stw	r2,0(r18)
 80044cc:	103fde1e 	bne	r2,zero,8004448 <__alt_data_end+0xfc004448>
 80044d0:	00800304 	movi	r2,12
 80044d4:	98800015 	stw	r2,0(r19)
 80044d8:	0005883a 	mov	r2,zero
 80044dc:	003ff006 	br	80044a0 <__alt_data_end+0xfc0044a0>

080044e0 <_cleanup>:
 80044e0:	00820074 	movhi	r2,2049
 80044e4:	10844204 	addi	r2,r2,4360
 80044e8:	11000017 	ldw	r4,0(r2)
 80044ec:	01420074 	movhi	r5,2049
 80044f0:	2960ef04 	addi	r5,r5,-31812
 80044f4:	800495c1 	jmpi	800495c <_fwalk>

080044f8 <__sinit>:
 80044f8:	20800e17 	ldw	r2,56(r4)
 80044fc:	10000126 	beq	r2,zero,8004504 <__sinit+0xc>
 8004500:	f800283a 	ret
 8004504:	80041b01 	jmpi	80041b0 <__sinit.part.1>

08004508 <__sfp_lock_acquire>:
 8004508:	f800283a 	ret

0800450c <__sfp_lock_release>:
 800450c:	f800283a 	ret

08004510 <__sinit_lock_acquire>:
 8004510:	f800283a 	ret

08004514 <__sinit_lock_release>:
 8004514:	f800283a 	ret

08004518 <__fp_lock_all>:
 8004518:	00820074 	movhi	r2,2049
 800451c:	10844304 	addi	r2,r2,4364
 8004520:	11000017 	ldw	r4,0(r2)
 8004524:	01420034 	movhi	r5,2048
 8004528:	29506504 	addi	r5,r5,16788
 800452c:	800495c1 	jmpi	800495c <_fwalk>

08004530 <__fp_unlock_all>:
 8004530:	00820074 	movhi	r2,2049
 8004534:	10844304 	addi	r2,r2,4364
 8004538:	11000017 	ldw	r4,0(r2)
 800453c:	01420034 	movhi	r5,2048
 8004540:	29506704 	addi	r5,r5,16796
 8004544:	800495c1 	jmpi	800495c <_fwalk>

08004548 <_malloc_trim_r>:
 8004548:	defffb04 	addi	sp,sp,-20
 800454c:	dcc00315 	stw	r19,12(sp)
 8004550:	04c20074 	movhi	r19,2049
 8004554:	dc800215 	stw	r18,8(sp)
 8004558:	dc400115 	stw	r17,4(sp)
 800455c:	dc000015 	stw	r16,0(sp)
 8004560:	dfc00415 	stw	ra,16(sp)
 8004564:	2821883a 	mov	r16,r5
 8004568:	9cfebe04 	addi	r19,r19,-1288
 800456c:	2025883a 	mov	r18,r4
 8004570:	800d1ac0 	call	800d1ac <__malloc_lock>
 8004574:	98800217 	ldw	r2,8(r19)
 8004578:	14400117 	ldw	r17,4(r2)
 800457c:	00bfff04 	movi	r2,-4
 8004580:	88a2703a 	and	r17,r17,r2
 8004584:	8c21c83a 	sub	r16,r17,r16
 8004588:	8403fbc4 	addi	r16,r16,4079
 800458c:	8020d33a 	srli	r16,r16,12
 8004590:	0083ffc4 	movi	r2,4095
 8004594:	843fffc4 	addi	r16,r16,-1
 8004598:	8020933a 	slli	r16,r16,12
 800459c:	1400060e 	bge	r2,r16,80045b8 <_malloc_trim_r+0x70>
 80045a0:	9009883a 	mov	r4,r18
 80045a4:	000b883a 	mov	r5,zero
 80045a8:	800690c0 	call	800690c <_sbrk_r>
 80045ac:	98c00217 	ldw	r3,8(r19)
 80045b0:	1c47883a 	add	r3,r3,r17
 80045b4:	10c00a26 	beq	r2,r3,80045e0 <_malloc_trim_r+0x98>
 80045b8:	9009883a 	mov	r4,r18
 80045bc:	800d1cc0 	call	800d1cc <__malloc_unlock>
 80045c0:	0005883a 	mov	r2,zero
 80045c4:	dfc00417 	ldw	ra,16(sp)
 80045c8:	dcc00317 	ldw	r19,12(sp)
 80045cc:	dc800217 	ldw	r18,8(sp)
 80045d0:	dc400117 	ldw	r17,4(sp)
 80045d4:	dc000017 	ldw	r16,0(sp)
 80045d8:	dec00504 	addi	sp,sp,20
 80045dc:	f800283a 	ret
 80045e0:	9009883a 	mov	r4,r18
 80045e4:	040bc83a 	sub	r5,zero,r16
 80045e8:	800690c0 	call	800690c <_sbrk_r>
 80045ec:	00ffffc4 	movi	r3,-1
 80045f0:	10c00d26 	beq	r2,r3,8004628 <_malloc_trim_r+0xe0>
 80045f4:	00c20074 	movhi	r3,2049
 80045f8:	18cb1b04 	addi	r3,r3,11372
 80045fc:	18800017 	ldw	r2,0(r3)
 8004600:	99000217 	ldw	r4,8(r19)
 8004604:	8c23c83a 	sub	r17,r17,r16
 8004608:	8c400054 	ori	r17,r17,1
 800460c:	1421c83a 	sub	r16,r2,r16
 8004610:	24400115 	stw	r17,4(r4)
 8004614:	9009883a 	mov	r4,r18
 8004618:	1c000015 	stw	r16,0(r3)
 800461c:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8004620:	00800044 	movi	r2,1
 8004624:	003fe706 	br	80045c4 <__alt_data_end+0xfc0045c4>
 8004628:	9009883a 	mov	r4,r18
 800462c:	000b883a 	mov	r5,zero
 8004630:	800690c0 	call	800690c <_sbrk_r>
 8004634:	99000217 	ldw	r4,8(r19)
 8004638:	014003c4 	movi	r5,15
 800463c:	1107c83a 	sub	r3,r2,r4
 8004640:	28ffdd0e 	bge	r5,r3,80045b8 <__alt_data_end+0xfc0045b8>
 8004644:	01420074 	movhi	r5,2049
 8004648:	29444504 	addi	r5,r5,4372
 800464c:	29400017 	ldw	r5,0(r5)
 8004650:	18c00054 	ori	r3,r3,1
 8004654:	20c00115 	stw	r3,4(r4)
 8004658:	00c20074 	movhi	r3,2049
 800465c:	1145c83a 	sub	r2,r2,r5
 8004660:	18cb1b04 	addi	r3,r3,11372
 8004664:	18800015 	stw	r2,0(r3)
 8004668:	003fd306 	br	80045b8 <__alt_data_end+0xfc0045b8>

0800466c <_free_r>:
 800466c:	28004c26 	beq	r5,zero,80047a0 <_free_r+0x134>
 8004670:	defffd04 	addi	sp,sp,-12
 8004674:	dc400115 	stw	r17,4(sp)
 8004678:	dc000015 	stw	r16,0(sp)
 800467c:	2023883a 	mov	r17,r4
 8004680:	2821883a 	mov	r16,r5
 8004684:	dfc00215 	stw	ra,8(sp)
 8004688:	800d1ac0 	call	800d1ac <__malloc_lock>
 800468c:	813fff17 	ldw	r4,-4(r16)
 8004690:	00bfff84 	movi	r2,-2
 8004694:	02420074 	movhi	r9,2049
 8004698:	81bffe04 	addi	r6,r16,-8
 800469c:	2084703a 	and	r2,r4,r2
 80046a0:	4a7ebe04 	addi	r9,r9,-1288
 80046a4:	308b883a 	add	r5,r6,r2
 80046a8:	2a000117 	ldw	r8,4(r5)
 80046ac:	49c00217 	ldw	r7,8(r9)
 80046b0:	00ffff04 	movi	r3,-4
 80046b4:	40c6703a 	and	r3,r8,r3
 80046b8:	39405326 	beq	r7,r5,8004808 <_free_r+0x19c>
 80046bc:	28c00115 	stw	r3,4(r5)
 80046c0:	2100004c 	andi	r4,r4,1
 80046c4:	2000091e 	bne	r4,zero,80046ec <_free_r+0x80>
 80046c8:	81fffe17 	ldw	r7,-8(r16)
 80046cc:	4a000204 	addi	r8,r9,8
 80046d0:	31cdc83a 	sub	r6,r6,r7
 80046d4:	31000217 	ldw	r4,8(r6)
 80046d8:	11c5883a 	add	r2,r2,r7
 80046dc:	22006126 	beq	r4,r8,8004864 <_free_r+0x1f8>
 80046e0:	31c00317 	ldw	r7,12(r6)
 80046e4:	21c00315 	stw	r7,12(r4)
 80046e8:	39000215 	stw	r4,8(r7)
 80046ec:	28c9883a 	add	r4,r5,r3
 80046f0:	21c00117 	ldw	r7,4(r4)
 80046f4:	39c0004c 	andi	r7,r7,1
 80046f8:	38000d1e 	bne	r7,zero,8004730 <_free_r+0xc4>
 80046fc:	29000217 	ldw	r4,8(r5)
 8004700:	10c5883a 	add	r2,r2,r3
 8004704:	00c20074 	movhi	r3,2049
 8004708:	18fec004 	addi	r3,r3,-1280
 800470c:	20c07526 	beq	r4,r3,80048e4 <_free_r+0x278>
 8004710:	29c00317 	ldw	r7,12(r5)
 8004714:	11400054 	ori	r5,r2,1
 8004718:	3087883a 	add	r3,r6,r2
 800471c:	21c00315 	stw	r7,12(r4)
 8004720:	39000215 	stw	r4,8(r7)
 8004724:	31400115 	stw	r5,4(r6)
 8004728:	18800015 	stw	r2,0(r3)
 800472c:	00000406 	br	8004740 <_free_r+0xd4>
 8004730:	10c00054 	ori	r3,r2,1
 8004734:	30c00115 	stw	r3,4(r6)
 8004738:	3087883a 	add	r3,r6,r2
 800473c:	18800015 	stw	r2,0(r3)
 8004740:	00c07fc4 	movi	r3,511
 8004744:	18801736 	bltu	r3,r2,80047a4 <_free_r+0x138>
 8004748:	1004d0fa 	srli	r2,r2,3
 800474c:	01400044 	movi	r5,1
 8004750:	49000117 	ldw	r4,4(r9)
 8004754:	1087883a 	add	r3,r2,r2
 8004758:	18c7883a 	add	r3,r3,r3
 800475c:	1005d0ba 	srai	r2,r2,2
 8004760:	18c7883a 	add	r3,r3,r3
 8004764:	1a47883a 	add	r3,r3,r9
 8004768:	19c00217 	ldw	r7,8(r3)
 800476c:	2884983a 	sll	r2,r5,r2
 8004770:	30c00315 	stw	r3,12(r6)
 8004774:	31c00215 	stw	r7,8(r6)
 8004778:	1104b03a 	or	r2,r2,r4
 800477c:	19800215 	stw	r6,8(r3)
 8004780:	48800115 	stw	r2,4(r9)
 8004784:	39800315 	stw	r6,12(r7)
 8004788:	8809883a 	mov	r4,r17
 800478c:	dfc00217 	ldw	ra,8(sp)
 8004790:	dc400117 	ldw	r17,4(sp)
 8004794:	dc000017 	ldw	r16,0(sp)
 8004798:	dec00304 	addi	sp,sp,12
 800479c:	800d1cc1 	jmpi	800d1cc <__malloc_unlock>
 80047a0:	f800283a 	ret
 80047a4:	1006d27a 	srli	r3,r2,9
 80047a8:	01000104 	movi	r4,4
 80047ac:	20c04036 	bltu	r4,r3,80048b0 <_free_r+0x244>
 80047b0:	1006d1ba 	srli	r3,r2,6
 80047b4:	19400e04 	addi	r5,r3,56
 80047b8:	2947883a 	add	r3,r5,r5
 80047bc:	18c7883a 	add	r3,r3,r3
 80047c0:	18c7883a 	add	r3,r3,r3
 80047c4:	1a49883a 	add	r4,r3,r9
 80047c8:	20c00217 	ldw	r3,8(r4)
 80047cc:	01c20074 	movhi	r7,2049
 80047d0:	39febe04 	addi	r7,r7,-1288
 80047d4:	19003b26 	beq	r3,r4,80048c4 <_free_r+0x258>
 80047d8:	01ffff04 	movi	r7,-4
 80047dc:	19400117 	ldw	r5,4(r3)
 80047e0:	29ca703a 	and	r5,r5,r7
 80047e4:	1140022e 	bgeu	r2,r5,80047f0 <_free_r+0x184>
 80047e8:	18c00217 	ldw	r3,8(r3)
 80047ec:	20fffb1e 	bne	r4,r3,80047dc <__alt_data_end+0xfc0047dc>
 80047f0:	18800317 	ldw	r2,12(r3)
 80047f4:	30800315 	stw	r2,12(r6)
 80047f8:	30c00215 	stw	r3,8(r6)
 80047fc:	11800215 	stw	r6,8(r2)
 8004800:	19800315 	stw	r6,12(r3)
 8004804:	003fe006 	br	8004788 <__alt_data_end+0xfc004788>
 8004808:	2100004c 	andi	r4,r4,1
 800480c:	1885883a 	add	r2,r3,r2
 8004810:	2000071e 	bne	r4,zero,8004830 <_free_r+0x1c4>
 8004814:	817ffe17 	ldw	r5,-8(r16)
 8004818:	314dc83a 	sub	r6,r6,r5
 800481c:	30c00317 	ldw	r3,12(r6)
 8004820:	31000217 	ldw	r4,8(r6)
 8004824:	1145883a 	add	r2,r2,r5
 8004828:	20c00315 	stw	r3,12(r4)
 800482c:	19000215 	stw	r4,8(r3)
 8004830:	10c00054 	ori	r3,r2,1
 8004834:	30c00115 	stw	r3,4(r6)
 8004838:	00c20074 	movhi	r3,2049
 800483c:	18c44604 	addi	r3,r3,4376
 8004840:	18c00017 	ldw	r3,0(r3)
 8004844:	49800215 	stw	r6,8(r9)
 8004848:	10ffcf36 	bltu	r2,r3,8004788 <__alt_data_end+0xfc004788>
 800484c:	00820074 	movhi	r2,2049
 8004850:	108b1204 	addi	r2,r2,11336
 8004854:	11400017 	ldw	r5,0(r2)
 8004858:	8809883a 	mov	r4,r17
 800485c:	80045480 	call	8004548 <_malloc_trim_r>
 8004860:	003fc906 	br	8004788 <__alt_data_end+0xfc004788>
 8004864:	28c9883a 	add	r4,r5,r3
 8004868:	21000117 	ldw	r4,4(r4)
 800486c:	2100004c 	andi	r4,r4,1
 8004870:	20000a1e 	bne	r4,zero,800489c <_free_r+0x230>
 8004874:	29000317 	ldw	r4,12(r5)
 8004878:	29400217 	ldw	r5,8(r5)
 800487c:	10c5883a 	add	r2,r2,r3
 8004880:	10c00054 	ori	r3,r2,1
 8004884:	29000315 	stw	r4,12(r5)
 8004888:	21400215 	stw	r5,8(r4)
 800488c:	30c00115 	stw	r3,4(r6)
 8004890:	308d883a 	add	r6,r6,r2
 8004894:	30800015 	stw	r2,0(r6)
 8004898:	003fbb06 	br	8004788 <__alt_data_end+0xfc004788>
 800489c:	10c00054 	ori	r3,r2,1
 80048a0:	30c00115 	stw	r3,4(r6)
 80048a4:	308d883a 	add	r6,r6,r2
 80048a8:	30800015 	stw	r2,0(r6)
 80048ac:	003fb606 	br	8004788 <__alt_data_end+0xfc004788>
 80048b0:	01000504 	movi	r4,20
 80048b4:	20c01436 	bltu	r4,r3,8004908 <_free_r+0x29c>
 80048b8:	194016c4 	addi	r5,r3,91
 80048bc:	2947883a 	add	r3,r5,r5
 80048c0:	003fbe06 	br	80047bc <__alt_data_end+0xfc0047bc>
 80048c4:	280bd0ba 	srai	r5,r5,2
 80048c8:	00800044 	movi	r2,1
 80048cc:	39000117 	ldw	r4,4(r7)
 80048d0:	114a983a 	sll	r5,r2,r5
 80048d4:	1805883a 	mov	r2,r3
 80048d8:	2908b03a 	or	r4,r5,r4
 80048dc:	39000115 	stw	r4,4(r7)
 80048e0:	003fc406 	br	80047f4 <__alt_data_end+0xfc0047f4>
 80048e4:	49800515 	stw	r6,20(r9)
 80048e8:	49800415 	stw	r6,16(r9)
 80048ec:	10c00054 	ori	r3,r2,1
 80048f0:	31000315 	stw	r4,12(r6)
 80048f4:	31000215 	stw	r4,8(r6)
 80048f8:	30c00115 	stw	r3,4(r6)
 80048fc:	308d883a 	add	r6,r6,r2
 8004900:	30800015 	stw	r2,0(r6)
 8004904:	003fa006 	br	8004788 <__alt_data_end+0xfc004788>
 8004908:	01001504 	movi	r4,84
 800490c:	20c00436 	bltu	r4,r3,8004920 <_free_r+0x2b4>
 8004910:	1006d33a 	srli	r3,r2,12
 8004914:	19401b84 	addi	r5,r3,110
 8004918:	2947883a 	add	r3,r5,r5
 800491c:	003fa706 	br	80047bc <__alt_data_end+0xfc0047bc>
 8004920:	01005504 	movi	r4,340
 8004924:	20c00436 	bltu	r4,r3,8004938 <_free_r+0x2cc>
 8004928:	1006d3fa 	srli	r3,r2,15
 800492c:	19401dc4 	addi	r5,r3,119
 8004930:	2947883a 	add	r3,r5,r5
 8004934:	003fa106 	br	80047bc <__alt_data_end+0xfc0047bc>
 8004938:	01015504 	movi	r4,1364
 800493c:	20c00436 	bltu	r4,r3,8004950 <_free_r+0x2e4>
 8004940:	1006d4ba 	srli	r3,r2,18
 8004944:	19401f04 	addi	r5,r3,124
 8004948:	2947883a 	add	r3,r5,r5
 800494c:	003f9b06 	br	80047bc <__alt_data_end+0xfc0047bc>
 8004950:	00c03f04 	movi	r3,252
 8004954:	01401f84 	movi	r5,126
 8004958:	003f9806 	br	80047bc <__alt_data_end+0xfc0047bc>

0800495c <_fwalk>:
 800495c:	defff804 	addi	sp,sp,-32
 8004960:	dd400515 	stw	r21,20(sp)
 8004964:	2540b804 	addi	r21,r4,736
 8004968:	dd800615 	stw	r22,24(sp)
 800496c:	dd000415 	stw	r20,16(sp)
 8004970:	dfc00715 	stw	ra,28(sp)
 8004974:	dcc00315 	stw	r19,12(sp)
 8004978:	dc800215 	stw	r18,8(sp)
 800497c:	dc400115 	stw	r17,4(sp)
 8004980:	dc000015 	stw	r16,0(sp)
 8004984:	2829883a 	mov	r20,r5
 8004988:	002d883a 	mov	r22,zero
 800498c:	80045080 	call	8004508 <__sfp_lock_acquire>
 8004990:	a8001426 	beq	r21,zero,80049e4 <_fwalk+0x88>
 8004994:	04ffffc4 	movi	r19,-1
 8004998:	ac400117 	ldw	r17,4(r21)
 800499c:	ac800217 	ldw	r18,8(r21)
 80049a0:	8c7fffc4 	addi	r17,r17,-1
 80049a4:	88000d16 	blt	r17,zero,80049dc <_fwalk+0x80>
 80049a8:	94000304 	addi	r16,r18,12
 80049ac:	94800384 	addi	r18,r18,14
 80049b0:	80c0000f 	ldh	r3,0(r16)
 80049b4:	8c7fffc4 	addi	r17,r17,-1
 80049b8:	813ffd04 	addi	r4,r16,-12
 80049bc:	18000426 	beq	r3,zero,80049d0 <_fwalk+0x74>
 80049c0:	90c0000f 	ldh	r3,0(r18)
 80049c4:	1cc00226 	beq	r3,r19,80049d0 <_fwalk+0x74>
 80049c8:	a03ee83a 	callr	r20
 80049cc:	b0acb03a 	or	r22,r22,r2
 80049d0:	84001a04 	addi	r16,r16,104
 80049d4:	94801a04 	addi	r18,r18,104
 80049d8:	8cfff51e 	bne	r17,r19,80049b0 <__alt_data_end+0xfc0049b0>
 80049dc:	ad400017 	ldw	r21,0(r21)
 80049e0:	a83fed1e 	bne	r21,zero,8004998 <__alt_data_end+0xfc004998>
 80049e4:	800450c0 	call	800450c <__sfp_lock_release>
 80049e8:	b005883a 	mov	r2,r22
 80049ec:	dfc00717 	ldw	ra,28(sp)
 80049f0:	dd800617 	ldw	r22,24(sp)
 80049f4:	dd400517 	ldw	r21,20(sp)
 80049f8:	dd000417 	ldw	r20,16(sp)
 80049fc:	dcc00317 	ldw	r19,12(sp)
 8004a00:	dc800217 	ldw	r18,8(sp)
 8004a04:	dc400117 	ldw	r17,4(sp)
 8004a08:	dc000017 	ldw	r16,0(sp)
 8004a0c:	dec00804 	addi	sp,sp,32
 8004a10:	f800283a 	ret

08004a14 <_fwalk_reent>:
 8004a14:	defff804 	addi	sp,sp,-32
 8004a18:	dd400515 	stw	r21,20(sp)
 8004a1c:	2540b804 	addi	r21,r4,736
 8004a20:	dd800615 	stw	r22,24(sp)
 8004a24:	dd000415 	stw	r20,16(sp)
 8004a28:	dcc00315 	stw	r19,12(sp)
 8004a2c:	dfc00715 	stw	ra,28(sp)
 8004a30:	dc800215 	stw	r18,8(sp)
 8004a34:	dc400115 	stw	r17,4(sp)
 8004a38:	dc000015 	stw	r16,0(sp)
 8004a3c:	2027883a 	mov	r19,r4
 8004a40:	2829883a 	mov	r20,r5
 8004a44:	002d883a 	mov	r22,zero
 8004a48:	80045080 	call	8004508 <__sfp_lock_acquire>
 8004a4c:	a8001326 	beq	r21,zero,8004a9c <_fwalk_reent+0x88>
 8004a50:	04bfffc4 	movi	r18,-1
 8004a54:	ac400117 	ldw	r17,4(r21)
 8004a58:	ac000217 	ldw	r16,8(r21)
 8004a5c:	8c7fffc4 	addi	r17,r17,-1
 8004a60:	88000c16 	blt	r17,zero,8004a94 <_fwalk_reent+0x80>
 8004a64:	84000304 	addi	r16,r16,12
 8004a68:	80c0000f 	ldh	r3,0(r16)
 8004a6c:	8c7fffc4 	addi	r17,r17,-1
 8004a70:	817ffd04 	addi	r5,r16,-12
 8004a74:	18000526 	beq	r3,zero,8004a8c <_fwalk_reent+0x78>
 8004a78:	80c0008f 	ldh	r3,2(r16)
 8004a7c:	9809883a 	mov	r4,r19
 8004a80:	1c800226 	beq	r3,r18,8004a8c <_fwalk_reent+0x78>
 8004a84:	a03ee83a 	callr	r20
 8004a88:	b0acb03a 	or	r22,r22,r2
 8004a8c:	84001a04 	addi	r16,r16,104
 8004a90:	8cbff51e 	bne	r17,r18,8004a68 <__alt_data_end+0xfc004a68>
 8004a94:	ad400017 	ldw	r21,0(r21)
 8004a98:	a83fee1e 	bne	r21,zero,8004a54 <__alt_data_end+0xfc004a54>
 8004a9c:	800450c0 	call	800450c <__sfp_lock_release>
 8004aa0:	b005883a 	mov	r2,r22
 8004aa4:	dfc00717 	ldw	ra,28(sp)
 8004aa8:	dd800617 	ldw	r22,24(sp)
 8004aac:	dd400517 	ldw	r21,20(sp)
 8004ab0:	dd000417 	ldw	r20,16(sp)
 8004ab4:	dcc00317 	ldw	r19,12(sp)
 8004ab8:	dc800217 	ldw	r18,8(sp)
 8004abc:	dc400117 	ldw	r17,4(sp)
 8004ac0:	dc000017 	ldw	r16,0(sp)
 8004ac4:	dec00804 	addi	sp,sp,32
 8004ac8:	f800283a 	ret

08004acc <_setlocale_r>:
 8004acc:	30001b26 	beq	r6,zero,8004b3c <_setlocale_r+0x70>
 8004ad0:	01420074 	movhi	r5,2049
 8004ad4:	defffe04 	addi	sp,sp,-8
 8004ad8:	297cf604 	addi	r5,r5,-3112
 8004adc:	3009883a 	mov	r4,r6
 8004ae0:	dc000015 	stw	r16,0(sp)
 8004ae4:	dfc00115 	stw	ra,4(sp)
 8004ae8:	3021883a 	mov	r16,r6
 8004aec:	8006a9c0 	call	8006a9c <strcmp>
 8004af0:	1000061e 	bne	r2,zero,8004b0c <_setlocale_r+0x40>
 8004af4:	00820074 	movhi	r2,2049
 8004af8:	10bcf504 	addi	r2,r2,-3116
 8004afc:	dfc00117 	ldw	ra,4(sp)
 8004b00:	dc000017 	ldw	r16,0(sp)
 8004b04:	dec00204 	addi	sp,sp,8
 8004b08:	f800283a 	ret
 8004b0c:	01420074 	movhi	r5,2049
 8004b10:	297cf504 	addi	r5,r5,-3116
 8004b14:	8009883a 	mov	r4,r16
 8004b18:	8006a9c0 	call	8006a9c <strcmp>
 8004b1c:	103ff526 	beq	r2,zero,8004af4 <__alt_data_end+0xfc004af4>
 8004b20:	01420074 	movhi	r5,2049
 8004b24:	297ce004 	addi	r5,r5,-3200
 8004b28:	8009883a 	mov	r4,r16
 8004b2c:	8006a9c0 	call	8006a9c <strcmp>
 8004b30:	103ff026 	beq	r2,zero,8004af4 <__alt_data_end+0xfc004af4>
 8004b34:	0005883a 	mov	r2,zero
 8004b38:	003ff006 	br	8004afc <__alt_data_end+0xfc004afc>
 8004b3c:	00820074 	movhi	r2,2049
 8004b40:	10bcf504 	addi	r2,r2,-3116
 8004b44:	f800283a 	ret

08004b48 <__locale_charset>:
 8004b48:	00820074 	movhi	r2,2049
 8004b4c:	10bea804 	addi	r2,r2,-1376
 8004b50:	f800283a 	ret

08004b54 <__locale_mb_cur_max>:
 8004b54:	00820074 	movhi	r2,2049
 8004b58:	10844404 	addi	r2,r2,4368
 8004b5c:	10800017 	ldw	r2,0(r2)
 8004b60:	f800283a 	ret

08004b64 <__locale_msgcharset>:
 8004b64:	00820074 	movhi	r2,2049
 8004b68:	10bea004 	addi	r2,r2,-1408
 8004b6c:	f800283a 	ret

08004b70 <__locale_cjk_lang>:
 8004b70:	0005883a 	mov	r2,zero
 8004b74:	f800283a 	ret

08004b78 <_localeconv_r>:
 8004b78:	00820074 	movhi	r2,2049
 8004b7c:	10beb004 	addi	r2,r2,-1344
 8004b80:	f800283a 	ret

08004b84 <setlocale>:
 8004b84:	00c20074 	movhi	r3,2049
 8004b88:	18c44304 	addi	r3,r3,4364
 8004b8c:	2005883a 	mov	r2,r4
 8004b90:	19000017 	ldw	r4,0(r3)
 8004b94:	280d883a 	mov	r6,r5
 8004b98:	100b883a 	mov	r5,r2
 8004b9c:	8004acc1 	jmpi	8004acc <_setlocale_r>

08004ba0 <localeconv>:
 8004ba0:	00820074 	movhi	r2,2049
 8004ba4:	10beb004 	addi	r2,r2,-1344
 8004ba8:	f800283a 	ret

08004bac <__smakebuf_r>:
 8004bac:	2880030b 	ldhu	r2,12(r5)
 8004bb0:	10c0008c 	andi	r3,r2,2
 8004bb4:	1800401e 	bne	r3,zero,8004cb8 <__smakebuf_r+0x10c>
 8004bb8:	deffec04 	addi	sp,sp,-80
 8004bbc:	dc000f15 	stw	r16,60(sp)
 8004bc0:	2821883a 	mov	r16,r5
 8004bc4:	2940038f 	ldh	r5,14(r5)
 8004bc8:	dc401015 	stw	r17,64(sp)
 8004bcc:	dfc01315 	stw	ra,76(sp)
 8004bd0:	dcc01215 	stw	r19,72(sp)
 8004bd4:	dc801115 	stw	r18,68(sp)
 8004bd8:	2023883a 	mov	r17,r4
 8004bdc:	28001b16 	blt	r5,zero,8004c4c <__smakebuf_r+0xa0>
 8004be0:	d80d883a 	mov	r6,sp
 8004be4:	80085ac0 	call	80085ac <_fstat_r>
 8004be8:	10001716 	blt	r2,zero,8004c48 <__smakebuf_r+0x9c>
 8004bec:	d8800117 	ldw	r2,4(sp)
 8004bf0:	00e00014 	movui	r3,32768
 8004bf4:	10bc000c 	andi	r2,r2,61440
 8004bf8:	10c03726 	beq	r2,r3,8004cd8 <__smakebuf_r+0x12c>
 8004bfc:	80c0030b 	ldhu	r3,12(r16)
 8004c00:	18c20014 	ori	r3,r3,2048
 8004c04:	80c0030d 	sth	r3,12(r16)
 8004c08:	00c80004 	movi	r3,8192
 8004c0c:	10c03c1e 	bne	r2,r3,8004d00 <__smakebuf_r+0x154>
 8004c10:	8140038f 	ldh	r5,14(r16)
 8004c14:	8809883a 	mov	r4,r17
 8004c18:	8008aa80 	call	8008aa8 <_isatty_r>
 8004c1c:	10004e26 	beq	r2,zero,8004d58 <__smakebuf_r+0x1ac>
 8004c20:	8080030b 	ldhu	r2,12(r16)
 8004c24:	04c00044 	movi	r19,1
 8004c28:	80c010c4 	addi	r3,r16,67
 8004c2c:	14c4b03a 	or	r2,r2,r19
 8004c30:	8080030d 	sth	r2,12(r16)
 8004c34:	80c00015 	stw	r3,0(r16)
 8004c38:	80c00415 	stw	r3,16(r16)
 8004c3c:	84c00515 	stw	r19,20(r16)
 8004c40:	04810004 	movi	r18,1024
 8004c44:	00000706 	br	8004c64 <__smakebuf_r+0xb8>
 8004c48:	8080030b 	ldhu	r2,12(r16)
 8004c4c:	10c0200c 	andi	r3,r2,128
 8004c50:	18001f1e 	bne	r3,zero,8004cd0 <__smakebuf_r+0x124>
 8004c54:	04810004 	movi	r18,1024
 8004c58:	10820014 	ori	r2,r2,2048
 8004c5c:	8080030d 	sth	r2,12(r16)
 8004c60:	0027883a 	mov	r19,zero
 8004c64:	8809883a 	mov	r4,r17
 8004c68:	900b883a 	mov	r5,r18
 8004c6c:	8004d640 	call	8004d64 <_malloc_r>
 8004c70:	10002e26 	beq	r2,zero,8004d2c <__smakebuf_r+0x180>
 8004c74:	80c0030b 	ldhu	r3,12(r16)
 8004c78:	01020034 	movhi	r4,2048
 8004c7c:	21106904 	addi	r4,r4,16804
 8004c80:	89000f15 	stw	r4,60(r17)
 8004c84:	18c02014 	ori	r3,r3,128
 8004c88:	80c0030d 	sth	r3,12(r16)
 8004c8c:	80800015 	stw	r2,0(r16)
 8004c90:	80800415 	stw	r2,16(r16)
 8004c94:	84800515 	stw	r18,20(r16)
 8004c98:	98001c1e 	bne	r19,zero,8004d0c <__smakebuf_r+0x160>
 8004c9c:	dfc01317 	ldw	ra,76(sp)
 8004ca0:	dcc01217 	ldw	r19,72(sp)
 8004ca4:	dc801117 	ldw	r18,68(sp)
 8004ca8:	dc401017 	ldw	r17,64(sp)
 8004cac:	dc000f17 	ldw	r16,60(sp)
 8004cb0:	dec01404 	addi	sp,sp,80
 8004cb4:	f800283a 	ret
 8004cb8:	288010c4 	addi	r2,r5,67
 8004cbc:	28800015 	stw	r2,0(r5)
 8004cc0:	28800415 	stw	r2,16(r5)
 8004cc4:	00800044 	movi	r2,1
 8004cc8:	28800515 	stw	r2,20(r5)
 8004ccc:	f800283a 	ret
 8004cd0:	04801004 	movi	r18,64
 8004cd4:	003fe006 	br	8004c58 <__alt_data_end+0xfc004c58>
 8004cd8:	81000a17 	ldw	r4,40(r16)
 8004cdc:	00c20034 	movhi	r3,2048
 8004ce0:	18da8e04 	addi	r3,r3,27192
 8004ce4:	20ffc51e 	bne	r4,r3,8004bfc <__alt_data_end+0xfc004bfc>
 8004ce8:	80c0030b 	ldhu	r3,12(r16)
 8004cec:	01010004 	movi	r4,1024
 8004cf0:	81001315 	stw	r4,76(r16)
 8004cf4:	1906b03a 	or	r3,r3,r4
 8004cf8:	80c0030d 	sth	r3,12(r16)
 8004cfc:	003fc206 	br	8004c08 <__alt_data_end+0xfc004c08>
 8004d00:	0027883a 	mov	r19,zero
 8004d04:	04810004 	movi	r18,1024
 8004d08:	003fd606 	br	8004c64 <__alt_data_end+0xfc004c64>
 8004d0c:	8140038f 	ldh	r5,14(r16)
 8004d10:	8809883a 	mov	r4,r17
 8004d14:	8008aa80 	call	8008aa8 <_isatty_r>
 8004d18:	103fe026 	beq	r2,zero,8004c9c <__alt_data_end+0xfc004c9c>
 8004d1c:	8080030b 	ldhu	r2,12(r16)
 8004d20:	10800054 	ori	r2,r2,1
 8004d24:	8080030d 	sth	r2,12(r16)
 8004d28:	003fdc06 	br	8004c9c <__alt_data_end+0xfc004c9c>
 8004d2c:	8080030b 	ldhu	r2,12(r16)
 8004d30:	10c0800c 	andi	r3,r2,512
 8004d34:	183fd91e 	bne	r3,zero,8004c9c <__alt_data_end+0xfc004c9c>
 8004d38:	10800094 	ori	r2,r2,2
 8004d3c:	80c010c4 	addi	r3,r16,67
 8004d40:	8080030d 	sth	r2,12(r16)
 8004d44:	00800044 	movi	r2,1
 8004d48:	80c00015 	stw	r3,0(r16)
 8004d4c:	80c00415 	stw	r3,16(r16)
 8004d50:	80800515 	stw	r2,20(r16)
 8004d54:	003fd106 	br	8004c9c <__alt_data_end+0xfc004c9c>
 8004d58:	04c00044 	movi	r19,1
 8004d5c:	04810004 	movi	r18,1024
 8004d60:	003fc006 	br	8004c64 <__alt_data_end+0xfc004c64>

08004d64 <_malloc_r>:
 8004d64:	defff504 	addi	sp,sp,-44
 8004d68:	dc800315 	stw	r18,12(sp)
 8004d6c:	dfc00a15 	stw	ra,40(sp)
 8004d70:	df000915 	stw	fp,36(sp)
 8004d74:	ddc00815 	stw	r23,32(sp)
 8004d78:	dd800715 	stw	r22,28(sp)
 8004d7c:	dd400615 	stw	r21,24(sp)
 8004d80:	dd000515 	stw	r20,20(sp)
 8004d84:	dcc00415 	stw	r19,16(sp)
 8004d88:	dc400215 	stw	r17,8(sp)
 8004d8c:	dc000115 	stw	r16,4(sp)
 8004d90:	288002c4 	addi	r2,r5,11
 8004d94:	00c00584 	movi	r3,22
 8004d98:	2025883a 	mov	r18,r4
 8004d9c:	18802a2e 	bgeu	r3,r2,8004e48 <_malloc_r+0xe4>
 8004da0:	047ffe04 	movi	r17,-8
 8004da4:	1462703a 	and	r17,r2,r17
 8004da8:	88009e16 	blt	r17,zero,8005024 <_malloc_r+0x2c0>
 8004dac:	89409d36 	bltu	r17,r5,8005024 <_malloc_r+0x2c0>
 8004db0:	800d1ac0 	call	800d1ac <__malloc_lock>
 8004db4:	00807dc4 	movi	r2,503
 8004db8:	14402736 	bltu	r2,r17,8004e58 <_malloc_r+0xf4>
 8004dbc:	8806d0fa 	srli	r3,r17,3
 8004dc0:	04c20074 	movhi	r19,2049
 8004dc4:	9cfebe04 	addi	r19,r19,-1288
 8004dc8:	18c5883a 	add	r2,r3,r3
 8004dcc:	1085883a 	add	r2,r2,r2
 8004dd0:	1085883a 	add	r2,r2,r2
 8004dd4:	9885883a 	add	r2,r19,r2
 8004dd8:	14000317 	ldw	r16,12(r2)
 8004ddc:	80814a26 	beq	r16,r2,8005308 <_malloc_r+0x5a4>
 8004de0:	80c00117 	ldw	r3,4(r16)
 8004de4:	81000317 	ldw	r4,12(r16)
 8004de8:	00bfff04 	movi	r2,-4
 8004dec:	1884703a 	and	r2,r3,r2
 8004df0:	81400217 	ldw	r5,8(r16)
 8004df4:	8085883a 	add	r2,r16,r2
 8004df8:	10c00117 	ldw	r3,4(r2)
 8004dfc:	29000315 	stw	r4,12(r5)
 8004e00:	21400215 	stw	r5,8(r4)
 8004e04:	18c00054 	ori	r3,r3,1
 8004e08:	10c00115 	stw	r3,4(r2)
 8004e0c:	9009883a 	mov	r4,r18
 8004e10:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8004e14:	80800204 	addi	r2,r16,8
 8004e18:	dfc00a17 	ldw	ra,40(sp)
 8004e1c:	df000917 	ldw	fp,36(sp)
 8004e20:	ddc00817 	ldw	r23,32(sp)
 8004e24:	dd800717 	ldw	r22,28(sp)
 8004e28:	dd400617 	ldw	r21,24(sp)
 8004e2c:	dd000517 	ldw	r20,20(sp)
 8004e30:	dcc00417 	ldw	r19,16(sp)
 8004e34:	dc800317 	ldw	r18,12(sp)
 8004e38:	dc400217 	ldw	r17,8(sp)
 8004e3c:	dc000117 	ldw	r16,4(sp)
 8004e40:	dec00b04 	addi	sp,sp,44
 8004e44:	f800283a 	ret
 8004e48:	04400404 	movi	r17,16
 8004e4c:	89407536 	bltu	r17,r5,8005024 <_malloc_r+0x2c0>
 8004e50:	800d1ac0 	call	800d1ac <__malloc_lock>
 8004e54:	003fd906 	br	8004dbc <__alt_data_end+0xfc004dbc>
 8004e58:	8806d27a 	srli	r3,r17,9
 8004e5c:	18007526 	beq	r3,zero,8005034 <_malloc_r+0x2d0>
 8004e60:	00800104 	movi	r2,4
 8004e64:	10c0ef36 	bltu	r2,r3,8005224 <_malloc_r+0x4c0>
 8004e68:	8806d1ba 	srli	r3,r17,6
 8004e6c:	19c00e04 	addi	r7,r3,56
 8004e70:	39cb883a 	add	r5,r7,r7
 8004e74:	04c20074 	movhi	r19,2049
 8004e78:	294b883a 	add	r5,r5,r5
 8004e7c:	9cfebe04 	addi	r19,r19,-1288
 8004e80:	294b883a 	add	r5,r5,r5
 8004e84:	994b883a 	add	r5,r19,r5
 8004e88:	2c000317 	ldw	r16,12(r5)
 8004e8c:	2c000e26 	beq	r5,r16,8004ec8 <_malloc_r+0x164>
 8004e90:	80800117 	ldw	r2,4(r16)
 8004e94:	01bfff04 	movi	r6,-4
 8004e98:	010003c4 	movi	r4,15
 8004e9c:	1184703a 	and	r2,r2,r6
 8004ea0:	1447c83a 	sub	r3,r2,r17
 8004ea4:	20c00716 	blt	r4,r3,8004ec4 <_malloc_r+0x160>
 8004ea8:	1800650e 	bge	r3,zero,8005040 <_malloc_r+0x2dc>
 8004eac:	84000317 	ldw	r16,12(r16)
 8004eb0:	2c000526 	beq	r5,r16,8004ec8 <_malloc_r+0x164>
 8004eb4:	80800117 	ldw	r2,4(r16)
 8004eb8:	1184703a 	and	r2,r2,r6
 8004ebc:	1447c83a 	sub	r3,r2,r17
 8004ec0:	20fff90e 	bge	r4,r3,8004ea8 <__alt_data_end+0xfc004ea8>
 8004ec4:	39ffffc4 	addi	r7,r7,-1
 8004ec8:	38c00044 	addi	r3,r7,1
 8004ecc:	01820074 	movhi	r6,2049
 8004ed0:	9c000417 	ldw	r16,16(r19)
 8004ed4:	31bebe04 	addi	r6,r6,-1288
 8004ed8:	32400204 	addi	r9,r6,8
 8004edc:	82410326 	beq	r16,r9,80052ec <_malloc_r+0x588>
 8004ee0:	81000117 	ldw	r4,4(r16)
 8004ee4:	00bfff04 	movi	r2,-4
 8004ee8:	208e703a 	and	r7,r4,r2
 8004eec:	3c45c83a 	sub	r2,r7,r17
 8004ef0:	010003c4 	movi	r4,15
 8004ef4:	2080ee16 	blt	r4,r2,80052b0 <_malloc_r+0x54c>
 8004ef8:	32400515 	stw	r9,20(r6)
 8004efc:	32400415 	stw	r9,16(r6)
 8004f00:	1000510e 	bge	r2,zero,8005048 <_malloc_r+0x2e4>
 8004f04:	00807fc4 	movi	r2,511
 8004f08:	11c0ce36 	bltu	r2,r7,8005244 <_malloc_r+0x4e0>
 8004f0c:	3808d0fa 	srli	r4,r7,3
 8004f10:	01c00044 	movi	r7,1
 8004f14:	30800117 	ldw	r2,4(r6)
 8004f18:	210b883a 	add	r5,r4,r4
 8004f1c:	294b883a 	add	r5,r5,r5
 8004f20:	2009d0ba 	srai	r4,r4,2
 8004f24:	294b883a 	add	r5,r5,r5
 8004f28:	298b883a 	add	r5,r5,r6
 8004f2c:	2a000217 	ldw	r8,8(r5)
 8004f30:	3908983a 	sll	r4,r7,r4
 8004f34:	81400315 	stw	r5,12(r16)
 8004f38:	82000215 	stw	r8,8(r16)
 8004f3c:	2088b03a 	or	r4,r4,r2
 8004f40:	2c000215 	stw	r16,8(r5)
 8004f44:	31000115 	stw	r4,4(r6)
 8004f48:	44000315 	stw	r16,12(r8)
 8004f4c:	1805d0ba 	srai	r2,r3,2
 8004f50:	01400044 	movi	r5,1
 8004f54:	288a983a 	sll	r5,r5,r2
 8004f58:	21404336 	bltu	r4,r5,8005068 <_malloc_r+0x304>
 8004f5c:	2144703a 	and	r2,r4,r5
 8004f60:	10000a1e 	bne	r2,zero,8004f8c <_malloc_r+0x228>
 8004f64:	00bfff04 	movi	r2,-4
 8004f68:	294b883a 	add	r5,r5,r5
 8004f6c:	1886703a 	and	r3,r3,r2
 8004f70:	2144703a 	and	r2,r4,r5
 8004f74:	18c00104 	addi	r3,r3,4
 8004f78:	1000041e 	bne	r2,zero,8004f8c <_malloc_r+0x228>
 8004f7c:	294b883a 	add	r5,r5,r5
 8004f80:	2144703a 	and	r2,r4,r5
 8004f84:	18c00104 	addi	r3,r3,4
 8004f88:	103ffc26 	beq	r2,zero,8004f7c <__alt_data_end+0xfc004f7c>
 8004f8c:	023fff04 	movi	r8,-4
 8004f90:	01c003c4 	movi	r7,15
 8004f94:	18c5883a 	add	r2,r3,r3
 8004f98:	1085883a 	add	r2,r2,r2
 8004f9c:	1085883a 	add	r2,r2,r2
 8004fa0:	9895883a 	add	r10,r19,r2
 8004fa4:	52c00304 	addi	r11,r10,12
 8004fa8:	1819883a 	mov	r12,r3
 8004fac:	5c000017 	ldw	r16,0(r11)
 8004fb0:	59bffd04 	addi	r6,r11,-12
 8004fb4:	8180041e 	bne	r16,r6,8004fc8 <_malloc_r+0x264>
 8004fb8:	0000ce06 	br	80052f4 <_malloc_r+0x590>
 8004fbc:	2000d70e 	bge	r4,zero,800531c <_malloc_r+0x5b8>
 8004fc0:	84000317 	ldw	r16,12(r16)
 8004fc4:	8180cb26 	beq	r16,r6,80052f4 <_malloc_r+0x590>
 8004fc8:	80800117 	ldw	r2,4(r16)
 8004fcc:	1204703a 	and	r2,r2,r8
 8004fd0:	1449c83a 	sub	r4,r2,r17
 8004fd4:	393ff90e 	bge	r7,r4,8004fbc <__alt_data_end+0xfc004fbc>
 8004fd8:	80800317 	ldw	r2,12(r16)
 8004fdc:	80c00217 	ldw	r3,8(r16)
 8004fe0:	89400054 	ori	r5,r17,1
 8004fe4:	81400115 	stw	r5,4(r16)
 8004fe8:	18800315 	stw	r2,12(r3)
 8004fec:	10c00215 	stw	r3,8(r2)
 8004ff0:	8463883a 	add	r17,r16,r17
 8004ff4:	9c400515 	stw	r17,20(r19)
 8004ff8:	9c400415 	stw	r17,16(r19)
 8004ffc:	20800054 	ori	r2,r4,1
 8005000:	88800115 	stw	r2,4(r17)
 8005004:	8a400315 	stw	r9,12(r17)
 8005008:	8a400215 	stw	r9,8(r17)
 800500c:	8923883a 	add	r17,r17,r4
 8005010:	89000015 	stw	r4,0(r17)
 8005014:	9009883a 	mov	r4,r18
 8005018:	800d1cc0 	call	800d1cc <__malloc_unlock>
 800501c:	80800204 	addi	r2,r16,8
 8005020:	003f7d06 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005024:	00800304 	movi	r2,12
 8005028:	90800015 	stw	r2,0(r18)
 800502c:	0005883a 	mov	r2,zero
 8005030:	003f7906 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005034:	01401f84 	movi	r5,126
 8005038:	01c00fc4 	movi	r7,63
 800503c:	003f8d06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005040:	81000317 	ldw	r4,12(r16)
 8005044:	003f6a06 	br	8004df0 <__alt_data_end+0xfc004df0>
 8005048:	81c5883a 	add	r2,r16,r7
 800504c:	10c00117 	ldw	r3,4(r2)
 8005050:	9009883a 	mov	r4,r18
 8005054:	18c00054 	ori	r3,r3,1
 8005058:	10c00115 	stw	r3,4(r2)
 800505c:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8005060:	80800204 	addi	r2,r16,8
 8005064:	003f6c06 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005068:	9c000217 	ldw	r16,8(r19)
 800506c:	00bfff04 	movi	r2,-4
 8005070:	85800117 	ldw	r22,4(r16)
 8005074:	b0ac703a 	and	r22,r22,r2
 8005078:	b4400336 	bltu	r22,r17,8005088 <_malloc_r+0x324>
 800507c:	b445c83a 	sub	r2,r22,r17
 8005080:	00c003c4 	movi	r3,15
 8005084:	18805d16 	blt	r3,r2,80051fc <_malloc_r+0x498>
 8005088:	05c20074 	movhi	r23,2049
 800508c:	00820074 	movhi	r2,2049
 8005090:	bdc44504 	addi	r23,r23,4372
 8005094:	108b1204 	addi	r2,r2,11336
 8005098:	15400017 	ldw	r21,0(r2)
 800509c:	b9000017 	ldw	r4,0(r23)
 80050a0:	00ffffc4 	movi	r3,-1
 80050a4:	858d883a 	add	r6,r16,r22
 80050a8:	8d6b883a 	add	r21,r17,r21
 80050ac:	20c0e426 	beq	r4,r3,8005440 <_malloc_r+0x6dc>
 80050b0:	ad4403c4 	addi	r21,r21,4111
 80050b4:	00fc0004 	movi	r3,-4096
 80050b8:	a8ea703a 	and	r21,r21,r3
 80050bc:	9009883a 	mov	r4,r18
 80050c0:	a80b883a 	mov	r5,r21
 80050c4:	d9800015 	stw	r6,0(sp)
 80050c8:	800690c0 	call	800690c <_sbrk_r>
 80050cc:	00ffffc4 	movi	r3,-1
 80050d0:	1029883a 	mov	r20,r2
 80050d4:	d9800017 	ldw	r6,0(sp)
 80050d8:	10c0a426 	beq	r2,r3,800536c <_malloc_r+0x608>
 80050dc:	1180a236 	bltu	r2,r6,8005368 <_malloc_r+0x604>
 80050e0:	07020074 	movhi	fp,2049
 80050e4:	e70b1b04 	addi	fp,fp,11372
 80050e8:	e0c00017 	ldw	r3,0(fp)
 80050ec:	a8c7883a 	add	r3,r21,r3
 80050f0:	e0c00015 	stw	r3,0(fp)
 80050f4:	3500da26 	beq	r6,r20,8005460 <_malloc_r+0x6fc>
 80050f8:	b9000017 	ldw	r4,0(r23)
 80050fc:	00bfffc4 	movi	r2,-1
 8005100:	2080e426 	beq	r4,r2,8005494 <_malloc_r+0x730>
 8005104:	a185c83a 	sub	r2,r20,r6
 8005108:	1885883a 	add	r2,r3,r2
 800510c:	e0800015 	stw	r2,0(fp)
 8005110:	a0c001cc 	andi	r3,r20,7
 8005114:	1800b526 	beq	r3,zero,80053ec <_malloc_r+0x688>
 8005118:	a0e9c83a 	sub	r20,r20,r3
 800511c:	00840204 	movi	r2,4104
 8005120:	a5000204 	addi	r20,r20,8
 8005124:	10c7c83a 	sub	r3,r2,r3
 8005128:	a545883a 	add	r2,r20,r21
 800512c:	1083ffcc 	andi	r2,r2,4095
 8005130:	18abc83a 	sub	r21,r3,r2
 8005134:	9009883a 	mov	r4,r18
 8005138:	a80b883a 	mov	r5,r21
 800513c:	800690c0 	call	800690c <_sbrk_r>
 8005140:	00ffffc4 	movi	r3,-1
 8005144:	10c0d026 	beq	r2,r3,8005488 <_malloc_r+0x724>
 8005148:	1507c83a 	sub	r3,r2,r20
 800514c:	a8c7883a 	add	r3,r21,r3
 8005150:	18c00054 	ori	r3,r3,1
 8005154:	e0800017 	ldw	r2,0(fp)
 8005158:	9d000215 	stw	r20,8(r19)
 800515c:	a0c00115 	stw	r3,4(r20)
 8005160:	a887883a 	add	r3,r21,r2
 8005164:	e0c00015 	stw	r3,0(fp)
 8005168:	84c00e26 	beq	r16,r19,80051a4 <_malloc_r+0x440>
 800516c:	018003c4 	movi	r6,15
 8005170:	3580a02e 	bgeu	r6,r22,80053f4 <_malloc_r+0x690>
 8005174:	81400117 	ldw	r5,4(r16)
 8005178:	013ffe04 	movi	r4,-8
 800517c:	b0bffd04 	addi	r2,r22,-12
 8005180:	1104703a 	and	r2,r2,r4
 8005184:	2900004c 	andi	r4,r5,1
 8005188:	1108b03a 	or	r4,r2,r4
 800518c:	81000115 	stw	r4,4(r16)
 8005190:	01400144 	movi	r5,5
 8005194:	8089883a 	add	r4,r16,r2
 8005198:	21400115 	stw	r5,4(r4)
 800519c:	21400215 	stw	r5,8(r4)
 80051a0:	3080c036 	bltu	r6,r2,80054a4 <_malloc_r+0x740>
 80051a4:	00820074 	movhi	r2,2049
 80051a8:	108b1104 	addi	r2,r2,11332
 80051ac:	11000017 	ldw	r4,0(r2)
 80051b0:	20c0012e 	bgeu	r4,r3,80051b8 <_malloc_r+0x454>
 80051b4:	10c00015 	stw	r3,0(r2)
 80051b8:	00820074 	movhi	r2,2049
 80051bc:	108b1004 	addi	r2,r2,11328
 80051c0:	11000017 	ldw	r4,0(r2)
 80051c4:	9c000217 	ldw	r16,8(r19)
 80051c8:	20c0012e 	bgeu	r4,r3,80051d0 <_malloc_r+0x46c>
 80051cc:	10c00015 	stw	r3,0(r2)
 80051d0:	80c00117 	ldw	r3,4(r16)
 80051d4:	00bfff04 	movi	r2,-4
 80051d8:	1886703a 	and	r3,r3,r2
 80051dc:	1c45c83a 	sub	r2,r3,r17
 80051e0:	1c400236 	bltu	r3,r17,80051ec <_malloc_r+0x488>
 80051e4:	00c003c4 	movi	r3,15
 80051e8:	18800416 	blt	r3,r2,80051fc <_malloc_r+0x498>
 80051ec:	9009883a 	mov	r4,r18
 80051f0:	800d1cc0 	call	800d1cc <__malloc_unlock>
 80051f4:	0005883a 	mov	r2,zero
 80051f8:	003f0706 	br	8004e18 <__alt_data_end+0xfc004e18>
 80051fc:	88c00054 	ori	r3,r17,1
 8005200:	80c00115 	stw	r3,4(r16)
 8005204:	8463883a 	add	r17,r16,r17
 8005208:	10800054 	ori	r2,r2,1
 800520c:	9c400215 	stw	r17,8(r19)
 8005210:	88800115 	stw	r2,4(r17)
 8005214:	9009883a 	mov	r4,r18
 8005218:	800d1cc0 	call	800d1cc <__malloc_unlock>
 800521c:	80800204 	addi	r2,r16,8
 8005220:	003efd06 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005224:	00800504 	movi	r2,20
 8005228:	10c0482e 	bgeu	r2,r3,800534c <_malloc_r+0x5e8>
 800522c:	00801504 	movi	r2,84
 8005230:	10c06836 	bltu	r2,r3,80053d4 <_malloc_r+0x670>
 8005234:	8806d33a 	srli	r3,r17,12
 8005238:	19c01b84 	addi	r7,r3,110
 800523c:	39cb883a 	add	r5,r7,r7
 8005240:	003f0c06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005244:	3804d27a 	srli	r2,r7,9
 8005248:	01000104 	movi	r4,4
 800524c:	2080422e 	bgeu	r4,r2,8005358 <_malloc_r+0x5f4>
 8005250:	01000504 	movi	r4,20
 8005254:	20807c36 	bltu	r4,r2,8005448 <_malloc_r+0x6e4>
 8005258:	110016c4 	addi	r4,r2,91
 800525c:	210b883a 	add	r5,r4,r4
 8005260:	294b883a 	add	r5,r5,r5
 8005264:	294b883a 	add	r5,r5,r5
 8005268:	994b883a 	add	r5,r19,r5
 800526c:	28800217 	ldw	r2,8(r5)
 8005270:	02020074 	movhi	r8,2049
 8005274:	423ebe04 	addi	r8,r8,-1288
 8005278:	11406326 	beq	r2,r5,8005408 <_malloc_r+0x6a4>
 800527c:	01bfff04 	movi	r6,-4
 8005280:	11000117 	ldw	r4,4(r2)
 8005284:	2188703a 	and	r4,r4,r6
 8005288:	3900022e 	bgeu	r7,r4,8005294 <_malloc_r+0x530>
 800528c:	10800217 	ldw	r2,8(r2)
 8005290:	28bffb1e 	bne	r5,r2,8005280 <__alt_data_end+0xfc005280>
 8005294:	11800317 	ldw	r6,12(r2)
 8005298:	99000117 	ldw	r4,4(r19)
 800529c:	81800315 	stw	r6,12(r16)
 80052a0:	80800215 	stw	r2,8(r16)
 80052a4:	34000215 	stw	r16,8(r6)
 80052a8:	14000315 	stw	r16,12(r2)
 80052ac:	003f2706 	br	8004f4c <__alt_data_end+0xfc004f4c>
 80052b0:	88c00054 	ori	r3,r17,1
 80052b4:	80c00115 	stw	r3,4(r16)
 80052b8:	8463883a 	add	r17,r16,r17
 80052bc:	34400515 	stw	r17,20(r6)
 80052c0:	34400415 	stw	r17,16(r6)
 80052c4:	10c00054 	ori	r3,r2,1
 80052c8:	8a400315 	stw	r9,12(r17)
 80052cc:	8a400215 	stw	r9,8(r17)
 80052d0:	88c00115 	stw	r3,4(r17)
 80052d4:	88a3883a 	add	r17,r17,r2
 80052d8:	88800015 	stw	r2,0(r17)
 80052dc:	9009883a 	mov	r4,r18
 80052e0:	800d1cc0 	call	800d1cc <__malloc_unlock>
 80052e4:	80800204 	addi	r2,r16,8
 80052e8:	003ecb06 	br	8004e18 <__alt_data_end+0xfc004e18>
 80052ec:	31000117 	ldw	r4,4(r6)
 80052f0:	003f1606 	br	8004f4c <__alt_data_end+0xfc004f4c>
 80052f4:	63000044 	addi	r12,r12,1
 80052f8:	608000cc 	andi	r2,r12,3
 80052fc:	5ac00204 	addi	r11,r11,8
 8005300:	103f2a1e 	bne	r2,zero,8004fac <__alt_data_end+0xfc004fac>
 8005304:	00002106 	br	800538c <_malloc_r+0x628>
 8005308:	80800204 	addi	r2,r16,8
 800530c:	84000517 	ldw	r16,20(r16)
 8005310:	143eb31e 	bne	r2,r16,8004de0 <__alt_data_end+0xfc004de0>
 8005314:	18c00084 	addi	r3,r3,2
 8005318:	003eec06 	br	8004ecc <__alt_data_end+0xfc004ecc>
 800531c:	8085883a 	add	r2,r16,r2
 8005320:	10c00117 	ldw	r3,4(r2)
 8005324:	81000317 	ldw	r4,12(r16)
 8005328:	81400217 	ldw	r5,8(r16)
 800532c:	18c00054 	ori	r3,r3,1
 8005330:	10c00115 	stw	r3,4(r2)
 8005334:	29000315 	stw	r4,12(r5)
 8005338:	21400215 	stw	r5,8(r4)
 800533c:	9009883a 	mov	r4,r18
 8005340:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8005344:	80800204 	addi	r2,r16,8
 8005348:	003eb306 	br	8004e18 <__alt_data_end+0xfc004e18>
 800534c:	19c016c4 	addi	r7,r3,91
 8005350:	39cb883a 	add	r5,r7,r7
 8005354:	003ec706 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005358:	3804d1ba 	srli	r2,r7,6
 800535c:	11000e04 	addi	r4,r2,56
 8005360:	210b883a 	add	r5,r4,r4
 8005364:	003fbe06 	br	8005260 <__alt_data_end+0xfc005260>
 8005368:	84ff5d26 	beq	r16,r19,80050e0 <__alt_data_end+0xfc0050e0>
 800536c:	9c000217 	ldw	r16,8(r19)
 8005370:	00bfff04 	movi	r2,-4
 8005374:	80c00117 	ldw	r3,4(r16)
 8005378:	1886703a 	and	r3,r3,r2
 800537c:	003f9706 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005380:	52800017 	ldw	r10,0(r10)
 8005384:	18ffffc4 	addi	r3,r3,-1
 8005388:	50805c1e 	bne	r10,r2,80054fc <_malloc_r+0x798>
 800538c:	190000cc 	andi	r4,r3,3
 8005390:	50bffe04 	addi	r2,r10,-8
 8005394:	203ffa1e 	bne	r4,zero,8005380 <__alt_data_end+0xfc005380>
 8005398:	98800117 	ldw	r2,4(r19)
 800539c:	0146303a 	nor	r3,zero,r5
 80053a0:	1884703a 	and	r2,r3,r2
 80053a4:	98800115 	stw	r2,4(r19)
 80053a8:	294b883a 	add	r5,r5,r5
 80053ac:	117f2e36 	bltu	r2,r5,8005068 <__alt_data_end+0xfc005068>
 80053b0:	283f2d26 	beq	r5,zero,8005068 <__alt_data_end+0xfc005068>
 80053b4:	1146703a 	and	r3,r2,r5
 80053b8:	1800521e 	bne	r3,zero,8005504 <_malloc_r+0x7a0>
 80053bc:	6007883a 	mov	r3,r12
 80053c0:	294b883a 	add	r5,r5,r5
 80053c4:	1148703a 	and	r4,r2,r5
 80053c8:	18c00104 	addi	r3,r3,4
 80053cc:	203ffc26 	beq	r4,zero,80053c0 <__alt_data_end+0xfc0053c0>
 80053d0:	003ef006 	br	8004f94 <__alt_data_end+0xfc004f94>
 80053d4:	00805504 	movi	r2,340
 80053d8:	10c01336 	bltu	r2,r3,8005428 <_malloc_r+0x6c4>
 80053dc:	8806d3fa 	srli	r3,r17,15
 80053e0:	19c01dc4 	addi	r7,r3,119
 80053e4:	39cb883a 	add	r5,r7,r7
 80053e8:	003ea206 	br	8004e74 <__alt_data_end+0xfc004e74>
 80053ec:	00c40004 	movi	r3,4096
 80053f0:	003f4d06 	br	8005128 <__alt_data_end+0xfc005128>
 80053f4:	00800044 	movi	r2,1
 80053f8:	a0800115 	stw	r2,4(r20)
 80053fc:	a021883a 	mov	r16,r20
 8005400:	0007883a 	mov	r3,zero
 8005404:	003f7506 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005408:	200bd0ba 	srai	r5,r4,2
 800540c:	01800044 	movi	r6,1
 8005410:	41000117 	ldw	r4,4(r8)
 8005414:	314a983a 	sll	r5,r6,r5
 8005418:	100d883a 	mov	r6,r2
 800541c:	2908b03a 	or	r4,r5,r4
 8005420:	41000115 	stw	r4,4(r8)
 8005424:	003f9d06 	br	800529c <__alt_data_end+0xfc00529c>
 8005428:	00815504 	movi	r2,1364
 800542c:	10c01336 	bltu	r2,r3,800547c <_malloc_r+0x718>
 8005430:	8806d4ba 	srli	r3,r17,18
 8005434:	19c01f04 	addi	r7,r3,124
 8005438:	39cb883a 	add	r5,r7,r7
 800543c:	003e8d06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005440:	ad400404 	addi	r21,r21,16
 8005444:	003f1d06 	br	80050bc <__alt_data_end+0xfc0050bc>
 8005448:	01001504 	movi	r4,84
 800544c:	20801c36 	bltu	r4,r2,80054c0 <_malloc_r+0x75c>
 8005450:	3804d33a 	srli	r2,r7,12
 8005454:	11001b84 	addi	r4,r2,110
 8005458:	210b883a 	add	r5,r4,r4
 800545c:	003f8006 	br	8005260 <__alt_data_end+0xfc005260>
 8005460:	3083ffcc 	andi	r2,r6,4095
 8005464:	103f241e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005468:	99000217 	ldw	r4,8(r19)
 800546c:	ad85883a 	add	r2,r21,r22
 8005470:	10800054 	ori	r2,r2,1
 8005474:	20800115 	stw	r2,4(r4)
 8005478:	003f4a06 	br	80051a4 <__alt_data_end+0xfc0051a4>
 800547c:	01403f04 	movi	r5,252
 8005480:	01c01f84 	movi	r7,126
 8005484:	003e7b06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005488:	00c00044 	movi	r3,1
 800548c:	002b883a 	mov	r21,zero
 8005490:	003f3006 	br	8005154 <__alt_data_end+0xfc005154>
 8005494:	00820074 	movhi	r2,2049
 8005498:	10844504 	addi	r2,r2,4372
 800549c:	15000015 	stw	r20,0(r2)
 80054a0:	003f1b06 	br	8005110 <__alt_data_end+0xfc005110>
 80054a4:	9009883a 	mov	r4,r18
 80054a8:	81400204 	addi	r5,r16,8
 80054ac:	800466c0 	call	800466c <_free_r>
 80054b0:	00820074 	movhi	r2,2049
 80054b4:	108b1b04 	addi	r2,r2,11372
 80054b8:	10c00017 	ldw	r3,0(r2)
 80054bc:	003f3906 	br	80051a4 <__alt_data_end+0xfc0051a4>
 80054c0:	01005504 	movi	r4,340
 80054c4:	20800436 	bltu	r4,r2,80054d8 <_malloc_r+0x774>
 80054c8:	3804d3fa 	srli	r2,r7,15
 80054cc:	11001dc4 	addi	r4,r2,119
 80054d0:	210b883a 	add	r5,r4,r4
 80054d4:	003f6206 	br	8005260 <__alt_data_end+0xfc005260>
 80054d8:	01015504 	movi	r4,1364
 80054dc:	20800436 	bltu	r4,r2,80054f0 <_malloc_r+0x78c>
 80054e0:	3804d4ba 	srli	r2,r7,18
 80054e4:	11001f04 	addi	r4,r2,124
 80054e8:	210b883a 	add	r5,r4,r4
 80054ec:	003f5c06 	br	8005260 <__alt_data_end+0xfc005260>
 80054f0:	01403f04 	movi	r5,252
 80054f4:	01001f84 	movi	r4,126
 80054f8:	003f5906 	br	8005260 <__alt_data_end+0xfc005260>
 80054fc:	98800117 	ldw	r2,4(r19)
 8005500:	003fa906 	br	80053a8 <__alt_data_end+0xfc0053a8>
 8005504:	6007883a 	mov	r3,r12
 8005508:	003ea206 	br	8004f94 <__alt_data_end+0xfc004f94>

0800550c <memchr>:
 800550c:	208000cc 	andi	r2,r4,3
 8005510:	280f883a 	mov	r7,r5
 8005514:	10003526 	beq	r2,zero,80055ec <memchr+0xe0>
 8005518:	30bfffc4 	addi	r2,r6,-1
 800551c:	30001b26 	beq	r6,zero,800558c <memchr+0x80>
 8005520:	21800003 	ldbu	r6,0(r4)
 8005524:	28c03fcc 	andi	r3,r5,255
 8005528:	30c01a26 	beq	r6,r3,8005594 <memchr+0x88>
 800552c:	180d883a 	mov	r6,r3
 8005530:	00000406 	br	8005544 <memchr+0x38>
 8005534:	10001526 	beq	r2,zero,800558c <memchr+0x80>
 8005538:	20c00003 	ldbu	r3,0(r4)
 800553c:	10bfffc4 	addi	r2,r2,-1
 8005540:	19801426 	beq	r3,r6,8005594 <memchr+0x88>
 8005544:	21000044 	addi	r4,r4,1
 8005548:	20c000cc 	andi	r3,r4,3
 800554c:	183ff91e 	bne	r3,zero,8005534 <__alt_data_end+0xfc005534>
 8005550:	024000c4 	movi	r9,3
 8005554:	48801136 	bltu	r9,r2,800559c <memchr+0x90>
 8005558:	10000c26 	beq	r2,zero,800558c <memchr+0x80>
 800555c:	20c00003 	ldbu	r3,0(r4)
 8005560:	29403fcc 	andi	r5,r5,255
 8005564:	19400b26 	beq	r3,r5,8005594 <memchr+0x88>
 8005568:	20c00044 	addi	r3,r4,1
 800556c:	2085883a 	add	r2,r4,r2
 8005570:	39803fcc 	andi	r6,r7,255
 8005574:	00000306 	br	8005584 <memchr+0x78>
 8005578:	18c00044 	addi	r3,r3,1
 800557c:	197fffc3 	ldbu	r5,-1(r3)
 8005580:	29800426 	beq	r5,r6,8005594 <memchr+0x88>
 8005584:	1809883a 	mov	r4,r3
 8005588:	18bffb1e 	bne	r3,r2,8005578 <__alt_data_end+0xfc005578>
 800558c:	0005883a 	mov	r2,zero
 8005590:	f800283a 	ret
 8005594:	2005883a 	mov	r2,r4
 8005598:	f800283a 	ret
 800559c:	28c03fcc 	andi	r3,r5,255
 80055a0:	1810923a 	slli	r8,r3,8
 80055a4:	02ffbff4 	movhi	r11,65279
 80055a8:	02a02074 	movhi	r10,32897
 80055ac:	40c6b03a 	or	r3,r8,r3
 80055b0:	1810943a 	slli	r8,r3,16
 80055b4:	5affbfc4 	addi	r11,r11,-257
 80055b8:	52a02004 	addi	r10,r10,-32640
 80055bc:	40d0b03a 	or	r8,r8,r3
 80055c0:	20c00017 	ldw	r3,0(r4)
 80055c4:	40c6f03a 	xor	r3,r8,r3
 80055c8:	1acd883a 	add	r6,r3,r11
 80055cc:	00c6303a 	nor	r3,zero,r3
 80055d0:	30c6703a 	and	r3,r6,r3
 80055d4:	1a86703a 	and	r3,r3,r10
 80055d8:	183fdf1e 	bne	r3,zero,8005558 <__alt_data_end+0xfc005558>
 80055dc:	10bfff04 	addi	r2,r2,-4
 80055e0:	21000104 	addi	r4,r4,4
 80055e4:	48bff636 	bltu	r9,r2,80055c0 <__alt_data_end+0xfc0055c0>
 80055e8:	003fdb06 	br	8005558 <__alt_data_end+0xfc005558>
 80055ec:	3005883a 	mov	r2,r6
 80055f0:	003fd706 	br	8005550 <__alt_data_end+0xfc005550>

080055f4 <memcpy>:
 80055f4:	deffff04 	addi	sp,sp,-4
 80055f8:	dc000015 	stw	r16,0(sp)
 80055fc:	00c003c4 	movi	r3,15
 8005600:	2005883a 	mov	r2,r4
 8005604:	1980432e 	bgeu	r3,r6,8005714 <memcpy+0x120>
 8005608:	2146b03a 	or	r3,r4,r5
 800560c:	18c000cc 	andi	r3,r3,3
 8005610:	1800421e 	bne	r3,zero,800571c <memcpy+0x128>
 8005614:	343ffc04 	addi	r16,r6,-16
 8005618:	8020d13a 	srli	r16,r16,4
 800561c:	28c00104 	addi	r3,r5,4
 8005620:	23400104 	addi	r13,r4,4
 8005624:	801e913a 	slli	r15,r16,4
 8005628:	2b000204 	addi	r12,r5,8
 800562c:	22c00204 	addi	r11,r4,8
 8005630:	7bc00504 	addi	r15,r15,20
 8005634:	2a800304 	addi	r10,r5,12
 8005638:	22400304 	addi	r9,r4,12
 800563c:	2bdf883a 	add	r15,r5,r15
 8005640:	2811883a 	mov	r8,r5
 8005644:	200f883a 	mov	r7,r4
 8005648:	41000017 	ldw	r4,0(r8)
 800564c:	39c00404 	addi	r7,r7,16
 8005650:	18c00404 	addi	r3,r3,16
 8005654:	393ffc15 	stw	r4,-16(r7)
 8005658:	1bbffc17 	ldw	r14,-16(r3)
 800565c:	6b400404 	addi	r13,r13,16
 8005660:	5ac00404 	addi	r11,r11,16
 8005664:	6bbffc15 	stw	r14,-16(r13)
 8005668:	63800017 	ldw	r14,0(r12)
 800566c:	4a400404 	addi	r9,r9,16
 8005670:	42000404 	addi	r8,r8,16
 8005674:	5bbffc15 	stw	r14,-16(r11)
 8005678:	53800017 	ldw	r14,0(r10)
 800567c:	63000404 	addi	r12,r12,16
 8005680:	52800404 	addi	r10,r10,16
 8005684:	4bbffc15 	stw	r14,-16(r9)
 8005688:	1bffef1e 	bne	r3,r15,8005648 <__alt_data_end+0xfc005648>
 800568c:	81c00044 	addi	r7,r16,1
 8005690:	380e913a 	slli	r7,r7,4
 8005694:	310003cc 	andi	r4,r6,15
 8005698:	02c000c4 	movi	r11,3
 800569c:	11c7883a 	add	r3,r2,r7
 80056a0:	29cb883a 	add	r5,r5,r7
 80056a4:	59001f2e 	bgeu	r11,r4,8005724 <memcpy+0x130>
 80056a8:	1813883a 	mov	r9,r3
 80056ac:	2811883a 	mov	r8,r5
 80056b0:	200f883a 	mov	r7,r4
 80056b4:	42800017 	ldw	r10,0(r8)
 80056b8:	4a400104 	addi	r9,r9,4
 80056bc:	39ffff04 	addi	r7,r7,-4
 80056c0:	4abfff15 	stw	r10,-4(r9)
 80056c4:	42000104 	addi	r8,r8,4
 80056c8:	59fffa36 	bltu	r11,r7,80056b4 <__alt_data_end+0xfc0056b4>
 80056cc:	213fff04 	addi	r4,r4,-4
 80056d0:	2008d0ba 	srli	r4,r4,2
 80056d4:	318000cc 	andi	r6,r6,3
 80056d8:	21000044 	addi	r4,r4,1
 80056dc:	2109883a 	add	r4,r4,r4
 80056e0:	2109883a 	add	r4,r4,r4
 80056e4:	1907883a 	add	r3,r3,r4
 80056e8:	290b883a 	add	r5,r5,r4
 80056ec:	30000626 	beq	r6,zero,8005708 <memcpy+0x114>
 80056f0:	198d883a 	add	r6,r3,r6
 80056f4:	29c00003 	ldbu	r7,0(r5)
 80056f8:	18c00044 	addi	r3,r3,1
 80056fc:	29400044 	addi	r5,r5,1
 8005700:	19ffffc5 	stb	r7,-1(r3)
 8005704:	19bffb1e 	bne	r3,r6,80056f4 <__alt_data_end+0xfc0056f4>
 8005708:	dc000017 	ldw	r16,0(sp)
 800570c:	dec00104 	addi	sp,sp,4
 8005710:	f800283a 	ret
 8005714:	2007883a 	mov	r3,r4
 8005718:	003ff406 	br	80056ec <__alt_data_end+0xfc0056ec>
 800571c:	2007883a 	mov	r3,r4
 8005720:	003ff306 	br	80056f0 <__alt_data_end+0xfc0056f0>
 8005724:	200d883a 	mov	r6,r4
 8005728:	003ff006 	br	80056ec <__alt_data_end+0xfc0056ec>

0800572c <memset>:
 800572c:	20c000cc 	andi	r3,r4,3
 8005730:	2005883a 	mov	r2,r4
 8005734:	18004326 	beq	r3,zero,8005844 <memset+0x118>
 8005738:	31ffffc4 	addi	r7,r6,-1
 800573c:	30004026 	beq	r6,zero,8005840 <memset+0x114>
 8005740:	2813883a 	mov	r9,r5
 8005744:	200d883a 	mov	r6,r4
 8005748:	2007883a 	mov	r3,r4
 800574c:	00000406 	br	8005760 <memset+0x34>
 8005750:	3a3fffc4 	addi	r8,r7,-1
 8005754:	31800044 	addi	r6,r6,1
 8005758:	38003926 	beq	r7,zero,8005840 <memset+0x114>
 800575c:	400f883a 	mov	r7,r8
 8005760:	18c00044 	addi	r3,r3,1
 8005764:	32400005 	stb	r9,0(r6)
 8005768:	1a0000cc 	andi	r8,r3,3
 800576c:	403ff81e 	bne	r8,zero,8005750 <__alt_data_end+0xfc005750>
 8005770:	010000c4 	movi	r4,3
 8005774:	21c02d2e 	bgeu	r4,r7,800582c <memset+0x100>
 8005778:	29803fcc 	andi	r6,r5,255
 800577c:	3008923a 	slli	r4,r6,8
 8005780:	218cb03a 	or	r6,r4,r6
 8005784:	3008943a 	slli	r4,r6,16
 8005788:	218cb03a 	or	r6,r4,r6
 800578c:	010003c4 	movi	r4,15
 8005790:	21c0182e 	bgeu	r4,r7,80057f4 <memset+0xc8>
 8005794:	3b3ffc04 	addi	r12,r7,-16
 8005798:	6018d13a 	srli	r12,r12,4
 800579c:	1a000104 	addi	r8,r3,4
 80057a0:	1ac00204 	addi	r11,r3,8
 80057a4:	6008913a 	slli	r4,r12,4
 80057a8:	1a800304 	addi	r10,r3,12
 80057ac:	1813883a 	mov	r9,r3
 80057b0:	21000504 	addi	r4,r4,20
 80057b4:	1909883a 	add	r4,r3,r4
 80057b8:	49800015 	stw	r6,0(r9)
 80057bc:	41800015 	stw	r6,0(r8)
 80057c0:	59800015 	stw	r6,0(r11)
 80057c4:	51800015 	stw	r6,0(r10)
 80057c8:	42000404 	addi	r8,r8,16
 80057cc:	4a400404 	addi	r9,r9,16
 80057d0:	5ac00404 	addi	r11,r11,16
 80057d4:	52800404 	addi	r10,r10,16
 80057d8:	413ff71e 	bne	r8,r4,80057b8 <__alt_data_end+0xfc0057b8>
 80057dc:	63000044 	addi	r12,r12,1
 80057e0:	6018913a 	slli	r12,r12,4
 80057e4:	39c003cc 	andi	r7,r7,15
 80057e8:	010000c4 	movi	r4,3
 80057ec:	1b07883a 	add	r3,r3,r12
 80057f0:	21c00e2e 	bgeu	r4,r7,800582c <memset+0x100>
 80057f4:	1813883a 	mov	r9,r3
 80057f8:	3811883a 	mov	r8,r7
 80057fc:	010000c4 	movi	r4,3
 8005800:	49800015 	stw	r6,0(r9)
 8005804:	423fff04 	addi	r8,r8,-4
 8005808:	4a400104 	addi	r9,r9,4
 800580c:	223ffc36 	bltu	r4,r8,8005800 <__alt_data_end+0xfc005800>
 8005810:	393fff04 	addi	r4,r7,-4
 8005814:	2008d0ba 	srli	r4,r4,2
 8005818:	39c000cc 	andi	r7,r7,3
 800581c:	21000044 	addi	r4,r4,1
 8005820:	2109883a 	add	r4,r4,r4
 8005824:	2109883a 	add	r4,r4,r4
 8005828:	1907883a 	add	r3,r3,r4
 800582c:	38000426 	beq	r7,zero,8005840 <memset+0x114>
 8005830:	19cf883a 	add	r7,r3,r7
 8005834:	19400005 	stb	r5,0(r3)
 8005838:	18c00044 	addi	r3,r3,1
 800583c:	19fffd1e 	bne	r3,r7,8005834 <__alt_data_end+0xfc005834>
 8005840:	f800283a 	ret
 8005844:	2007883a 	mov	r3,r4
 8005848:	300f883a 	mov	r7,r6
 800584c:	003fc806 	br	8005770 <__alt_data_end+0xfc005770>

08005850 <_Balloc>:
 8005850:	20801317 	ldw	r2,76(r4)
 8005854:	defffc04 	addi	sp,sp,-16
 8005858:	dc400115 	stw	r17,4(sp)
 800585c:	dc000015 	stw	r16,0(sp)
 8005860:	dfc00315 	stw	ra,12(sp)
 8005864:	dc800215 	stw	r18,8(sp)
 8005868:	2023883a 	mov	r17,r4
 800586c:	2821883a 	mov	r16,r5
 8005870:	10000f26 	beq	r2,zero,80058b0 <_Balloc+0x60>
 8005874:	8407883a 	add	r3,r16,r16
 8005878:	18c7883a 	add	r3,r3,r3
 800587c:	10c7883a 	add	r3,r2,r3
 8005880:	18800017 	ldw	r2,0(r3)
 8005884:	10001126 	beq	r2,zero,80058cc <_Balloc+0x7c>
 8005888:	11000017 	ldw	r4,0(r2)
 800588c:	19000015 	stw	r4,0(r3)
 8005890:	10000415 	stw	zero,16(r2)
 8005894:	10000315 	stw	zero,12(r2)
 8005898:	dfc00317 	ldw	ra,12(sp)
 800589c:	dc800217 	ldw	r18,8(sp)
 80058a0:	dc400117 	ldw	r17,4(sp)
 80058a4:	dc000017 	ldw	r16,0(sp)
 80058a8:	dec00404 	addi	sp,sp,16
 80058ac:	f800283a 	ret
 80058b0:	01400104 	movi	r5,4
 80058b4:	01800844 	movi	r6,33
 80058b8:	80081e40 	call	80081e4 <_calloc_r>
 80058bc:	88801315 	stw	r2,76(r17)
 80058c0:	103fec1e 	bne	r2,zero,8005874 <__alt_data_end+0xfc005874>
 80058c4:	0005883a 	mov	r2,zero
 80058c8:	003ff306 	br	8005898 <__alt_data_end+0xfc005898>
 80058cc:	01400044 	movi	r5,1
 80058d0:	2c24983a 	sll	r18,r5,r16
 80058d4:	8809883a 	mov	r4,r17
 80058d8:	91800144 	addi	r6,r18,5
 80058dc:	318d883a 	add	r6,r6,r6
 80058e0:	318d883a 	add	r6,r6,r6
 80058e4:	80081e40 	call	80081e4 <_calloc_r>
 80058e8:	103ff626 	beq	r2,zero,80058c4 <__alt_data_end+0xfc0058c4>
 80058ec:	14000115 	stw	r16,4(r2)
 80058f0:	14800215 	stw	r18,8(r2)
 80058f4:	003fe606 	br	8005890 <__alt_data_end+0xfc005890>

080058f8 <_Bfree>:
 80058f8:	28000826 	beq	r5,zero,800591c <_Bfree+0x24>
 80058fc:	28c00117 	ldw	r3,4(r5)
 8005900:	20801317 	ldw	r2,76(r4)
 8005904:	18c7883a 	add	r3,r3,r3
 8005908:	18c7883a 	add	r3,r3,r3
 800590c:	10c5883a 	add	r2,r2,r3
 8005910:	10c00017 	ldw	r3,0(r2)
 8005914:	28c00015 	stw	r3,0(r5)
 8005918:	11400015 	stw	r5,0(r2)
 800591c:	f800283a 	ret

08005920 <__multadd>:
 8005920:	defff704 	addi	sp,sp,-36
 8005924:	dc800215 	stw	r18,8(sp)
 8005928:	2c800417 	ldw	r18,16(r5)
 800592c:	ddc00715 	stw	r23,28(sp)
 8005930:	dd800615 	stw	r22,24(sp)
 8005934:	dd000415 	stw	r20,16(sp)
 8005938:	dcc00315 	stw	r19,12(sp)
 800593c:	dc400115 	stw	r17,4(sp)
 8005940:	dc000015 	stw	r16,0(sp)
 8005944:	dfc00815 	stw	ra,32(sp)
 8005948:	dd400515 	stw	r21,20(sp)
 800594c:	2827883a 	mov	r19,r5
 8005950:	2029883a 	mov	r20,r4
 8005954:	3023883a 	mov	r17,r6
 8005958:	3821883a 	mov	r16,r7
 800595c:	2d800504 	addi	r22,r5,20
 8005960:	002f883a 	mov	r23,zero
 8005964:	b5400017 	ldw	r21,0(r22)
 8005968:	880b883a 	mov	r5,r17
 800596c:	bdc00044 	addi	r23,r23,1
 8005970:	a93fffcc 	andi	r4,r21,65535
 8005974:	800a3a80 	call	800a3a8 <__mulsi3>
 8005978:	1421883a 	add	r16,r2,r16
 800597c:	a808d43a 	srli	r4,r21,16
 8005980:	802ad43a 	srli	r21,r16,16
 8005984:	880b883a 	mov	r5,r17
 8005988:	800a3a80 	call	800a3a8 <__mulsi3>
 800598c:	a88f883a 	add	r7,r21,r2
 8005990:	3804943a 	slli	r2,r7,16
 8005994:	80ffffcc 	andi	r3,r16,65535
 8005998:	b5800104 	addi	r22,r22,4
 800599c:	10c7883a 	add	r3,r2,r3
 80059a0:	b0ffff15 	stw	r3,-4(r22)
 80059a4:	3820d43a 	srli	r16,r7,16
 80059a8:	bcbfee16 	blt	r23,r18,8005964 <__alt_data_end+0xfc005964>
 80059ac:	80000926 	beq	r16,zero,80059d4 <__multadd+0xb4>
 80059b0:	98800217 	ldw	r2,8(r19)
 80059b4:	9080130e 	bge	r18,r2,8005a04 <__multadd+0xe4>
 80059b8:	90800144 	addi	r2,r18,5
 80059bc:	1085883a 	add	r2,r2,r2
 80059c0:	1085883a 	add	r2,r2,r2
 80059c4:	9885883a 	add	r2,r19,r2
 80059c8:	14000015 	stw	r16,0(r2)
 80059cc:	94800044 	addi	r18,r18,1
 80059d0:	9c800415 	stw	r18,16(r19)
 80059d4:	9805883a 	mov	r2,r19
 80059d8:	dfc00817 	ldw	ra,32(sp)
 80059dc:	ddc00717 	ldw	r23,28(sp)
 80059e0:	dd800617 	ldw	r22,24(sp)
 80059e4:	dd400517 	ldw	r21,20(sp)
 80059e8:	dd000417 	ldw	r20,16(sp)
 80059ec:	dcc00317 	ldw	r19,12(sp)
 80059f0:	dc800217 	ldw	r18,8(sp)
 80059f4:	dc400117 	ldw	r17,4(sp)
 80059f8:	dc000017 	ldw	r16,0(sp)
 80059fc:	dec00904 	addi	sp,sp,36
 8005a00:	f800283a 	ret
 8005a04:	99400117 	ldw	r5,4(r19)
 8005a08:	a009883a 	mov	r4,r20
 8005a0c:	29400044 	addi	r5,r5,1
 8005a10:	80058500 	call	8005850 <_Balloc>
 8005a14:	99800417 	ldw	r6,16(r19)
 8005a18:	99400304 	addi	r5,r19,12
 8005a1c:	11000304 	addi	r4,r2,12
 8005a20:	31800084 	addi	r6,r6,2
 8005a24:	318d883a 	add	r6,r6,r6
 8005a28:	318d883a 	add	r6,r6,r6
 8005a2c:	1023883a 	mov	r17,r2
 8005a30:	80055f40 	call	80055f4 <memcpy>
 8005a34:	99000117 	ldw	r4,4(r19)
 8005a38:	a0c01317 	ldw	r3,76(r20)
 8005a3c:	2109883a 	add	r4,r4,r4
 8005a40:	2109883a 	add	r4,r4,r4
 8005a44:	1907883a 	add	r3,r3,r4
 8005a48:	18800017 	ldw	r2,0(r3)
 8005a4c:	98800015 	stw	r2,0(r19)
 8005a50:	1cc00015 	stw	r19,0(r3)
 8005a54:	8827883a 	mov	r19,r17
 8005a58:	003fd706 	br	80059b8 <__alt_data_end+0xfc0059b8>

08005a5c <__s2b>:
 8005a5c:	defff904 	addi	sp,sp,-28
 8005a60:	dc400115 	stw	r17,4(sp)
 8005a64:	dc000015 	stw	r16,0(sp)
 8005a68:	2023883a 	mov	r17,r4
 8005a6c:	2821883a 	mov	r16,r5
 8005a70:	39000204 	addi	r4,r7,8
 8005a74:	01400244 	movi	r5,9
 8005a78:	dcc00315 	stw	r19,12(sp)
 8005a7c:	dc800215 	stw	r18,8(sp)
 8005a80:	dfc00615 	stw	ra,24(sp)
 8005a84:	dd400515 	stw	r21,20(sp)
 8005a88:	dd000415 	stw	r20,16(sp)
 8005a8c:	3825883a 	mov	r18,r7
 8005a90:	3027883a 	mov	r19,r6
 8005a94:	800a2e80 	call	800a2e8 <__divsi3>
 8005a98:	00c00044 	movi	r3,1
 8005a9c:	000b883a 	mov	r5,zero
 8005aa0:	1880030e 	bge	r3,r2,8005ab0 <__s2b+0x54>
 8005aa4:	18c7883a 	add	r3,r3,r3
 8005aa8:	29400044 	addi	r5,r5,1
 8005aac:	18bffd16 	blt	r3,r2,8005aa4 <__alt_data_end+0xfc005aa4>
 8005ab0:	8809883a 	mov	r4,r17
 8005ab4:	80058500 	call	8005850 <_Balloc>
 8005ab8:	d8c00717 	ldw	r3,28(sp)
 8005abc:	10c00515 	stw	r3,20(r2)
 8005ac0:	00c00044 	movi	r3,1
 8005ac4:	10c00415 	stw	r3,16(r2)
 8005ac8:	00c00244 	movi	r3,9
 8005acc:	1cc0210e 	bge	r3,r19,8005b54 <__s2b+0xf8>
 8005ad0:	80eb883a 	add	r21,r16,r3
 8005ad4:	a829883a 	mov	r20,r21
 8005ad8:	84e1883a 	add	r16,r16,r19
 8005adc:	a1c00007 	ldb	r7,0(r20)
 8005ae0:	8809883a 	mov	r4,r17
 8005ae4:	a5000044 	addi	r20,r20,1
 8005ae8:	100b883a 	mov	r5,r2
 8005aec:	01800284 	movi	r6,10
 8005af0:	39fff404 	addi	r7,r7,-48
 8005af4:	80059200 	call	8005920 <__multadd>
 8005af8:	a43ff81e 	bne	r20,r16,8005adc <__alt_data_end+0xfc005adc>
 8005afc:	ace1883a 	add	r16,r21,r19
 8005b00:	843ffe04 	addi	r16,r16,-8
 8005b04:	9c800a0e 	bge	r19,r18,8005b30 <__s2b+0xd4>
 8005b08:	94e5c83a 	sub	r18,r18,r19
 8005b0c:	84a5883a 	add	r18,r16,r18
 8005b10:	81c00007 	ldb	r7,0(r16)
 8005b14:	8809883a 	mov	r4,r17
 8005b18:	84000044 	addi	r16,r16,1
 8005b1c:	100b883a 	mov	r5,r2
 8005b20:	01800284 	movi	r6,10
 8005b24:	39fff404 	addi	r7,r7,-48
 8005b28:	80059200 	call	8005920 <__multadd>
 8005b2c:	84bff81e 	bne	r16,r18,8005b10 <__alt_data_end+0xfc005b10>
 8005b30:	dfc00617 	ldw	ra,24(sp)
 8005b34:	dd400517 	ldw	r21,20(sp)
 8005b38:	dd000417 	ldw	r20,16(sp)
 8005b3c:	dcc00317 	ldw	r19,12(sp)
 8005b40:	dc800217 	ldw	r18,8(sp)
 8005b44:	dc400117 	ldw	r17,4(sp)
 8005b48:	dc000017 	ldw	r16,0(sp)
 8005b4c:	dec00704 	addi	sp,sp,28
 8005b50:	f800283a 	ret
 8005b54:	84000284 	addi	r16,r16,10
 8005b58:	1827883a 	mov	r19,r3
 8005b5c:	003fe906 	br	8005b04 <__alt_data_end+0xfc005b04>

08005b60 <__hi0bits>:
 8005b60:	20bfffec 	andhi	r2,r4,65535
 8005b64:	1000141e 	bne	r2,zero,8005bb8 <__hi0bits+0x58>
 8005b68:	2008943a 	slli	r4,r4,16
 8005b6c:	00800404 	movi	r2,16
 8005b70:	20ffc02c 	andhi	r3,r4,65280
 8005b74:	1800021e 	bne	r3,zero,8005b80 <__hi0bits+0x20>
 8005b78:	2008923a 	slli	r4,r4,8
 8005b7c:	10800204 	addi	r2,r2,8
 8005b80:	20fc002c 	andhi	r3,r4,61440
 8005b84:	1800021e 	bne	r3,zero,8005b90 <__hi0bits+0x30>
 8005b88:	2008913a 	slli	r4,r4,4
 8005b8c:	10800104 	addi	r2,r2,4
 8005b90:	20f0002c 	andhi	r3,r4,49152
 8005b94:	1800031e 	bne	r3,zero,8005ba4 <__hi0bits+0x44>
 8005b98:	2109883a 	add	r4,r4,r4
 8005b9c:	10800084 	addi	r2,r2,2
 8005ba0:	2109883a 	add	r4,r4,r4
 8005ba4:	20000316 	blt	r4,zero,8005bb4 <__hi0bits+0x54>
 8005ba8:	2110002c 	andhi	r4,r4,16384
 8005bac:	2000041e 	bne	r4,zero,8005bc0 <__hi0bits+0x60>
 8005bb0:	00800804 	movi	r2,32
 8005bb4:	f800283a 	ret
 8005bb8:	0005883a 	mov	r2,zero
 8005bbc:	003fec06 	br	8005b70 <__alt_data_end+0xfc005b70>
 8005bc0:	10800044 	addi	r2,r2,1
 8005bc4:	f800283a 	ret

08005bc8 <__lo0bits>:
 8005bc8:	20c00017 	ldw	r3,0(r4)
 8005bcc:	188001cc 	andi	r2,r3,7
 8005bd0:	10000826 	beq	r2,zero,8005bf4 <__lo0bits+0x2c>
 8005bd4:	1880004c 	andi	r2,r3,1
 8005bd8:	1000211e 	bne	r2,zero,8005c60 <__lo0bits+0x98>
 8005bdc:	1880008c 	andi	r2,r3,2
 8005be0:	1000211e 	bne	r2,zero,8005c68 <__lo0bits+0xa0>
 8005be4:	1806d0ba 	srli	r3,r3,2
 8005be8:	00800084 	movi	r2,2
 8005bec:	20c00015 	stw	r3,0(r4)
 8005bf0:	f800283a 	ret
 8005bf4:	18bfffcc 	andi	r2,r3,65535
 8005bf8:	10001326 	beq	r2,zero,8005c48 <__lo0bits+0x80>
 8005bfc:	0005883a 	mov	r2,zero
 8005c00:	19403fcc 	andi	r5,r3,255
 8005c04:	2800021e 	bne	r5,zero,8005c10 <__lo0bits+0x48>
 8005c08:	1806d23a 	srli	r3,r3,8
 8005c0c:	10800204 	addi	r2,r2,8
 8005c10:	194003cc 	andi	r5,r3,15
 8005c14:	2800021e 	bne	r5,zero,8005c20 <__lo0bits+0x58>
 8005c18:	1806d13a 	srli	r3,r3,4
 8005c1c:	10800104 	addi	r2,r2,4
 8005c20:	194000cc 	andi	r5,r3,3
 8005c24:	2800021e 	bne	r5,zero,8005c30 <__lo0bits+0x68>
 8005c28:	1806d0ba 	srli	r3,r3,2
 8005c2c:	10800084 	addi	r2,r2,2
 8005c30:	1940004c 	andi	r5,r3,1
 8005c34:	2800081e 	bne	r5,zero,8005c58 <__lo0bits+0x90>
 8005c38:	1806d07a 	srli	r3,r3,1
 8005c3c:	1800051e 	bne	r3,zero,8005c54 <__lo0bits+0x8c>
 8005c40:	00800804 	movi	r2,32
 8005c44:	f800283a 	ret
 8005c48:	1806d43a 	srli	r3,r3,16
 8005c4c:	00800404 	movi	r2,16
 8005c50:	003feb06 	br	8005c00 <__alt_data_end+0xfc005c00>
 8005c54:	10800044 	addi	r2,r2,1
 8005c58:	20c00015 	stw	r3,0(r4)
 8005c5c:	f800283a 	ret
 8005c60:	0005883a 	mov	r2,zero
 8005c64:	f800283a 	ret
 8005c68:	1806d07a 	srli	r3,r3,1
 8005c6c:	00800044 	movi	r2,1
 8005c70:	20c00015 	stw	r3,0(r4)
 8005c74:	f800283a 	ret

08005c78 <__i2b>:
 8005c78:	defffd04 	addi	sp,sp,-12
 8005c7c:	dc000015 	stw	r16,0(sp)
 8005c80:	04000044 	movi	r16,1
 8005c84:	dc400115 	stw	r17,4(sp)
 8005c88:	2823883a 	mov	r17,r5
 8005c8c:	800b883a 	mov	r5,r16
 8005c90:	dfc00215 	stw	ra,8(sp)
 8005c94:	80058500 	call	8005850 <_Balloc>
 8005c98:	14400515 	stw	r17,20(r2)
 8005c9c:	14000415 	stw	r16,16(r2)
 8005ca0:	dfc00217 	ldw	ra,8(sp)
 8005ca4:	dc400117 	ldw	r17,4(sp)
 8005ca8:	dc000017 	ldw	r16,0(sp)
 8005cac:	dec00304 	addi	sp,sp,12
 8005cb0:	f800283a 	ret

08005cb4 <__multiply>:
 8005cb4:	deffef04 	addi	sp,sp,-68
 8005cb8:	dc400815 	stw	r17,32(sp)
 8005cbc:	dc000715 	stw	r16,28(sp)
 8005cc0:	2c400417 	ldw	r17,16(r5)
 8005cc4:	34000417 	ldw	r16,16(r6)
 8005cc8:	dd800d15 	stw	r22,52(sp)
 8005ccc:	dc800915 	stw	r18,36(sp)
 8005cd0:	dfc01015 	stw	ra,64(sp)
 8005cd4:	df000f15 	stw	fp,60(sp)
 8005cd8:	ddc00e15 	stw	r23,56(sp)
 8005cdc:	dd400c15 	stw	r21,48(sp)
 8005ce0:	dd000b15 	stw	r20,44(sp)
 8005ce4:	dcc00a15 	stw	r19,40(sp)
 8005ce8:	2825883a 	mov	r18,r5
 8005cec:	302d883a 	mov	r22,r6
 8005cf0:	8c009116 	blt	r17,r16,8005f38 <__multiply+0x284>
 8005cf4:	8005883a 	mov	r2,r16
 8005cf8:	8821883a 	mov	r16,r17
 8005cfc:	1023883a 	mov	r17,r2
 8005d00:	90800217 	ldw	r2,8(r18)
 8005d04:	8447883a 	add	r3,r16,r17
 8005d08:	d8c00215 	stw	r3,8(sp)
 8005d0c:	91400117 	ldw	r5,4(r18)
 8005d10:	10c0010e 	bge	r2,r3,8005d18 <__multiply+0x64>
 8005d14:	29400044 	addi	r5,r5,1
 8005d18:	80058500 	call	8005850 <_Balloc>
 8005d1c:	d8c00217 	ldw	r3,8(sp)
 8005d20:	d8800615 	stw	r2,24(sp)
 8005d24:	18eb883a 	add	r21,r3,r3
 8005d28:	ad6b883a 	add	r21,r21,r21
 8005d2c:	10c00504 	addi	r3,r2,20
 8005d30:	1d6b883a 	add	r21,r3,r21
 8005d34:	d8c00115 	stw	r3,4(sp)
 8005d38:	dd400315 	stw	r21,12(sp)
 8005d3c:	1805883a 	mov	r2,r3
 8005d40:	1d40042e 	bgeu	r3,r21,8005d54 <__multiply+0xa0>
 8005d44:	d8c00317 	ldw	r3,12(sp)
 8005d48:	10000015 	stw	zero,0(r2)
 8005d4c:	10800104 	addi	r2,r2,4
 8005d50:	10fffc36 	bltu	r2,r3,8005d44 <__alt_data_end+0xfc005d44>
 8005d54:	8c63883a 	add	r17,r17,r17
 8005d58:	b5800504 	addi	r22,r22,20
 8005d5c:	8c63883a 	add	r17,r17,r17
 8005d60:	94800504 	addi	r18,r18,20
 8005d64:	8421883a 	add	r16,r16,r16
 8005d68:	b463883a 	add	r17,r22,r17
 8005d6c:	8421883a 	add	r16,r16,r16
 8005d70:	dd800015 	stw	r22,0(sp)
 8005d74:	dc800415 	stw	r18,16(sp)
 8005d78:	dc400515 	stw	r17,20(sp)
 8005d7c:	9429883a 	add	r20,r18,r16
 8005d80:	b4404f2e 	bgeu	r22,r17,8005ec0 <__multiply+0x20c>
 8005d84:	d8c00017 	ldw	r3,0(sp)
 8005d88:	1c800017 	ldw	r18,0(r3)
 8005d8c:	943fffcc 	andi	r16,r18,65535
 8005d90:	80001e26 	beq	r16,zero,8005e0c <__multiply+0x158>
 8005d94:	dd800117 	ldw	r22,4(sp)
 8005d98:	dd400417 	ldw	r21,16(sp)
 8005d9c:	0025883a 	mov	r18,zero
 8005da0:	adc00017 	ldw	r23,0(r21)
 8005da4:	b4c00017 	ldw	r19,0(r22)
 8005da8:	800b883a 	mov	r5,r16
 8005dac:	b93fffcc 	andi	r4,r23,65535
 8005db0:	800a3a80 	call	800a3a8 <__mulsi3>
 8005db4:	9c7fffcc 	andi	r17,r19,65535
 8005db8:	8885883a 	add	r2,r17,r2
 8005dbc:	b808d43a 	srli	r4,r23,16
 8005dc0:	14a3883a 	add	r17,r2,r18
 8005dc4:	9826d43a 	srli	r19,r19,16
 8005dc8:	8824d43a 	srli	r18,r17,16
 8005dcc:	800b883a 	mov	r5,r16
 8005dd0:	800a3a80 	call	800a3a8 <__mulsi3>
 8005dd4:	9885883a 	add	r2,r19,r2
 8005dd8:	14a7883a 	add	r19,r2,r18
 8005ddc:	88ffffcc 	andi	r3,r17,65535
 8005de0:	9822943a 	slli	r17,r19,16
 8005de4:	ad400104 	addi	r21,r21,4
 8005de8:	b005883a 	mov	r2,r22
 8005dec:	88c6b03a 	or	r3,r17,r3
 8005df0:	b0c00015 	stw	r3,0(r22)
 8005df4:	9824d43a 	srli	r18,r19,16
 8005df8:	b5800104 	addi	r22,r22,4
 8005dfc:	ad3fe836 	bltu	r21,r20,8005da0 <__alt_data_end+0xfc005da0>
 8005e00:	d8c00017 	ldw	r3,0(sp)
 8005e04:	14800115 	stw	r18,4(r2)
 8005e08:	1c800017 	ldw	r18,0(r3)
 8005e0c:	9024d43a 	srli	r18,r18,16
 8005e10:	90002226 	beq	r18,zero,8005e9c <__multiply+0x1e8>
 8005e14:	d8c00117 	ldw	r3,4(sp)
 8005e18:	dd800417 	ldw	r22,16(sp)
 8005e1c:	002f883a 	mov	r23,zero
 8005e20:	1f000017 	ldw	fp,0(r3)
 8005e24:	1823883a 	mov	r17,r3
 8005e28:	182b883a 	mov	r21,r3
 8005e2c:	e021883a 	mov	r16,fp
 8005e30:	00000106 	br	8005e38 <__multiply+0x184>
 8005e34:	982b883a 	mov	r21,r19
 8005e38:	b100000b 	ldhu	r4,0(r22)
 8005e3c:	8020d43a 	srli	r16,r16,16
 8005e40:	900b883a 	mov	r5,r18
 8005e44:	800a3a80 	call	800a3a8 <__mulsi3>
 8005e48:	1405883a 	add	r2,r2,r16
 8005e4c:	15ef883a 	add	r23,r2,r23
 8005e50:	b804943a 	slli	r2,r23,16
 8005e54:	e0ffffcc 	andi	r3,fp,65535
 8005e58:	8c400104 	addi	r17,r17,4
 8005e5c:	10c6b03a 	or	r3,r2,r3
 8005e60:	88ffff15 	stw	r3,-4(r17)
 8005e64:	b5800104 	addi	r22,r22,4
 8005e68:	b13fff17 	ldw	r4,-4(r22)
 8005e6c:	acc00104 	addi	r19,r21,4
 8005e70:	900b883a 	mov	r5,r18
 8005e74:	2008d43a 	srli	r4,r4,16
 8005e78:	9c000017 	ldw	r16,0(r19)
 8005e7c:	800a3a80 	call	800a3a8 <__mulsi3>
 8005e80:	b806d43a 	srli	r3,r23,16
 8005e84:	813fffcc 	andi	r4,r16,65535
 8005e88:	1105883a 	add	r2,r2,r4
 8005e8c:	10f9883a 	add	fp,r2,r3
 8005e90:	e02ed43a 	srli	r23,fp,16
 8005e94:	b53fe736 	bltu	r22,r20,8005e34 <__alt_data_end+0xfc005e34>
 8005e98:	af000115 	stw	fp,4(r21)
 8005e9c:	d8c00017 	ldw	r3,0(sp)
 8005ea0:	d9000517 	ldw	r4,20(sp)
 8005ea4:	18c00104 	addi	r3,r3,4
 8005ea8:	d8c00015 	stw	r3,0(sp)
 8005eac:	d8c00117 	ldw	r3,4(sp)
 8005eb0:	18c00104 	addi	r3,r3,4
 8005eb4:	d8c00115 	stw	r3,4(sp)
 8005eb8:	d8c00017 	ldw	r3,0(sp)
 8005ebc:	193fb136 	bltu	r3,r4,8005d84 <__alt_data_end+0xfc005d84>
 8005ec0:	d8c00217 	ldw	r3,8(sp)
 8005ec4:	00c00c0e 	bge	zero,r3,8005ef8 <__multiply+0x244>
 8005ec8:	d8c00317 	ldw	r3,12(sp)
 8005ecc:	18bfff17 	ldw	r2,-4(r3)
 8005ed0:	1d7fff04 	addi	r21,r3,-4
 8005ed4:	10000326 	beq	r2,zero,8005ee4 <__multiply+0x230>
 8005ed8:	00000706 	br	8005ef8 <__multiply+0x244>
 8005edc:	a8800017 	ldw	r2,0(r21)
 8005ee0:	1000051e 	bne	r2,zero,8005ef8 <__multiply+0x244>
 8005ee4:	d8c00217 	ldw	r3,8(sp)
 8005ee8:	ad7fff04 	addi	r21,r21,-4
 8005eec:	18ffffc4 	addi	r3,r3,-1
 8005ef0:	d8c00215 	stw	r3,8(sp)
 8005ef4:	183ff91e 	bne	r3,zero,8005edc <__alt_data_end+0xfc005edc>
 8005ef8:	d8c00617 	ldw	r3,24(sp)
 8005efc:	d9000217 	ldw	r4,8(sp)
 8005f00:	1805883a 	mov	r2,r3
 8005f04:	19000415 	stw	r4,16(r3)
 8005f08:	dfc01017 	ldw	ra,64(sp)
 8005f0c:	df000f17 	ldw	fp,60(sp)
 8005f10:	ddc00e17 	ldw	r23,56(sp)
 8005f14:	dd800d17 	ldw	r22,52(sp)
 8005f18:	dd400c17 	ldw	r21,48(sp)
 8005f1c:	dd000b17 	ldw	r20,44(sp)
 8005f20:	dcc00a17 	ldw	r19,40(sp)
 8005f24:	dc800917 	ldw	r18,36(sp)
 8005f28:	dc400817 	ldw	r17,32(sp)
 8005f2c:	dc000717 	ldw	r16,28(sp)
 8005f30:	dec01104 	addi	sp,sp,68
 8005f34:	f800283a 	ret
 8005f38:	3025883a 	mov	r18,r6
 8005f3c:	282d883a 	mov	r22,r5
 8005f40:	003f6f06 	br	8005d00 <__alt_data_end+0xfc005d00>

08005f44 <__pow5mult>:
 8005f44:	defffa04 	addi	sp,sp,-24
 8005f48:	dcc00315 	stw	r19,12(sp)
 8005f4c:	dc800215 	stw	r18,8(sp)
 8005f50:	dc000015 	stw	r16,0(sp)
 8005f54:	dfc00515 	stw	ra,20(sp)
 8005f58:	dd000415 	stw	r20,16(sp)
 8005f5c:	dc400115 	stw	r17,4(sp)
 8005f60:	308000cc 	andi	r2,r6,3
 8005f64:	3021883a 	mov	r16,r6
 8005f68:	2027883a 	mov	r19,r4
 8005f6c:	2825883a 	mov	r18,r5
 8005f70:	10002e1e 	bne	r2,zero,800602c <__pow5mult+0xe8>
 8005f74:	8021d0ba 	srai	r16,r16,2
 8005f78:	80001a26 	beq	r16,zero,8005fe4 <__pow5mult+0xa0>
 8005f7c:	9c401217 	ldw	r17,72(r19)
 8005f80:	8800061e 	bne	r17,zero,8005f9c <__pow5mult+0x58>
 8005f84:	00003406 	br	8006058 <__pow5mult+0x114>
 8005f88:	8021d07a 	srai	r16,r16,1
 8005f8c:	80001526 	beq	r16,zero,8005fe4 <__pow5mult+0xa0>
 8005f90:	88800017 	ldw	r2,0(r17)
 8005f94:	10001c26 	beq	r2,zero,8006008 <__pow5mult+0xc4>
 8005f98:	1023883a 	mov	r17,r2
 8005f9c:	80c0004c 	andi	r3,r16,1
 8005fa0:	183ff926 	beq	r3,zero,8005f88 <__alt_data_end+0xfc005f88>
 8005fa4:	900b883a 	mov	r5,r18
 8005fa8:	880d883a 	mov	r6,r17
 8005fac:	9809883a 	mov	r4,r19
 8005fb0:	8005cb40 	call	8005cb4 <__multiply>
 8005fb4:	90001b26 	beq	r18,zero,8006024 <__pow5mult+0xe0>
 8005fb8:	91c00117 	ldw	r7,4(r18)
 8005fbc:	98c01317 	ldw	r3,76(r19)
 8005fc0:	8021d07a 	srai	r16,r16,1
 8005fc4:	39cf883a 	add	r7,r7,r7
 8005fc8:	39cf883a 	add	r7,r7,r7
 8005fcc:	19c7883a 	add	r3,r3,r7
 8005fd0:	19000017 	ldw	r4,0(r3)
 8005fd4:	91000015 	stw	r4,0(r18)
 8005fd8:	1c800015 	stw	r18,0(r3)
 8005fdc:	1025883a 	mov	r18,r2
 8005fe0:	803feb1e 	bne	r16,zero,8005f90 <__alt_data_end+0xfc005f90>
 8005fe4:	9005883a 	mov	r2,r18
 8005fe8:	dfc00517 	ldw	ra,20(sp)
 8005fec:	dd000417 	ldw	r20,16(sp)
 8005ff0:	dcc00317 	ldw	r19,12(sp)
 8005ff4:	dc800217 	ldw	r18,8(sp)
 8005ff8:	dc400117 	ldw	r17,4(sp)
 8005ffc:	dc000017 	ldw	r16,0(sp)
 8006000:	dec00604 	addi	sp,sp,24
 8006004:	f800283a 	ret
 8006008:	9809883a 	mov	r4,r19
 800600c:	880b883a 	mov	r5,r17
 8006010:	880d883a 	mov	r6,r17
 8006014:	8005cb40 	call	8005cb4 <__multiply>
 8006018:	88800015 	stw	r2,0(r17)
 800601c:	10000015 	stw	zero,0(r2)
 8006020:	003fdd06 	br	8005f98 <__alt_data_end+0xfc005f98>
 8006024:	1025883a 	mov	r18,r2
 8006028:	003fd706 	br	8005f88 <__alt_data_end+0xfc005f88>
 800602c:	10bfffc4 	addi	r2,r2,-1
 8006030:	1085883a 	add	r2,r2,r2
 8006034:	00c20074 	movhi	r3,2049
 8006038:	18fcf904 	addi	r3,r3,-3100
 800603c:	1085883a 	add	r2,r2,r2
 8006040:	1885883a 	add	r2,r3,r2
 8006044:	11800017 	ldw	r6,0(r2)
 8006048:	000f883a 	mov	r7,zero
 800604c:	80059200 	call	8005920 <__multadd>
 8006050:	1025883a 	mov	r18,r2
 8006054:	003fc706 	br	8005f74 <__alt_data_end+0xfc005f74>
 8006058:	05000044 	movi	r20,1
 800605c:	9809883a 	mov	r4,r19
 8006060:	a00b883a 	mov	r5,r20
 8006064:	80058500 	call	8005850 <_Balloc>
 8006068:	1023883a 	mov	r17,r2
 800606c:	00809c44 	movi	r2,625
 8006070:	88800515 	stw	r2,20(r17)
 8006074:	8d000415 	stw	r20,16(r17)
 8006078:	9c401215 	stw	r17,72(r19)
 800607c:	88000015 	stw	zero,0(r17)
 8006080:	003fc606 	br	8005f9c <__alt_data_end+0xfc005f9c>

08006084 <__lshift>:
 8006084:	defff904 	addi	sp,sp,-28
 8006088:	dd000415 	stw	r20,16(sp)
 800608c:	dcc00315 	stw	r19,12(sp)
 8006090:	3029d17a 	srai	r20,r6,5
 8006094:	2cc00417 	ldw	r19,16(r5)
 8006098:	28800217 	ldw	r2,8(r5)
 800609c:	dd400515 	stw	r21,20(sp)
 80060a0:	a4e7883a 	add	r19,r20,r19
 80060a4:	dc800215 	stw	r18,8(sp)
 80060a8:	dc400115 	stw	r17,4(sp)
 80060ac:	dc000015 	stw	r16,0(sp)
 80060b0:	dfc00615 	stw	ra,24(sp)
 80060b4:	9c000044 	addi	r16,r19,1
 80060b8:	2823883a 	mov	r17,r5
 80060bc:	302b883a 	mov	r21,r6
 80060c0:	2025883a 	mov	r18,r4
 80060c4:	29400117 	ldw	r5,4(r5)
 80060c8:	1400030e 	bge	r2,r16,80060d8 <__lshift+0x54>
 80060cc:	1085883a 	add	r2,r2,r2
 80060d0:	29400044 	addi	r5,r5,1
 80060d4:	143ffd16 	blt	r2,r16,80060cc <__alt_data_end+0xfc0060cc>
 80060d8:	9009883a 	mov	r4,r18
 80060dc:	80058500 	call	8005850 <_Balloc>
 80060e0:	11c00504 	addi	r7,r2,20
 80060e4:	0500090e 	bge	zero,r20,800610c <__lshift+0x88>
 80060e8:	3811883a 	mov	r8,r7
 80060ec:	0007883a 	mov	r3,zero
 80060f0:	40000015 	stw	zero,0(r8)
 80060f4:	18c00044 	addi	r3,r3,1
 80060f8:	42000104 	addi	r8,r8,4
 80060fc:	1d3ffc1e 	bne	r3,r20,80060f0 <__alt_data_end+0xfc0060f0>
 8006100:	18c7883a 	add	r3,r3,r3
 8006104:	18c7883a 	add	r3,r3,r3
 8006108:	38cf883a 	add	r7,r7,r3
 800610c:	89000417 	ldw	r4,16(r17)
 8006110:	88c00504 	addi	r3,r17,20
 8006114:	a98007cc 	andi	r6,r21,31
 8006118:	2109883a 	add	r4,r4,r4
 800611c:	2109883a 	add	r4,r4,r4
 8006120:	1909883a 	add	r4,r3,r4
 8006124:	30002326 	beq	r6,zero,80061b4 <__lshift+0x130>
 8006128:	01400804 	movi	r5,32
 800612c:	298bc83a 	sub	r5,r5,r6
 8006130:	0013883a 	mov	r9,zero
 8006134:	1a000017 	ldw	r8,0(r3)
 8006138:	3815883a 	mov	r10,r7
 800613c:	39c00104 	addi	r7,r7,4
 8006140:	4190983a 	sll	r8,r8,r6
 8006144:	18c00104 	addi	r3,r3,4
 8006148:	4a10b03a 	or	r8,r9,r8
 800614c:	3a3fff15 	stw	r8,-4(r7)
 8006150:	1a3fff17 	ldw	r8,-4(r3)
 8006154:	4152d83a 	srl	r9,r8,r5
 8006158:	193ff636 	bltu	r3,r4,8006134 <__alt_data_end+0xfc006134>
 800615c:	52400115 	stw	r9,4(r10)
 8006160:	48000126 	beq	r9,zero,8006168 <__lshift+0xe4>
 8006164:	9c000084 	addi	r16,r19,2
 8006168:	89000117 	ldw	r4,4(r17)
 800616c:	90c01317 	ldw	r3,76(r18)
 8006170:	843fffc4 	addi	r16,r16,-1
 8006174:	2109883a 	add	r4,r4,r4
 8006178:	2109883a 	add	r4,r4,r4
 800617c:	1907883a 	add	r3,r3,r4
 8006180:	19000017 	ldw	r4,0(r3)
 8006184:	14000415 	stw	r16,16(r2)
 8006188:	89000015 	stw	r4,0(r17)
 800618c:	1c400015 	stw	r17,0(r3)
 8006190:	dfc00617 	ldw	ra,24(sp)
 8006194:	dd400517 	ldw	r21,20(sp)
 8006198:	dd000417 	ldw	r20,16(sp)
 800619c:	dcc00317 	ldw	r19,12(sp)
 80061a0:	dc800217 	ldw	r18,8(sp)
 80061a4:	dc400117 	ldw	r17,4(sp)
 80061a8:	dc000017 	ldw	r16,0(sp)
 80061ac:	dec00704 	addi	sp,sp,28
 80061b0:	f800283a 	ret
 80061b4:	19400017 	ldw	r5,0(r3)
 80061b8:	39c00104 	addi	r7,r7,4
 80061bc:	18c00104 	addi	r3,r3,4
 80061c0:	397fff15 	stw	r5,-4(r7)
 80061c4:	193ffb36 	bltu	r3,r4,80061b4 <__alt_data_end+0xfc0061b4>
 80061c8:	003fe706 	br	8006168 <__alt_data_end+0xfc006168>

080061cc <__mcmp>:
 80061cc:	20800417 	ldw	r2,16(r4)
 80061d0:	28c00417 	ldw	r3,16(r5)
 80061d4:	10c5c83a 	sub	r2,r2,r3
 80061d8:	1000111e 	bne	r2,zero,8006220 <__mcmp+0x54>
 80061dc:	18c7883a 	add	r3,r3,r3
 80061e0:	18c7883a 	add	r3,r3,r3
 80061e4:	21000504 	addi	r4,r4,20
 80061e8:	29400504 	addi	r5,r5,20
 80061ec:	20c5883a 	add	r2,r4,r3
 80061f0:	28cb883a 	add	r5,r5,r3
 80061f4:	00000106 	br	80061fc <__mcmp+0x30>
 80061f8:	20800a2e 	bgeu	r4,r2,8006224 <__mcmp+0x58>
 80061fc:	10bfff04 	addi	r2,r2,-4
 8006200:	297fff04 	addi	r5,r5,-4
 8006204:	11800017 	ldw	r6,0(r2)
 8006208:	28c00017 	ldw	r3,0(r5)
 800620c:	30fffa26 	beq	r6,r3,80061f8 <__alt_data_end+0xfc0061f8>
 8006210:	30c00236 	bltu	r6,r3,800621c <__mcmp+0x50>
 8006214:	00800044 	movi	r2,1
 8006218:	f800283a 	ret
 800621c:	00bfffc4 	movi	r2,-1
 8006220:	f800283a 	ret
 8006224:	0005883a 	mov	r2,zero
 8006228:	f800283a 	ret

0800622c <__mdiff>:
 800622c:	defffb04 	addi	sp,sp,-20
 8006230:	dc000015 	stw	r16,0(sp)
 8006234:	2821883a 	mov	r16,r5
 8006238:	dcc00315 	stw	r19,12(sp)
 800623c:	300b883a 	mov	r5,r6
 8006240:	2027883a 	mov	r19,r4
 8006244:	8009883a 	mov	r4,r16
 8006248:	dc800215 	stw	r18,8(sp)
 800624c:	dfc00415 	stw	ra,16(sp)
 8006250:	dc400115 	stw	r17,4(sp)
 8006254:	3025883a 	mov	r18,r6
 8006258:	80061cc0 	call	80061cc <__mcmp>
 800625c:	10005226 	beq	r2,zero,80063a8 <__mdiff+0x17c>
 8006260:	10004c16 	blt	r2,zero,8006394 <__mdiff+0x168>
 8006264:	0023883a 	mov	r17,zero
 8006268:	81400117 	ldw	r5,4(r16)
 800626c:	9809883a 	mov	r4,r19
 8006270:	80058500 	call	8005850 <_Balloc>
 8006274:	83400417 	ldw	r13,16(r16)
 8006278:	93800417 	ldw	r14,16(r18)
 800627c:	81000504 	addi	r4,r16,20
 8006280:	6b59883a 	add	r12,r13,r13
 8006284:	739d883a 	add	r14,r14,r14
 8006288:	6319883a 	add	r12,r12,r12
 800628c:	91800504 	addi	r6,r18,20
 8006290:	739d883a 	add	r14,r14,r14
 8006294:	14400315 	stw	r17,12(r2)
 8006298:	2319883a 	add	r12,r4,r12
 800629c:	339d883a 	add	r14,r6,r14
 80062a0:	12400504 	addi	r9,r2,20
 80062a4:	0007883a 	mov	r3,zero
 80062a8:	22000017 	ldw	r8,0(r4)
 80062ac:	32800017 	ldw	r10,0(r6)
 80062b0:	4ac00104 	addi	r11,r9,4
 80062b4:	41ffffcc 	andi	r7,r8,65535
 80062b8:	38c7883a 	add	r3,r7,r3
 80062bc:	51ffffcc 	andi	r7,r10,65535
 80062c0:	19cfc83a 	sub	r7,r3,r7
 80062c4:	4010d43a 	srli	r8,r8,16
 80062c8:	5014d43a 	srli	r10,r10,16
 80062cc:	3807d43a 	srai	r3,r7,16
 80062d0:	39ffffcc 	andi	r7,r7,65535
 80062d4:	4291c83a 	sub	r8,r8,r10
 80062d8:	40c7883a 	add	r3,r8,r3
 80062dc:	1810943a 	slli	r8,r3,16
 80062e0:	31800104 	addi	r6,r6,4
 80062e4:	21000104 	addi	r4,r4,4
 80062e8:	41ceb03a 	or	r7,r8,r7
 80062ec:	49c00015 	stw	r7,0(r9)
 80062f0:	1807d43a 	srai	r3,r3,16
 80062f4:	580b883a 	mov	r5,r11
 80062f8:	5813883a 	mov	r9,r11
 80062fc:	33bfea36 	bltu	r6,r14,80062a8 <__alt_data_end+0xfc0062a8>
 8006300:	2011883a 	mov	r8,r4
 8006304:	2300152e 	bgeu	r4,r12,800635c <__mdiff+0x130>
 8006308:	21400017 	ldw	r5,0(r4)
 800630c:	4a400104 	addi	r9,r9,4
 8006310:	21000104 	addi	r4,r4,4
 8006314:	29ffffcc 	andi	r7,r5,65535
 8006318:	38c7883a 	add	r3,r7,r3
 800631c:	280ad43a 	srli	r5,r5,16
 8006320:	180dd43a 	srai	r6,r3,16
 8006324:	19ffffcc 	andi	r7,r3,65535
 8006328:	3147883a 	add	r3,r6,r5
 800632c:	180a943a 	slli	r5,r3,16
 8006330:	1807d43a 	srai	r3,r3,16
 8006334:	29ceb03a 	or	r7,r5,r7
 8006338:	49ffff15 	stw	r7,-4(r9)
 800633c:	233ff236 	bltu	r4,r12,8006308 <__alt_data_end+0xfc006308>
 8006340:	0206303a 	nor	r3,zero,r8
 8006344:	1b07883a 	add	r3,r3,r12
 8006348:	1806d0ba 	srli	r3,r3,2
 800634c:	18c00044 	addi	r3,r3,1
 8006350:	18c7883a 	add	r3,r3,r3
 8006354:	18c7883a 	add	r3,r3,r3
 8006358:	58cb883a 	add	r5,r11,r3
 800635c:	28ffff04 	addi	r3,r5,-4
 8006360:	3800041e 	bne	r7,zero,8006374 <__mdiff+0x148>
 8006364:	18ffff04 	addi	r3,r3,-4
 8006368:	19000017 	ldw	r4,0(r3)
 800636c:	6b7fffc4 	addi	r13,r13,-1
 8006370:	203ffc26 	beq	r4,zero,8006364 <__alt_data_end+0xfc006364>
 8006374:	13400415 	stw	r13,16(r2)
 8006378:	dfc00417 	ldw	ra,16(sp)
 800637c:	dcc00317 	ldw	r19,12(sp)
 8006380:	dc800217 	ldw	r18,8(sp)
 8006384:	dc400117 	ldw	r17,4(sp)
 8006388:	dc000017 	ldw	r16,0(sp)
 800638c:	dec00504 	addi	sp,sp,20
 8006390:	f800283a 	ret
 8006394:	8005883a 	mov	r2,r16
 8006398:	04400044 	movi	r17,1
 800639c:	9021883a 	mov	r16,r18
 80063a0:	1025883a 	mov	r18,r2
 80063a4:	003fb006 	br	8006268 <__alt_data_end+0xfc006268>
 80063a8:	9809883a 	mov	r4,r19
 80063ac:	000b883a 	mov	r5,zero
 80063b0:	80058500 	call	8005850 <_Balloc>
 80063b4:	00c00044 	movi	r3,1
 80063b8:	10c00415 	stw	r3,16(r2)
 80063bc:	10000515 	stw	zero,20(r2)
 80063c0:	003fed06 	br	8006378 <__alt_data_end+0xfc006378>

080063c4 <__ulp>:
 80063c4:	295ffc2c 	andhi	r5,r5,32752
 80063c8:	00bf3034 	movhi	r2,64704
 80063cc:	2887883a 	add	r3,r5,r2
 80063d0:	00c0020e 	bge	zero,r3,80063dc <__ulp+0x18>
 80063d4:	0005883a 	mov	r2,zero
 80063d8:	f800283a 	ret
 80063dc:	00c7c83a 	sub	r3,zero,r3
 80063e0:	180bd53a 	srai	r5,r3,20
 80063e4:	008004c4 	movi	r2,19
 80063e8:	11400a0e 	bge	r2,r5,8006414 <__ulp+0x50>
 80063ec:	00800c84 	movi	r2,50
 80063f0:	0007883a 	mov	r3,zero
 80063f4:	11400516 	blt	r2,r5,800640c <__ulp+0x48>
 80063f8:	00800cc4 	movi	r2,51
 80063fc:	114bc83a 	sub	r5,r2,r5
 8006400:	00800044 	movi	r2,1
 8006404:	1144983a 	sll	r2,r2,r5
 8006408:	f800283a 	ret
 800640c:	00800044 	movi	r2,1
 8006410:	f800283a 	ret
 8006414:	00800234 	movhi	r2,8
 8006418:	1147d83a 	sra	r3,r2,r5
 800641c:	0005883a 	mov	r2,zero
 8006420:	f800283a 	ret

08006424 <__b2d>:
 8006424:	defffa04 	addi	sp,sp,-24
 8006428:	dc000015 	stw	r16,0(sp)
 800642c:	24000417 	ldw	r16,16(r4)
 8006430:	dc400115 	stw	r17,4(sp)
 8006434:	24400504 	addi	r17,r4,20
 8006438:	8421883a 	add	r16,r16,r16
 800643c:	8421883a 	add	r16,r16,r16
 8006440:	8c21883a 	add	r16,r17,r16
 8006444:	dc800215 	stw	r18,8(sp)
 8006448:	84bfff17 	ldw	r18,-4(r16)
 800644c:	dd000415 	stw	r20,16(sp)
 8006450:	dcc00315 	stw	r19,12(sp)
 8006454:	9009883a 	mov	r4,r18
 8006458:	2829883a 	mov	r20,r5
 800645c:	dfc00515 	stw	ra,20(sp)
 8006460:	8005b600 	call	8005b60 <__hi0bits>
 8006464:	00c00804 	movi	r3,32
 8006468:	1887c83a 	sub	r3,r3,r2
 800646c:	a0c00015 	stw	r3,0(r20)
 8006470:	00c00284 	movi	r3,10
 8006474:	84ffff04 	addi	r19,r16,-4
 8006478:	18801216 	blt	r3,r2,80064c4 <__b2d+0xa0>
 800647c:	014002c4 	movi	r5,11
 8006480:	2889c83a 	sub	r4,r5,r2
 8006484:	9106d83a 	srl	r3,r18,r4
 8006488:	18cffc34 	orhi	r3,r3,16368
 800648c:	8cc0282e 	bgeu	r17,r19,8006530 <__b2d+0x10c>
 8006490:	817ffe17 	ldw	r5,-8(r16)
 8006494:	290ad83a 	srl	r5,r5,r4
 8006498:	10800544 	addi	r2,r2,21
 800649c:	9084983a 	sll	r2,r18,r2
 80064a0:	2884b03a 	or	r2,r5,r2
 80064a4:	dfc00517 	ldw	ra,20(sp)
 80064a8:	dd000417 	ldw	r20,16(sp)
 80064ac:	dcc00317 	ldw	r19,12(sp)
 80064b0:	dc800217 	ldw	r18,8(sp)
 80064b4:	dc400117 	ldw	r17,4(sp)
 80064b8:	dc000017 	ldw	r16,0(sp)
 80064bc:	dec00604 	addi	sp,sp,24
 80064c0:	f800283a 	ret
 80064c4:	113ffd44 	addi	r4,r2,-11
 80064c8:	8cc00f2e 	bgeu	r17,r19,8006508 <__b2d+0xe4>
 80064cc:	81bffe04 	addi	r6,r16,-8
 80064d0:	817ffe17 	ldw	r5,-8(r16)
 80064d4:	20001326 	beq	r4,zero,8006524 <__b2d+0x100>
 80064d8:	00c00ac4 	movi	r3,43
 80064dc:	1885c83a 	sub	r2,r3,r2
 80064e0:	2886d83a 	srl	r3,r5,r2
 80064e4:	9124983a 	sll	r18,r18,r4
 80064e8:	90e4b03a 	or	r18,r18,r3
 80064ec:	90cffc34 	orhi	r3,r18,16368
 80064f0:	8980112e 	bgeu	r17,r6,8006538 <__b2d+0x114>
 80064f4:	81bffd17 	ldw	r6,-12(r16)
 80064f8:	308cd83a 	srl	r6,r6,r2
 80064fc:	2904983a 	sll	r2,r5,r4
 8006500:	1184b03a 	or	r2,r2,r6
 8006504:	003fe706 	br	80064a4 <__alt_data_end+0xfc0064a4>
 8006508:	20000526 	beq	r4,zero,8006520 <__b2d+0xfc>
 800650c:	9124983a 	sll	r18,r18,r4
 8006510:	000d883a 	mov	r6,zero
 8006514:	000b883a 	mov	r5,zero
 8006518:	90cffc34 	orhi	r3,r18,16368
 800651c:	003ff706 	br	80064fc <__alt_data_end+0xfc0064fc>
 8006520:	000b883a 	mov	r5,zero
 8006524:	90cffc34 	orhi	r3,r18,16368
 8006528:	2805883a 	mov	r2,r5
 800652c:	003fdd06 	br	80064a4 <__alt_data_end+0xfc0064a4>
 8006530:	000b883a 	mov	r5,zero
 8006534:	003fd806 	br	8006498 <__alt_data_end+0xfc006498>
 8006538:	000d883a 	mov	r6,zero
 800653c:	003fef06 	br	80064fc <__alt_data_end+0xfc0064fc>

08006540 <__d2b>:
 8006540:	defff704 	addi	sp,sp,-36
 8006544:	dc000215 	stw	r16,8(sp)
 8006548:	3021883a 	mov	r16,r6
 800654c:	dc400315 	stw	r17,12(sp)
 8006550:	8022907a 	slli	r17,r16,1
 8006554:	dd400715 	stw	r21,28(sp)
 8006558:	282b883a 	mov	r21,r5
 800655c:	01400044 	movi	r5,1
 8006560:	dd000615 	stw	r20,24(sp)
 8006564:	dcc00515 	stw	r19,20(sp)
 8006568:	dc800415 	stw	r18,16(sp)
 800656c:	dfc00815 	stw	ra,32(sp)
 8006570:	3829883a 	mov	r20,r7
 8006574:	dc800917 	ldw	r18,36(sp)
 8006578:	8822d57a 	srli	r17,r17,21
 800657c:	80058500 	call	8005850 <_Balloc>
 8006580:	1027883a 	mov	r19,r2
 8006584:	00800434 	movhi	r2,16
 8006588:	10bfffc4 	addi	r2,r2,-1
 800658c:	808c703a 	and	r6,r16,r2
 8006590:	88000126 	beq	r17,zero,8006598 <__d2b+0x58>
 8006594:	31800434 	orhi	r6,r6,16
 8006598:	d9800015 	stw	r6,0(sp)
 800659c:	a8001f26 	beq	r21,zero,800661c <__d2b+0xdc>
 80065a0:	d9000104 	addi	r4,sp,4
 80065a4:	dd400115 	stw	r21,4(sp)
 80065a8:	8005bc80 	call	8005bc8 <__lo0bits>
 80065ac:	d8c00017 	ldw	r3,0(sp)
 80065b0:	1000291e 	bne	r2,zero,8006658 <__d2b+0x118>
 80065b4:	d9000117 	ldw	r4,4(sp)
 80065b8:	99000515 	stw	r4,20(r19)
 80065bc:	1820c03a 	cmpne	r16,r3,zero
 80065c0:	84000044 	addi	r16,r16,1
 80065c4:	98c00615 	stw	r3,24(r19)
 80065c8:	9c000415 	stw	r16,16(r19)
 80065cc:	88001b1e 	bne	r17,zero,800663c <__d2b+0xfc>
 80065d0:	800690ba 	slli	r3,r16,2
 80065d4:	10bef384 	addi	r2,r2,-1074
 80065d8:	a0800015 	stw	r2,0(r20)
 80065dc:	98c5883a 	add	r2,r19,r3
 80065e0:	11000417 	ldw	r4,16(r2)
 80065e4:	8020917a 	slli	r16,r16,5
 80065e8:	8005b600 	call	8005b60 <__hi0bits>
 80065ec:	8085c83a 	sub	r2,r16,r2
 80065f0:	90800015 	stw	r2,0(r18)
 80065f4:	9805883a 	mov	r2,r19
 80065f8:	dfc00817 	ldw	ra,32(sp)
 80065fc:	dd400717 	ldw	r21,28(sp)
 8006600:	dd000617 	ldw	r20,24(sp)
 8006604:	dcc00517 	ldw	r19,20(sp)
 8006608:	dc800417 	ldw	r18,16(sp)
 800660c:	dc400317 	ldw	r17,12(sp)
 8006610:	dc000217 	ldw	r16,8(sp)
 8006614:	dec00904 	addi	sp,sp,36
 8006618:	f800283a 	ret
 800661c:	d809883a 	mov	r4,sp
 8006620:	8005bc80 	call	8005bc8 <__lo0bits>
 8006624:	d8c00017 	ldw	r3,0(sp)
 8006628:	04000044 	movi	r16,1
 800662c:	9c000415 	stw	r16,16(r19)
 8006630:	98c00515 	stw	r3,20(r19)
 8006634:	10800804 	addi	r2,r2,32
 8006638:	883fe526 	beq	r17,zero,80065d0 <__alt_data_end+0xfc0065d0>
 800663c:	8c7ef344 	addi	r17,r17,-1075
 8006640:	88a3883a 	add	r17,r17,r2
 8006644:	00c00d44 	movi	r3,53
 8006648:	a4400015 	stw	r17,0(r20)
 800664c:	1885c83a 	sub	r2,r3,r2
 8006650:	90800015 	stw	r2,0(r18)
 8006654:	003fe706 	br	80065f4 <__alt_data_end+0xfc0065f4>
 8006658:	01000804 	movi	r4,32
 800665c:	2089c83a 	sub	r4,r4,r2
 8006660:	1908983a 	sll	r4,r3,r4
 8006664:	d9400117 	ldw	r5,4(sp)
 8006668:	1886d83a 	srl	r3,r3,r2
 800666c:	2148b03a 	or	r4,r4,r5
 8006670:	99000515 	stw	r4,20(r19)
 8006674:	d8c00015 	stw	r3,0(sp)
 8006678:	003fd006 	br	80065bc <__alt_data_end+0xfc0065bc>

0800667c <__ratio>:
 800667c:	defff904 	addi	sp,sp,-28
 8006680:	dc400315 	stw	r17,12(sp)
 8006684:	2823883a 	mov	r17,r5
 8006688:	d9400104 	addi	r5,sp,4
 800668c:	dfc00615 	stw	ra,24(sp)
 8006690:	dcc00515 	stw	r19,20(sp)
 8006694:	dc800415 	stw	r18,16(sp)
 8006698:	2027883a 	mov	r19,r4
 800669c:	dc000215 	stw	r16,8(sp)
 80066a0:	80064240 	call	8006424 <__b2d>
 80066a4:	8809883a 	mov	r4,r17
 80066a8:	d80b883a 	mov	r5,sp
 80066ac:	1025883a 	mov	r18,r2
 80066b0:	1821883a 	mov	r16,r3
 80066b4:	80064240 	call	8006424 <__b2d>
 80066b8:	8a400417 	ldw	r9,16(r17)
 80066bc:	9a000417 	ldw	r8,16(r19)
 80066c0:	100d883a 	mov	r6,r2
 80066c4:	d8800017 	ldw	r2,0(sp)
 80066c8:	4251c83a 	sub	r8,r8,r9
 80066cc:	4012917a 	slli	r9,r8,5
 80066d0:	da000117 	ldw	r8,4(sp)
 80066d4:	4091c83a 	sub	r8,r8,r2
 80066d8:	4251883a 	add	r8,r8,r9
 80066dc:	02000d0e 	bge	zero,r8,8006714 <__ratio+0x98>
 80066e0:	4010953a 	slli	r8,r8,20
 80066e4:	4421883a 	add	r16,r8,r16
 80066e8:	9009883a 	mov	r4,r18
 80066ec:	800b883a 	mov	r5,r16
 80066f0:	180f883a 	mov	r7,r3
 80066f4:	800ac6c0 	call	800ac6c <__divdf3>
 80066f8:	dfc00617 	ldw	ra,24(sp)
 80066fc:	dcc00517 	ldw	r19,20(sp)
 8006700:	dc800417 	ldw	r18,16(sp)
 8006704:	dc400317 	ldw	r17,12(sp)
 8006708:	dc000217 	ldw	r16,8(sp)
 800670c:	dec00704 	addi	sp,sp,28
 8006710:	f800283a 	ret
 8006714:	4010953a 	slli	r8,r8,20
 8006718:	1a07c83a 	sub	r3,r3,r8
 800671c:	003ff206 	br	80066e8 <__alt_data_end+0xfc0066e8>

08006720 <_mprec_log10>:
 8006720:	defffe04 	addi	sp,sp,-8
 8006724:	dc000015 	stw	r16,0(sp)
 8006728:	dfc00115 	stw	ra,4(sp)
 800672c:	008005c4 	movi	r2,23
 8006730:	2021883a 	mov	r16,r4
 8006734:	11000d0e 	bge	r2,r4,800676c <_mprec_log10+0x4c>
 8006738:	0005883a 	mov	r2,zero
 800673c:	00cffc34 	movhi	r3,16368
 8006740:	843fffc4 	addi	r16,r16,-1
 8006744:	1009883a 	mov	r4,r2
 8006748:	180b883a 	mov	r5,r3
 800674c:	000d883a 	mov	r6,zero
 8006750:	01d00934 	movhi	r7,16420
 8006754:	800b8300 	call	800b830 <__muldf3>
 8006758:	803ff91e 	bne	r16,zero,8006740 <__alt_data_end+0xfc006740>
 800675c:	dfc00117 	ldw	ra,4(sp)
 8006760:	dc000017 	ldw	r16,0(sp)
 8006764:	dec00204 	addi	sp,sp,8
 8006768:	f800283a 	ret
 800676c:	202090fa 	slli	r16,r4,3
 8006770:	00820074 	movhi	r2,2049
 8006774:	10bd1004 	addi	r2,r2,-3008
 8006778:	1421883a 	add	r16,r2,r16
 800677c:	80800017 	ldw	r2,0(r16)
 8006780:	80c00117 	ldw	r3,4(r16)
 8006784:	dfc00117 	ldw	ra,4(sp)
 8006788:	dc000017 	ldw	r16,0(sp)
 800678c:	dec00204 	addi	sp,sp,8
 8006790:	f800283a 	ret

08006794 <__copybits>:
 8006794:	297fffc4 	addi	r5,r5,-1
 8006798:	280fd17a 	srai	r7,r5,5
 800679c:	30c00417 	ldw	r3,16(r6)
 80067a0:	30800504 	addi	r2,r6,20
 80067a4:	39c00044 	addi	r7,r7,1
 80067a8:	18c7883a 	add	r3,r3,r3
 80067ac:	39cf883a 	add	r7,r7,r7
 80067b0:	18c7883a 	add	r3,r3,r3
 80067b4:	39cf883a 	add	r7,r7,r7
 80067b8:	10c7883a 	add	r3,r2,r3
 80067bc:	21cf883a 	add	r7,r4,r7
 80067c0:	10c00d2e 	bgeu	r2,r3,80067f8 <__copybits+0x64>
 80067c4:	200b883a 	mov	r5,r4
 80067c8:	12000017 	ldw	r8,0(r2)
 80067cc:	29400104 	addi	r5,r5,4
 80067d0:	10800104 	addi	r2,r2,4
 80067d4:	2a3fff15 	stw	r8,-4(r5)
 80067d8:	10fffb36 	bltu	r2,r3,80067c8 <__alt_data_end+0xfc0067c8>
 80067dc:	1985c83a 	sub	r2,r3,r6
 80067e0:	10bffac4 	addi	r2,r2,-21
 80067e4:	1004d0ba 	srli	r2,r2,2
 80067e8:	10800044 	addi	r2,r2,1
 80067ec:	1085883a 	add	r2,r2,r2
 80067f0:	1085883a 	add	r2,r2,r2
 80067f4:	2089883a 	add	r4,r4,r2
 80067f8:	21c0032e 	bgeu	r4,r7,8006808 <__copybits+0x74>
 80067fc:	20000015 	stw	zero,0(r4)
 8006800:	21000104 	addi	r4,r4,4
 8006804:	21fffd36 	bltu	r4,r7,80067fc <__alt_data_end+0xfc0067fc>
 8006808:	f800283a 	ret

0800680c <__any_on>:
 800680c:	20c00417 	ldw	r3,16(r4)
 8006810:	2805d17a 	srai	r2,r5,5
 8006814:	21000504 	addi	r4,r4,20
 8006818:	18800d0e 	bge	r3,r2,8006850 <__any_on+0x44>
 800681c:	18c7883a 	add	r3,r3,r3
 8006820:	18c7883a 	add	r3,r3,r3
 8006824:	20c7883a 	add	r3,r4,r3
 8006828:	20c0192e 	bgeu	r4,r3,8006890 <__any_on+0x84>
 800682c:	18bfff17 	ldw	r2,-4(r3)
 8006830:	18ffff04 	addi	r3,r3,-4
 8006834:	1000041e 	bne	r2,zero,8006848 <__any_on+0x3c>
 8006838:	20c0142e 	bgeu	r4,r3,800688c <__any_on+0x80>
 800683c:	18ffff04 	addi	r3,r3,-4
 8006840:	19400017 	ldw	r5,0(r3)
 8006844:	283ffc26 	beq	r5,zero,8006838 <__alt_data_end+0xfc006838>
 8006848:	00800044 	movi	r2,1
 800684c:	f800283a 	ret
 8006850:	10c00a0e 	bge	r2,r3,800687c <__any_on+0x70>
 8006854:	1085883a 	add	r2,r2,r2
 8006858:	1085883a 	add	r2,r2,r2
 800685c:	294007cc 	andi	r5,r5,31
 8006860:	2087883a 	add	r3,r4,r2
 8006864:	283ff026 	beq	r5,zero,8006828 <__alt_data_end+0xfc006828>
 8006868:	19800017 	ldw	r6,0(r3)
 800686c:	3144d83a 	srl	r2,r6,r5
 8006870:	114a983a 	sll	r5,r2,r5
 8006874:	29bff41e 	bne	r5,r6,8006848 <__alt_data_end+0xfc006848>
 8006878:	003feb06 	br	8006828 <__alt_data_end+0xfc006828>
 800687c:	1085883a 	add	r2,r2,r2
 8006880:	1085883a 	add	r2,r2,r2
 8006884:	2087883a 	add	r3,r4,r2
 8006888:	003fe706 	br	8006828 <__alt_data_end+0xfc006828>
 800688c:	f800283a 	ret
 8006890:	0005883a 	mov	r2,zero
 8006894:	f800283a 	ret

08006898 <__fpclassifyd>:
 8006898:	00a00034 	movhi	r2,32768
 800689c:	10bfffc4 	addi	r2,r2,-1
 80068a0:	2884703a 	and	r2,r5,r2
 80068a4:	10000726 	beq	r2,zero,80068c4 <__fpclassifyd+0x2c>
 80068a8:	00fffc34 	movhi	r3,65520
 80068ac:	019ff834 	movhi	r6,32736
 80068b0:	28c7883a 	add	r3,r5,r3
 80068b4:	31bfffc4 	addi	r6,r6,-1
 80068b8:	30c00536 	bltu	r6,r3,80068d0 <__fpclassifyd+0x38>
 80068bc:	00800104 	movi	r2,4
 80068c0:	f800283a 	ret
 80068c4:	2000021e 	bne	r4,zero,80068d0 <__fpclassifyd+0x38>
 80068c8:	00800084 	movi	r2,2
 80068cc:	f800283a 	ret
 80068d0:	00dffc34 	movhi	r3,32752
 80068d4:	019ff834 	movhi	r6,32736
 80068d8:	28cb883a 	add	r5,r5,r3
 80068dc:	31bfffc4 	addi	r6,r6,-1
 80068e0:	317ff62e 	bgeu	r6,r5,80068bc <__alt_data_end+0xfc0068bc>
 80068e4:	01400434 	movhi	r5,16
 80068e8:	297fffc4 	addi	r5,r5,-1
 80068ec:	28800236 	bltu	r5,r2,80068f8 <__fpclassifyd+0x60>
 80068f0:	008000c4 	movi	r2,3
 80068f4:	f800283a 	ret
 80068f8:	10c00226 	beq	r2,r3,8006904 <__fpclassifyd+0x6c>
 80068fc:	0005883a 	mov	r2,zero
 8006900:	f800283a 	ret
 8006904:	2005003a 	cmpeq	r2,r4,zero
 8006908:	f800283a 	ret

0800690c <_sbrk_r>:
 800690c:	defffd04 	addi	sp,sp,-12
 8006910:	dc000015 	stw	r16,0(sp)
 8006914:	04020074 	movhi	r16,2049
 8006918:	dc400115 	stw	r17,4(sp)
 800691c:	840b1304 	addi	r16,r16,11340
 8006920:	2023883a 	mov	r17,r4
 8006924:	2809883a 	mov	r4,r5
 8006928:	dfc00215 	stw	ra,8(sp)
 800692c:	80000015 	stw	zero,0(r16)
 8006930:	800d3c00 	call	800d3c0 <sbrk>
 8006934:	00ffffc4 	movi	r3,-1
 8006938:	10c00526 	beq	r2,r3,8006950 <_sbrk_r+0x44>
 800693c:	dfc00217 	ldw	ra,8(sp)
 8006940:	dc400117 	ldw	r17,4(sp)
 8006944:	dc000017 	ldw	r16,0(sp)
 8006948:	dec00304 	addi	sp,sp,12
 800694c:	f800283a 	ret
 8006950:	80c00017 	ldw	r3,0(r16)
 8006954:	183ff926 	beq	r3,zero,800693c <__alt_data_end+0xfc00693c>
 8006958:	88c00015 	stw	r3,0(r17)
 800695c:	003ff706 	br	800693c <__alt_data_end+0xfc00693c>

08006960 <__sread>:
 8006960:	defffe04 	addi	sp,sp,-8
 8006964:	dc000015 	stw	r16,0(sp)
 8006968:	2821883a 	mov	r16,r5
 800696c:	2940038f 	ldh	r5,14(r5)
 8006970:	dfc00115 	stw	ra,4(sp)
 8006974:	8008cb40 	call	8008cb4 <_read_r>
 8006978:	10000716 	blt	r2,zero,8006998 <__sread+0x38>
 800697c:	80c01417 	ldw	r3,80(r16)
 8006980:	1887883a 	add	r3,r3,r2
 8006984:	80c01415 	stw	r3,80(r16)
 8006988:	dfc00117 	ldw	ra,4(sp)
 800698c:	dc000017 	ldw	r16,0(sp)
 8006990:	dec00204 	addi	sp,sp,8
 8006994:	f800283a 	ret
 8006998:	80c0030b 	ldhu	r3,12(r16)
 800699c:	18fbffcc 	andi	r3,r3,61439
 80069a0:	80c0030d 	sth	r3,12(r16)
 80069a4:	dfc00117 	ldw	ra,4(sp)
 80069a8:	dc000017 	ldw	r16,0(sp)
 80069ac:	dec00204 	addi	sp,sp,8
 80069b0:	f800283a 	ret

080069b4 <__seofread>:
 80069b4:	0005883a 	mov	r2,zero
 80069b8:	f800283a 	ret

080069bc <__swrite>:
 80069bc:	2880030b 	ldhu	r2,12(r5)
 80069c0:	defffb04 	addi	sp,sp,-20
 80069c4:	dcc00315 	stw	r19,12(sp)
 80069c8:	dc800215 	stw	r18,8(sp)
 80069cc:	dc400115 	stw	r17,4(sp)
 80069d0:	dc000015 	stw	r16,0(sp)
 80069d4:	dfc00415 	stw	ra,16(sp)
 80069d8:	10c0400c 	andi	r3,r2,256
 80069dc:	2821883a 	mov	r16,r5
 80069e0:	2027883a 	mov	r19,r4
 80069e4:	3025883a 	mov	r18,r6
 80069e8:	3823883a 	mov	r17,r7
 80069ec:	18000526 	beq	r3,zero,8006a04 <__swrite+0x48>
 80069f0:	2940038f 	ldh	r5,14(r5)
 80069f4:	000d883a 	mov	r6,zero
 80069f8:	01c00084 	movi	r7,2
 80069fc:	8008afc0 	call	8008afc <_lseek_r>
 8006a00:	8080030b 	ldhu	r2,12(r16)
 8006a04:	8140038f 	ldh	r5,14(r16)
 8006a08:	10bbffcc 	andi	r2,r2,61439
 8006a0c:	9809883a 	mov	r4,r19
 8006a10:	900d883a 	mov	r6,r18
 8006a14:	880f883a 	mov	r7,r17
 8006a18:	8080030d 	sth	r2,12(r16)
 8006a1c:	dfc00417 	ldw	ra,16(sp)
 8006a20:	dcc00317 	ldw	r19,12(sp)
 8006a24:	dc800217 	ldw	r18,8(sp)
 8006a28:	dc400117 	ldw	r17,4(sp)
 8006a2c:	dc000017 	ldw	r16,0(sp)
 8006a30:	dec00504 	addi	sp,sp,20
 8006a34:	80081341 	jmpi	8008134 <_write_r>

08006a38 <__sseek>:
 8006a38:	defffe04 	addi	sp,sp,-8
 8006a3c:	dc000015 	stw	r16,0(sp)
 8006a40:	2821883a 	mov	r16,r5
 8006a44:	2940038f 	ldh	r5,14(r5)
 8006a48:	dfc00115 	stw	ra,4(sp)
 8006a4c:	8008afc0 	call	8008afc <_lseek_r>
 8006a50:	00ffffc4 	movi	r3,-1
 8006a54:	10c00826 	beq	r2,r3,8006a78 <__sseek+0x40>
 8006a58:	80c0030b 	ldhu	r3,12(r16)
 8006a5c:	80801415 	stw	r2,80(r16)
 8006a60:	18c40014 	ori	r3,r3,4096
 8006a64:	80c0030d 	sth	r3,12(r16)
 8006a68:	dfc00117 	ldw	ra,4(sp)
 8006a6c:	dc000017 	ldw	r16,0(sp)
 8006a70:	dec00204 	addi	sp,sp,8
 8006a74:	f800283a 	ret
 8006a78:	80c0030b 	ldhu	r3,12(r16)
 8006a7c:	18fbffcc 	andi	r3,r3,61439
 8006a80:	80c0030d 	sth	r3,12(r16)
 8006a84:	dfc00117 	ldw	ra,4(sp)
 8006a88:	dc000017 	ldw	r16,0(sp)
 8006a8c:	dec00204 	addi	sp,sp,8
 8006a90:	f800283a 	ret

08006a94 <__sclose>:
 8006a94:	2940038f 	ldh	r5,14(r5)
 8006a98:	80081901 	jmpi	8008190 <_close_r>

08006a9c <strcmp>:
 8006a9c:	2144b03a 	or	r2,r4,r5
 8006aa0:	108000cc 	andi	r2,r2,3
 8006aa4:	1000171e 	bne	r2,zero,8006b04 <strcmp+0x68>
 8006aa8:	20800017 	ldw	r2,0(r4)
 8006aac:	28c00017 	ldw	r3,0(r5)
 8006ab0:	10c0141e 	bne	r2,r3,8006b04 <strcmp+0x68>
 8006ab4:	027fbff4 	movhi	r9,65279
 8006ab8:	4a7fbfc4 	addi	r9,r9,-257
 8006abc:	0086303a 	nor	r3,zero,r2
 8006ac0:	02202074 	movhi	r8,32897
 8006ac4:	1245883a 	add	r2,r2,r9
 8006ac8:	42202004 	addi	r8,r8,-32640
 8006acc:	10c4703a 	and	r2,r2,r3
 8006ad0:	1204703a 	and	r2,r2,r8
 8006ad4:	10000226 	beq	r2,zero,8006ae0 <strcmp+0x44>
 8006ad8:	00001706 	br	8006b38 <strcmp+0x9c>
 8006adc:	1000161e 	bne	r2,zero,8006b38 <strcmp+0x9c>
 8006ae0:	21000104 	addi	r4,r4,4
 8006ae4:	20c00017 	ldw	r3,0(r4)
 8006ae8:	29400104 	addi	r5,r5,4
 8006aec:	29800017 	ldw	r6,0(r5)
 8006af0:	1a4f883a 	add	r7,r3,r9
 8006af4:	00c4303a 	nor	r2,zero,r3
 8006af8:	3884703a 	and	r2,r7,r2
 8006afc:	1204703a 	and	r2,r2,r8
 8006b00:	19bff626 	beq	r3,r6,8006adc <__alt_data_end+0xfc006adc>
 8006b04:	20800007 	ldb	r2,0(r4)
 8006b08:	1000051e 	bne	r2,zero,8006b20 <strcmp+0x84>
 8006b0c:	00000606 	br	8006b28 <strcmp+0x8c>
 8006b10:	21000044 	addi	r4,r4,1
 8006b14:	20800007 	ldb	r2,0(r4)
 8006b18:	29400044 	addi	r5,r5,1
 8006b1c:	10000226 	beq	r2,zero,8006b28 <strcmp+0x8c>
 8006b20:	28c00007 	ldb	r3,0(r5)
 8006b24:	10fffa26 	beq	r2,r3,8006b10 <__alt_data_end+0xfc006b10>
 8006b28:	20800003 	ldbu	r2,0(r4)
 8006b2c:	28c00003 	ldbu	r3,0(r5)
 8006b30:	10c5c83a 	sub	r2,r2,r3
 8006b34:	f800283a 	ret
 8006b38:	0005883a 	mov	r2,zero
 8006b3c:	f800283a 	ret

08006b40 <strlen>:
 8006b40:	208000cc 	andi	r2,r4,3
 8006b44:	10002026 	beq	r2,zero,8006bc8 <strlen+0x88>
 8006b48:	20800007 	ldb	r2,0(r4)
 8006b4c:	10002026 	beq	r2,zero,8006bd0 <strlen+0x90>
 8006b50:	2005883a 	mov	r2,r4
 8006b54:	00000206 	br	8006b60 <strlen+0x20>
 8006b58:	10c00007 	ldb	r3,0(r2)
 8006b5c:	18001826 	beq	r3,zero,8006bc0 <strlen+0x80>
 8006b60:	10800044 	addi	r2,r2,1
 8006b64:	10c000cc 	andi	r3,r2,3
 8006b68:	183ffb1e 	bne	r3,zero,8006b58 <__alt_data_end+0xfc006b58>
 8006b6c:	10c00017 	ldw	r3,0(r2)
 8006b70:	01ffbff4 	movhi	r7,65279
 8006b74:	39ffbfc4 	addi	r7,r7,-257
 8006b78:	00ca303a 	nor	r5,zero,r3
 8006b7c:	01a02074 	movhi	r6,32897
 8006b80:	19c7883a 	add	r3,r3,r7
 8006b84:	31a02004 	addi	r6,r6,-32640
 8006b88:	1946703a 	and	r3,r3,r5
 8006b8c:	1986703a 	and	r3,r3,r6
 8006b90:	1800091e 	bne	r3,zero,8006bb8 <strlen+0x78>
 8006b94:	10800104 	addi	r2,r2,4
 8006b98:	10c00017 	ldw	r3,0(r2)
 8006b9c:	19cb883a 	add	r5,r3,r7
 8006ba0:	00c6303a 	nor	r3,zero,r3
 8006ba4:	28c6703a 	and	r3,r5,r3
 8006ba8:	1986703a 	and	r3,r3,r6
 8006bac:	183ff926 	beq	r3,zero,8006b94 <__alt_data_end+0xfc006b94>
 8006bb0:	00000106 	br	8006bb8 <strlen+0x78>
 8006bb4:	10800044 	addi	r2,r2,1
 8006bb8:	10c00007 	ldb	r3,0(r2)
 8006bbc:	183ffd1e 	bne	r3,zero,8006bb4 <__alt_data_end+0xfc006bb4>
 8006bc0:	1105c83a 	sub	r2,r2,r4
 8006bc4:	f800283a 	ret
 8006bc8:	2005883a 	mov	r2,r4
 8006bcc:	003fe706 	br	8006b6c <__alt_data_end+0xfc006b6c>
 8006bd0:	0005883a 	mov	r2,zero
 8006bd4:	f800283a 	ret

08006bd8 <__sprint_r.part.0>:
 8006bd8:	28801917 	ldw	r2,100(r5)
 8006bdc:	defff604 	addi	sp,sp,-40
 8006be0:	dd400515 	stw	r21,20(sp)
 8006be4:	dcc00315 	stw	r19,12(sp)
 8006be8:	dfc00915 	stw	ra,36(sp)
 8006bec:	df000815 	stw	fp,32(sp)
 8006bf0:	ddc00715 	stw	r23,28(sp)
 8006bf4:	dd800615 	stw	r22,24(sp)
 8006bf8:	dd000415 	stw	r20,16(sp)
 8006bfc:	dc800215 	stw	r18,8(sp)
 8006c00:	dc400115 	stw	r17,4(sp)
 8006c04:	dc000015 	stw	r16,0(sp)
 8006c08:	1088000c 	andi	r2,r2,8192
 8006c0c:	2827883a 	mov	r19,r5
 8006c10:	302b883a 	mov	r21,r6
 8006c14:	10002d26 	beq	r2,zero,8006ccc <__sprint_r.part.0+0xf4>
 8006c18:	30800217 	ldw	r2,8(r6)
 8006c1c:	35800017 	ldw	r22,0(r6)
 8006c20:	10002826 	beq	r2,zero,8006cc4 <__sprint_r.part.0+0xec>
 8006c24:	2029883a 	mov	r20,r4
 8006c28:	b5c00104 	addi	r23,r22,4
 8006c2c:	04bfffc4 	movi	r18,-1
 8006c30:	bc400017 	ldw	r17,0(r23)
 8006c34:	b4000017 	ldw	r16,0(r22)
 8006c38:	0039883a 	mov	fp,zero
 8006c3c:	8822d0ba 	srli	r17,r17,2
 8006c40:	04400316 	blt	zero,r17,8006c50 <__sprint_r.part.0+0x78>
 8006c44:	00001706 	br	8006ca4 <__sprint_r.part.0+0xcc>
 8006c48:	84000104 	addi	r16,r16,4
 8006c4c:	8f001526 	beq	r17,fp,8006ca4 <__sprint_r.part.0+0xcc>
 8006c50:	81400017 	ldw	r5,0(r16)
 8006c54:	a009883a 	mov	r4,r20
 8006c58:	980d883a 	mov	r6,r19
 8006c5c:	80083d00 	call	80083d0 <_fputwc_r>
 8006c60:	e7000044 	addi	fp,fp,1
 8006c64:	14bff81e 	bne	r2,r18,8006c48 <__alt_data_end+0xfc006c48>
 8006c68:	9005883a 	mov	r2,r18
 8006c6c:	a8000215 	stw	zero,8(r21)
 8006c70:	a8000115 	stw	zero,4(r21)
 8006c74:	dfc00917 	ldw	ra,36(sp)
 8006c78:	df000817 	ldw	fp,32(sp)
 8006c7c:	ddc00717 	ldw	r23,28(sp)
 8006c80:	dd800617 	ldw	r22,24(sp)
 8006c84:	dd400517 	ldw	r21,20(sp)
 8006c88:	dd000417 	ldw	r20,16(sp)
 8006c8c:	dcc00317 	ldw	r19,12(sp)
 8006c90:	dc800217 	ldw	r18,8(sp)
 8006c94:	dc400117 	ldw	r17,4(sp)
 8006c98:	dc000017 	ldw	r16,0(sp)
 8006c9c:	dec00a04 	addi	sp,sp,40
 8006ca0:	f800283a 	ret
 8006ca4:	a8c00217 	ldw	r3,8(r21)
 8006ca8:	8c63883a 	add	r17,r17,r17
 8006cac:	8c63883a 	add	r17,r17,r17
 8006cb0:	1c45c83a 	sub	r2,r3,r17
 8006cb4:	a8800215 	stw	r2,8(r21)
 8006cb8:	b5800204 	addi	r22,r22,8
 8006cbc:	bdc00204 	addi	r23,r23,8
 8006cc0:	103fdb1e 	bne	r2,zero,8006c30 <__alt_data_end+0xfc006c30>
 8006cc4:	0005883a 	mov	r2,zero
 8006cc8:	003fe806 	br	8006c6c <__alt_data_end+0xfc006c6c>
 8006ccc:	80086040 	call	8008604 <__sfvwrite_r>
 8006cd0:	003fe606 	br	8006c6c <__alt_data_end+0xfc006c6c>

08006cd4 <__sprint_r>:
 8006cd4:	30c00217 	ldw	r3,8(r6)
 8006cd8:	18000126 	beq	r3,zero,8006ce0 <__sprint_r+0xc>
 8006cdc:	8006bd81 	jmpi	8006bd8 <__sprint_r.part.0>
 8006ce0:	30000115 	stw	zero,4(r6)
 8006ce4:	0005883a 	mov	r2,zero
 8006ce8:	f800283a 	ret

08006cec <___vfiprintf_internal_r>:
 8006cec:	defeca04 	addi	sp,sp,-1240
 8006cf0:	dcc12f15 	stw	r19,1212(sp)
 8006cf4:	dfc13515 	stw	ra,1236(sp)
 8006cf8:	df013415 	stw	fp,1232(sp)
 8006cfc:	ddc13315 	stw	r23,1228(sp)
 8006d00:	dd813215 	stw	r22,1224(sp)
 8006d04:	dd413115 	stw	r21,1220(sp)
 8006d08:	dd013015 	stw	r20,1216(sp)
 8006d0c:	dc812e15 	stw	r18,1208(sp)
 8006d10:	dc412d15 	stw	r17,1204(sp)
 8006d14:	dc012c15 	stw	r16,1200(sp)
 8006d18:	d9012115 	stw	r4,1156(sp)
 8006d1c:	d9412015 	stw	r5,1152(sp)
 8006d20:	d9c12315 	stw	r7,1164(sp)
 8006d24:	3027883a 	mov	r19,r6
 8006d28:	20000226 	beq	r4,zero,8006d34 <___vfiprintf_internal_r+0x48>
 8006d2c:	20800e17 	ldw	r2,56(r4)
 8006d30:	1000f726 	beq	r2,zero,8007110 <___vfiprintf_internal_r+0x424>
 8006d34:	d8812017 	ldw	r2,1152(sp)
 8006d38:	10c0030b 	ldhu	r3,12(r2)
 8006d3c:	1908000c 	andi	r4,r3,8192
 8006d40:	1805883a 	mov	r2,r3
 8006d44:	2000081e 	bne	r4,zero,8006d68 <___vfiprintf_internal_r+0x7c>
 8006d48:	d9412017 	ldw	r5,1152(sp)
 8006d4c:	18880014 	ori	r2,r3,8192
 8006d50:	00f7ffc4 	movi	r3,-8193
 8006d54:	29001917 	ldw	r4,100(r5)
 8006d58:	2880030d 	sth	r2,12(r5)
 8006d5c:	20c8703a 	and	r4,r4,r3
 8006d60:	29001915 	stw	r4,100(r5)
 8006d64:	1007883a 	mov	r3,r2
 8006d68:	1100020c 	andi	r4,r2,8
 8006d6c:	2000a726 	beq	r4,zero,800700c <___vfiprintf_internal_r+0x320>
 8006d70:	d9412017 	ldw	r5,1152(sp)
 8006d74:	29000417 	ldw	r4,16(r5)
 8006d78:	2000a426 	beq	r4,zero,800700c <___vfiprintf_internal_r+0x320>
 8006d7c:	1080068c 	andi	r2,r2,26
 8006d80:	01000284 	movi	r4,10
 8006d84:	1100ab26 	beq	r2,r4,8007034 <___vfiprintf_internal_r+0x348>
 8006d88:	d9010a04 	addi	r4,sp,1064
 8006d8c:	d94109c4 	addi	r5,sp,1063
 8006d90:	07020074 	movhi	fp,2049
 8006d94:	04420074 	movhi	r17,2049
 8006d98:	2145c83a 	sub	r2,r4,r5
 8006d9c:	e73d4604 	addi	fp,fp,-2792
 8006da0:	8c7d4204 	addi	r17,r17,-2808
 8006da4:	d9011e15 	stw	r4,1144(sp)
 8006da8:	d9411f15 	stw	r5,1148(sp)
 8006dac:	dec11a15 	stw	sp,1128(sp)
 8006db0:	d8011c15 	stw	zero,1136(sp)
 8006db4:	d8011b15 	stw	zero,1132(sp)
 8006db8:	d8012715 	stw	zero,1180(sp)
 8006dbc:	d8012515 	stw	zero,1172(sp)
 8006dc0:	d811883a 	mov	r8,sp
 8006dc4:	d8812815 	stw	r2,1184(sp)
 8006dc8:	982f883a 	mov	r23,r19
 8006dcc:	b8800007 	ldb	r2,0(r23)
 8006dd0:	1003b026 	beq	r2,zero,8007c94 <___vfiprintf_internal_r+0xfa8>
 8006dd4:	01000944 	movi	r4,37
 8006dd8:	1103ae26 	beq	r2,r4,8007c94 <___vfiprintf_internal_r+0xfa8>
 8006ddc:	b805883a 	mov	r2,r23
 8006de0:	00000106 	br	8006de8 <___vfiprintf_internal_r+0xfc>
 8006de4:	19000326 	beq	r3,r4,8006df4 <___vfiprintf_internal_r+0x108>
 8006de8:	10800044 	addi	r2,r2,1
 8006dec:	10c00007 	ldb	r3,0(r2)
 8006df0:	183ffc1e 	bne	r3,zero,8006de4 <__alt_data_end+0xfc006de4>
 8006df4:	15e1c83a 	sub	r16,r2,r23
 8006df8:	1029883a 	mov	r20,r2
 8006dfc:	80001026 	beq	r16,zero,8006e40 <___vfiprintf_internal_r+0x154>
 8006e00:	d8c11c17 	ldw	r3,1136(sp)
 8006e04:	d8811b17 	ldw	r2,1132(sp)
 8006e08:	45c00015 	stw	r23,0(r8)
 8006e0c:	80c7883a 	add	r3,r16,r3
 8006e10:	10800044 	addi	r2,r2,1
 8006e14:	44000115 	stw	r16,4(r8)
 8006e18:	d8c11c15 	stw	r3,1136(sp)
 8006e1c:	d8811b15 	stw	r2,1132(sp)
 8006e20:	010001c4 	movi	r4,7
 8006e24:	2080740e 	bge	r4,r2,8006ff8 <___vfiprintf_internal_r+0x30c>
 8006e28:	1803a71e 	bne	r3,zero,8007cc8 <___vfiprintf_internal_r+0xfdc>
 8006e2c:	d8c12517 	ldw	r3,1172(sp)
 8006e30:	d8011b15 	stw	zero,1132(sp)
 8006e34:	d811883a 	mov	r8,sp
 8006e38:	1c07883a 	add	r3,r3,r16
 8006e3c:	d8c12515 	stw	r3,1172(sp)
 8006e40:	a0800007 	ldb	r2,0(r20)
 8006e44:	1002bf26 	beq	r2,zero,8007944 <___vfiprintf_internal_r+0xc58>
 8006e48:	a5c00044 	addi	r23,r20,1
 8006e4c:	a1800047 	ldb	r6,1(r20)
 8006e50:	d8011d85 	stb	zero,1142(sp)
 8006e54:	d8012205 	stb	zero,1160(sp)
 8006e58:	043fffc4 	movi	r16,-1
 8006e5c:	d8012415 	stw	zero,1168(sp)
 8006e60:	0025883a 	mov	r18,zero
 8006e64:	05001604 	movi	r20,88
 8006e68:	05400244 	movi	r21,9
 8006e6c:	4027883a 	mov	r19,r8
 8006e70:	bdc00044 	addi	r23,r23,1
 8006e74:	30bff804 	addi	r2,r6,-32
 8006e78:	a0825636 	bltu	r20,r2,80077d4 <___vfiprintf_internal_r+0xae8>
 8006e7c:	100490ba 	slli	r2,r2,2
 8006e80:	01020034 	movhi	r4,2048
 8006e84:	211ba504 	addi	r4,r4,28308
 8006e88:	1105883a 	add	r2,r2,r4
 8006e8c:	10800017 	ldw	r2,0(r2)
 8006e90:	1000683a 	jmp	r2
 8006e94:	08007764 	muli	zero,at,477
 8006e98:	080077d4 	ori	zero,at,479
 8006e9c:	080077d4 	ori	zero,at,479
 8006ea0:	080077c8 	cmpgei	zero,at,479
 8006ea4:	080077d4 	ori	zero,at,479
 8006ea8:	080077d4 	ori	zero,at,479
 8006eac:	080077d4 	ori	zero,at,479
 8006eb0:	080077d4 	ori	zero,at,479
 8006eb4:	080077d4 	ori	zero,at,479
 8006eb8:	080077d4 	ori	zero,at,479
 8006ebc:	08007554 	ori	zero,at,469
 8006ec0:	0800777c 	xorhi	zero,at,477
 8006ec4:	080077d4 	ori	zero,at,479
 8006ec8:	08007128 	cmpgeui	zero,at,452
 8006ecc:	08007578 	rdprs	zero,at,469
 8006ed0:	080077d4 	ori	zero,at,479
 8006ed4:	08007134 	orhi	zero,at,452
 8006ed8:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006edc:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ee0:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ee4:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ee8:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006eec:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ef0:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ef4:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006ef8:	08007140 	call	800714 <__alt_mem_onchip_memory2_0+0x800714>
 8006efc:	080077d4 	ori	zero,at,479
 8006f00:	080077d4 	ori	zero,at,479
 8006f04:	080077d4 	ori	zero,at,479
 8006f08:	080077d4 	ori	zero,at,479
 8006f0c:	080077d4 	ori	zero,at,479
 8006f10:	080077d4 	ori	zero,at,479
 8006f14:	080077d4 	ori	zero,at,479
 8006f18:	080077d4 	ori	zero,at,479
 8006f1c:	080077d4 	ori	zero,at,479
 8006f20:	080077d4 	ori	zero,at,479
 8006f24:	08007180 	call	800718 <__alt_mem_onchip_memory2_0+0x800718>
 8006f28:	080077d4 	ori	zero,at,479
 8006f2c:	080077d4 	ori	zero,at,479
 8006f30:	080077d4 	ori	zero,at,479
 8006f34:	080077d4 	ori	zero,at,479
 8006f38:	080077d4 	ori	zero,at,479
 8006f3c:	080077d4 	ori	zero,at,479
 8006f40:	080077d4 	ori	zero,at,479
 8006f44:	080077d4 	ori	zero,at,479
 8006f48:	080077d4 	ori	zero,at,479
 8006f4c:	080077d4 	ori	zero,at,479
 8006f50:	08007470 	cmpltui	zero,at,465
 8006f54:	080077d4 	ori	zero,at,479
 8006f58:	080077d4 	ori	zero,at,479
 8006f5c:	080077d4 	ori	zero,at,479
 8006f60:	080077d4 	ori	zero,at,479
 8006f64:	080077d4 	ori	zero,at,479
 8006f68:	080074b0 	cmpltui	zero,at,466
 8006f6c:	080077d4 	ori	zero,at,479
 8006f70:	080077d4 	ori	zero,at,479
 8006f74:	080074f4 	orhi	zero,at,467
 8006f78:	080077d4 	ori	zero,at,479
 8006f7c:	080077d4 	ori	zero,at,479
 8006f80:	080077d4 	ori	zero,at,479
 8006f84:	080077d4 	ori	zero,at,479
 8006f88:	080077d4 	ori	zero,at,479
 8006f8c:	080077d4 	ori	zero,at,479
 8006f90:	080077d4 	ori	zero,at,479
 8006f94:	080077d4 	ori	zero,at,479
 8006f98:	080077d4 	ori	zero,at,479
 8006f9c:	080077d4 	ori	zero,at,479
 8006fa0:	0800743c 	xorhi	zero,at,464
 8006fa4:	0800778c 	andi	zero,at,478
 8006fa8:	080077d4 	ori	zero,at,479
 8006fac:	080077d4 	ori	zero,at,479
 8006fb0:	080077d4 	ori	zero,at,479
 8006fb4:	080075c8 	cmpgei	zero,at,471
 8006fb8:	0800778c 	andi	zero,at,478
 8006fbc:	080077d4 	ori	zero,at,479
 8006fc0:	080077d4 	ori	zero,at,479
 8006fc4:	080074e0 	cmpeqi	zero,at,467
 8006fc8:	080077d4 	ori	zero,at,479
 8006fcc:	0800772c 	andhi	zero,at,476
 8006fd0:	080076b4 	orhi	zero,at,474
 8006fd4:	080076e8 	cmpgeui	zero,at,475
 8006fd8:	080075d4 	ori	zero,at,471
 8006fdc:	080077d4 	ori	zero,at,479
 8006fe0:	080075e0 	cmpeqi	zero,at,471
 8006fe4:	080077d4 	ori	zero,at,479
 8006fe8:	0800763c 	xorhi	zero,at,472
 8006fec:	080077d4 	ori	zero,at,479
 8006ff0:	080077d4 	ori	zero,at,479
 8006ff4:	08007670 	cmpltui	zero,at,473
 8006ff8:	42000204 	addi	r8,r8,8
 8006ffc:	d8c12517 	ldw	r3,1172(sp)
 8007000:	1c07883a 	add	r3,r3,r16
 8007004:	d8c12515 	stw	r3,1172(sp)
 8007008:	003f8d06 	br	8006e40 <__alt_data_end+0xfc006e40>
 800700c:	d9012117 	ldw	r4,1156(sp)
 8007010:	d9412017 	ldw	r5,1152(sp)
 8007014:	80024bc0 	call	80024bc <__swsetup_r>
 8007018:	1000301e 	bne	r2,zero,80070dc <___vfiprintf_internal_r+0x3f0>
 800701c:	d8812017 	ldw	r2,1152(sp)
 8007020:	01000284 	movi	r4,10
 8007024:	10c0030b 	ldhu	r3,12(r2)
 8007028:	1805883a 	mov	r2,r3
 800702c:	1080068c 	andi	r2,r2,26
 8007030:	113f551e 	bne	r2,r4,8006d88 <__alt_data_end+0xfc006d88>
 8007034:	d9012017 	ldw	r4,1152(sp)
 8007038:	2080038b 	ldhu	r2,14(r4)
 800703c:	113fffcc 	andi	r4,r2,65535
 8007040:	2120001c 	xori	r4,r4,32768
 8007044:	21200004 	addi	r4,r4,-32768
 8007048:	203f4f16 	blt	r4,zero,8006d88 <__alt_data_end+0xfc006d88>
 800704c:	d9412017 	ldw	r5,1152(sp)
 8007050:	d9012117 	ldw	r4,1156(sp)
 8007054:	d9c12317 	ldw	r7,1164(sp)
 8007058:	2b001917 	ldw	r12,100(r5)
 800705c:	2ac00717 	ldw	r11,28(r5)
 8007060:	2a800917 	ldw	r10,36(r5)
 8007064:	02010004 	movi	r8,1024
 8007068:	18ffff4c 	andi	r3,r3,65533
 800706c:	da0b883a 	add	r5,sp,r8
 8007070:	980d883a 	mov	r6,r19
 8007074:	d8c1030d 	sth	r3,1036(sp)
 8007078:	db011915 	stw	r12,1124(sp)
 800707c:	d881038d 	sth	r2,1038(sp)
 8007080:	dac10715 	stw	r11,1052(sp)
 8007084:	da810915 	stw	r10,1060(sp)
 8007088:	dec10015 	stw	sp,1024(sp)
 800708c:	dec10415 	stw	sp,1040(sp)
 8007090:	da010215 	stw	r8,1032(sp)
 8007094:	da010515 	stw	r8,1044(sp)
 8007098:	d8010615 	stw	zero,1048(sp)
 800709c:	8006cec0 	call	8006cec <___vfiprintf_internal_r>
 80070a0:	1021883a 	mov	r16,r2
 80070a4:	10000416 	blt	r2,zero,80070b8 <___vfiprintf_internal_r+0x3cc>
 80070a8:	d9012117 	ldw	r4,1156(sp)
 80070ac:	d9410004 	addi	r5,sp,1024
 80070b0:	8003f3c0 	call	8003f3c <_fflush_r>
 80070b4:	10040f1e 	bne	r2,zero,80080f4 <___vfiprintf_internal_r+0x1408>
 80070b8:	d881030b 	ldhu	r2,1036(sp)
 80070bc:	1080100c 	andi	r2,r2,64
 80070c0:	10000426 	beq	r2,zero,80070d4 <___vfiprintf_internal_r+0x3e8>
 80070c4:	d8c12017 	ldw	r3,1152(sp)
 80070c8:	1880030b 	ldhu	r2,12(r3)
 80070cc:	10801014 	ori	r2,r2,64
 80070d0:	1880030d 	sth	r2,12(r3)
 80070d4:	8005883a 	mov	r2,r16
 80070d8:	00000106 	br	80070e0 <___vfiprintf_internal_r+0x3f4>
 80070dc:	00bfffc4 	movi	r2,-1
 80070e0:	dfc13517 	ldw	ra,1236(sp)
 80070e4:	df013417 	ldw	fp,1232(sp)
 80070e8:	ddc13317 	ldw	r23,1228(sp)
 80070ec:	dd813217 	ldw	r22,1224(sp)
 80070f0:	dd413117 	ldw	r21,1220(sp)
 80070f4:	dd013017 	ldw	r20,1216(sp)
 80070f8:	dcc12f17 	ldw	r19,1212(sp)
 80070fc:	dc812e17 	ldw	r18,1208(sp)
 8007100:	dc412d17 	ldw	r17,1204(sp)
 8007104:	dc012c17 	ldw	r16,1200(sp)
 8007108:	dec13604 	addi	sp,sp,1240
 800710c:	f800283a 	ret
 8007110:	80044f80 	call	80044f8 <__sinit>
 8007114:	003f0706 	br	8006d34 <__alt_data_end+0xfc006d34>
 8007118:	d8c12417 	ldw	r3,1168(sp)
 800711c:	d8812315 	stw	r2,1164(sp)
 8007120:	00c7c83a 	sub	r3,zero,r3
 8007124:	d8c12415 	stw	r3,1168(sp)
 8007128:	94800114 	ori	r18,r18,4
 800712c:	b9800007 	ldb	r6,0(r23)
 8007130:	003f4f06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007134:	94802014 	ori	r18,r18,128
 8007138:	b9800007 	ldb	r6,0(r23)
 800713c:	003f4c06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007140:	dc012615 	stw	r16,1176(sp)
 8007144:	d8012415 	stw	zero,1168(sp)
 8007148:	35bff404 	addi	r22,r6,-48
 800714c:	0009883a 	mov	r4,zero
 8007150:	b821883a 	mov	r16,r23
 8007154:	01400284 	movi	r5,10
 8007158:	800a3a80 	call	800a3a8 <__mulsi3>
 800715c:	81800007 	ldb	r6,0(r16)
 8007160:	1589883a 	add	r4,r2,r22
 8007164:	bdc00044 	addi	r23,r23,1
 8007168:	35bff404 	addi	r22,r6,-48
 800716c:	b821883a 	mov	r16,r23
 8007170:	adbff82e 	bgeu	r21,r22,8007154 <__alt_data_end+0xfc007154>
 8007174:	d9012415 	stw	r4,1168(sp)
 8007178:	dc012617 	ldw	r16,1176(sp)
 800717c:	003f3d06 	br	8006e74 <__alt_data_end+0xfc006e74>
 8007180:	d8c12203 	ldbu	r3,1160(sp)
 8007184:	94800414 	ori	r18,r18,16
 8007188:	9080080c 	andi	r2,r18,32
 800718c:	d8c11d85 	stb	r3,1142(sp)
 8007190:	9811883a 	mov	r8,r19
 8007194:	d8c12317 	ldw	r3,1164(sp)
 8007198:	10018226 	beq	r2,zero,80077a4 <___vfiprintf_internal_r+0xab8>
 800719c:	d9012317 	ldw	r4,1164(sp)
 80071a0:	18800117 	ldw	r2,4(r3)
 80071a4:	1cc00017 	ldw	r19,0(r3)
 80071a8:	21000204 	addi	r4,r4,8
 80071ac:	d9012315 	stw	r4,1164(sp)
 80071b0:	102b883a 	mov	r21,r2
 80071b4:	10030016 	blt	r2,zero,8007db8 <___vfiprintf_internal_r+0x10cc>
 80071b8:	dd811d83 	ldbu	r22,1142(sp)
 80071bc:	8029883a 	mov	r20,r16
 80071c0:	00800044 	movi	r2,1
 80071c4:	9d46b03a 	or	r3,r19,r21
 80071c8:	80000216 	blt	r16,zero,80071d4 <___vfiprintf_internal_r+0x4e8>
 80071cc:	013fdfc4 	movi	r4,-129
 80071d0:	9124703a 	and	r18,r18,r4
 80071d4:	1801b41e 	bne	r3,zero,80078a8 <___vfiprintf_internal_r+0xbbc>
 80071d8:	80028126 	beq	r16,zero,8007be0 <___vfiprintf_internal_r+0xef4>
 80071dc:	10803fcc 	andi	r2,r2,255
 80071e0:	00c00044 	movi	r3,1
 80071e4:	10c1d126 	beq	r2,r3,800792c <___vfiprintf_internal_r+0xc40>
 80071e8:	00c00084 	movi	r3,2
 80071ec:	10c28626 	beq	r2,r3,8007c08 <___vfiprintf_internal_r+0xf1c>
 80071f0:	d8c10a04 	addi	r3,sp,1064
 80071f4:	9808d0fa 	srli	r4,r19,3
 80071f8:	a80a977a 	slli	r5,r21,29
 80071fc:	a82ad0fa 	srli	r21,r21,3
 8007200:	9cc001cc 	andi	r19,r19,7
 8007204:	98800c04 	addi	r2,r19,48
 8007208:	18ffffc4 	addi	r3,r3,-1
 800720c:	2926b03a 	or	r19,r5,r4
 8007210:	18800005 	stb	r2,0(r3)
 8007214:	9d48b03a 	or	r4,r19,r21
 8007218:	203ff61e 	bne	r4,zero,80071f4 <__alt_data_end+0xfc0071f4>
 800721c:	9100004c 	andi	r4,r18,1
 8007220:	d8c12215 	stw	r3,1160(sp)
 8007224:	2002b31e 	bne	r4,zero,8007cf4 <___vfiprintf_internal_r+0x1008>
 8007228:	d9411e17 	ldw	r5,1144(sp)
 800722c:	28e9c83a 	sub	r20,r5,r3
 8007230:	a02b883a 	mov	r21,r20
 8007234:	a400010e 	bge	r20,r16,800723c <___vfiprintf_internal_r+0x550>
 8007238:	802b883a 	mov	r21,r16
 800723c:	b5803fcc 	andi	r22,r22,255
 8007240:	b580201c 	xori	r22,r22,128
 8007244:	b5bfe004 	addi	r22,r22,-128
 8007248:	b0000126 	beq	r22,zero,8007250 <___vfiprintf_internal_r+0x564>
 800724c:	ad400044 	addi	r21,r21,1
 8007250:	9280008c 	andi	r10,r18,2
 8007254:	50000126 	beq	r10,zero,800725c <___vfiprintf_internal_r+0x570>
 8007258:	ad400084 	addi	r21,r21,2
 800725c:	9580210c 	andi	r22,r18,132
 8007260:	b001751e 	bne	r22,zero,8007838 <___vfiprintf_internal_r+0xb4c>
 8007264:	d9012417 	ldw	r4,1168(sp)
 8007268:	2567c83a 	sub	r19,r4,r21
 800726c:	04c1720e 	bge	zero,r19,8007838 <___vfiprintf_internal_r+0xb4c>
 8007270:	01c00404 	movi	r7,16
 8007274:	d8c11c17 	ldw	r3,1136(sp)
 8007278:	3cc36b0e 	bge	r7,r19,8008028 <___vfiprintf_internal_r+0x133c>
 800727c:	00820074 	movhi	r2,2049
 8007280:	10bd4604 	addi	r2,r2,-2792
 8007284:	dc012915 	stw	r16,1188(sp)
 8007288:	d9011b17 	ldw	r4,1132(sp)
 800728c:	9821883a 	mov	r16,r19
 8007290:	d8812615 	stw	r2,1176(sp)
 8007294:	030001c4 	movi	r12,7
 8007298:	5027883a 	mov	r19,r10
 800729c:	00000506 	br	80072b4 <___vfiprintf_internal_r+0x5c8>
 80072a0:	21400084 	addi	r5,r4,2
 80072a4:	42000204 	addi	r8,r8,8
 80072a8:	1009883a 	mov	r4,r2
 80072ac:	843ffc04 	addi	r16,r16,-16
 80072b0:	3c000d0e 	bge	r7,r16,80072e8 <___vfiprintf_internal_r+0x5fc>
 80072b4:	18c00404 	addi	r3,r3,16
 80072b8:	20800044 	addi	r2,r4,1
 80072bc:	47000015 	stw	fp,0(r8)
 80072c0:	41c00115 	stw	r7,4(r8)
 80072c4:	d8c11c15 	stw	r3,1136(sp)
 80072c8:	d8811b15 	stw	r2,1132(sp)
 80072cc:	60bff40e 	bge	r12,r2,80072a0 <__alt_data_end+0xfc0072a0>
 80072d0:	18014b1e 	bne	r3,zero,8007800 <___vfiprintf_internal_r+0xb14>
 80072d4:	843ffc04 	addi	r16,r16,-16
 80072d8:	0009883a 	mov	r4,zero
 80072dc:	01400044 	movi	r5,1
 80072e0:	d811883a 	mov	r8,sp
 80072e4:	3c3ff316 	blt	r7,r16,80072b4 <__alt_data_end+0xfc0072b4>
 80072e8:	9815883a 	mov	r10,r19
 80072ec:	8027883a 	mov	r19,r16
 80072f0:	dc012917 	ldw	r16,1188(sp)
 80072f4:	d9012617 	ldw	r4,1176(sp)
 80072f8:	98c7883a 	add	r3,r19,r3
 80072fc:	44c00115 	stw	r19,4(r8)
 8007300:	41000015 	stw	r4,0(r8)
 8007304:	d8c11c15 	stw	r3,1136(sp)
 8007308:	d9411b15 	stw	r5,1132(sp)
 800730c:	008001c4 	movi	r2,7
 8007310:	11425116 	blt	r2,r5,8007c58 <___vfiprintf_internal_r+0xf6c>
 8007314:	d9011d87 	ldb	r4,1142(sp)
 8007318:	42000204 	addi	r8,r8,8
 800731c:	28800044 	addi	r2,r5,1
 8007320:	20014a1e 	bne	r4,zero,800784c <___vfiprintf_internal_r+0xb60>
 8007324:	50000c26 	beq	r10,zero,8007358 <___vfiprintf_internal_r+0x66c>
 8007328:	d9011d04 	addi	r4,sp,1140
 800732c:	18c00084 	addi	r3,r3,2
 8007330:	41000015 	stw	r4,0(r8)
 8007334:	01000084 	movi	r4,2
 8007338:	41000115 	stw	r4,4(r8)
 800733c:	d8c11c15 	stw	r3,1136(sp)
 8007340:	d8811b15 	stw	r2,1132(sp)
 8007344:	010001c4 	movi	r4,7
 8007348:	20822016 	blt	r4,r2,8007bcc <___vfiprintf_internal_r+0xee0>
 800734c:	100b883a 	mov	r5,r2
 8007350:	42000204 	addi	r8,r8,8
 8007354:	10800044 	addi	r2,r2,1
 8007358:	01002004 	movi	r4,128
 800735c:	b101de26 	beq	r22,r4,8007ad8 <___vfiprintf_internal_r+0xdec>
 8007360:	8521c83a 	sub	r16,r16,r20
 8007364:	0400230e 	bge	zero,r16,80073f4 <___vfiprintf_internal_r+0x708>
 8007368:	04c00404 	movi	r19,16
 800736c:	9c030d0e 	bge	r19,r16,8007fa4 <___vfiprintf_internal_r+0x12b8>
 8007370:	00820074 	movhi	r2,2049
 8007374:	10bd4204 	addi	r2,r2,-2808
 8007378:	d8812615 	stw	r2,1176(sp)
 800737c:	058001c4 	movi	r22,7
 8007380:	00000506 	br	8007398 <___vfiprintf_internal_r+0x6ac>
 8007384:	28800084 	addi	r2,r5,2
 8007388:	42000204 	addi	r8,r8,8
 800738c:	200b883a 	mov	r5,r4
 8007390:	843ffc04 	addi	r16,r16,-16
 8007394:	9c000d0e 	bge	r19,r16,80073cc <___vfiprintf_internal_r+0x6e0>
 8007398:	18c00404 	addi	r3,r3,16
 800739c:	29000044 	addi	r4,r5,1
 80073a0:	44400015 	stw	r17,0(r8)
 80073a4:	44c00115 	stw	r19,4(r8)
 80073a8:	d8c11c15 	stw	r3,1136(sp)
 80073ac:	d9011b15 	stw	r4,1132(sp)
 80073b0:	b13ff40e 	bge	r22,r4,8007384 <__alt_data_end+0xfc007384>
 80073b4:	1801321e 	bne	r3,zero,8007880 <___vfiprintf_internal_r+0xb94>
 80073b8:	843ffc04 	addi	r16,r16,-16
 80073bc:	000b883a 	mov	r5,zero
 80073c0:	00800044 	movi	r2,1
 80073c4:	d811883a 	mov	r8,sp
 80073c8:	9c3ff316 	blt	r19,r16,8007398 <__alt_data_end+0xfc007398>
 80073cc:	d9012617 	ldw	r4,1176(sp)
 80073d0:	1c07883a 	add	r3,r3,r16
 80073d4:	44000115 	stw	r16,4(r8)
 80073d8:	41000015 	stw	r4,0(r8)
 80073dc:	d8c11c15 	stw	r3,1136(sp)
 80073e0:	d8811b15 	stw	r2,1132(sp)
 80073e4:	010001c4 	movi	r4,7
 80073e8:	20816216 	blt	r4,r2,8007974 <___vfiprintf_internal_r+0xc88>
 80073ec:	42000204 	addi	r8,r8,8
 80073f0:	10800044 	addi	r2,r2,1
 80073f4:	d9012217 	ldw	r4,1160(sp)
 80073f8:	1d07883a 	add	r3,r3,r20
 80073fc:	45000115 	stw	r20,4(r8)
 8007400:	41000015 	stw	r4,0(r8)
 8007404:	d8c11c15 	stw	r3,1136(sp)
 8007408:	d8811b15 	stw	r2,1132(sp)
 800740c:	010001c4 	movi	r4,7
 8007410:	2081610e 	bge	r4,r2,8007998 <___vfiprintf_internal_r+0xcac>
 8007414:	1802211e 	bne	r3,zero,8007c9c <___vfiprintf_internal_r+0xfb0>
 8007418:	d8011b15 	stw	zero,1132(sp)
 800741c:	9480010c 	andi	r18,r18,4
 8007420:	9002171e 	bne	r18,zero,8007c80 <___vfiprintf_internal_r+0xf94>
 8007424:	d9412417 	ldw	r5,1168(sp)
 8007428:	a9433716 	blt	r21,r5,8008108 <___vfiprintf_internal_r+0x141c>
 800742c:	d8812517 	ldw	r2,1172(sp)
 8007430:	1545883a 	add	r2,r2,r21
 8007434:	d8812515 	stw	r2,1172(sp)
 8007438:	00019a06 	br	8007aa4 <___vfiprintf_internal_r+0xdb8>
 800743c:	d8c12317 	ldw	r3,1164(sp)
 8007440:	05400044 	movi	r21,1
 8007444:	9811883a 	mov	r8,r19
 8007448:	18800017 	ldw	r2,0(r3)
 800744c:	18c00104 	addi	r3,r3,4
 8007450:	d8c12315 	stw	r3,1164(sp)
 8007454:	d8c10004 	addi	r3,sp,1024
 8007458:	d8011d85 	stb	zero,1142(sp)
 800745c:	d8810005 	stb	r2,1024(sp)
 8007460:	a829883a 	mov	r20,r21
 8007464:	d8c12215 	stw	r3,1160(sp)
 8007468:	0021883a 	mov	r16,zero
 800746c:	003f7806 	br	8007250 <__alt_data_end+0xfc007250>
 8007470:	94800414 	ori	r18,r18,16
 8007474:	9080080c 	andi	r2,r18,32
 8007478:	9811883a 	mov	r8,r19
 800747c:	10009026 	beq	r2,zero,80076c0 <___vfiprintf_internal_r+0x9d4>
 8007480:	d8812317 	ldw	r2,1164(sp)
 8007484:	d8c12317 	ldw	r3,1164(sp)
 8007488:	14c00017 	ldw	r19,0(r2)
 800748c:	15400117 	ldw	r21,4(r2)
 8007490:	18c00204 	addi	r3,r3,8
 8007494:	d8c12315 	stw	r3,1164(sp)
 8007498:	0005883a 	mov	r2,zero
 800749c:	9d46b03a 	or	r3,r19,r21
 80074a0:	d8011d85 	stb	zero,1142(sp)
 80074a4:	8029883a 	mov	r20,r16
 80074a8:	002d883a 	mov	r22,zero
 80074ac:	003f4606 	br	80071c8 <__alt_data_end+0xfc0071c8>
 80074b0:	94800414 	ori	r18,r18,16
 80074b4:	9080080c 	andi	r2,r18,32
 80074b8:	9811883a 	mov	r8,r19
 80074bc:	10006226 	beq	r2,zero,8007648 <___vfiprintf_internal_r+0x95c>
 80074c0:	d9012317 	ldw	r4,1164(sp)
 80074c4:	00800044 	movi	r2,1
 80074c8:	24c00017 	ldw	r19,0(r4)
 80074cc:	25400117 	ldw	r21,4(r4)
 80074d0:	21000204 	addi	r4,r4,8
 80074d4:	d9012315 	stw	r4,1164(sp)
 80074d8:	9d46b03a 	or	r3,r19,r21
 80074dc:	003ff006 	br	80074a0 <__alt_data_end+0xfc0074a0>
 80074e0:	b9800007 	ldb	r6,0(r23)
 80074e4:	00801b04 	movi	r2,108
 80074e8:	3082b226 	beq	r6,r2,8007fb4 <___vfiprintf_internal_r+0x12c8>
 80074ec:	94800414 	ori	r18,r18,16
 80074f0:	003e5f06 	br	8006e70 <__alt_data_end+0xfc006e70>
 80074f4:	d8c12203 	ldbu	r3,1160(sp)
 80074f8:	01020074 	movhi	r4,2049
 80074fc:	213cdc04 	addi	r4,r4,-3216
 8007500:	d8c11d85 	stb	r3,1142(sp)
 8007504:	d9012715 	stw	r4,1180(sp)
 8007508:	90c0080c 	andi	r3,r18,32
 800750c:	9811883a 	mov	r8,r19
 8007510:	d8812317 	ldw	r2,1164(sp)
 8007514:	18005f26 	beq	r3,zero,8007694 <___vfiprintf_internal_r+0x9a8>
 8007518:	d9012317 	ldw	r4,1164(sp)
 800751c:	14c00017 	ldw	r19,0(r2)
 8007520:	15400117 	ldw	r21,4(r2)
 8007524:	21000204 	addi	r4,r4,8
 8007528:	d9012315 	stw	r4,1164(sp)
 800752c:	9080004c 	andi	r2,r18,1
 8007530:	1001e226 	beq	r2,zero,8007cbc <___vfiprintf_internal_r+0xfd0>
 8007534:	9d46b03a 	or	r3,r19,r21
 8007538:	18024e26 	beq	r3,zero,8007e74 <___vfiprintf_internal_r+0x1188>
 800753c:	00800c04 	movi	r2,48
 8007540:	d8811d05 	stb	r2,1140(sp)
 8007544:	d9811d45 	stb	r6,1141(sp)
 8007548:	94800094 	ori	r18,r18,2
 800754c:	00800084 	movi	r2,2
 8007550:	003fd306 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007554:	d9012317 	ldw	r4,1164(sp)
 8007558:	d9412317 	ldw	r5,1164(sp)
 800755c:	21000017 	ldw	r4,0(r4)
 8007560:	28800104 	addi	r2,r5,4
 8007564:	d9012415 	stw	r4,1168(sp)
 8007568:	203eeb16 	blt	r4,zero,8007118 <__alt_data_end+0xfc007118>
 800756c:	d8812315 	stw	r2,1164(sp)
 8007570:	b9800007 	ldb	r6,0(r23)
 8007574:	003e3e06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007578:	b9800007 	ldb	r6,0(r23)
 800757c:	01000a84 	movi	r4,42
 8007580:	b8800044 	addi	r2,r23,1
 8007584:	3102d226 	beq	r6,r4,80080d0 <___vfiprintf_internal_r+0x13e4>
 8007588:	35bff404 	addi	r22,r6,-48
 800758c:	102f883a 	mov	r23,r2
 8007590:	0021883a 	mov	r16,zero
 8007594:	adbe3736 	bltu	r21,r22,8006e74 <__alt_data_end+0xfc006e74>
 8007598:	0009883a 	mov	r4,zero
 800759c:	01400284 	movi	r5,10
 80075a0:	800a3a80 	call	800a3a8 <__mulsi3>
 80075a4:	b9800007 	ldb	r6,0(r23)
 80075a8:	b089883a 	add	r4,r22,r2
 80075ac:	bdc00044 	addi	r23,r23,1
 80075b0:	35bff404 	addi	r22,r6,-48
 80075b4:	adbff92e 	bgeu	r21,r22,800759c <__alt_data_end+0xfc00759c>
 80075b8:	2021883a 	mov	r16,r4
 80075bc:	203e2d0e 	bge	r4,zero,8006e74 <__alt_data_end+0xfc006e74>
 80075c0:	043fffc4 	movi	r16,-1
 80075c4:	003e2b06 	br	8006e74 <__alt_data_end+0xfc006e74>
 80075c8:	94801014 	ori	r18,r18,64
 80075cc:	b9800007 	ldb	r6,0(r23)
 80075d0:	003e2706 	br	8006e70 <__alt_data_end+0xfc006e70>
 80075d4:	94800814 	ori	r18,r18,32
 80075d8:	b9800007 	ldb	r6,0(r23)
 80075dc:	003e2406 	br	8006e70 <__alt_data_end+0xfc006e70>
 80075e0:	d9412317 	ldw	r5,1164(sp)
 80075e4:	d8812317 	ldw	r2,1164(sp)
 80075e8:	d8011d85 	stb	zero,1142(sp)
 80075ec:	29400017 	ldw	r5,0(r5)
 80075f0:	9811883a 	mov	r8,r19
 80075f4:	14c00104 	addi	r19,r2,4
 80075f8:	d9412215 	stw	r5,1160(sp)
 80075fc:	28029026 	beq	r5,zero,8008040 <___vfiprintf_internal_r+0x1354>
 8007600:	d9012217 	ldw	r4,1160(sp)
 8007604:	80027616 	blt	r16,zero,8007fe0 <___vfiprintf_internal_r+0x12f4>
 8007608:	000b883a 	mov	r5,zero
 800760c:	800d883a 	mov	r6,r16
 8007610:	da012a15 	stw	r8,1192(sp)
 8007614:	800550c0 	call	800550c <memchr>
 8007618:	da012a17 	ldw	r8,1192(sp)
 800761c:	1002a026 	beq	r2,zero,80080a0 <___vfiprintf_internal_r+0x13b4>
 8007620:	d8c12217 	ldw	r3,1160(sp)
 8007624:	10e9c83a 	sub	r20,r2,r3
 8007628:	85023816 	blt	r16,r20,8007f0c <___vfiprintf_internal_r+0x1220>
 800762c:	dd811d83 	ldbu	r22,1142(sp)
 8007630:	dcc12315 	stw	r19,1164(sp)
 8007634:	0021883a 	mov	r16,zero
 8007638:	003efd06 	br	8007230 <__alt_data_end+0xfc007230>
 800763c:	9080080c 	andi	r2,r18,32
 8007640:	9811883a 	mov	r8,r19
 8007644:	103f9e1e 	bne	r2,zero,80074c0 <__alt_data_end+0xfc0074c0>
 8007648:	9080040c 	andi	r2,r18,16
 800764c:	10021726 	beq	r2,zero,8007eac <___vfiprintf_internal_r+0x11c0>
 8007650:	d9412317 	ldw	r5,1164(sp)
 8007654:	002b883a 	mov	r21,zero
 8007658:	00800044 	movi	r2,1
 800765c:	2cc00017 	ldw	r19,0(r5)
 8007660:	29400104 	addi	r5,r5,4
 8007664:	d9412315 	stw	r5,1164(sp)
 8007668:	9807883a 	mov	r3,r19
 800766c:	003f8c06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007670:	d8c12203 	ldbu	r3,1160(sp)
 8007674:	01020074 	movhi	r4,2049
 8007678:	213ce104 	addi	r4,r4,-3196
 800767c:	d8c11d85 	stb	r3,1142(sp)
 8007680:	d9012715 	stw	r4,1180(sp)
 8007684:	90c0080c 	andi	r3,r18,32
 8007688:	9811883a 	mov	r8,r19
 800768c:	d8812317 	ldw	r2,1164(sp)
 8007690:	183fa11e 	bne	r3,zero,8007518 <__alt_data_end+0xfc007518>
 8007694:	90c0040c 	andi	r3,r18,16
 8007698:	1801e526 	beq	r3,zero,8007e30 <___vfiprintf_internal_r+0x1144>
 800769c:	d9412317 	ldw	r5,1164(sp)
 80076a0:	14c00017 	ldw	r19,0(r2)
 80076a4:	002b883a 	mov	r21,zero
 80076a8:	29400104 	addi	r5,r5,4
 80076ac:	d9412315 	stw	r5,1164(sp)
 80076b0:	003f9e06 	br	800752c <__alt_data_end+0xfc00752c>
 80076b4:	9080080c 	andi	r2,r18,32
 80076b8:	9811883a 	mov	r8,r19
 80076bc:	103f701e 	bne	r2,zero,8007480 <__alt_data_end+0xfc007480>
 80076c0:	9080040c 	andi	r2,r18,16
 80076c4:	1001ef26 	beq	r2,zero,8007e84 <___vfiprintf_internal_r+0x1198>
 80076c8:	d9012317 	ldw	r4,1164(sp)
 80076cc:	002b883a 	mov	r21,zero
 80076d0:	0005883a 	mov	r2,zero
 80076d4:	24c00017 	ldw	r19,0(r4)
 80076d8:	21000104 	addi	r4,r4,4
 80076dc:	d9012315 	stw	r4,1164(sp)
 80076e0:	9807883a 	mov	r3,r19
 80076e4:	003f6e06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 80076e8:	d8c12317 	ldw	r3,1164(sp)
 80076ec:	9811883a 	mov	r8,r19
 80076f0:	00800c04 	movi	r2,48
 80076f4:	1cc00017 	ldw	r19,0(r3)
 80076f8:	01020074 	movhi	r4,2049
 80076fc:	18c00104 	addi	r3,r3,4
 8007700:	d8811d05 	stb	r2,1140(sp)
 8007704:	213ce104 	addi	r4,r4,-3196
 8007708:	00801e04 	movi	r2,120
 800770c:	d8811d45 	stb	r2,1141(sp)
 8007710:	d8c12315 	stw	r3,1164(sp)
 8007714:	002b883a 	mov	r21,zero
 8007718:	94800094 	ori	r18,r18,2
 800771c:	d9012715 	stw	r4,1180(sp)
 8007720:	00800084 	movi	r2,2
 8007724:	9807883a 	mov	r3,r19
 8007728:	003f5d06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 800772c:	d8c12203 	ldbu	r3,1160(sp)
 8007730:	9080080c 	andi	r2,r18,32
 8007734:	9811883a 	mov	r8,r19
 8007738:	d8c11d85 	stb	r3,1142(sp)
 800773c:	1001b126 	beq	r2,zero,8007e04 <___vfiprintf_internal_r+0x1118>
 8007740:	d9012317 	ldw	r4,1164(sp)
 8007744:	d9412517 	ldw	r5,1172(sp)
 8007748:	20800017 	ldw	r2,0(r4)
 800774c:	2807d7fa 	srai	r3,r5,31
 8007750:	21000104 	addi	r4,r4,4
 8007754:	d9012315 	stw	r4,1164(sp)
 8007758:	11400015 	stw	r5,0(r2)
 800775c:	10c00115 	stw	r3,4(r2)
 8007760:	003d9a06 	br	8006dcc <__alt_data_end+0xfc006dcc>
 8007764:	d8812207 	ldb	r2,1160(sp)
 8007768:	1001c41e 	bne	r2,zero,8007e7c <___vfiprintf_internal_r+0x1190>
 800776c:	00c00804 	movi	r3,32
 8007770:	d8c12205 	stb	r3,1160(sp)
 8007774:	b9800007 	ldb	r6,0(r23)
 8007778:	003dbd06 	br	8006e70 <__alt_data_end+0xfc006e70>
 800777c:	00c00ac4 	movi	r3,43
 8007780:	d8c12205 	stb	r3,1160(sp)
 8007784:	b9800007 	ldb	r6,0(r23)
 8007788:	003db906 	br	8006e70 <__alt_data_end+0xfc006e70>
 800778c:	d8c12203 	ldbu	r3,1160(sp)
 8007790:	9080080c 	andi	r2,r18,32
 8007794:	9811883a 	mov	r8,r19
 8007798:	d8c11d85 	stb	r3,1142(sp)
 800779c:	d8c12317 	ldw	r3,1164(sp)
 80077a0:	103e7e1e 	bne	r2,zero,800719c <__alt_data_end+0xfc00719c>
 80077a4:	9080040c 	andi	r2,r18,16
 80077a8:	1001a926 	beq	r2,zero,8007e50 <___vfiprintf_internal_r+0x1164>
 80077ac:	1cc00017 	ldw	r19,0(r3)
 80077b0:	d9412317 	ldw	r5,1164(sp)
 80077b4:	982bd7fa 	srai	r21,r19,31
 80077b8:	29400104 	addi	r5,r5,4
 80077bc:	d9412315 	stw	r5,1164(sp)
 80077c0:	a805883a 	mov	r2,r21
 80077c4:	003e7b06 	br	80071b4 <__alt_data_end+0xfc0071b4>
 80077c8:	94800054 	ori	r18,r18,1
 80077cc:	b9800007 	ldb	r6,0(r23)
 80077d0:	003da706 	br	8006e70 <__alt_data_end+0xfc006e70>
 80077d4:	d8c12203 	ldbu	r3,1160(sp)
 80077d8:	9811883a 	mov	r8,r19
 80077dc:	d8c11d85 	stb	r3,1142(sp)
 80077e0:	30005826 	beq	r6,zero,8007944 <___vfiprintf_internal_r+0xc58>
 80077e4:	05400044 	movi	r21,1
 80077e8:	d8c10004 	addi	r3,sp,1024
 80077ec:	d9810005 	stb	r6,1024(sp)
 80077f0:	d8011d85 	stb	zero,1142(sp)
 80077f4:	a829883a 	mov	r20,r21
 80077f8:	d8c12215 	stw	r3,1160(sp)
 80077fc:	003f1a06 	br	8007468 <__alt_data_end+0xfc007468>
 8007800:	d9012117 	ldw	r4,1156(sp)
 8007804:	d9412017 	ldw	r5,1152(sp)
 8007808:	d9811a04 	addi	r6,sp,1128
 800780c:	d9c12a15 	stw	r7,1192(sp)
 8007810:	db012b15 	stw	r12,1196(sp)
 8007814:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007818:	d9c12a17 	ldw	r7,1192(sp)
 800781c:	db012b17 	ldw	r12,1196(sp)
 8007820:	10004e1e 	bne	r2,zero,800795c <___vfiprintf_internal_r+0xc70>
 8007824:	d9011b17 	ldw	r4,1132(sp)
 8007828:	d8c11c17 	ldw	r3,1136(sp)
 800782c:	d811883a 	mov	r8,sp
 8007830:	21400044 	addi	r5,r4,1
 8007834:	003e9d06 	br	80072ac <__alt_data_end+0xfc0072ac>
 8007838:	d9411b17 	ldw	r5,1132(sp)
 800783c:	d8c11c17 	ldw	r3,1136(sp)
 8007840:	28800044 	addi	r2,r5,1
 8007844:	d9011d87 	ldb	r4,1142(sp)
 8007848:	203eb626 	beq	r4,zero,8007324 <__alt_data_end+0xfc007324>
 800784c:	01000044 	movi	r4,1
 8007850:	d9411d84 	addi	r5,sp,1142
 8007854:	1907883a 	add	r3,r3,r4
 8007858:	41400015 	stw	r5,0(r8)
 800785c:	41000115 	stw	r4,4(r8)
 8007860:	d8c11c15 	stw	r3,1136(sp)
 8007864:	d8811b15 	stw	r2,1132(sp)
 8007868:	014001c4 	movi	r5,7
 800786c:	2880ce16 	blt	r5,r2,8007ba8 <___vfiprintf_internal_r+0xebc>
 8007870:	100b883a 	mov	r5,r2
 8007874:	42000204 	addi	r8,r8,8
 8007878:	10800044 	addi	r2,r2,1
 800787c:	003ea906 	br	8007324 <__alt_data_end+0xfc007324>
 8007880:	d9012117 	ldw	r4,1156(sp)
 8007884:	d9412017 	ldw	r5,1152(sp)
 8007888:	d9811a04 	addi	r6,sp,1128
 800788c:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007890:	1000321e 	bne	r2,zero,800795c <___vfiprintf_internal_r+0xc70>
 8007894:	d9411b17 	ldw	r5,1132(sp)
 8007898:	d8c11c17 	ldw	r3,1136(sp)
 800789c:	d811883a 	mov	r8,sp
 80078a0:	28800044 	addi	r2,r5,1
 80078a4:	003eba06 	br	8007390 <__alt_data_end+0xfc007390>
 80078a8:	10803fcc 	andi	r2,r2,255
 80078ac:	00c00044 	movi	r3,1
 80078b0:	10fe4d1e 	bne	r2,r3,80071e8 <__alt_data_end+0xfc0071e8>
 80078b4:	a800021e 	bne	r21,zero,80078c0 <___vfiprintf_internal_r+0xbd4>
 80078b8:	00800244 	movi	r2,9
 80078bc:	14c01b2e 	bgeu	r2,r19,800792c <___vfiprintf_internal_r+0xc40>
 80078c0:	dc012215 	stw	r16,1160(sp)
 80078c4:	dd010a04 	addi	r20,sp,1064
 80078c8:	a821883a 	mov	r16,r21
 80078cc:	402b883a 	mov	r21,r8
 80078d0:	9809883a 	mov	r4,r19
 80078d4:	800b883a 	mov	r5,r16
 80078d8:	01800284 	movi	r6,10
 80078dc:	000f883a 	mov	r7,zero
 80078e0:	8009c600 	call	8009c60 <__umoddi3>
 80078e4:	10800c04 	addi	r2,r2,48
 80078e8:	a53fffc4 	addi	r20,r20,-1
 80078ec:	9809883a 	mov	r4,r19
 80078f0:	800b883a 	mov	r5,r16
 80078f4:	01800284 	movi	r6,10
 80078f8:	000f883a 	mov	r7,zero
 80078fc:	a0800005 	stb	r2,0(r20)
 8007900:	80096200 	call	8009620 <__udivdi3>
 8007904:	1027883a 	mov	r19,r2
 8007908:	10c4b03a 	or	r2,r2,r3
 800790c:	1821883a 	mov	r16,r3
 8007910:	103fef1e 	bne	r2,zero,80078d0 <__alt_data_end+0xfc0078d0>
 8007914:	d9011e17 	ldw	r4,1144(sp)
 8007918:	dc012217 	ldw	r16,1160(sp)
 800791c:	a811883a 	mov	r8,r21
 8007920:	dd012215 	stw	r20,1160(sp)
 8007924:	2529c83a 	sub	r20,r4,r20
 8007928:	003e4106 	br	8007230 <__alt_data_end+0xfc007230>
 800792c:	9cc00c04 	addi	r19,r19,48
 8007930:	d8c109c4 	addi	r3,sp,1063
 8007934:	dcc109c5 	stb	r19,1063(sp)
 8007938:	dd012817 	ldw	r20,1184(sp)
 800793c:	d8c12215 	stw	r3,1160(sp)
 8007940:	003e3b06 	br	8007230 <__alt_data_end+0xfc007230>
 8007944:	d8811c17 	ldw	r2,1136(sp)
 8007948:	10000426 	beq	r2,zero,800795c <___vfiprintf_internal_r+0xc70>
 800794c:	d9012117 	ldw	r4,1156(sp)
 8007950:	d9412017 	ldw	r5,1152(sp)
 8007954:	d9811a04 	addi	r6,sp,1128
 8007958:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 800795c:	d9412017 	ldw	r5,1152(sp)
 8007960:	2880030b 	ldhu	r2,12(r5)
 8007964:	1080100c 	andi	r2,r2,64
 8007968:	103ddc1e 	bne	r2,zero,80070dc <__alt_data_end+0xfc0070dc>
 800796c:	d8812517 	ldw	r2,1172(sp)
 8007970:	003ddb06 	br	80070e0 <__alt_data_end+0xfc0070e0>
 8007974:	1801061e 	bne	r3,zero,8007d90 <___vfiprintf_internal_r+0x10a4>
 8007978:	d8c12217 	ldw	r3,1160(sp)
 800797c:	00800044 	movi	r2,1
 8007980:	dd000115 	stw	r20,4(sp)
 8007984:	d8c00015 	stw	r3,0(sp)
 8007988:	dd011c15 	stw	r20,1136(sp)
 800798c:	d8811b15 	stw	r2,1132(sp)
 8007990:	a007883a 	mov	r3,r20
 8007994:	d811883a 	mov	r8,sp
 8007998:	42000204 	addi	r8,r8,8
 800799c:	9480010c 	andi	r18,r18,4
 80079a0:	90003426 	beq	r18,zero,8007a74 <___vfiprintf_internal_r+0xd88>
 80079a4:	d9412417 	ldw	r5,1168(sp)
 80079a8:	2d65c83a 	sub	r18,r5,r21
 80079ac:	0480310e 	bge	zero,r18,8007a74 <___vfiprintf_internal_r+0xd88>
 80079b0:	04000404 	movi	r16,16
 80079b4:	8481ad0e 	bge	r16,r18,800806c <___vfiprintf_internal_r+0x1380>
 80079b8:	01420074 	movhi	r5,2049
 80079bc:	297d4604 	addi	r5,r5,-2792
 80079c0:	d9011b17 	ldw	r4,1132(sp)
 80079c4:	d9412615 	stw	r5,1176(sp)
 80079c8:	04c001c4 	movi	r19,7
 80079cc:	dd012117 	ldw	r20,1156(sp)
 80079d0:	dd812017 	ldw	r22,1152(sp)
 80079d4:	00000506 	br	80079ec <___vfiprintf_internal_r+0xd00>
 80079d8:	21400084 	addi	r5,r4,2
 80079dc:	42000204 	addi	r8,r8,8
 80079e0:	1009883a 	mov	r4,r2
 80079e4:	94bffc04 	addi	r18,r18,-16
 80079e8:	84800d0e 	bge	r16,r18,8007a20 <___vfiprintf_internal_r+0xd34>
 80079ec:	18c00404 	addi	r3,r3,16
 80079f0:	20800044 	addi	r2,r4,1
 80079f4:	47000015 	stw	fp,0(r8)
 80079f8:	44000115 	stw	r16,4(r8)
 80079fc:	d8c11c15 	stw	r3,1136(sp)
 8007a00:	d8811b15 	stw	r2,1132(sp)
 8007a04:	98bff40e 	bge	r19,r2,80079d8 <__alt_data_end+0xfc0079d8>
 8007a08:	1800291e 	bne	r3,zero,8007ab0 <___vfiprintf_internal_r+0xdc4>
 8007a0c:	94bffc04 	addi	r18,r18,-16
 8007a10:	0009883a 	mov	r4,zero
 8007a14:	01400044 	movi	r5,1
 8007a18:	d811883a 	mov	r8,sp
 8007a1c:	84bff316 	blt	r16,r18,80079ec <__alt_data_end+0xfc0079ec>
 8007a20:	d8812617 	ldw	r2,1176(sp)
 8007a24:	1c87883a 	add	r3,r3,r18
 8007a28:	44800115 	stw	r18,4(r8)
 8007a2c:	40800015 	stw	r2,0(r8)
 8007a30:	d8c11c15 	stw	r3,1136(sp)
 8007a34:	d9411b15 	stw	r5,1132(sp)
 8007a38:	008001c4 	movi	r2,7
 8007a3c:	11400d0e 	bge	r2,r5,8007a74 <___vfiprintf_internal_r+0xd88>
 8007a40:	1800061e 	bne	r3,zero,8007a5c <___vfiprintf_internal_r+0xd70>
 8007a44:	d8c12417 	ldw	r3,1168(sp)
 8007a48:	a8c12e16 	blt	r21,r3,8007f04 <___vfiprintf_internal_r+0x1218>
 8007a4c:	d9012517 	ldw	r4,1172(sp)
 8007a50:	2549883a 	add	r4,r4,r21
 8007a54:	d9012515 	stw	r4,1172(sp)
 8007a58:	00001206 	br	8007aa4 <___vfiprintf_internal_r+0xdb8>
 8007a5c:	d9012117 	ldw	r4,1156(sp)
 8007a60:	d9412017 	ldw	r5,1152(sp)
 8007a64:	d9811a04 	addi	r6,sp,1128
 8007a68:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007a6c:	103fbb1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007a70:	d8c11c17 	ldw	r3,1136(sp)
 8007a74:	d8812417 	ldw	r2,1168(sp)
 8007a78:	a880010e 	bge	r21,r2,8007a80 <___vfiprintf_internal_r+0xd94>
 8007a7c:	102b883a 	mov	r21,r2
 8007a80:	d9012517 	ldw	r4,1172(sp)
 8007a84:	2549883a 	add	r4,r4,r21
 8007a88:	d9012515 	stw	r4,1172(sp)
 8007a8c:	18000526 	beq	r3,zero,8007aa4 <___vfiprintf_internal_r+0xdb8>
 8007a90:	d9012117 	ldw	r4,1156(sp)
 8007a94:	d9412017 	ldw	r5,1152(sp)
 8007a98:	d9811a04 	addi	r6,sp,1128
 8007a9c:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007aa0:	103fae1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007aa4:	d8011b15 	stw	zero,1132(sp)
 8007aa8:	d811883a 	mov	r8,sp
 8007aac:	003cc706 	br	8006dcc <__alt_data_end+0xfc006dcc>
 8007ab0:	a009883a 	mov	r4,r20
 8007ab4:	b00b883a 	mov	r5,r22
 8007ab8:	d9811a04 	addi	r6,sp,1128
 8007abc:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007ac0:	103fa61e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007ac4:	d9011b17 	ldw	r4,1132(sp)
 8007ac8:	d8c11c17 	ldw	r3,1136(sp)
 8007acc:	d811883a 	mov	r8,sp
 8007ad0:	21400044 	addi	r5,r4,1
 8007ad4:	003fc306 	br	80079e4 <__alt_data_end+0xfc0079e4>
 8007ad8:	d9012417 	ldw	r4,1168(sp)
 8007adc:	256dc83a 	sub	r22,r4,r21
 8007ae0:	05be1f0e 	bge	zero,r22,8007360 <__alt_data_end+0xfc007360>
 8007ae4:	04c00404 	movi	r19,16
 8007ae8:	9d81720e 	bge	r19,r22,80080b4 <___vfiprintf_internal_r+0x13c8>
 8007aec:	00820074 	movhi	r2,2049
 8007af0:	10bd4204 	addi	r2,r2,-2808
 8007af4:	d8812615 	stw	r2,1176(sp)
 8007af8:	028001c4 	movi	r10,7
 8007afc:	00000506 	br	8007b14 <___vfiprintf_internal_r+0xe28>
 8007b00:	29000084 	addi	r4,r5,2
 8007b04:	42000204 	addi	r8,r8,8
 8007b08:	100b883a 	mov	r5,r2
 8007b0c:	b5bffc04 	addi	r22,r22,-16
 8007b10:	9d800d0e 	bge	r19,r22,8007b48 <___vfiprintf_internal_r+0xe5c>
 8007b14:	18c00404 	addi	r3,r3,16
 8007b18:	28800044 	addi	r2,r5,1
 8007b1c:	44400015 	stw	r17,0(r8)
 8007b20:	44c00115 	stw	r19,4(r8)
 8007b24:	d8c11c15 	stw	r3,1136(sp)
 8007b28:	d8811b15 	stw	r2,1132(sp)
 8007b2c:	50bff40e 	bge	r10,r2,8007b00 <__alt_data_end+0xfc007b00>
 8007b30:	1800111e 	bne	r3,zero,8007b78 <___vfiprintf_internal_r+0xe8c>
 8007b34:	b5bffc04 	addi	r22,r22,-16
 8007b38:	000b883a 	mov	r5,zero
 8007b3c:	01000044 	movi	r4,1
 8007b40:	d811883a 	mov	r8,sp
 8007b44:	9dbff316 	blt	r19,r22,8007b14 <__alt_data_end+0xfc007b14>
 8007b48:	d9412617 	ldw	r5,1176(sp)
 8007b4c:	1d87883a 	add	r3,r3,r22
 8007b50:	45800115 	stw	r22,4(r8)
 8007b54:	41400015 	stw	r5,0(r8)
 8007b58:	d8c11c15 	stw	r3,1136(sp)
 8007b5c:	d9011b15 	stw	r4,1132(sp)
 8007b60:	008001c4 	movi	r2,7
 8007b64:	11008516 	blt	r2,r4,8007d7c <___vfiprintf_internal_r+0x1090>
 8007b68:	42000204 	addi	r8,r8,8
 8007b6c:	20800044 	addi	r2,r4,1
 8007b70:	200b883a 	mov	r5,r4
 8007b74:	003dfa06 	br	8007360 <__alt_data_end+0xfc007360>
 8007b78:	d9012117 	ldw	r4,1156(sp)
 8007b7c:	d9412017 	ldw	r5,1152(sp)
 8007b80:	d9811a04 	addi	r6,sp,1128
 8007b84:	da812a15 	stw	r10,1192(sp)
 8007b88:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007b8c:	da812a17 	ldw	r10,1192(sp)
 8007b90:	103f721e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007b94:	d9411b17 	ldw	r5,1132(sp)
 8007b98:	d8c11c17 	ldw	r3,1136(sp)
 8007b9c:	d811883a 	mov	r8,sp
 8007ba0:	29000044 	addi	r4,r5,1
 8007ba4:	003fd906 	br	8007b0c <__alt_data_end+0xfc007b0c>
 8007ba8:	1800681e 	bne	r3,zero,8007d4c <___vfiprintf_internal_r+0x1060>
 8007bac:	50004d26 	beq	r10,zero,8007ce4 <___vfiprintf_internal_r+0xff8>
 8007bb0:	d8811d04 	addi	r2,sp,1140
 8007bb4:	00c00084 	movi	r3,2
 8007bb8:	d8800015 	stw	r2,0(sp)
 8007bbc:	d8c00115 	stw	r3,4(sp)
 8007bc0:	2005883a 	mov	r2,r4
 8007bc4:	d811883a 	mov	r8,sp
 8007bc8:	003de006 	br	800734c <__alt_data_end+0xfc00734c>
 8007bcc:	1800551e 	bne	r3,zero,8007d24 <___vfiprintf_internal_r+0x1038>
 8007bd0:	000b883a 	mov	r5,zero
 8007bd4:	00800044 	movi	r2,1
 8007bd8:	d811883a 	mov	r8,sp
 8007bdc:	003dde06 	br	8007358 <__alt_data_end+0xfc007358>
 8007be0:	10803fcc 	andi	r2,r2,255
 8007be4:	1000191e 	bne	r2,zero,8007c4c <___vfiprintf_internal_r+0xf60>
 8007be8:	9080004c 	andi	r2,r18,1
 8007bec:	10001726 	beq	r2,zero,8007c4c <___vfiprintf_internal_r+0xf60>
 8007bf0:	00800c04 	movi	r2,48
 8007bf4:	d8c109c4 	addi	r3,sp,1063
 8007bf8:	d88109c5 	stb	r2,1063(sp)
 8007bfc:	dd012817 	ldw	r20,1184(sp)
 8007c00:	d8c12215 	stw	r3,1160(sp)
 8007c04:	003d8a06 	br	8007230 <__alt_data_end+0xfc007230>
 8007c08:	d9012717 	ldw	r4,1180(sp)
 8007c0c:	dd010a04 	addi	r20,sp,1064
 8007c10:	988003cc 	andi	r2,r19,15
 8007c14:	a806973a 	slli	r3,r21,28
 8007c18:	2085883a 	add	r2,r4,r2
 8007c1c:	9826d13a 	srli	r19,r19,4
 8007c20:	10800003 	ldbu	r2,0(r2)
 8007c24:	a82ad13a 	srli	r21,r21,4
 8007c28:	a53fffc4 	addi	r20,r20,-1
 8007c2c:	1ce6b03a 	or	r19,r3,r19
 8007c30:	a0800005 	stb	r2,0(r20)
 8007c34:	9d44b03a 	or	r2,r19,r21
 8007c38:	103ff51e 	bne	r2,zero,8007c10 <__alt_data_end+0xfc007c10>
 8007c3c:	d9411e17 	ldw	r5,1144(sp)
 8007c40:	dd012215 	stw	r20,1160(sp)
 8007c44:	2d29c83a 	sub	r20,r5,r20
 8007c48:	003d7906 	br	8007230 <__alt_data_end+0xfc007230>
 8007c4c:	d8c10a04 	addi	r3,sp,1064
 8007c50:	d8c12215 	stw	r3,1160(sp)
 8007c54:	003d7606 	br	8007230 <__alt_data_end+0xfc007230>
 8007c58:	18009e1e 	bne	r3,zero,8007ed4 <___vfiprintf_internal_r+0x11e8>
 8007c5c:	d8811d87 	ldb	r2,1142(sp)
 8007c60:	10005f26 	beq	r2,zero,8007de0 <___vfiprintf_internal_r+0x10f4>
 8007c64:	00c00044 	movi	r3,1
 8007c68:	d9011d84 	addi	r4,sp,1142
 8007c6c:	1805883a 	mov	r2,r3
 8007c70:	d9000015 	stw	r4,0(sp)
 8007c74:	d8c00115 	stw	r3,4(sp)
 8007c78:	d811883a 	mov	r8,sp
 8007c7c:	003efc06 	br	8007870 <__alt_data_end+0xfc007870>
 8007c80:	d9412417 	ldw	r5,1168(sp)
 8007c84:	d811883a 	mov	r8,sp
 8007c88:	2d65c83a 	sub	r18,r5,r21
 8007c8c:	04bf4816 	blt	zero,r18,80079b0 <__alt_data_end+0xfc0079b0>
 8007c90:	003f6c06 	br	8007a44 <__alt_data_end+0xfc007a44>
 8007c94:	b829883a 	mov	r20,r23
 8007c98:	003c6906 	br	8006e40 <__alt_data_end+0xfc006e40>
 8007c9c:	d9012117 	ldw	r4,1156(sp)
 8007ca0:	d9412017 	ldw	r5,1152(sp)
 8007ca4:	d9811a04 	addi	r6,sp,1128
 8007ca8:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007cac:	103f2b1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007cb0:	d8c11c17 	ldw	r3,1136(sp)
 8007cb4:	d811883a 	mov	r8,sp
 8007cb8:	003f3806 	br	800799c <__alt_data_end+0xfc00799c>
 8007cbc:	00800084 	movi	r2,2
 8007cc0:	9d46b03a 	or	r3,r19,r21
 8007cc4:	003df606 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007cc8:	d9012117 	ldw	r4,1156(sp)
 8007ccc:	d9412017 	ldw	r5,1152(sp)
 8007cd0:	d9811a04 	addi	r6,sp,1128
 8007cd4:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007cd8:	103f201e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007cdc:	d811883a 	mov	r8,sp
 8007ce0:	003cc606 	br	8006ffc <__alt_data_end+0xfc006ffc>
 8007ce4:	000b883a 	mov	r5,zero
 8007ce8:	2005883a 	mov	r2,r4
 8007cec:	d811883a 	mov	r8,sp
 8007cf0:	003d9906 	br	8007358 <__alt_data_end+0xfc007358>
 8007cf4:	10803fcc 	andi	r2,r2,255
 8007cf8:	1080201c 	xori	r2,r2,128
 8007cfc:	10bfe004 	addi	r2,r2,-128
 8007d00:	01000c04 	movi	r4,48
 8007d04:	1100b226 	beq	r2,r4,8007fd0 <___vfiprintf_internal_r+0x12e4>
 8007d08:	d9412217 	ldw	r5,1160(sp)
 8007d0c:	d8811e17 	ldw	r2,1144(sp)
 8007d10:	193fffc5 	stb	r4,-1(r3)
 8007d14:	297fffc4 	addi	r5,r5,-1
 8007d18:	d9412215 	stw	r5,1160(sp)
 8007d1c:	1169c83a 	sub	r20,r2,r5
 8007d20:	003d4306 	br	8007230 <__alt_data_end+0xfc007230>
 8007d24:	d9012117 	ldw	r4,1156(sp)
 8007d28:	d9412017 	ldw	r5,1152(sp)
 8007d2c:	d9811a04 	addi	r6,sp,1128
 8007d30:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007d34:	103f091e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007d38:	d9411b17 	ldw	r5,1132(sp)
 8007d3c:	d8c11c17 	ldw	r3,1136(sp)
 8007d40:	d811883a 	mov	r8,sp
 8007d44:	28800044 	addi	r2,r5,1
 8007d48:	003d8306 	br	8007358 <__alt_data_end+0xfc007358>
 8007d4c:	d9012117 	ldw	r4,1156(sp)
 8007d50:	d9412017 	ldw	r5,1152(sp)
 8007d54:	d9811a04 	addi	r6,sp,1128
 8007d58:	da812a15 	stw	r10,1192(sp)
 8007d5c:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007d60:	da812a17 	ldw	r10,1192(sp)
 8007d64:	103efd1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007d68:	d9411b17 	ldw	r5,1132(sp)
 8007d6c:	d8c11c17 	ldw	r3,1136(sp)
 8007d70:	d811883a 	mov	r8,sp
 8007d74:	28800044 	addi	r2,r5,1
 8007d78:	003d6a06 	br	8007324 <__alt_data_end+0xfc007324>
 8007d7c:	1800a01e 	bne	r3,zero,8008000 <___vfiprintf_internal_r+0x1314>
 8007d80:	000b883a 	mov	r5,zero
 8007d84:	00800044 	movi	r2,1
 8007d88:	d811883a 	mov	r8,sp
 8007d8c:	003d7406 	br	8007360 <__alt_data_end+0xfc007360>
 8007d90:	d9012117 	ldw	r4,1156(sp)
 8007d94:	d9412017 	ldw	r5,1152(sp)
 8007d98:	d9811a04 	addi	r6,sp,1128
 8007d9c:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007da0:	103eee1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007da4:	d8811b17 	ldw	r2,1132(sp)
 8007da8:	d8c11c17 	ldw	r3,1136(sp)
 8007dac:	d811883a 	mov	r8,sp
 8007db0:	10800044 	addi	r2,r2,1
 8007db4:	003d8f06 	br	80073f4 <__alt_data_end+0xfc0073f4>
 8007db8:	04e7c83a 	sub	r19,zero,r19
 8007dbc:	9804c03a 	cmpne	r2,r19,zero
 8007dc0:	056bc83a 	sub	r21,zero,r21
 8007dc4:	a8abc83a 	sub	r21,r21,r2
 8007dc8:	05800b44 	movi	r22,45
 8007dcc:	dd811d85 	stb	r22,1142(sp)
 8007dd0:	8029883a 	mov	r20,r16
 8007dd4:	00800044 	movi	r2,1
 8007dd8:	9d46b03a 	or	r3,r19,r21
 8007ddc:	003cfa06 	br	80071c8 <__alt_data_end+0xfc0071c8>
 8007de0:	000b883a 	mov	r5,zero
 8007de4:	00800044 	movi	r2,1
 8007de8:	d811883a 	mov	r8,sp
 8007dec:	503d5a26 	beq	r10,zero,8007358 <__alt_data_end+0xfc007358>
 8007df0:	00c00084 	movi	r3,2
 8007df4:	d9011d04 	addi	r4,sp,1140
 8007df8:	d9000015 	stw	r4,0(sp)
 8007dfc:	d8c00115 	stw	r3,4(sp)
 8007e00:	003d5206 	br	800734c <__alt_data_end+0xfc00734c>
 8007e04:	9080040c 	andi	r2,r18,16
 8007e08:	1000421e 	bne	r2,zero,8007f14 <___vfiprintf_internal_r+0x1228>
 8007e0c:	9480100c 	andi	r18,r18,64
 8007e10:	90009c26 	beq	r18,zero,8008084 <___vfiprintf_internal_r+0x1398>
 8007e14:	d9412317 	ldw	r5,1164(sp)
 8007e18:	d8c12517 	ldw	r3,1172(sp)
 8007e1c:	28800017 	ldw	r2,0(r5)
 8007e20:	29400104 	addi	r5,r5,4
 8007e24:	d9412315 	stw	r5,1164(sp)
 8007e28:	10c0000d 	sth	r3,0(r2)
 8007e2c:	003be706 	br	8006dcc <__alt_data_end+0xfc006dcc>
 8007e30:	90c0100c 	andi	r3,r18,64
 8007e34:	18003e26 	beq	r3,zero,8007f30 <___vfiprintf_internal_r+0x1244>
 8007e38:	d8c12317 	ldw	r3,1164(sp)
 8007e3c:	14c0000b 	ldhu	r19,0(r2)
 8007e40:	002b883a 	mov	r21,zero
 8007e44:	18c00104 	addi	r3,r3,4
 8007e48:	d8c12315 	stw	r3,1164(sp)
 8007e4c:	003db706 	br	800752c <__alt_data_end+0xfc00752c>
 8007e50:	9080100c 	andi	r2,r18,64
 8007e54:	10004c26 	beq	r2,zero,8007f88 <___vfiprintf_internal_r+0x129c>
 8007e58:	1cc0000f 	ldh	r19,0(r3)
 8007e5c:	d8812317 	ldw	r2,1164(sp)
 8007e60:	982bd7fa 	srai	r21,r19,31
 8007e64:	10800104 	addi	r2,r2,4
 8007e68:	d8812315 	stw	r2,1164(sp)
 8007e6c:	a805883a 	mov	r2,r21
 8007e70:	003cd006 	br	80071b4 <__alt_data_end+0xfc0071b4>
 8007e74:	00800084 	movi	r2,2
 8007e78:	003d8906 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007e7c:	b9800007 	ldb	r6,0(r23)
 8007e80:	003bfb06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007e84:	9080100c 	andi	r2,r18,64
 8007e88:	10003726 	beq	r2,zero,8007f68 <___vfiprintf_internal_r+0x127c>
 8007e8c:	d9412317 	ldw	r5,1164(sp)
 8007e90:	002b883a 	mov	r21,zero
 8007e94:	0005883a 	mov	r2,zero
 8007e98:	2cc0000b 	ldhu	r19,0(r5)
 8007e9c:	29400104 	addi	r5,r5,4
 8007ea0:	d9412315 	stw	r5,1164(sp)
 8007ea4:	9807883a 	mov	r3,r19
 8007ea8:	003d7d06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007eac:	9080100c 	andi	r2,r18,64
 8007eb0:	10002526 	beq	r2,zero,8007f48 <___vfiprintf_internal_r+0x125c>
 8007eb4:	d8812317 	ldw	r2,1164(sp)
 8007eb8:	002b883a 	mov	r21,zero
 8007ebc:	14c0000b 	ldhu	r19,0(r2)
 8007ec0:	10800104 	addi	r2,r2,4
 8007ec4:	d8812315 	stw	r2,1164(sp)
 8007ec8:	9807883a 	mov	r3,r19
 8007ecc:	00800044 	movi	r2,1
 8007ed0:	003d7306 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007ed4:	d9012117 	ldw	r4,1156(sp)
 8007ed8:	d9412017 	ldw	r5,1152(sp)
 8007edc:	d9811a04 	addi	r6,sp,1128
 8007ee0:	da812a15 	stw	r10,1192(sp)
 8007ee4:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8007ee8:	da812a17 	ldw	r10,1192(sp)
 8007eec:	103e9b1e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8007ef0:	d9411b17 	ldw	r5,1132(sp)
 8007ef4:	d8c11c17 	ldw	r3,1136(sp)
 8007ef8:	d811883a 	mov	r8,sp
 8007efc:	28800044 	addi	r2,r5,1
 8007f00:	003e5006 	br	8007844 <__alt_data_end+0xfc007844>
 8007f04:	182b883a 	mov	r21,r3
 8007f08:	003ed006 	br	8007a4c <__alt_data_end+0xfc007a4c>
 8007f0c:	8029883a 	mov	r20,r16
 8007f10:	003dc606 	br	800762c <__alt_data_end+0xfc00762c>
 8007f14:	d8c12317 	ldw	r3,1164(sp)
 8007f18:	d9012517 	ldw	r4,1172(sp)
 8007f1c:	18800017 	ldw	r2,0(r3)
 8007f20:	18c00104 	addi	r3,r3,4
 8007f24:	d8c12315 	stw	r3,1164(sp)
 8007f28:	11000015 	stw	r4,0(r2)
 8007f2c:	003ba706 	br	8006dcc <__alt_data_end+0xfc006dcc>
 8007f30:	d9012317 	ldw	r4,1164(sp)
 8007f34:	14c00017 	ldw	r19,0(r2)
 8007f38:	002b883a 	mov	r21,zero
 8007f3c:	21000104 	addi	r4,r4,4
 8007f40:	d9012315 	stw	r4,1164(sp)
 8007f44:	003d7906 	br	800752c <__alt_data_end+0xfc00752c>
 8007f48:	d8c12317 	ldw	r3,1164(sp)
 8007f4c:	002b883a 	mov	r21,zero
 8007f50:	00800044 	movi	r2,1
 8007f54:	1cc00017 	ldw	r19,0(r3)
 8007f58:	18c00104 	addi	r3,r3,4
 8007f5c:	d8c12315 	stw	r3,1164(sp)
 8007f60:	9807883a 	mov	r3,r19
 8007f64:	003d4e06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007f68:	d8812317 	ldw	r2,1164(sp)
 8007f6c:	002b883a 	mov	r21,zero
 8007f70:	14c00017 	ldw	r19,0(r2)
 8007f74:	10800104 	addi	r2,r2,4
 8007f78:	d8812315 	stw	r2,1164(sp)
 8007f7c:	9807883a 	mov	r3,r19
 8007f80:	0005883a 	mov	r2,zero
 8007f84:	003d4606 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007f88:	1cc00017 	ldw	r19,0(r3)
 8007f8c:	d8c12317 	ldw	r3,1164(sp)
 8007f90:	982bd7fa 	srai	r21,r19,31
 8007f94:	18c00104 	addi	r3,r3,4
 8007f98:	d8c12315 	stw	r3,1164(sp)
 8007f9c:	a805883a 	mov	r2,r21
 8007fa0:	003c8406 	br	80071b4 <__alt_data_end+0xfc0071b4>
 8007fa4:	01020074 	movhi	r4,2049
 8007fa8:	213d4204 	addi	r4,r4,-2808
 8007fac:	d9012615 	stw	r4,1176(sp)
 8007fb0:	003d0606 	br	80073cc <__alt_data_end+0xfc0073cc>
 8007fb4:	b9800043 	ldbu	r6,1(r23)
 8007fb8:	94800814 	ori	r18,r18,32
 8007fbc:	bdc00044 	addi	r23,r23,1
 8007fc0:	31803fcc 	andi	r6,r6,255
 8007fc4:	3180201c 	xori	r6,r6,128
 8007fc8:	31bfe004 	addi	r6,r6,-128
 8007fcc:	003ba806 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007fd0:	d8811e17 	ldw	r2,1144(sp)
 8007fd4:	d8c12217 	ldw	r3,1160(sp)
 8007fd8:	10e9c83a 	sub	r20,r2,r3
 8007fdc:	003c9406 	br	8007230 <__alt_data_end+0xfc007230>
 8007fe0:	da012a15 	stw	r8,1192(sp)
 8007fe4:	8006b400 	call	8006b40 <strlen>
 8007fe8:	1029883a 	mov	r20,r2
 8007fec:	dd811d83 	ldbu	r22,1142(sp)
 8007ff0:	dcc12315 	stw	r19,1164(sp)
 8007ff4:	0021883a 	mov	r16,zero
 8007ff8:	da012a17 	ldw	r8,1192(sp)
 8007ffc:	003c8c06 	br	8007230 <__alt_data_end+0xfc007230>
 8008000:	d9012117 	ldw	r4,1156(sp)
 8008004:	d9412017 	ldw	r5,1152(sp)
 8008008:	d9811a04 	addi	r6,sp,1128
 800800c:	8006bd80 	call	8006bd8 <__sprint_r.part.0>
 8008010:	103e521e 	bne	r2,zero,800795c <__alt_data_end+0xfc00795c>
 8008014:	d9411b17 	ldw	r5,1132(sp)
 8008018:	d8c11c17 	ldw	r3,1136(sp)
 800801c:	d811883a 	mov	r8,sp
 8008020:	28800044 	addi	r2,r5,1
 8008024:	003cce06 	br	8007360 <__alt_data_end+0xfc007360>
 8008028:	01420074 	movhi	r5,2049
 800802c:	297d4604 	addi	r5,r5,-2792
 8008030:	d9412615 	stw	r5,1176(sp)
 8008034:	d9411b17 	ldw	r5,1132(sp)
 8008038:	29400044 	addi	r5,r5,1
 800803c:	003cad06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 8008040:	00800184 	movi	r2,6
 8008044:	1400012e 	bgeu	r2,r16,800804c <___vfiprintf_internal_r+0x1360>
 8008048:	1021883a 	mov	r16,r2
 800804c:	8029883a 	mov	r20,r16
 8008050:	802b883a 	mov	r21,r16
 8008054:	80001c16 	blt	r16,zero,80080c8 <___vfiprintf_internal_r+0x13dc>
 8008058:	00c20074 	movhi	r3,2049
 800805c:	18fce604 	addi	r3,r3,-3176
 8008060:	dcc12315 	stw	r19,1164(sp)
 8008064:	d8c12215 	stw	r3,1160(sp)
 8008068:	003cff06 	br	8007468 <__alt_data_end+0xfc007468>
 800806c:	d9411b17 	ldw	r5,1132(sp)
 8008070:	00820074 	movhi	r2,2049
 8008074:	10bd4604 	addi	r2,r2,-2792
 8008078:	d8812615 	stw	r2,1176(sp)
 800807c:	29400044 	addi	r5,r5,1
 8008080:	003e6706 	br	8007a20 <__alt_data_end+0xfc007a20>
 8008084:	d9012317 	ldw	r4,1164(sp)
 8008088:	d9412517 	ldw	r5,1172(sp)
 800808c:	20800017 	ldw	r2,0(r4)
 8008090:	21000104 	addi	r4,r4,4
 8008094:	d9012315 	stw	r4,1164(sp)
 8008098:	11400015 	stw	r5,0(r2)
 800809c:	003b4b06 	br	8006dcc <__alt_data_end+0xfc006dcc>
 80080a0:	8029883a 	mov	r20,r16
 80080a4:	dd811d83 	ldbu	r22,1142(sp)
 80080a8:	dcc12315 	stw	r19,1164(sp)
 80080ac:	0021883a 	mov	r16,zero
 80080b0:	003c5f06 	br	8007230 <__alt_data_end+0xfc007230>
 80080b4:	01020074 	movhi	r4,2049
 80080b8:	213d4204 	addi	r4,r4,-2808
 80080bc:	d9012615 	stw	r4,1176(sp)
 80080c0:	1009883a 	mov	r4,r2
 80080c4:	003ea006 	br	8007b48 <__alt_data_end+0xfc007b48>
 80080c8:	002b883a 	mov	r21,zero
 80080cc:	003fe206 	br	8008058 <__alt_data_end+0xfc008058>
 80080d0:	d9412317 	ldw	r5,1164(sp)
 80080d4:	b807883a 	mov	r3,r23
 80080d8:	102f883a 	mov	r23,r2
 80080dc:	2c000017 	ldw	r16,0(r5)
 80080e0:	29000104 	addi	r4,r5,4
 80080e4:	d9012315 	stw	r4,1164(sp)
 80080e8:	80000416 	blt	r16,zero,80080fc <___vfiprintf_internal_r+0x1410>
 80080ec:	19800047 	ldb	r6,1(r3)
 80080f0:	003b5f06 	br	8006e70 <__alt_data_end+0xfc006e70>
 80080f4:	043fffc4 	movi	r16,-1
 80080f8:	003bef06 	br	80070b8 <__alt_data_end+0xfc0070b8>
 80080fc:	043fffc4 	movi	r16,-1
 8008100:	19800047 	ldb	r6,1(r3)
 8008104:	003b5a06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8008108:	282b883a 	mov	r21,r5
 800810c:	003cc706 	br	800742c <__alt_data_end+0xfc00742c>

08008110 <__vfiprintf_internal>:
 8008110:	2007883a 	mov	r3,r4
 8008114:	01020074 	movhi	r4,2049
 8008118:	21044304 	addi	r4,r4,4364
 800811c:	21000017 	ldw	r4,0(r4)
 8008120:	2805883a 	mov	r2,r5
 8008124:	300f883a 	mov	r7,r6
 8008128:	180b883a 	mov	r5,r3
 800812c:	100d883a 	mov	r6,r2
 8008130:	8006cec1 	jmpi	8006cec <___vfiprintf_internal_r>

08008134 <_write_r>:
 8008134:	defffd04 	addi	sp,sp,-12
 8008138:	dc000015 	stw	r16,0(sp)
 800813c:	04020074 	movhi	r16,2049
 8008140:	dc400115 	stw	r17,4(sp)
 8008144:	840b1304 	addi	r16,r16,11340
 8008148:	2023883a 	mov	r17,r4
 800814c:	2809883a 	mov	r4,r5
 8008150:	300b883a 	mov	r5,r6
 8008154:	380d883a 	mov	r6,r7
 8008158:	dfc00215 	stw	ra,8(sp)
 800815c:	80000015 	stw	zero,0(r16)
 8008160:	800d4c00 	call	800d4c0 <write>
 8008164:	00ffffc4 	movi	r3,-1
 8008168:	10c00526 	beq	r2,r3,8008180 <_write_r+0x4c>
 800816c:	dfc00217 	ldw	ra,8(sp)
 8008170:	dc400117 	ldw	r17,4(sp)
 8008174:	dc000017 	ldw	r16,0(sp)
 8008178:	dec00304 	addi	sp,sp,12
 800817c:	f800283a 	ret
 8008180:	80c00017 	ldw	r3,0(r16)
 8008184:	183ff926 	beq	r3,zero,800816c <__alt_data_end+0xfc00816c>
 8008188:	88c00015 	stw	r3,0(r17)
 800818c:	003ff706 	br	800816c <__alt_data_end+0xfc00816c>

08008190 <_close_r>:
 8008190:	defffd04 	addi	sp,sp,-12
 8008194:	dc000015 	stw	r16,0(sp)
 8008198:	04020074 	movhi	r16,2049
 800819c:	dc400115 	stw	r17,4(sp)
 80081a0:	840b1304 	addi	r16,r16,11340
 80081a4:	2023883a 	mov	r17,r4
 80081a8:	2809883a 	mov	r4,r5
 80081ac:	dfc00215 	stw	ra,8(sp)
 80081b0:	80000015 	stw	zero,0(r16)
 80081b4:	800cc1c0 	call	800cc1c <close>
 80081b8:	00ffffc4 	movi	r3,-1
 80081bc:	10c00526 	beq	r2,r3,80081d4 <_close_r+0x44>
 80081c0:	dfc00217 	ldw	ra,8(sp)
 80081c4:	dc400117 	ldw	r17,4(sp)
 80081c8:	dc000017 	ldw	r16,0(sp)
 80081cc:	dec00304 	addi	sp,sp,12
 80081d0:	f800283a 	ret
 80081d4:	80c00017 	ldw	r3,0(r16)
 80081d8:	183ff926 	beq	r3,zero,80081c0 <__alt_data_end+0xfc0081c0>
 80081dc:	88c00015 	stw	r3,0(r17)
 80081e0:	003ff706 	br	80081c0 <__alt_data_end+0xfc0081c0>

080081e4 <_calloc_r>:
 80081e4:	defffe04 	addi	sp,sp,-8
 80081e8:	dc000015 	stw	r16,0(sp)
 80081ec:	2021883a 	mov	r16,r4
 80081f0:	2809883a 	mov	r4,r5
 80081f4:	300b883a 	mov	r5,r6
 80081f8:	dfc00115 	stw	ra,4(sp)
 80081fc:	800a3a80 	call	800a3a8 <__mulsi3>
 8008200:	8009883a 	mov	r4,r16
 8008204:	100b883a 	mov	r5,r2
 8008208:	8004d640 	call	8004d64 <_malloc_r>
 800820c:	1021883a 	mov	r16,r2
 8008210:	10002826 	beq	r2,zero,80082b4 <_calloc_r+0xd0>
 8008214:	11bfff17 	ldw	r6,-4(r2)
 8008218:	00bfff04 	movi	r2,-4
 800821c:	00c00904 	movi	r3,36
 8008220:	308c703a 	and	r6,r6,r2
 8008224:	308d883a 	add	r6,r6,r2
 8008228:	19801436 	bltu	r3,r6,800827c <_calloc_r+0x98>
 800822c:	008004c4 	movi	r2,19
 8008230:	11800936 	bltu	r2,r6,8008258 <_calloc_r+0x74>
 8008234:	8005883a 	mov	r2,r16
 8008238:	10000015 	stw	zero,0(r2)
 800823c:	10000115 	stw	zero,4(r2)
 8008240:	10000215 	stw	zero,8(r2)
 8008244:	8005883a 	mov	r2,r16
 8008248:	dfc00117 	ldw	ra,4(sp)
 800824c:	dc000017 	ldw	r16,0(sp)
 8008250:	dec00204 	addi	sp,sp,8
 8008254:	f800283a 	ret
 8008258:	80000015 	stw	zero,0(r16)
 800825c:	80000115 	stw	zero,4(r16)
 8008260:	008006c4 	movi	r2,27
 8008264:	11800d2e 	bgeu	r2,r6,800829c <_calloc_r+0xb8>
 8008268:	80000215 	stw	zero,8(r16)
 800826c:	80000315 	stw	zero,12(r16)
 8008270:	30c00c26 	beq	r6,r3,80082a4 <_calloc_r+0xc0>
 8008274:	80800404 	addi	r2,r16,16
 8008278:	003fef06 	br	8008238 <__alt_data_end+0xfc008238>
 800827c:	8009883a 	mov	r4,r16
 8008280:	000b883a 	mov	r5,zero
 8008284:	800572c0 	call	800572c <memset>
 8008288:	8005883a 	mov	r2,r16
 800828c:	dfc00117 	ldw	ra,4(sp)
 8008290:	dc000017 	ldw	r16,0(sp)
 8008294:	dec00204 	addi	sp,sp,8
 8008298:	f800283a 	ret
 800829c:	80800204 	addi	r2,r16,8
 80082a0:	003fe506 	br	8008238 <__alt_data_end+0xfc008238>
 80082a4:	80000415 	stw	zero,16(r16)
 80082a8:	80800604 	addi	r2,r16,24
 80082ac:	80000515 	stw	zero,20(r16)
 80082b0:	003fe106 	br	8008238 <__alt_data_end+0xfc008238>
 80082b4:	0005883a 	mov	r2,zero
 80082b8:	003fe306 	br	8008248 <__alt_data_end+0xfc008248>

080082bc <_fclose_r>:
 80082bc:	28003226 	beq	r5,zero,8008388 <_fclose_r+0xcc>
 80082c0:	defffc04 	addi	sp,sp,-16
 80082c4:	dc400115 	stw	r17,4(sp)
 80082c8:	2023883a 	mov	r17,r4
 80082cc:	dc000015 	stw	r16,0(sp)
 80082d0:	dfc00315 	stw	ra,12(sp)
 80082d4:	dc800215 	stw	r18,8(sp)
 80082d8:	2821883a 	mov	r16,r5
 80082dc:	80045080 	call	8004508 <__sfp_lock_acquire>
 80082e0:	88000226 	beq	r17,zero,80082ec <_fclose_r+0x30>
 80082e4:	88800e17 	ldw	r2,56(r17)
 80082e8:	10002926 	beq	r2,zero,8008390 <_fclose_r+0xd4>
 80082ec:	8080030f 	ldh	r2,12(r16)
 80082f0:	10002226 	beq	r2,zero,800837c <_fclose_r+0xc0>
 80082f4:	8809883a 	mov	r4,r17
 80082f8:	800b883a 	mov	r5,r16
 80082fc:	8003f3c0 	call	8003f3c <_fflush_r>
 8008300:	1025883a 	mov	r18,r2
 8008304:	80800b17 	ldw	r2,44(r16)
 8008308:	10000426 	beq	r2,zero,800831c <_fclose_r+0x60>
 800830c:	81400717 	ldw	r5,28(r16)
 8008310:	8809883a 	mov	r4,r17
 8008314:	103ee83a 	callr	r2
 8008318:	10002616 	blt	r2,zero,80083b4 <_fclose_r+0xf8>
 800831c:	8080030b 	ldhu	r2,12(r16)
 8008320:	1080200c 	andi	r2,r2,128
 8008324:	10001f1e 	bne	r2,zero,80083a4 <_fclose_r+0xe8>
 8008328:	81400c17 	ldw	r5,48(r16)
 800832c:	28000526 	beq	r5,zero,8008344 <_fclose_r+0x88>
 8008330:	80801004 	addi	r2,r16,64
 8008334:	28800226 	beq	r5,r2,8008340 <_fclose_r+0x84>
 8008338:	8809883a 	mov	r4,r17
 800833c:	800466c0 	call	800466c <_free_r>
 8008340:	80000c15 	stw	zero,48(r16)
 8008344:	81401117 	ldw	r5,68(r16)
 8008348:	28000326 	beq	r5,zero,8008358 <_fclose_r+0x9c>
 800834c:	8809883a 	mov	r4,r17
 8008350:	800466c0 	call	800466c <_free_r>
 8008354:	80001115 	stw	zero,68(r16)
 8008358:	8000030d 	sth	zero,12(r16)
 800835c:	800450c0 	call	800450c <__sfp_lock_release>
 8008360:	9005883a 	mov	r2,r18
 8008364:	dfc00317 	ldw	ra,12(sp)
 8008368:	dc800217 	ldw	r18,8(sp)
 800836c:	dc400117 	ldw	r17,4(sp)
 8008370:	dc000017 	ldw	r16,0(sp)
 8008374:	dec00404 	addi	sp,sp,16
 8008378:	f800283a 	ret
 800837c:	800450c0 	call	800450c <__sfp_lock_release>
 8008380:	0005883a 	mov	r2,zero
 8008384:	003ff706 	br	8008364 <__alt_data_end+0xfc008364>
 8008388:	0005883a 	mov	r2,zero
 800838c:	f800283a 	ret
 8008390:	8809883a 	mov	r4,r17
 8008394:	80044f80 	call	80044f8 <__sinit>
 8008398:	8080030f 	ldh	r2,12(r16)
 800839c:	103fd51e 	bne	r2,zero,80082f4 <__alt_data_end+0xfc0082f4>
 80083a0:	003ff606 	br	800837c <__alt_data_end+0xfc00837c>
 80083a4:	81400417 	ldw	r5,16(r16)
 80083a8:	8809883a 	mov	r4,r17
 80083ac:	800466c0 	call	800466c <_free_r>
 80083b0:	003fdd06 	br	8008328 <__alt_data_end+0xfc008328>
 80083b4:	04bfffc4 	movi	r18,-1
 80083b8:	003fd806 	br	800831c <__alt_data_end+0xfc00831c>

080083bc <fclose>:
 80083bc:	00820074 	movhi	r2,2049
 80083c0:	10844304 	addi	r2,r2,4364
 80083c4:	200b883a 	mov	r5,r4
 80083c8:	11000017 	ldw	r4,0(r2)
 80083cc:	80082bc1 	jmpi	80082bc <_fclose_r>

080083d0 <_fputwc_r>:
 80083d0:	3080030b 	ldhu	r2,12(r6)
 80083d4:	defff804 	addi	sp,sp,-32
 80083d8:	dcc00415 	stw	r19,16(sp)
 80083dc:	dc800315 	stw	r18,12(sp)
 80083e0:	dc000115 	stw	r16,4(sp)
 80083e4:	dfc00715 	stw	ra,28(sp)
 80083e8:	dd400615 	stw	r21,24(sp)
 80083ec:	dd000515 	stw	r20,20(sp)
 80083f0:	dc400215 	stw	r17,8(sp)
 80083f4:	10c8000c 	andi	r3,r2,8192
 80083f8:	3021883a 	mov	r16,r6
 80083fc:	2027883a 	mov	r19,r4
 8008400:	2825883a 	mov	r18,r5
 8008404:	1800051e 	bne	r3,zero,800841c <_fputwc_r+0x4c>
 8008408:	30c01917 	ldw	r3,100(r6)
 800840c:	10880014 	ori	r2,r2,8192
 8008410:	3080030d 	sth	r2,12(r6)
 8008414:	18880014 	ori	r2,r3,8192
 8008418:	30801915 	stw	r2,100(r6)
 800841c:	8004b540 	call	8004b54 <__locale_mb_cur_max>
 8008420:	00c00044 	movi	r3,1
 8008424:	10c03e26 	beq	r2,r3,8008520 <_fputwc_r+0x150>
 8008428:	9809883a 	mov	r4,r19
 800842c:	d80b883a 	mov	r5,sp
 8008430:	900d883a 	mov	r6,r18
 8008434:	81c01704 	addi	r7,r16,92
 8008438:	80094200 	call	8009420 <_wcrtomb_r>
 800843c:	1029883a 	mov	r20,r2
 8008440:	00bfffc4 	movi	r2,-1
 8008444:	a0802026 	beq	r20,r2,80084c8 <_fputwc_r+0xf8>
 8008448:	d9400003 	ldbu	r5,0(sp)
 800844c:	a0001c26 	beq	r20,zero,80084c0 <_fputwc_r+0xf0>
 8008450:	0023883a 	mov	r17,zero
 8008454:	05400284 	movi	r21,10
 8008458:	00000906 	br	8008480 <_fputwc_r+0xb0>
 800845c:	80800017 	ldw	r2,0(r16)
 8008460:	11400005 	stb	r5,0(r2)
 8008464:	80c00017 	ldw	r3,0(r16)
 8008468:	18c00044 	addi	r3,r3,1
 800846c:	80c00015 	stw	r3,0(r16)
 8008470:	8c400044 	addi	r17,r17,1
 8008474:	dc45883a 	add	r2,sp,r17
 8008478:	8d00112e 	bgeu	r17,r20,80084c0 <_fputwc_r+0xf0>
 800847c:	11400003 	ldbu	r5,0(r2)
 8008480:	80c00217 	ldw	r3,8(r16)
 8008484:	18ffffc4 	addi	r3,r3,-1
 8008488:	80c00215 	stw	r3,8(r16)
 800848c:	183ff30e 	bge	r3,zero,800845c <__alt_data_end+0xfc00845c>
 8008490:	80800617 	ldw	r2,24(r16)
 8008494:	18801916 	blt	r3,r2,80084fc <_fputwc_r+0x12c>
 8008498:	80800017 	ldw	r2,0(r16)
 800849c:	11400005 	stb	r5,0(r2)
 80084a0:	80800017 	ldw	r2,0(r16)
 80084a4:	10c00003 	ldbu	r3,0(r2)
 80084a8:	10800044 	addi	r2,r2,1
 80084ac:	1d402326 	beq	r3,r21,800853c <_fputwc_r+0x16c>
 80084b0:	80800015 	stw	r2,0(r16)
 80084b4:	8c400044 	addi	r17,r17,1
 80084b8:	dc45883a 	add	r2,sp,r17
 80084bc:	8d3fef36 	bltu	r17,r20,800847c <__alt_data_end+0xfc00847c>
 80084c0:	9005883a 	mov	r2,r18
 80084c4:	00000406 	br	80084d8 <_fputwc_r+0x108>
 80084c8:	80c0030b 	ldhu	r3,12(r16)
 80084cc:	a005883a 	mov	r2,r20
 80084d0:	18c01014 	ori	r3,r3,64
 80084d4:	80c0030d 	sth	r3,12(r16)
 80084d8:	dfc00717 	ldw	ra,28(sp)
 80084dc:	dd400617 	ldw	r21,24(sp)
 80084e0:	dd000517 	ldw	r20,20(sp)
 80084e4:	dcc00417 	ldw	r19,16(sp)
 80084e8:	dc800317 	ldw	r18,12(sp)
 80084ec:	dc400217 	ldw	r17,8(sp)
 80084f0:	dc000117 	ldw	r16,4(sp)
 80084f4:	dec00804 	addi	sp,sp,32
 80084f8:	f800283a 	ret
 80084fc:	9809883a 	mov	r4,r19
 8008500:	29403fcc 	andi	r5,r5,255
 8008504:	800d883a 	mov	r6,r16
 8008508:	80092b00 	call	80092b0 <__swbuf_r>
 800850c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008510:	10803fcc 	andi	r2,r2,255
 8008514:	103fd626 	beq	r2,zero,8008470 <__alt_data_end+0xfc008470>
 8008518:	00bfffc4 	movi	r2,-1
 800851c:	003fee06 	br	80084d8 <__alt_data_end+0xfc0084d8>
 8008520:	90ffffc4 	addi	r3,r18,-1
 8008524:	01003f84 	movi	r4,254
 8008528:	20ffbf36 	bltu	r4,r3,8008428 <__alt_data_end+0xfc008428>
 800852c:	900b883a 	mov	r5,r18
 8008530:	dc800005 	stb	r18,0(sp)
 8008534:	1029883a 	mov	r20,r2
 8008538:	003fc506 	br	8008450 <__alt_data_end+0xfc008450>
 800853c:	9809883a 	mov	r4,r19
 8008540:	a80b883a 	mov	r5,r21
 8008544:	800d883a 	mov	r6,r16
 8008548:	80092b00 	call	80092b0 <__swbuf_r>
 800854c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008550:	003fef06 	br	8008510 <__alt_data_end+0xfc008510>

08008554 <fputwc>:
 8008554:	defffc04 	addi	sp,sp,-16
 8008558:	dc000115 	stw	r16,4(sp)
 800855c:	04020074 	movhi	r16,2049
 8008560:	84044304 	addi	r16,r16,4364
 8008564:	dc400215 	stw	r17,8(sp)
 8008568:	2023883a 	mov	r17,r4
 800856c:	81000017 	ldw	r4,0(r16)
 8008570:	dfc00315 	stw	ra,12(sp)
 8008574:	280d883a 	mov	r6,r5
 8008578:	20000626 	beq	r4,zero,8008594 <fputwc+0x40>
 800857c:	20800e17 	ldw	r2,56(r4)
 8008580:	1000041e 	bne	r2,zero,8008594 <fputwc+0x40>
 8008584:	d9400015 	stw	r5,0(sp)
 8008588:	80044f80 	call	80044f8 <__sinit>
 800858c:	81000017 	ldw	r4,0(r16)
 8008590:	d9800017 	ldw	r6,0(sp)
 8008594:	880b883a 	mov	r5,r17
 8008598:	dfc00317 	ldw	ra,12(sp)
 800859c:	dc400217 	ldw	r17,8(sp)
 80085a0:	dc000117 	ldw	r16,4(sp)
 80085a4:	dec00404 	addi	sp,sp,16
 80085a8:	80083d01 	jmpi	80083d0 <_fputwc_r>

080085ac <_fstat_r>:
 80085ac:	defffd04 	addi	sp,sp,-12
 80085b0:	dc000015 	stw	r16,0(sp)
 80085b4:	04020074 	movhi	r16,2049
 80085b8:	dc400115 	stw	r17,4(sp)
 80085bc:	840b1304 	addi	r16,r16,11340
 80085c0:	2023883a 	mov	r17,r4
 80085c4:	2809883a 	mov	r4,r5
 80085c8:	300b883a 	mov	r5,r6
 80085cc:	dfc00215 	stw	ra,8(sp)
 80085d0:	80000015 	stw	zero,0(r16)
 80085d4:	800cd700 	call	800cd70 <fstat>
 80085d8:	00ffffc4 	movi	r3,-1
 80085dc:	10c00526 	beq	r2,r3,80085f4 <_fstat_r+0x48>
 80085e0:	dfc00217 	ldw	ra,8(sp)
 80085e4:	dc400117 	ldw	r17,4(sp)
 80085e8:	dc000017 	ldw	r16,0(sp)
 80085ec:	dec00304 	addi	sp,sp,12
 80085f0:	f800283a 	ret
 80085f4:	80c00017 	ldw	r3,0(r16)
 80085f8:	183ff926 	beq	r3,zero,80085e0 <__alt_data_end+0xfc0085e0>
 80085fc:	88c00015 	stw	r3,0(r17)
 8008600:	003ff706 	br	80085e0 <__alt_data_end+0xfc0085e0>

08008604 <__sfvwrite_r>:
 8008604:	30800217 	ldw	r2,8(r6)
 8008608:	10004526 	beq	r2,zero,8008720 <__sfvwrite_r+0x11c>
 800860c:	28c0030b 	ldhu	r3,12(r5)
 8008610:	defff404 	addi	sp,sp,-48
 8008614:	dd400715 	stw	r21,28(sp)
 8008618:	dcc00515 	stw	r19,20(sp)
 800861c:	dc000215 	stw	r16,8(sp)
 8008620:	dfc00b15 	stw	ra,44(sp)
 8008624:	df000a15 	stw	fp,40(sp)
 8008628:	ddc00915 	stw	r23,36(sp)
 800862c:	dd800815 	stw	r22,32(sp)
 8008630:	dd000615 	stw	r20,24(sp)
 8008634:	dc800415 	stw	r18,16(sp)
 8008638:	dc400315 	stw	r17,12(sp)
 800863c:	1880020c 	andi	r2,r3,8
 8008640:	2821883a 	mov	r16,r5
 8008644:	202b883a 	mov	r21,r4
 8008648:	3027883a 	mov	r19,r6
 800864c:	10002526 	beq	r2,zero,80086e4 <__sfvwrite_r+0xe0>
 8008650:	28800417 	ldw	r2,16(r5)
 8008654:	10002326 	beq	r2,zero,80086e4 <__sfvwrite_r+0xe0>
 8008658:	1880008c 	andi	r2,r3,2
 800865c:	9c400017 	ldw	r17,0(r19)
 8008660:	10003126 	beq	r2,zero,8008728 <__sfvwrite_r+0x124>
 8008664:	0029883a 	mov	r20,zero
 8008668:	0025883a 	mov	r18,zero
 800866c:	05810004 	movi	r22,1024
 8008670:	a00d883a 	mov	r6,r20
 8008674:	a809883a 	mov	r4,r21
 8008678:	90002526 	beq	r18,zero,8008710 <__sfvwrite_r+0x10c>
 800867c:	900f883a 	mov	r7,r18
 8008680:	81400717 	ldw	r5,28(r16)
 8008684:	b480012e 	bgeu	r22,r18,800868c <__sfvwrite_r+0x88>
 8008688:	01c10004 	movi	r7,1024
 800868c:	80800917 	ldw	r2,36(r16)
 8008690:	103ee83a 	callr	r2
 8008694:	0080510e 	bge	zero,r2,80087dc <__sfvwrite_r+0x1d8>
 8008698:	98c00217 	ldw	r3,8(r19)
 800869c:	a0a9883a 	add	r20,r20,r2
 80086a0:	90a5c83a 	sub	r18,r18,r2
 80086a4:	1885c83a 	sub	r2,r3,r2
 80086a8:	98800215 	stw	r2,8(r19)
 80086ac:	103ff01e 	bne	r2,zero,8008670 <__alt_data_end+0xfc008670>
 80086b0:	0005883a 	mov	r2,zero
 80086b4:	dfc00b17 	ldw	ra,44(sp)
 80086b8:	df000a17 	ldw	fp,40(sp)
 80086bc:	ddc00917 	ldw	r23,36(sp)
 80086c0:	dd800817 	ldw	r22,32(sp)
 80086c4:	dd400717 	ldw	r21,28(sp)
 80086c8:	dd000617 	ldw	r20,24(sp)
 80086cc:	dcc00517 	ldw	r19,20(sp)
 80086d0:	dc800417 	ldw	r18,16(sp)
 80086d4:	dc400317 	ldw	r17,12(sp)
 80086d8:	dc000217 	ldw	r16,8(sp)
 80086dc:	dec00c04 	addi	sp,sp,48
 80086e0:	f800283a 	ret
 80086e4:	a809883a 	mov	r4,r21
 80086e8:	800b883a 	mov	r5,r16
 80086ec:	80024bc0 	call	80024bc <__swsetup_r>
 80086f0:	80c0030b 	ldhu	r3,12(r16)
 80086f4:	103fd826 	beq	r2,zero,8008658 <__alt_data_end+0xfc008658>
 80086f8:	18c01014 	ori	r3,r3,64
 80086fc:	80c0030d 	sth	r3,12(r16)
 8008700:	00c00244 	movi	r3,9
 8008704:	00bfffc4 	movi	r2,-1
 8008708:	a8c00015 	stw	r3,0(r21)
 800870c:	003fe906 	br	80086b4 <__alt_data_end+0xfc0086b4>
 8008710:	8d000017 	ldw	r20,0(r17)
 8008714:	8c800117 	ldw	r18,4(r17)
 8008718:	8c400204 	addi	r17,r17,8
 800871c:	003fd406 	br	8008670 <__alt_data_end+0xfc008670>
 8008720:	0005883a 	mov	r2,zero
 8008724:	f800283a 	ret
 8008728:	1880004c 	andi	r2,r3,1
 800872c:	1000301e 	bne	r2,zero,80087f0 <__sfvwrite_r+0x1ec>
 8008730:	002f883a 	mov	r23,zero
 8008734:	0025883a 	mov	r18,zero
 8008738:	90001c26 	beq	r18,zero,80087ac <__sfvwrite_r+0x1a8>
 800873c:	1880800c 	andi	r2,r3,512
 8008740:	85000217 	ldw	r20,8(r16)
 8008744:	10006c26 	beq	r2,zero,80088f8 <__sfvwrite_r+0x2f4>
 8008748:	a02d883a 	mov	r22,r20
 800874c:	95008536 	bltu	r18,r20,8008964 <__sfvwrite_r+0x360>
 8008750:	1881200c 	andi	r2,r3,1152
 8008754:	10009d1e 	bne	r2,zero,80089cc <__sfvwrite_r+0x3c8>
 8008758:	81000017 	ldw	r4,0(r16)
 800875c:	a039883a 	mov	fp,r20
 8008760:	9029883a 	mov	r20,r18
 8008764:	b80b883a 	mov	r5,r23
 8008768:	b00d883a 	mov	r6,r22
 800876c:	8008b580 	call	8008b58 <memmove>
 8008770:	80c00217 	ldw	r3,8(r16)
 8008774:	81000017 	ldw	r4,0(r16)
 8008778:	9005883a 	mov	r2,r18
 800877c:	1f39c83a 	sub	fp,r3,fp
 8008780:	258f883a 	add	r7,r4,r22
 8008784:	87000215 	stw	fp,8(r16)
 8008788:	81c00015 	stw	r7,0(r16)
 800878c:	98c00217 	ldw	r3,8(r19)
 8008790:	b8af883a 	add	r23,r23,r2
 8008794:	90a5c83a 	sub	r18,r18,r2
 8008798:	1d05c83a 	sub	r2,r3,r20
 800879c:	98800215 	stw	r2,8(r19)
 80087a0:	103fc326 	beq	r2,zero,80086b0 <__alt_data_end+0xfc0086b0>
 80087a4:	80c0030b 	ldhu	r3,12(r16)
 80087a8:	903fe41e 	bne	r18,zero,800873c <__alt_data_end+0xfc00873c>
 80087ac:	8dc00017 	ldw	r23,0(r17)
 80087b0:	8c800117 	ldw	r18,4(r17)
 80087b4:	8c400204 	addi	r17,r17,8
 80087b8:	003fdf06 	br	8008738 <__alt_data_end+0xfc008738>
 80087bc:	8008d100 	call	8008d10 <_realloc_r>
 80087c0:	102d883a 	mov	r22,r2
 80087c4:	1000a01e 	bne	r2,zero,8008a48 <__sfvwrite_r+0x444>
 80087c8:	81400417 	ldw	r5,16(r16)
 80087cc:	a809883a 	mov	r4,r21
 80087d0:	800466c0 	call	800466c <_free_r>
 80087d4:	00800304 	movi	r2,12
 80087d8:	a8800015 	stw	r2,0(r21)
 80087dc:	80c0030b 	ldhu	r3,12(r16)
 80087e0:	00bfffc4 	movi	r2,-1
 80087e4:	18c01014 	ori	r3,r3,64
 80087e8:	80c0030d 	sth	r3,12(r16)
 80087ec:	003fb106 	br	80086b4 <__alt_data_end+0xfc0086b4>
 80087f0:	0029883a 	mov	r20,zero
 80087f4:	0011883a 	mov	r8,zero
 80087f8:	0039883a 	mov	fp,zero
 80087fc:	0025883a 	mov	r18,zero
 8008800:	90001f26 	beq	r18,zero,8008880 <__sfvwrite_r+0x27c>
 8008804:	40006826 	beq	r8,zero,80089a8 <__sfvwrite_r+0x3a4>
 8008808:	a02f883a 	mov	r23,r20
 800880c:	9500012e 	bgeu	r18,r20,8008814 <__sfvwrite_r+0x210>
 8008810:	902f883a 	mov	r23,r18
 8008814:	81000017 	ldw	r4,0(r16)
 8008818:	80800417 	ldw	r2,16(r16)
 800881c:	b82d883a 	mov	r22,r23
 8008820:	81800217 	ldw	r6,8(r16)
 8008824:	81c00517 	ldw	r7,20(r16)
 8008828:	1100022e 	bgeu	r2,r4,8008834 <__sfvwrite_r+0x230>
 800882c:	31c7883a 	add	r3,r6,r7
 8008830:	1dc01816 	blt	r3,r23,8008894 <__sfvwrite_r+0x290>
 8008834:	b9c03f16 	blt	r23,r7,8008934 <__sfvwrite_r+0x330>
 8008838:	80800917 	ldw	r2,36(r16)
 800883c:	81400717 	ldw	r5,28(r16)
 8008840:	a809883a 	mov	r4,r21
 8008844:	da000115 	stw	r8,4(sp)
 8008848:	e00d883a 	mov	r6,fp
 800884c:	103ee83a 	callr	r2
 8008850:	102d883a 	mov	r22,r2
 8008854:	da000117 	ldw	r8,4(sp)
 8008858:	00bfe00e 	bge	zero,r2,80087dc <__alt_data_end+0xfc0087dc>
 800885c:	a5a9c83a 	sub	r20,r20,r22
 8008860:	a0001f26 	beq	r20,zero,80088e0 <__sfvwrite_r+0x2dc>
 8008864:	98800217 	ldw	r2,8(r19)
 8008868:	e5b9883a 	add	fp,fp,r22
 800886c:	95a5c83a 	sub	r18,r18,r22
 8008870:	15adc83a 	sub	r22,r2,r22
 8008874:	9d800215 	stw	r22,8(r19)
 8008878:	b03f8d26 	beq	r22,zero,80086b0 <__alt_data_end+0xfc0086b0>
 800887c:	903fe11e 	bne	r18,zero,8008804 <__alt_data_end+0xfc008804>
 8008880:	8f000017 	ldw	fp,0(r17)
 8008884:	8c800117 	ldw	r18,4(r17)
 8008888:	0011883a 	mov	r8,zero
 800888c:	8c400204 	addi	r17,r17,8
 8008890:	003fdb06 	br	8008800 <__alt_data_end+0xfc008800>
 8008894:	180d883a 	mov	r6,r3
 8008898:	e00b883a 	mov	r5,fp
 800889c:	da000115 	stw	r8,4(sp)
 80088a0:	d8c00015 	stw	r3,0(sp)
 80088a4:	8008b580 	call	8008b58 <memmove>
 80088a8:	d8c00017 	ldw	r3,0(sp)
 80088ac:	80800017 	ldw	r2,0(r16)
 80088b0:	a809883a 	mov	r4,r21
 80088b4:	800b883a 	mov	r5,r16
 80088b8:	10c5883a 	add	r2,r2,r3
 80088bc:	80800015 	stw	r2,0(r16)
 80088c0:	d8c00015 	stw	r3,0(sp)
 80088c4:	8003f3c0 	call	8003f3c <_fflush_r>
 80088c8:	d8c00017 	ldw	r3,0(sp)
 80088cc:	da000117 	ldw	r8,4(sp)
 80088d0:	103fc21e 	bne	r2,zero,80087dc <__alt_data_end+0xfc0087dc>
 80088d4:	182d883a 	mov	r22,r3
 80088d8:	a5a9c83a 	sub	r20,r20,r22
 80088dc:	a03fe11e 	bne	r20,zero,8008864 <__alt_data_end+0xfc008864>
 80088e0:	a809883a 	mov	r4,r21
 80088e4:	800b883a 	mov	r5,r16
 80088e8:	8003f3c0 	call	8003f3c <_fflush_r>
 80088ec:	103fbb1e 	bne	r2,zero,80087dc <__alt_data_end+0xfc0087dc>
 80088f0:	0011883a 	mov	r8,zero
 80088f4:	003fdb06 	br	8008864 <__alt_data_end+0xfc008864>
 80088f8:	81000017 	ldw	r4,0(r16)
 80088fc:	80800417 	ldw	r2,16(r16)
 8008900:	1100012e 	bgeu	r2,r4,8008908 <__sfvwrite_r+0x304>
 8008904:	a4805a36 	bltu	r20,r18,8008a70 <__sfvwrite_r+0x46c>
 8008908:	81c00517 	ldw	r7,20(r16)
 800890c:	91c01a36 	bltu	r18,r7,8008978 <__sfvwrite_r+0x374>
 8008910:	80800917 	ldw	r2,36(r16)
 8008914:	81400717 	ldw	r5,28(r16)
 8008918:	a809883a 	mov	r4,r21
 800891c:	b80d883a 	mov	r6,r23
 8008920:	103ee83a 	callr	r2
 8008924:	1029883a 	mov	r20,r2
 8008928:	00bfac0e 	bge	zero,r2,80087dc <__alt_data_end+0xfc0087dc>
 800892c:	a005883a 	mov	r2,r20
 8008930:	003f9606 	br	800878c <__alt_data_end+0xfc00878c>
 8008934:	b80d883a 	mov	r6,r23
 8008938:	e00b883a 	mov	r5,fp
 800893c:	da000115 	stw	r8,4(sp)
 8008940:	8008b580 	call	8008b58 <memmove>
 8008944:	80800217 	ldw	r2,8(r16)
 8008948:	80c00017 	ldw	r3,0(r16)
 800894c:	da000117 	ldw	r8,4(sp)
 8008950:	15c5c83a 	sub	r2,r2,r23
 8008954:	1def883a 	add	r23,r3,r23
 8008958:	80800215 	stw	r2,8(r16)
 800895c:	85c00015 	stw	r23,0(r16)
 8008960:	003fbe06 	br	800885c <__alt_data_end+0xfc00885c>
 8008964:	81000017 	ldw	r4,0(r16)
 8008968:	9039883a 	mov	fp,r18
 800896c:	9029883a 	mov	r20,r18
 8008970:	902d883a 	mov	r22,r18
 8008974:	003f7b06 	br	8008764 <__alt_data_end+0xfc008764>
 8008978:	b80b883a 	mov	r5,r23
 800897c:	900d883a 	mov	r6,r18
 8008980:	8008b580 	call	8008b58 <memmove>
 8008984:	80c00217 	ldw	r3,8(r16)
 8008988:	80800017 	ldw	r2,0(r16)
 800898c:	9029883a 	mov	r20,r18
 8008990:	1c87c83a 	sub	r3,r3,r18
 8008994:	1485883a 	add	r2,r2,r18
 8008998:	80800015 	stw	r2,0(r16)
 800899c:	80c00215 	stw	r3,8(r16)
 80089a0:	9005883a 	mov	r2,r18
 80089a4:	003f7906 	br	800878c <__alt_data_end+0xfc00878c>
 80089a8:	e009883a 	mov	r4,fp
 80089ac:	01400284 	movi	r5,10
 80089b0:	900d883a 	mov	r6,r18
 80089b4:	800550c0 	call	800550c <memchr>
 80089b8:	10003826 	beq	r2,zero,8008a9c <__sfvwrite_r+0x498>
 80089bc:	10800044 	addi	r2,r2,1
 80089c0:	1729c83a 	sub	r20,r2,fp
 80089c4:	02000044 	movi	r8,1
 80089c8:	003f8f06 	br	8008808 <__alt_data_end+0xfc008808>
 80089cc:	80800517 	ldw	r2,20(r16)
 80089d0:	81400417 	ldw	r5,16(r16)
 80089d4:	87000017 	ldw	fp,0(r16)
 80089d8:	10a9883a 	add	r20,r2,r2
 80089dc:	a085883a 	add	r2,r20,r2
 80089e0:	1028d7fa 	srli	r20,r2,31
 80089e4:	e179c83a 	sub	fp,fp,r5
 80089e8:	e1000044 	addi	r4,fp,1
 80089ec:	a085883a 	add	r2,r20,r2
 80089f0:	1029d07a 	srai	r20,r2,1
 80089f4:	2485883a 	add	r2,r4,r18
 80089f8:	a00d883a 	mov	r6,r20
 80089fc:	a080022e 	bgeu	r20,r2,8008a08 <__sfvwrite_r+0x404>
 8008a00:	1029883a 	mov	r20,r2
 8008a04:	100d883a 	mov	r6,r2
 8008a08:	18c1000c 	andi	r3,r3,1024
 8008a0c:	a809883a 	mov	r4,r21
 8008a10:	183f6a26 	beq	r3,zero,80087bc <__alt_data_end+0xfc0087bc>
 8008a14:	300b883a 	mov	r5,r6
 8008a18:	8004d640 	call	8004d64 <_malloc_r>
 8008a1c:	102d883a 	mov	r22,r2
 8008a20:	103f6c26 	beq	r2,zero,80087d4 <__alt_data_end+0xfc0087d4>
 8008a24:	81400417 	ldw	r5,16(r16)
 8008a28:	1009883a 	mov	r4,r2
 8008a2c:	e00d883a 	mov	r6,fp
 8008a30:	80055f40 	call	80055f4 <memcpy>
 8008a34:	8080030b 	ldhu	r2,12(r16)
 8008a38:	00fedfc4 	movi	r3,-1153
 8008a3c:	10c4703a 	and	r2,r2,r3
 8008a40:	10802014 	ori	r2,r2,128
 8008a44:	8080030d 	sth	r2,12(r16)
 8008a48:	b709883a 	add	r4,r22,fp
 8008a4c:	a707c83a 	sub	r3,r20,fp
 8008a50:	85800415 	stw	r22,16(r16)
 8008a54:	85000515 	stw	r20,20(r16)
 8008a58:	81000015 	stw	r4,0(r16)
 8008a5c:	9039883a 	mov	fp,r18
 8008a60:	80c00215 	stw	r3,8(r16)
 8008a64:	9029883a 	mov	r20,r18
 8008a68:	902d883a 	mov	r22,r18
 8008a6c:	003f3d06 	br	8008764 <__alt_data_end+0xfc008764>
 8008a70:	b80b883a 	mov	r5,r23
 8008a74:	a00d883a 	mov	r6,r20
 8008a78:	8008b580 	call	8008b58 <memmove>
 8008a7c:	80800017 	ldw	r2,0(r16)
 8008a80:	a809883a 	mov	r4,r21
 8008a84:	800b883a 	mov	r5,r16
 8008a88:	1505883a 	add	r2,r2,r20
 8008a8c:	80800015 	stw	r2,0(r16)
 8008a90:	8003f3c0 	call	8003f3c <_fflush_r>
 8008a94:	103fa526 	beq	r2,zero,800892c <__alt_data_end+0xfc00892c>
 8008a98:	003f5006 	br	80087dc <__alt_data_end+0xfc0087dc>
 8008a9c:	95000044 	addi	r20,r18,1
 8008aa0:	02000044 	movi	r8,1
 8008aa4:	003f5806 	br	8008808 <__alt_data_end+0xfc008808>

08008aa8 <_isatty_r>:
 8008aa8:	defffd04 	addi	sp,sp,-12
 8008aac:	dc000015 	stw	r16,0(sp)
 8008ab0:	04020074 	movhi	r16,2049
 8008ab4:	dc400115 	stw	r17,4(sp)
 8008ab8:	840b1304 	addi	r16,r16,11340
 8008abc:	2023883a 	mov	r17,r4
 8008ac0:	2809883a 	mov	r4,r5
 8008ac4:	dfc00215 	stw	ra,8(sp)
 8008ac8:	80000015 	stw	zero,0(r16)
 8008acc:	800ce780 	call	800ce78 <isatty>
 8008ad0:	00ffffc4 	movi	r3,-1
 8008ad4:	10c00526 	beq	r2,r3,8008aec <_isatty_r+0x44>
 8008ad8:	dfc00217 	ldw	ra,8(sp)
 8008adc:	dc400117 	ldw	r17,4(sp)
 8008ae0:	dc000017 	ldw	r16,0(sp)
 8008ae4:	dec00304 	addi	sp,sp,12
 8008ae8:	f800283a 	ret
 8008aec:	80c00017 	ldw	r3,0(r16)
 8008af0:	183ff926 	beq	r3,zero,8008ad8 <__alt_data_end+0xfc008ad8>
 8008af4:	88c00015 	stw	r3,0(r17)
 8008af8:	003ff706 	br	8008ad8 <__alt_data_end+0xfc008ad8>

08008afc <_lseek_r>:
 8008afc:	defffd04 	addi	sp,sp,-12
 8008b00:	dc000015 	stw	r16,0(sp)
 8008b04:	04020074 	movhi	r16,2049
 8008b08:	dc400115 	stw	r17,4(sp)
 8008b0c:	840b1304 	addi	r16,r16,11340
 8008b10:	2023883a 	mov	r17,r4
 8008b14:	2809883a 	mov	r4,r5
 8008b18:	300b883a 	mov	r5,r6
 8008b1c:	380d883a 	mov	r6,r7
 8008b20:	dfc00215 	stw	ra,8(sp)
 8008b24:	80000015 	stw	zero,0(r16)
 8008b28:	800d0580 	call	800d058 <lseek>
 8008b2c:	00ffffc4 	movi	r3,-1
 8008b30:	10c00526 	beq	r2,r3,8008b48 <_lseek_r+0x4c>
 8008b34:	dfc00217 	ldw	ra,8(sp)
 8008b38:	dc400117 	ldw	r17,4(sp)
 8008b3c:	dc000017 	ldw	r16,0(sp)
 8008b40:	dec00304 	addi	sp,sp,12
 8008b44:	f800283a 	ret
 8008b48:	80c00017 	ldw	r3,0(r16)
 8008b4c:	183ff926 	beq	r3,zero,8008b34 <__alt_data_end+0xfc008b34>
 8008b50:	88c00015 	stw	r3,0(r17)
 8008b54:	003ff706 	br	8008b34 <__alt_data_end+0xfc008b34>

08008b58 <memmove>:
 8008b58:	2005883a 	mov	r2,r4
 8008b5c:	29000b2e 	bgeu	r5,r4,8008b8c <memmove+0x34>
 8008b60:	298f883a 	add	r7,r5,r6
 8008b64:	21c0092e 	bgeu	r4,r7,8008b8c <memmove+0x34>
 8008b68:	2187883a 	add	r3,r4,r6
 8008b6c:	198bc83a 	sub	r5,r3,r6
 8008b70:	30004b26 	beq	r6,zero,8008ca0 <memmove+0x148>
 8008b74:	39ffffc4 	addi	r7,r7,-1
 8008b78:	39000003 	ldbu	r4,0(r7)
 8008b7c:	18ffffc4 	addi	r3,r3,-1
 8008b80:	19000005 	stb	r4,0(r3)
 8008b84:	197ffb1e 	bne	r3,r5,8008b74 <__alt_data_end+0xfc008b74>
 8008b88:	f800283a 	ret
 8008b8c:	00c003c4 	movi	r3,15
 8008b90:	1980412e 	bgeu	r3,r6,8008c98 <memmove+0x140>
 8008b94:	1146b03a 	or	r3,r2,r5
 8008b98:	18c000cc 	andi	r3,r3,3
 8008b9c:	1800411e 	bne	r3,zero,8008ca4 <memmove+0x14c>
 8008ba0:	33fffc04 	addi	r15,r6,-16
 8008ba4:	781ed13a 	srli	r15,r15,4
 8008ba8:	28c00104 	addi	r3,r5,4
 8008bac:	13400104 	addi	r13,r2,4
 8008bb0:	781c913a 	slli	r14,r15,4
 8008bb4:	2b000204 	addi	r12,r5,8
 8008bb8:	12c00204 	addi	r11,r2,8
 8008bbc:	73800504 	addi	r14,r14,20
 8008bc0:	2a800304 	addi	r10,r5,12
 8008bc4:	12400304 	addi	r9,r2,12
 8008bc8:	2b9d883a 	add	r14,r5,r14
 8008bcc:	2811883a 	mov	r8,r5
 8008bd0:	100f883a 	mov	r7,r2
 8008bd4:	41000017 	ldw	r4,0(r8)
 8008bd8:	39c00404 	addi	r7,r7,16
 8008bdc:	18c00404 	addi	r3,r3,16
 8008be0:	393ffc15 	stw	r4,-16(r7)
 8008be4:	193ffc17 	ldw	r4,-16(r3)
 8008be8:	6b400404 	addi	r13,r13,16
 8008bec:	5ac00404 	addi	r11,r11,16
 8008bf0:	693ffc15 	stw	r4,-16(r13)
 8008bf4:	61000017 	ldw	r4,0(r12)
 8008bf8:	4a400404 	addi	r9,r9,16
 8008bfc:	42000404 	addi	r8,r8,16
 8008c00:	593ffc15 	stw	r4,-16(r11)
 8008c04:	51000017 	ldw	r4,0(r10)
 8008c08:	63000404 	addi	r12,r12,16
 8008c0c:	52800404 	addi	r10,r10,16
 8008c10:	493ffc15 	stw	r4,-16(r9)
 8008c14:	1bbfef1e 	bne	r3,r14,8008bd4 <__alt_data_end+0xfc008bd4>
 8008c18:	79000044 	addi	r4,r15,1
 8008c1c:	2008913a 	slli	r4,r4,4
 8008c20:	328003cc 	andi	r10,r6,15
 8008c24:	02c000c4 	movi	r11,3
 8008c28:	1107883a 	add	r3,r2,r4
 8008c2c:	290b883a 	add	r5,r5,r4
 8008c30:	5a801e2e 	bgeu	r11,r10,8008cac <memmove+0x154>
 8008c34:	1813883a 	mov	r9,r3
 8008c38:	2811883a 	mov	r8,r5
 8008c3c:	500f883a 	mov	r7,r10
 8008c40:	41000017 	ldw	r4,0(r8)
 8008c44:	4a400104 	addi	r9,r9,4
 8008c48:	39ffff04 	addi	r7,r7,-4
 8008c4c:	493fff15 	stw	r4,-4(r9)
 8008c50:	42000104 	addi	r8,r8,4
 8008c54:	59fffa36 	bltu	r11,r7,8008c40 <__alt_data_end+0xfc008c40>
 8008c58:	513fff04 	addi	r4,r10,-4
 8008c5c:	2008d0ba 	srli	r4,r4,2
 8008c60:	318000cc 	andi	r6,r6,3
 8008c64:	21000044 	addi	r4,r4,1
 8008c68:	2109883a 	add	r4,r4,r4
 8008c6c:	2109883a 	add	r4,r4,r4
 8008c70:	1907883a 	add	r3,r3,r4
 8008c74:	290b883a 	add	r5,r5,r4
 8008c78:	30000926 	beq	r6,zero,8008ca0 <memmove+0x148>
 8008c7c:	198d883a 	add	r6,r3,r6
 8008c80:	29c00003 	ldbu	r7,0(r5)
 8008c84:	18c00044 	addi	r3,r3,1
 8008c88:	29400044 	addi	r5,r5,1
 8008c8c:	19ffffc5 	stb	r7,-1(r3)
 8008c90:	19bffb1e 	bne	r3,r6,8008c80 <__alt_data_end+0xfc008c80>
 8008c94:	f800283a 	ret
 8008c98:	1007883a 	mov	r3,r2
 8008c9c:	003ff606 	br	8008c78 <__alt_data_end+0xfc008c78>
 8008ca0:	f800283a 	ret
 8008ca4:	1007883a 	mov	r3,r2
 8008ca8:	003ff406 	br	8008c7c <__alt_data_end+0xfc008c7c>
 8008cac:	500d883a 	mov	r6,r10
 8008cb0:	003ff106 	br	8008c78 <__alt_data_end+0xfc008c78>

08008cb4 <_read_r>:
 8008cb4:	defffd04 	addi	sp,sp,-12
 8008cb8:	dc000015 	stw	r16,0(sp)
 8008cbc:	04020074 	movhi	r16,2049
 8008cc0:	dc400115 	stw	r17,4(sp)
 8008cc4:	840b1304 	addi	r16,r16,11340
 8008cc8:	2023883a 	mov	r17,r4
 8008ccc:	2809883a 	mov	r4,r5
 8008cd0:	300b883a 	mov	r5,r6
 8008cd4:	380d883a 	mov	r6,r7
 8008cd8:	dfc00215 	stw	ra,8(sp)
 8008cdc:	80000015 	stw	zero,0(r16)
 8008ce0:	800d23c0 	call	800d23c <read>
 8008ce4:	00ffffc4 	movi	r3,-1
 8008ce8:	10c00526 	beq	r2,r3,8008d00 <_read_r+0x4c>
 8008cec:	dfc00217 	ldw	ra,8(sp)
 8008cf0:	dc400117 	ldw	r17,4(sp)
 8008cf4:	dc000017 	ldw	r16,0(sp)
 8008cf8:	dec00304 	addi	sp,sp,12
 8008cfc:	f800283a 	ret
 8008d00:	80c00017 	ldw	r3,0(r16)
 8008d04:	183ff926 	beq	r3,zero,8008cec <__alt_data_end+0xfc008cec>
 8008d08:	88c00015 	stw	r3,0(r17)
 8008d0c:	003ff706 	br	8008cec <__alt_data_end+0xfc008cec>

08008d10 <_realloc_r>:
 8008d10:	defff604 	addi	sp,sp,-40
 8008d14:	dcc00315 	stw	r19,12(sp)
 8008d18:	dc400115 	stw	r17,4(sp)
 8008d1c:	dfc00915 	stw	ra,36(sp)
 8008d20:	df000815 	stw	fp,32(sp)
 8008d24:	ddc00715 	stw	r23,28(sp)
 8008d28:	dd800615 	stw	r22,24(sp)
 8008d2c:	dd400515 	stw	r21,20(sp)
 8008d30:	dd000415 	stw	r20,16(sp)
 8008d34:	dc800215 	stw	r18,8(sp)
 8008d38:	dc000015 	stw	r16,0(sp)
 8008d3c:	2827883a 	mov	r19,r5
 8008d40:	3023883a 	mov	r17,r6
 8008d44:	2800bf26 	beq	r5,zero,8009044 <_realloc_r+0x334>
 8008d48:	2025883a 	mov	r18,r4
 8008d4c:	800d1ac0 	call	800d1ac <__malloc_lock>
 8008d50:	98ffff17 	ldw	r3,-4(r19)
 8008d54:	01bfff04 	movi	r6,-4
 8008d58:	890002c4 	addi	r4,r17,11
 8008d5c:	01c00584 	movi	r7,22
 8008d60:	9d7ffe04 	addi	r21,r19,-8
 8008d64:	19a0703a 	and	r16,r3,r6
 8008d68:	39003f2e 	bgeu	r7,r4,8008e68 <_realloc_r+0x158>
 8008d6c:	053ffe04 	movi	r20,-8
 8008d70:	2528703a 	and	r20,r4,r20
 8008d74:	a00f883a 	mov	r7,r20
 8008d78:	a0008216 	blt	r20,zero,8008f84 <_realloc_r+0x274>
 8008d7c:	a4408136 	bltu	r20,r17,8008f84 <_realloc_r+0x274>
 8008d80:	81c03c0e 	bge	r16,r7,8008e74 <_realloc_r+0x164>
 8008d84:	07020074 	movhi	fp,2049
 8008d88:	e73ebe04 	addi	fp,fp,-1288
 8008d8c:	e1000217 	ldw	r4,8(fp)
 8008d90:	ac05883a 	add	r2,r21,r16
 8008d94:	2080bf26 	beq	r4,r2,8009094 <_realloc_r+0x384>
 8008d98:	11000117 	ldw	r4,4(r2)
 8008d9c:	023fff84 	movi	r8,-2
 8008da0:	2210703a 	and	r8,r4,r8
 8008da4:	1211883a 	add	r8,r2,r8
 8008da8:	41400117 	ldw	r5,4(r8)
 8008dac:	2940004c 	andi	r5,r5,1
 8008db0:	28004a1e 	bne	r5,zero,8008edc <_realloc_r+0x1cc>
 8008db4:	017fff04 	movi	r5,-4
 8008db8:	2148703a 	and	r4,r4,r5
 8008dbc:	2409883a 	add	r4,r4,r16
 8008dc0:	21c0ad0e 	bge	r4,r7,8009078 <_realloc_r+0x368>
 8008dc4:	18c0004c 	andi	r3,r3,1
 8008dc8:	18007f1e 	bne	r3,zero,8008fc8 <_realloc_r+0x2b8>
 8008dcc:	9dfffe17 	ldw	r23,-8(r19)
 8008dd0:	adefc83a 	sub	r23,r21,r23
 8008dd4:	bd800117 	ldw	r22,4(r23)
 8008dd8:	b14a703a 	and	r5,r22,r5
 8008ddc:	216d883a 	add	r22,r4,r5
 8008de0:	b1c04516 	blt	r22,r7,8008ef8 <_realloc_r+0x1e8>
 8008de4:	10c00317 	ldw	r3,12(r2)
 8008de8:	10800217 	ldw	r2,8(r2)
 8008dec:	81bfff04 	addi	r6,r16,-4
 8008df0:	bc400204 	addi	r17,r23,8
 8008df4:	10c00315 	stw	r3,12(r2)
 8008df8:	18800215 	stw	r2,8(r3)
 8008dfc:	b9400217 	ldw	r5,8(r23)
 8008e00:	b8c00317 	ldw	r3,12(r23)
 8008e04:	00800904 	movi	r2,36
 8008e08:	28c00315 	stw	r3,12(r5)
 8008e0c:	19400215 	stw	r5,8(r3)
 8008e10:	1180ef36 	bltu	r2,r6,80091d0 <_realloc_r+0x4c0>
 8008e14:	008004c4 	movi	r2,19
 8008e18:	1180da2e 	bgeu	r2,r6,8009184 <_realloc_r+0x474>
 8008e1c:	98800017 	ldw	r2,0(r19)
 8008e20:	b8800215 	stw	r2,8(r23)
 8008e24:	98800117 	ldw	r2,4(r19)
 8008e28:	b8800315 	stw	r2,12(r23)
 8008e2c:	008006c4 	movi	r2,27
 8008e30:	1180fc2e 	bgeu	r2,r6,8009224 <_realloc_r+0x514>
 8008e34:	98800217 	ldw	r2,8(r19)
 8008e38:	b8800415 	stw	r2,16(r23)
 8008e3c:	98800317 	ldw	r2,12(r19)
 8008e40:	b8800515 	stw	r2,20(r23)
 8008e44:	00800904 	movi	r2,36
 8008e48:	3080421e 	bne	r6,r2,8008f54 <_realloc_r+0x244>
 8008e4c:	98800417 	ldw	r2,16(r19)
 8008e50:	9cc00604 	addi	r19,r19,24
 8008e54:	b8c00804 	addi	r3,r23,32
 8008e58:	b8800615 	stw	r2,24(r23)
 8008e5c:	98bfff17 	ldw	r2,-4(r19)
 8008e60:	b8800715 	stw	r2,28(r23)
 8008e64:	00003d06 	br	8008f5c <_realloc_r+0x24c>
 8008e68:	01c00404 	movi	r7,16
 8008e6c:	3829883a 	mov	r20,r7
 8008e70:	003fc206 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8008e74:	9823883a 	mov	r17,r19
 8008e78:	850fc83a 	sub	r7,r16,r20
 8008e7c:	008003c4 	movi	r2,15
 8008e80:	18c0004c 	andi	r3,r3,1
 8008e84:	11c04336 	bltu	r2,r7,8008f94 <_realloc_r+0x284>
 8008e88:	1c06b03a 	or	r3,r3,r16
 8008e8c:	a8c00115 	stw	r3,4(r21)
 8008e90:	ac21883a 	add	r16,r21,r16
 8008e94:	80c00117 	ldw	r3,4(r16)
 8008e98:	18c00054 	ori	r3,r3,1
 8008e9c:	80c00115 	stw	r3,4(r16)
 8008ea0:	9009883a 	mov	r4,r18
 8008ea4:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8008ea8:	8805883a 	mov	r2,r17
 8008eac:	dfc00917 	ldw	ra,36(sp)
 8008eb0:	df000817 	ldw	fp,32(sp)
 8008eb4:	ddc00717 	ldw	r23,28(sp)
 8008eb8:	dd800617 	ldw	r22,24(sp)
 8008ebc:	dd400517 	ldw	r21,20(sp)
 8008ec0:	dd000417 	ldw	r20,16(sp)
 8008ec4:	dcc00317 	ldw	r19,12(sp)
 8008ec8:	dc800217 	ldw	r18,8(sp)
 8008ecc:	dc400117 	ldw	r17,4(sp)
 8008ed0:	dc000017 	ldw	r16,0(sp)
 8008ed4:	dec00a04 	addi	sp,sp,40
 8008ed8:	f800283a 	ret
 8008edc:	18c0004c 	andi	r3,r3,1
 8008ee0:	1800391e 	bne	r3,zero,8008fc8 <_realloc_r+0x2b8>
 8008ee4:	9dfffe17 	ldw	r23,-8(r19)
 8008ee8:	00bfff04 	movi	r2,-4
 8008eec:	adefc83a 	sub	r23,r21,r23
 8008ef0:	b9400117 	ldw	r5,4(r23)
 8008ef4:	288a703a 	and	r5,r5,r2
 8008ef8:	2c2d883a 	add	r22,r5,r16
 8008efc:	b1c03216 	blt	r22,r7,8008fc8 <_realloc_r+0x2b8>
 8008f00:	b8800317 	ldw	r2,12(r23)
 8008f04:	b8c00217 	ldw	r3,8(r23)
 8008f08:	81bfff04 	addi	r6,r16,-4
 8008f0c:	01000904 	movi	r4,36
 8008f10:	18800315 	stw	r2,12(r3)
 8008f14:	10c00215 	stw	r3,8(r2)
 8008f18:	bc400204 	addi	r17,r23,8
 8008f1c:	2180ac36 	bltu	r4,r6,80091d0 <_realloc_r+0x4c0>
 8008f20:	008004c4 	movi	r2,19
 8008f24:	1180972e 	bgeu	r2,r6,8009184 <_realloc_r+0x474>
 8008f28:	98800017 	ldw	r2,0(r19)
 8008f2c:	b8800215 	stw	r2,8(r23)
 8008f30:	98800117 	ldw	r2,4(r19)
 8008f34:	b8800315 	stw	r2,12(r23)
 8008f38:	008006c4 	movi	r2,27
 8008f3c:	1180b92e 	bgeu	r2,r6,8009224 <_realloc_r+0x514>
 8008f40:	98800217 	ldw	r2,8(r19)
 8008f44:	b8800415 	stw	r2,16(r23)
 8008f48:	98800317 	ldw	r2,12(r19)
 8008f4c:	b8800515 	stw	r2,20(r23)
 8008f50:	313fbe26 	beq	r6,r4,8008e4c <__alt_data_end+0xfc008e4c>
 8008f54:	b8c00604 	addi	r3,r23,24
 8008f58:	9cc00404 	addi	r19,r19,16
 8008f5c:	98800017 	ldw	r2,0(r19)
 8008f60:	b021883a 	mov	r16,r22
 8008f64:	b82b883a 	mov	r21,r23
 8008f68:	18800015 	stw	r2,0(r3)
 8008f6c:	98800117 	ldw	r2,4(r19)
 8008f70:	18800115 	stw	r2,4(r3)
 8008f74:	98800217 	ldw	r2,8(r19)
 8008f78:	18800215 	stw	r2,8(r3)
 8008f7c:	b8c00117 	ldw	r3,4(r23)
 8008f80:	003fbd06 	br	8008e78 <__alt_data_end+0xfc008e78>
 8008f84:	00800304 	movi	r2,12
 8008f88:	90800015 	stw	r2,0(r18)
 8008f8c:	0005883a 	mov	r2,zero
 8008f90:	003fc606 	br	8008eac <__alt_data_end+0xfc008eac>
 8008f94:	1d06b03a 	or	r3,r3,r20
 8008f98:	ad0b883a 	add	r5,r21,r20
 8008f9c:	a8c00115 	stw	r3,4(r21)
 8008fa0:	38800054 	ori	r2,r7,1
 8008fa4:	28800115 	stw	r2,4(r5)
 8008fa8:	29cf883a 	add	r7,r5,r7
 8008fac:	38800117 	ldw	r2,4(r7)
 8008fb0:	9009883a 	mov	r4,r18
 8008fb4:	29400204 	addi	r5,r5,8
 8008fb8:	10800054 	ori	r2,r2,1
 8008fbc:	38800115 	stw	r2,4(r7)
 8008fc0:	800466c0 	call	800466c <_free_r>
 8008fc4:	003fb606 	br	8008ea0 <__alt_data_end+0xfc008ea0>
 8008fc8:	880b883a 	mov	r5,r17
 8008fcc:	9009883a 	mov	r4,r18
 8008fd0:	8004d640 	call	8004d64 <_malloc_r>
 8008fd4:	1023883a 	mov	r17,r2
 8008fd8:	1000aa26 	beq	r2,zero,8009284 <_realloc_r+0x574>
 8008fdc:	98ffff17 	ldw	r3,-4(r19)
 8008fe0:	113ffe04 	addi	r4,r2,-8
 8008fe4:	00bfff84 	movi	r2,-2
 8008fe8:	1884703a 	and	r2,r3,r2
 8008fec:	a885883a 	add	r2,r21,r2
 8008ff0:	20808626 	beq	r4,r2,800920c <_realloc_r+0x4fc>
 8008ff4:	81bfff04 	addi	r6,r16,-4
 8008ff8:	00800904 	movi	r2,36
 8008ffc:	11807036 	bltu	r2,r6,80091c0 <_realloc_r+0x4b0>
 8009000:	00c004c4 	movi	r3,19
 8009004:	19805636 	bltu	r3,r6,8009160 <_realloc_r+0x450>
 8009008:	8805883a 	mov	r2,r17
 800900c:	9807883a 	mov	r3,r19
 8009010:	19000017 	ldw	r4,0(r3)
 8009014:	11000015 	stw	r4,0(r2)
 8009018:	19000117 	ldw	r4,4(r3)
 800901c:	11000115 	stw	r4,4(r2)
 8009020:	18c00217 	ldw	r3,8(r3)
 8009024:	10c00215 	stw	r3,8(r2)
 8009028:	980b883a 	mov	r5,r19
 800902c:	9009883a 	mov	r4,r18
 8009030:	800466c0 	call	800466c <_free_r>
 8009034:	9009883a 	mov	r4,r18
 8009038:	800d1cc0 	call	800d1cc <__malloc_unlock>
 800903c:	8805883a 	mov	r2,r17
 8009040:	003f9a06 	br	8008eac <__alt_data_end+0xfc008eac>
 8009044:	300b883a 	mov	r5,r6
 8009048:	dfc00917 	ldw	ra,36(sp)
 800904c:	df000817 	ldw	fp,32(sp)
 8009050:	ddc00717 	ldw	r23,28(sp)
 8009054:	dd800617 	ldw	r22,24(sp)
 8009058:	dd400517 	ldw	r21,20(sp)
 800905c:	dd000417 	ldw	r20,16(sp)
 8009060:	dcc00317 	ldw	r19,12(sp)
 8009064:	dc800217 	ldw	r18,8(sp)
 8009068:	dc400117 	ldw	r17,4(sp)
 800906c:	dc000017 	ldw	r16,0(sp)
 8009070:	dec00a04 	addi	sp,sp,40
 8009074:	8004d641 	jmpi	8004d64 <_malloc_r>
 8009078:	11400317 	ldw	r5,12(r2)
 800907c:	10800217 	ldw	r2,8(r2)
 8009080:	9823883a 	mov	r17,r19
 8009084:	2021883a 	mov	r16,r4
 8009088:	11400315 	stw	r5,12(r2)
 800908c:	28800215 	stw	r2,8(r5)
 8009090:	003f7906 	br	8008e78 <__alt_data_end+0xfc008e78>
 8009094:	21000117 	ldw	r4,4(r4)
 8009098:	00bfff04 	movi	r2,-4
 800909c:	a1800404 	addi	r6,r20,16
 80090a0:	2088703a 	and	r4,r4,r2
 80090a4:	2409883a 	add	r4,r4,r16
 80090a8:	2180380e 	bge	r4,r6,800918c <_realloc_r+0x47c>
 80090ac:	18c0004c 	andi	r3,r3,1
 80090b0:	183fc51e 	bne	r3,zero,8008fc8 <__alt_data_end+0xfc008fc8>
 80090b4:	9dfffe17 	ldw	r23,-8(r19)
 80090b8:	adefc83a 	sub	r23,r21,r23
 80090bc:	b9400117 	ldw	r5,4(r23)
 80090c0:	288a703a 	and	r5,r5,r2
 80090c4:	216d883a 	add	r22,r4,r5
 80090c8:	b1bf8b16 	blt	r22,r6,8008ef8 <__alt_data_end+0xfc008ef8>
 80090cc:	b8800317 	ldw	r2,12(r23)
 80090d0:	b8c00217 	ldw	r3,8(r23)
 80090d4:	81bfff04 	addi	r6,r16,-4
 80090d8:	01000904 	movi	r4,36
 80090dc:	18800315 	stw	r2,12(r3)
 80090e0:	10c00215 	stw	r3,8(r2)
 80090e4:	bc400204 	addi	r17,r23,8
 80090e8:	21805a36 	bltu	r4,r6,8009254 <_realloc_r+0x544>
 80090ec:	008004c4 	movi	r2,19
 80090f0:	1180562e 	bgeu	r2,r6,800924c <_realloc_r+0x53c>
 80090f4:	98800017 	ldw	r2,0(r19)
 80090f8:	b8800215 	stw	r2,8(r23)
 80090fc:	98800117 	ldw	r2,4(r19)
 8009100:	b8800315 	stw	r2,12(r23)
 8009104:	008006c4 	movi	r2,27
 8009108:	11805636 	bltu	r2,r6,8009264 <_realloc_r+0x554>
 800910c:	b8800404 	addi	r2,r23,16
 8009110:	9cc00204 	addi	r19,r19,8
 8009114:	98c00017 	ldw	r3,0(r19)
 8009118:	10c00015 	stw	r3,0(r2)
 800911c:	98c00117 	ldw	r3,4(r19)
 8009120:	10c00115 	stw	r3,4(r2)
 8009124:	98c00217 	ldw	r3,8(r19)
 8009128:	10c00215 	stw	r3,8(r2)
 800912c:	bd07883a 	add	r3,r23,r20
 8009130:	b505c83a 	sub	r2,r22,r20
 8009134:	e0c00215 	stw	r3,8(fp)
 8009138:	10800054 	ori	r2,r2,1
 800913c:	18800115 	stw	r2,4(r3)
 8009140:	b8800117 	ldw	r2,4(r23)
 8009144:	9009883a 	mov	r4,r18
 8009148:	1080004c 	andi	r2,r2,1
 800914c:	a0a8b03a 	or	r20,r20,r2
 8009150:	bd000115 	stw	r20,4(r23)
 8009154:	800d1cc0 	call	800d1cc <__malloc_unlock>
 8009158:	8805883a 	mov	r2,r17
 800915c:	003f5306 	br	8008eac <__alt_data_end+0xfc008eac>
 8009160:	98c00017 	ldw	r3,0(r19)
 8009164:	88c00015 	stw	r3,0(r17)
 8009168:	98c00117 	ldw	r3,4(r19)
 800916c:	88c00115 	stw	r3,4(r17)
 8009170:	00c006c4 	movi	r3,27
 8009174:	19801d36 	bltu	r3,r6,80091ec <_realloc_r+0x4dc>
 8009178:	88800204 	addi	r2,r17,8
 800917c:	98c00204 	addi	r3,r19,8
 8009180:	003fa306 	br	8009010 <__alt_data_end+0xfc009010>
 8009184:	8807883a 	mov	r3,r17
 8009188:	003f7406 	br	8008f5c <__alt_data_end+0xfc008f5c>
 800918c:	ad2b883a 	add	r21,r21,r20
 8009190:	2505c83a 	sub	r2,r4,r20
 8009194:	e5400215 	stw	r21,8(fp)
 8009198:	10800054 	ori	r2,r2,1
 800919c:	a8800115 	stw	r2,4(r21)
 80091a0:	98bfff17 	ldw	r2,-4(r19)
 80091a4:	9009883a 	mov	r4,r18
 80091a8:	1080004c 	andi	r2,r2,1
 80091ac:	a0a8b03a 	or	r20,r20,r2
 80091b0:	9d3fff15 	stw	r20,-4(r19)
 80091b4:	800d1cc0 	call	800d1cc <__malloc_unlock>
 80091b8:	9805883a 	mov	r2,r19
 80091bc:	003f3b06 	br	8008eac <__alt_data_end+0xfc008eac>
 80091c0:	8809883a 	mov	r4,r17
 80091c4:	980b883a 	mov	r5,r19
 80091c8:	8008b580 	call	8008b58 <memmove>
 80091cc:	003f9606 	br	8009028 <__alt_data_end+0xfc009028>
 80091d0:	8809883a 	mov	r4,r17
 80091d4:	980b883a 	mov	r5,r19
 80091d8:	8008b580 	call	8008b58 <memmove>
 80091dc:	b8c00117 	ldw	r3,4(r23)
 80091e0:	b021883a 	mov	r16,r22
 80091e4:	b82b883a 	mov	r21,r23
 80091e8:	003f2306 	br	8008e78 <__alt_data_end+0xfc008e78>
 80091ec:	98c00217 	ldw	r3,8(r19)
 80091f0:	88c00215 	stw	r3,8(r17)
 80091f4:	98c00317 	ldw	r3,12(r19)
 80091f8:	88c00315 	stw	r3,12(r17)
 80091fc:	30800c26 	beq	r6,r2,8009230 <_realloc_r+0x520>
 8009200:	88800404 	addi	r2,r17,16
 8009204:	98c00404 	addi	r3,r19,16
 8009208:	003f8106 	br	8009010 <__alt_data_end+0xfc009010>
 800920c:	893fff17 	ldw	r4,-4(r17)
 8009210:	00bfff04 	movi	r2,-4
 8009214:	9823883a 	mov	r17,r19
 8009218:	2084703a 	and	r2,r4,r2
 800921c:	80a1883a 	add	r16,r16,r2
 8009220:	003f1506 	br	8008e78 <__alt_data_end+0xfc008e78>
 8009224:	b8c00404 	addi	r3,r23,16
 8009228:	9cc00204 	addi	r19,r19,8
 800922c:	003f4b06 	br	8008f5c <__alt_data_end+0xfc008f5c>
 8009230:	99000417 	ldw	r4,16(r19)
 8009234:	88800604 	addi	r2,r17,24
 8009238:	98c00604 	addi	r3,r19,24
 800923c:	89000415 	stw	r4,16(r17)
 8009240:	99000517 	ldw	r4,20(r19)
 8009244:	89000515 	stw	r4,20(r17)
 8009248:	003f7106 	br	8009010 <__alt_data_end+0xfc009010>
 800924c:	8805883a 	mov	r2,r17
 8009250:	003fb006 	br	8009114 <__alt_data_end+0xfc009114>
 8009254:	8809883a 	mov	r4,r17
 8009258:	980b883a 	mov	r5,r19
 800925c:	8008b580 	call	8008b58 <memmove>
 8009260:	003fb206 	br	800912c <__alt_data_end+0xfc00912c>
 8009264:	98800217 	ldw	r2,8(r19)
 8009268:	b8800415 	stw	r2,16(r23)
 800926c:	98800317 	ldw	r2,12(r19)
 8009270:	b8800515 	stw	r2,20(r23)
 8009274:	31000726 	beq	r6,r4,8009294 <_realloc_r+0x584>
 8009278:	b8800604 	addi	r2,r23,24
 800927c:	9cc00404 	addi	r19,r19,16
 8009280:	003fa406 	br	8009114 <__alt_data_end+0xfc009114>
 8009284:	9009883a 	mov	r4,r18
 8009288:	800d1cc0 	call	800d1cc <__malloc_unlock>
 800928c:	0005883a 	mov	r2,zero
 8009290:	003f0606 	br	8008eac <__alt_data_end+0xfc008eac>
 8009294:	98c00417 	ldw	r3,16(r19)
 8009298:	9cc00604 	addi	r19,r19,24
 800929c:	b8800804 	addi	r2,r23,32
 80092a0:	b8c00615 	stw	r3,24(r23)
 80092a4:	98ffff17 	ldw	r3,-4(r19)
 80092a8:	b8c00715 	stw	r3,28(r23)
 80092ac:	003f9906 	br	8009114 <__alt_data_end+0xfc009114>

080092b0 <__swbuf_r>:
 80092b0:	defffc04 	addi	sp,sp,-16
 80092b4:	dc800215 	stw	r18,8(sp)
 80092b8:	dc400115 	stw	r17,4(sp)
 80092bc:	dc000015 	stw	r16,0(sp)
 80092c0:	dfc00315 	stw	ra,12(sp)
 80092c4:	2025883a 	mov	r18,r4
 80092c8:	2823883a 	mov	r17,r5
 80092cc:	3021883a 	mov	r16,r6
 80092d0:	20000226 	beq	r4,zero,80092dc <__swbuf_r+0x2c>
 80092d4:	20800e17 	ldw	r2,56(r4)
 80092d8:	10004126 	beq	r2,zero,80093e0 <__swbuf_r+0x130>
 80092dc:	80c00617 	ldw	r3,24(r16)
 80092e0:	8180030b 	ldhu	r6,12(r16)
 80092e4:	80c00215 	stw	r3,8(r16)
 80092e8:	30c0020c 	andi	r3,r6,8
 80092ec:	18003526 	beq	r3,zero,80093c4 <__swbuf_r+0x114>
 80092f0:	80c00417 	ldw	r3,16(r16)
 80092f4:	18003326 	beq	r3,zero,80093c4 <__swbuf_r+0x114>
 80092f8:	3088000c 	andi	r2,r6,8192
 80092fc:	8c403fcc 	andi	r17,r17,255
 8009300:	10001726 	beq	r2,zero,8009360 <__swbuf_r+0xb0>
 8009304:	80800017 	ldw	r2,0(r16)
 8009308:	81000517 	ldw	r4,20(r16)
 800930c:	10c7c83a 	sub	r3,r2,r3
 8009310:	19001d0e 	bge	r3,r4,8009388 <__swbuf_r+0xd8>
 8009314:	18c00044 	addi	r3,r3,1
 8009318:	81400217 	ldw	r5,8(r16)
 800931c:	11000044 	addi	r4,r2,1
 8009320:	81000015 	stw	r4,0(r16)
 8009324:	297fffc4 	addi	r5,r5,-1
 8009328:	81400215 	stw	r5,8(r16)
 800932c:	14400005 	stb	r17,0(r2)
 8009330:	80800517 	ldw	r2,20(r16)
 8009334:	10c01d26 	beq	r2,r3,80093ac <__swbuf_r+0xfc>
 8009338:	8080030b 	ldhu	r2,12(r16)
 800933c:	1080004c 	andi	r2,r2,1
 8009340:	1000181e 	bne	r2,zero,80093a4 <__swbuf_r+0xf4>
 8009344:	8805883a 	mov	r2,r17
 8009348:	dfc00317 	ldw	ra,12(sp)
 800934c:	dc800217 	ldw	r18,8(sp)
 8009350:	dc400117 	ldw	r17,4(sp)
 8009354:	dc000017 	ldw	r16,0(sp)
 8009358:	dec00404 	addi	sp,sp,16
 800935c:	f800283a 	ret
 8009360:	81001917 	ldw	r4,100(r16)
 8009364:	00b7ffc4 	movi	r2,-8193
 8009368:	31880014 	ori	r6,r6,8192
 800936c:	2084703a 	and	r2,r4,r2
 8009370:	80801915 	stw	r2,100(r16)
 8009374:	80800017 	ldw	r2,0(r16)
 8009378:	81000517 	ldw	r4,20(r16)
 800937c:	8180030d 	sth	r6,12(r16)
 8009380:	10c7c83a 	sub	r3,r2,r3
 8009384:	193fe316 	blt	r3,r4,8009314 <__alt_data_end+0xfc009314>
 8009388:	9009883a 	mov	r4,r18
 800938c:	800b883a 	mov	r5,r16
 8009390:	8003f3c0 	call	8003f3c <_fflush_r>
 8009394:	1000091e 	bne	r2,zero,80093bc <__swbuf_r+0x10c>
 8009398:	80800017 	ldw	r2,0(r16)
 800939c:	00c00044 	movi	r3,1
 80093a0:	003fdd06 	br	8009318 <__alt_data_end+0xfc009318>
 80093a4:	00800284 	movi	r2,10
 80093a8:	88bfe61e 	bne	r17,r2,8009344 <__alt_data_end+0xfc009344>
 80093ac:	9009883a 	mov	r4,r18
 80093b0:	800b883a 	mov	r5,r16
 80093b4:	8003f3c0 	call	8003f3c <_fflush_r>
 80093b8:	103fe226 	beq	r2,zero,8009344 <__alt_data_end+0xfc009344>
 80093bc:	00bfffc4 	movi	r2,-1
 80093c0:	003fe106 	br	8009348 <__alt_data_end+0xfc009348>
 80093c4:	9009883a 	mov	r4,r18
 80093c8:	800b883a 	mov	r5,r16
 80093cc:	80024bc0 	call	80024bc <__swsetup_r>
 80093d0:	1000051e 	bne	r2,zero,80093e8 <__swbuf_r+0x138>
 80093d4:	8180030b 	ldhu	r6,12(r16)
 80093d8:	80c00417 	ldw	r3,16(r16)
 80093dc:	003fc606 	br	80092f8 <__alt_data_end+0xfc0092f8>
 80093e0:	80044f80 	call	80044f8 <__sinit>
 80093e4:	003fbd06 	br	80092dc <__alt_data_end+0xfc0092dc>
 80093e8:	80c0030b 	ldhu	r3,12(r16)
 80093ec:	00bfffc4 	movi	r2,-1
 80093f0:	18c01014 	ori	r3,r3,64
 80093f4:	80c0030d 	sth	r3,12(r16)
 80093f8:	00c00244 	movi	r3,9
 80093fc:	90c00015 	stw	r3,0(r18)
 8009400:	003fd106 	br	8009348 <__alt_data_end+0xfc009348>

08009404 <__swbuf>:
 8009404:	00c20074 	movhi	r3,2049
 8009408:	18c44304 	addi	r3,r3,4364
 800940c:	2005883a 	mov	r2,r4
 8009410:	19000017 	ldw	r4,0(r3)
 8009414:	280d883a 	mov	r6,r5
 8009418:	100b883a 	mov	r5,r2
 800941c:	80092b01 	jmpi	80092b0 <__swbuf_r>

08009420 <_wcrtomb_r>:
 8009420:	defff604 	addi	sp,sp,-40
 8009424:	00820074 	movhi	r2,2049
 8009428:	dc800815 	stw	r18,32(sp)
 800942c:	dc400715 	stw	r17,28(sp)
 8009430:	dc000615 	stw	r16,24(sp)
 8009434:	10844704 	addi	r2,r2,4380
 8009438:	dfc00915 	stw	ra,36(sp)
 800943c:	2021883a 	mov	r16,r4
 8009440:	3823883a 	mov	r17,r7
 8009444:	14800017 	ldw	r18,0(r2)
 8009448:	28001426 	beq	r5,zero,800949c <_wcrtomb_r+0x7c>
 800944c:	d9400415 	stw	r5,16(sp)
 8009450:	d9800515 	stw	r6,20(sp)
 8009454:	8004b480 	call	8004b48 <__locale_charset>
 8009458:	d9400417 	ldw	r5,16(sp)
 800945c:	d9800517 	ldw	r6,20(sp)
 8009460:	8009883a 	mov	r4,r16
 8009464:	dc400015 	stw	r17,0(sp)
 8009468:	100f883a 	mov	r7,r2
 800946c:	903ee83a 	callr	r18
 8009470:	00ffffc4 	movi	r3,-1
 8009474:	10c0031e 	bne	r2,r3,8009484 <_wcrtomb_r+0x64>
 8009478:	88000015 	stw	zero,0(r17)
 800947c:	00c02284 	movi	r3,138
 8009480:	80c00015 	stw	r3,0(r16)
 8009484:	dfc00917 	ldw	ra,36(sp)
 8009488:	dc800817 	ldw	r18,32(sp)
 800948c:	dc400717 	ldw	r17,28(sp)
 8009490:	dc000617 	ldw	r16,24(sp)
 8009494:	dec00a04 	addi	sp,sp,40
 8009498:	f800283a 	ret
 800949c:	8004b480 	call	8004b48 <__locale_charset>
 80094a0:	8009883a 	mov	r4,r16
 80094a4:	dc400015 	stw	r17,0(sp)
 80094a8:	d9400104 	addi	r5,sp,4
 80094ac:	000d883a 	mov	r6,zero
 80094b0:	100f883a 	mov	r7,r2
 80094b4:	903ee83a 	callr	r18
 80094b8:	003fed06 	br	8009470 <__alt_data_end+0xfc009470>

080094bc <wcrtomb>:
 80094bc:	defff504 	addi	sp,sp,-44
 80094c0:	dc400515 	stw	r17,20(sp)
 80094c4:	dc000415 	stw	r16,16(sp)
 80094c8:	dfc00a15 	stw	ra,40(sp)
 80094cc:	dd400915 	stw	r21,36(sp)
 80094d0:	dd000815 	stw	r20,32(sp)
 80094d4:	dcc00715 	stw	r19,28(sp)
 80094d8:	dc800615 	stw	r18,24(sp)
 80094dc:	2021883a 	mov	r16,r4
 80094e0:	3023883a 	mov	r17,r6
 80094e4:	20001d26 	beq	r4,zero,800955c <wcrtomb+0xa0>
 80094e8:	04820074 	movhi	r18,2049
 80094ec:	94844304 	addi	r18,r18,4364
 80094f0:	00820074 	movhi	r2,2049
 80094f4:	95400017 	ldw	r21,0(r18)
 80094f8:	10844704 	addi	r2,r2,4380
 80094fc:	15000017 	ldw	r20,0(r2)
 8009500:	2827883a 	mov	r19,r5
 8009504:	8004b480 	call	8004b48 <__locale_charset>
 8009508:	a809883a 	mov	r4,r21
 800950c:	dc400015 	stw	r17,0(sp)
 8009510:	800b883a 	mov	r5,r16
 8009514:	980d883a 	mov	r6,r19
 8009518:	100f883a 	mov	r7,r2
 800951c:	a03ee83a 	callr	r20
 8009520:	00ffffc4 	movi	r3,-1
 8009524:	10c0041e 	bne	r2,r3,8009538 <wcrtomb+0x7c>
 8009528:	90c00017 	ldw	r3,0(r18)
 800952c:	01002284 	movi	r4,138
 8009530:	88000015 	stw	zero,0(r17)
 8009534:	19000015 	stw	r4,0(r3)
 8009538:	dfc00a17 	ldw	ra,40(sp)
 800953c:	dd400917 	ldw	r21,36(sp)
 8009540:	dd000817 	ldw	r20,32(sp)
 8009544:	dcc00717 	ldw	r19,28(sp)
 8009548:	dc800617 	ldw	r18,24(sp)
 800954c:	dc400517 	ldw	r17,20(sp)
 8009550:	dc000417 	ldw	r16,16(sp)
 8009554:	dec00b04 	addi	sp,sp,44
 8009558:	f800283a 	ret
 800955c:	04820074 	movhi	r18,2049
 8009560:	94844304 	addi	r18,r18,4364
 8009564:	00820074 	movhi	r2,2049
 8009568:	94c00017 	ldw	r19,0(r18)
 800956c:	10844704 	addi	r2,r2,4380
 8009570:	14000017 	ldw	r16,0(r2)
 8009574:	8004b480 	call	8004b48 <__locale_charset>
 8009578:	9809883a 	mov	r4,r19
 800957c:	dc400015 	stw	r17,0(sp)
 8009580:	d9400104 	addi	r5,sp,4
 8009584:	000d883a 	mov	r6,zero
 8009588:	100f883a 	mov	r7,r2
 800958c:	803ee83a 	callr	r16
 8009590:	003fe306 	br	8009520 <__alt_data_end+0xfc009520>

08009594 <__ascii_wctomb>:
 8009594:	28000526 	beq	r5,zero,80095ac <__ascii_wctomb+0x18>
 8009598:	00803fc4 	movi	r2,255
 800959c:	11800536 	bltu	r2,r6,80095b4 <__ascii_wctomb+0x20>
 80095a0:	29800005 	stb	r6,0(r5)
 80095a4:	00800044 	movi	r2,1
 80095a8:	f800283a 	ret
 80095ac:	0005883a 	mov	r2,zero
 80095b0:	f800283a 	ret
 80095b4:	00802284 	movi	r2,138
 80095b8:	20800015 	stw	r2,0(r4)
 80095bc:	00bfffc4 	movi	r2,-1
 80095c0:	f800283a 	ret

080095c4 <_wctomb_r>:
 80095c4:	00820074 	movhi	r2,2049
 80095c8:	defff904 	addi	sp,sp,-28
 80095cc:	10844704 	addi	r2,r2,4380
 80095d0:	dfc00615 	stw	ra,24(sp)
 80095d4:	dc400515 	stw	r17,20(sp)
 80095d8:	dc000415 	stw	r16,16(sp)
 80095dc:	3823883a 	mov	r17,r7
 80095e0:	14000017 	ldw	r16,0(r2)
 80095e4:	d9000115 	stw	r4,4(sp)
 80095e8:	d9400215 	stw	r5,8(sp)
 80095ec:	d9800315 	stw	r6,12(sp)
 80095f0:	8004b480 	call	8004b48 <__locale_charset>
 80095f4:	d9000117 	ldw	r4,4(sp)
 80095f8:	d9400217 	ldw	r5,8(sp)
 80095fc:	d9800317 	ldw	r6,12(sp)
 8009600:	dc400015 	stw	r17,0(sp)
 8009604:	100f883a 	mov	r7,r2
 8009608:	803ee83a 	callr	r16
 800960c:	dfc00617 	ldw	ra,24(sp)
 8009610:	dc400517 	ldw	r17,20(sp)
 8009614:	dc000417 	ldw	r16,16(sp)
 8009618:	dec00704 	addi	sp,sp,28
 800961c:	f800283a 	ret

08009620 <__udivdi3>:
 8009620:	defff504 	addi	sp,sp,-44
 8009624:	dcc00415 	stw	r19,16(sp)
 8009628:	dc000115 	stw	r16,4(sp)
 800962c:	dfc00a15 	stw	ra,40(sp)
 8009630:	df000915 	stw	fp,36(sp)
 8009634:	ddc00815 	stw	r23,32(sp)
 8009638:	dd800715 	stw	r22,28(sp)
 800963c:	dd400615 	stw	r21,24(sp)
 8009640:	dd000515 	stw	r20,20(sp)
 8009644:	dc800315 	stw	r18,12(sp)
 8009648:	dc400215 	stw	r17,8(sp)
 800964c:	2027883a 	mov	r19,r4
 8009650:	2821883a 	mov	r16,r5
 8009654:	3800471e 	bne	r7,zero,8009774 <__udivdi3+0x154>
 8009658:	3025883a 	mov	r18,r6
 800965c:	2023883a 	mov	r17,r4
 8009660:	2980592e 	bgeu	r5,r6,80097c8 <__udivdi3+0x1a8>
 8009664:	00bfffd4 	movui	r2,65535
 8009668:	2829883a 	mov	r20,r5
 800966c:	1180b236 	bltu	r2,r6,8009938 <__udivdi3+0x318>
 8009670:	00803fc4 	movi	r2,255
 8009674:	1181622e 	bgeu	r2,r6,8009c00 <__udivdi3+0x5e0>
 8009678:	00800204 	movi	r2,8
 800967c:	1007883a 	mov	r3,r2
 8009680:	3084d83a 	srl	r2,r6,r2
 8009684:	01020074 	movhi	r4,2049
 8009688:	213d4a04 	addi	r4,r4,-2776
 800968c:	2085883a 	add	r2,r4,r2
 8009690:	11000003 	ldbu	r4,0(r2)
 8009694:	20c9883a 	add	r4,r4,r3
 8009698:	00c00804 	movi	r3,32
 800969c:	1907c83a 	sub	r3,r3,r4
 80096a0:	18000526 	beq	r3,zero,80096b8 <__udivdi3+0x98>
 80096a4:	80e0983a 	sll	r16,r16,r3
 80096a8:	9908d83a 	srl	r4,r19,r4
 80096ac:	30e4983a 	sll	r18,r6,r3
 80096b0:	98e2983a 	sll	r17,r19,r3
 80096b4:	8128b03a 	or	r20,r16,r4
 80096b8:	902ad43a 	srli	r21,r18,16
 80096bc:	a009883a 	mov	r4,r20
 80096c0:	95bfffcc 	andi	r22,r18,65535
 80096c4:	a80b883a 	mov	r5,r21
 80096c8:	800a3a00 	call	800a3a0 <__umodsi3>
 80096cc:	a009883a 	mov	r4,r20
 80096d0:	a80b883a 	mov	r5,r21
 80096d4:	102f883a 	mov	r23,r2
 80096d8:	800a3980 	call	800a398 <__udivsi3>
 80096dc:	1009883a 	mov	r4,r2
 80096e0:	b00b883a 	mov	r5,r22
 80096e4:	1021883a 	mov	r16,r2
 80096e8:	800a3a80 	call	800a3a8 <__mulsi3>
 80096ec:	b82e943a 	slli	r23,r23,16
 80096f0:	8808d43a 	srli	r4,r17,16
 80096f4:	b906b03a 	or	r3,r23,r4
 80096f8:	1880052e 	bgeu	r3,r2,8009710 <__udivdi3+0xf0>
 80096fc:	1c87883a 	add	r3,r3,r18
 8009700:	813fffc4 	addi	r4,r16,-1
 8009704:	1c800136 	bltu	r3,r18,800970c <__udivdi3+0xec>
 8009708:	18815236 	bltu	r3,r2,8009c54 <__udivdi3+0x634>
 800970c:	2021883a 	mov	r16,r4
 8009710:	18a7c83a 	sub	r19,r3,r2
 8009714:	9809883a 	mov	r4,r19
 8009718:	a80b883a 	mov	r5,r21
 800971c:	800a3a00 	call	800a3a0 <__umodsi3>
 8009720:	1029883a 	mov	r20,r2
 8009724:	9809883a 	mov	r4,r19
 8009728:	a80b883a 	mov	r5,r21
 800972c:	a028943a 	slli	r20,r20,16
 8009730:	800a3980 	call	800a398 <__udivsi3>
 8009734:	1009883a 	mov	r4,r2
 8009738:	b00b883a 	mov	r5,r22
 800973c:	8c7fffcc 	andi	r17,r17,65535
 8009740:	1027883a 	mov	r19,r2
 8009744:	a462b03a 	or	r17,r20,r17
 8009748:	800a3a80 	call	800a3a8 <__mulsi3>
 800974c:	8880052e 	bgeu	r17,r2,8009764 <__udivdi3+0x144>
 8009750:	8ca3883a 	add	r17,r17,r18
 8009754:	98ffffc4 	addi	r3,r19,-1
 8009758:	8c811036 	bltu	r17,r18,8009b9c <__udivdi3+0x57c>
 800975c:	88810f2e 	bgeu	r17,r2,8009b9c <__udivdi3+0x57c>
 8009760:	9cffff84 	addi	r19,r19,-2
 8009764:	8020943a 	slli	r16,r16,16
 8009768:	0007883a 	mov	r3,zero
 800976c:	9c04b03a 	or	r2,r19,r16
 8009770:	00006006 	br	80098f4 <__udivdi3+0x2d4>
 8009774:	29c05d36 	bltu	r5,r7,80098ec <__udivdi3+0x2cc>
 8009778:	00bfffd4 	movui	r2,65535
 800977c:	11c0692e 	bgeu	r2,r7,8009924 <__udivdi3+0x304>
 8009780:	00804034 	movhi	r2,256
 8009784:	10bfffc4 	addi	r2,r2,-1
 8009788:	11c10e2e 	bgeu	r2,r7,8009bc4 <__udivdi3+0x5a4>
 800978c:	01400604 	movi	r5,24
 8009790:	2811883a 	mov	r8,r5
 8009794:	394ad83a 	srl	r5,r7,r5
 8009798:	00820074 	movhi	r2,2049
 800979c:	10bd4a04 	addi	r2,r2,-2776
 80097a0:	114b883a 	add	r5,r2,r5
 80097a4:	29400003 	ldbu	r5,0(r5)
 80097a8:	00c00804 	movi	r3,32
 80097ac:	2a0b883a 	add	r5,r5,r8
 80097b0:	196fc83a 	sub	r23,r3,r5
 80097b4:	b8006b1e 	bne	r23,zero,8009964 <__udivdi3+0x344>
 80097b8:	3c011436 	bltu	r7,r16,8009c0c <__udivdi3+0x5ec>
 80097bc:	9985403a 	cmpgeu	r2,r19,r6
 80097c0:	0007883a 	mov	r3,zero
 80097c4:	00004b06 	br	80098f4 <__udivdi3+0x2d4>
 80097c8:	3000041e 	bne	r6,zero,80097dc <__udivdi3+0x1bc>
 80097cc:	01000044 	movi	r4,1
 80097d0:	000b883a 	mov	r5,zero
 80097d4:	800a3980 	call	800a398 <__udivsi3>
 80097d8:	1025883a 	mov	r18,r2
 80097dc:	00bfffd4 	movui	r2,65535
 80097e0:	14805b2e 	bgeu	r2,r18,8009950 <__udivdi3+0x330>
 80097e4:	00804034 	movhi	r2,256
 80097e8:	10bfffc4 	addi	r2,r2,-1
 80097ec:	1480fe2e 	bgeu	r2,r18,8009be8 <__udivdi3+0x5c8>
 80097f0:	00800604 	movi	r2,24
 80097f4:	1007883a 	mov	r3,r2
 80097f8:	9084d83a 	srl	r2,r18,r2
 80097fc:	01020074 	movhi	r4,2049
 8009800:	213d4a04 	addi	r4,r4,-2776
 8009804:	2085883a 	add	r2,r4,r2
 8009808:	11800003 	ldbu	r6,0(r2)
 800980c:	01c00804 	movi	r7,32
 8009810:	30c7883a 	add	r3,r6,r3
 8009814:	38cfc83a 	sub	r7,r7,r3
 8009818:	3800a71e 	bne	r7,zero,8009ab8 <__udivdi3+0x498>
 800981c:	9028d43a 	srli	r20,r18,16
 8009820:	84a1c83a 	sub	r16,r16,r18
 8009824:	957fffcc 	andi	r21,r18,65535
 8009828:	00c00044 	movi	r3,1
 800982c:	8009883a 	mov	r4,r16
 8009830:	a00b883a 	mov	r5,r20
 8009834:	d8c00015 	stw	r3,0(sp)
 8009838:	800a3a00 	call	800a3a0 <__umodsi3>
 800983c:	8009883a 	mov	r4,r16
 8009840:	a00b883a 	mov	r5,r20
 8009844:	102d883a 	mov	r22,r2
 8009848:	800a3980 	call	800a398 <__udivsi3>
 800984c:	1009883a 	mov	r4,r2
 8009850:	a80b883a 	mov	r5,r21
 8009854:	1021883a 	mov	r16,r2
 8009858:	800a3a80 	call	800a3a8 <__mulsi3>
 800985c:	b02c943a 	slli	r22,r22,16
 8009860:	880ed43a 	srli	r7,r17,16
 8009864:	d8c00017 	ldw	r3,0(sp)
 8009868:	b1ccb03a 	or	r6,r22,r7
 800986c:	3080052e 	bgeu	r6,r2,8009884 <__udivdi3+0x264>
 8009870:	348d883a 	add	r6,r6,r18
 8009874:	813fffc4 	addi	r4,r16,-1
 8009878:	34800136 	bltu	r6,r18,8009880 <__udivdi3+0x260>
 800987c:	3080f236 	bltu	r6,r2,8009c48 <__udivdi3+0x628>
 8009880:	2021883a 	mov	r16,r4
 8009884:	30a7c83a 	sub	r19,r6,r2
 8009888:	9809883a 	mov	r4,r19
 800988c:	a00b883a 	mov	r5,r20
 8009890:	d8c00015 	stw	r3,0(sp)
 8009894:	800a3a00 	call	800a3a0 <__umodsi3>
 8009898:	102d883a 	mov	r22,r2
 800989c:	9809883a 	mov	r4,r19
 80098a0:	a00b883a 	mov	r5,r20
 80098a4:	b02c943a 	slli	r22,r22,16
 80098a8:	800a3980 	call	800a398 <__udivsi3>
 80098ac:	1009883a 	mov	r4,r2
 80098b0:	a80b883a 	mov	r5,r21
 80098b4:	8c7fffcc 	andi	r17,r17,65535
 80098b8:	1027883a 	mov	r19,r2
 80098bc:	b462b03a 	or	r17,r22,r17
 80098c0:	800a3a80 	call	800a3a8 <__mulsi3>
 80098c4:	d8c00017 	ldw	r3,0(sp)
 80098c8:	8880052e 	bgeu	r17,r2,80098e0 <__udivdi3+0x2c0>
 80098cc:	8ca3883a 	add	r17,r17,r18
 80098d0:	993fffc4 	addi	r4,r19,-1
 80098d4:	8c80af36 	bltu	r17,r18,8009b94 <__udivdi3+0x574>
 80098d8:	8880ae2e 	bgeu	r17,r2,8009b94 <__udivdi3+0x574>
 80098dc:	9cffff84 	addi	r19,r19,-2
 80098e0:	8020943a 	slli	r16,r16,16
 80098e4:	9c04b03a 	or	r2,r19,r16
 80098e8:	00000206 	br	80098f4 <__udivdi3+0x2d4>
 80098ec:	0007883a 	mov	r3,zero
 80098f0:	0005883a 	mov	r2,zero
 80098f4:	dfc00a17 	ldw	ra,40(sp)
 80098f8:	df000917 	ldw	fp,36(sp)
 80098fc:	ddc00817 	ldw	r23,32(sp)
 8009900:	dd800717 	ldw	r22,28(sp)
 8009904:	dd400617 	ldw	r21,24(sp)
 8009908:	dd000517 	ldw	r20,20(sp)
 800990c:	dcc00417 	ldw	r19,16(sp)
 8009910:	dc800317 	ldw	r18,12(sp)
 8009914:	dc400217 	ldw	r17,8(sp)
 8009918:	dc000117 	ldw	r16,4(sp)
 800991c:	dec00b04 	addi	sp,sp,44
 8009920:	f800283a 	ret
 8009924:	00803fc4 	movi	r2,255
 8009928:	11c0a92e 	bgeu	r2,r7,8009bd0 <__udivdi3+0x5b0>
 800992c:	01400204 	movi	r5,8
 8009930:	2811883a 	mov	r8,r5
 8009934:	003f9706 	br	8009794 <__alt_data_end+0xfc009794>
 8009938:	00804034 	movhi	r2,256
 800993c:	10bfffc4 	addi	r2,r2,-1
 8009940:	1180a62e 	bgeu	r2,r6,8009bdc <__udivdi3+0x5bc>
 8009944:	00800604 	movi	r2,24
 8009948:	1007883a 	mov	r3,r2
 800994c:	003f4c06 	br	8009680 <__alt_data_end+0xfc009680>
 8009950:	00803fc4 	movi	r2,255
 8009954:	1480a72e 	bgeu	r2,r18,8009bf4 <__udivdi3+0x5d4>
 8009958:	00800204 	movi	r2,8
 800995c:	1007883a 	mov	r3,r2
 8009960:	003fa506 	br	80097f8 <__alt_data_end+0xfc0097f8>
 8009964:	3178d83a 	srl	fp,r6,r5
 8009968:	3dce983a 	sll	r7,r7,r23
 800996c:	8168d83a 	srl	r20,r16,r5
 8009970:	9950d83a 	srl	r8,r19,r5
 8009974:	3f38b03a 	or	fp,r7,fp
 8009978:	e024d43a 	srli	r18,fp,16
 800997c:	85e0983a 	sll	r16,r16,r23
 8009980:	a009883a 	mov	r4,r20
 8009984:	900b883a 	mov	r5,r18
 8009988:	8220b03a 	or	r16,r16,r8
 800998c:	35ea983a 	sll	r21,r6,r23
 8009990:	800a3a00 	call	800a3a0 <__umodsi3>
 8009994:	a009883a 	mov	r4,r20
 8009998:	900b883a 	mov	r5,r18
 800999c:	1023883a 	mov	r17,r2
 80099a0:	e5bfffcc 	andi	r22,fp,65535
 80099a4:	800a3980 	call	800a398 <__udivsi3>
 80099a8:	1009883a 	mov	r4,r2
 80099ac:	b00b883a 	mov	r5,r22
 80099b0:	1029883a 	mov	r20,r2
 80099b4:	800a3a80 	call	800a3a8 <__mulsi3>
 80099b8:	8806943a 	slli	r3,r17,16
 80099bc:	8014d43a 	srli	r10,r16,16
 80099c0:	1a92b03a 	or	r9,r3,r10
 80099c4:	4880042e 	bgeu	r9,r2,80099d8 <__udivdi3+0x3b8>
 80099c8:	4f13883a 	add	r9,r9,fp
 80099cc:	a0ffffc4 	addi	r3,r20,-1
 80099d0:	4f00952e 	bgeu	r9,fp,8009c28 <__udivdi3+0x608>
 80099d4:	1829883a 	mov	r20,r3
 80099d8:	48a3c83a 	sub	r17,r9,r2
 80099dc:	8809883a 	mov	r4,r17
 80099e0:	900b883a 	mov	r5,r18
 80099e4:	800a3a00 	call	800a3a0 <__umodsi3>
 80099e8:	8809883a 	mov	r4,r17
 80099ec:	900b883a 	mov	r5,r18
 80099f0:	d8800015 	stw	r2,0(sp)
 80099f4:	800a3980 	call	800a398 <__udivsi3>
 80099f8:	1009883a 	mov	r4,r2
 80099fc:	b00b883a 	mov	r5,r22
 8009a00:	1023883a 	mov	r17,r2
 8009a04:	800a3a80 	call	800a3a8 <__mulsi3>
 8009a08:	d8c00017 	ldw	r3,0(sp)
 8009a0c:	823fffcc 	andi	r8,r16,65535
 8009a10:	1806943a 	slli	r3,r3,16
 8009a14:	1a20b03a 	or	r16,r3,r8
 8009a18:	8080042e 	bgeu	r16,r2,8009a2c <__udivdi3+0x40c>
 8009a1c:	8721883a 	add	r16,r16,fp
 8009a20:	88ffffc4 	addi	r3,r17,-1
 8009a24:	87007c2e 	bgeu	r16,fp,8009c18 <__udivdi3+0x5f8>
 8009a28:	1823883a 	mov	r17,r3
 8009a2c:	a028943a 	slli	r20,r20,16
 8009a30:	acbfffcc 	andi	r18,r21,65535
 8009a34:	900b883a 	mov	r5,r18
 8009a38:	8d28b03a 	or	r20,r17,r20
 8009a3c:	a022d43a 	srli	r17,r20,16
 8009a40:	a5bfffcc 	andi	r22,r20,65535
 8009a44:	b009883a 	mov	r4,r22
 8009a48:	a82ad43a 	srli	r21,r21,16
 8009a4c:	80a1c83a 	sub	r16,r16,r2
 8009a50:	800a3a80 	call	800a3a8 <__mulsi3>
 8009a54:	8809883a 	mov	r4,r17
 8009a58:	900b883a 	mov	r5,r18
 8009a5c:	1039883a 	mov	fp,r2
 8009a60:	800a3a80 	call	800a3a8 <__mulsi3>
 8009a64:	8809883a 	mov	r4,r17
 8009a68:	a80b883a 	mov	r5,r21
 8009a6c:	1025883a 	mov	r18,r2
 8009a70:	800a3a80 	call	800a3a8 <__mulsi3>
 8009a74:	b009883a 	mov	r4,r22
 8009a78:	a80b883a 	mov	r5,r21
 8009a7c:	1023883a 	mov	r17,r2
 8009a80:	800a3a80 	call	800a3a8 <__mulsi3>
 8009a84:	e006d43a 	srli	r3,fp,16
 8009a88:	9085883a 	add	r2,r18,r2
 8009a8c:	10c7883a 	add	r3,r2,r3
 8009a90:	1c80022e 	bgeu	r3,r18,8009a9c <__udivdi3+0x47c>
 8009a94:	00800074 	movhi	r2,1
 8009a98:	88a3883a 	add	r17,r17,r2
 8009a9c:	1808d43a 	srli	r4,r3,16
 8009aa0:	8909883a 	add	r4,r17,r4
 8009aa4:	81004436 	bltu	r16,r4,8009bb8 <__udivdi3+0x598>
 8009aa8:	81003e26 	beq	r16,r4,8009ba4 <__udivdi3+0x584>
 8009aac:	a005883a 	mov	r2,r20
 8009ab0:	0007883a 	mov	r3,zero
 8009ab4:	003f8f06 	br	80098f4 <__alt_data_end+0xfc0098f4>
 8009ab8:	91e4983a 	sll	r18,r18,r7
 8009abc:	80eed83a 	srl	r23,r16,r3
 8009ac0:	81cc983a 	sll	r6,r16,r7
 8009ac4:	9028d43a 	srli	r20,r18,16
 8009ac8:	98c6d83a 	srl	r3,r19,r3
 8009acc:	b809883a 	mov	r4,r23
 8009ad0:	a00b883a 	mov	r5,r20
 8009ad4:	30ecb03a 	or	r22,r6,r3
 8009ad8:	99e2983a 	sll	r17,r19,r7
 8009adc:	800a3a00 	call	800a3a0 <__umodsi3>
 8009ae0:	b809883a 	mov	r4,r23
 8009ae4:	a00b883a 	mov	r5,r20
 8009ae8:	1021883a 	mov	r16,r2
 8009aec:	957fffcc 	andi	r21,r18,65535
 8009af0:	800a3980 	call	800a398 <__udivsi3>
 8009af4:	a80b883a 	mov	r5,r21
 8009af8:	1009883a 	mov	r4,r2
 8009afc:	102f883a 	mov	r23,r2
 8009b00:	800a3a80 	call	800a3a8 <__mulsi3>
 8009b04:	8020943a 	slli	r16,r16,16
 8009b08:	b00ad43a 	srli	r5,r22,16
 8009b0c:	814cb03a 	or	r6,r16,r5
 8009b10:	3080062e 	bgeu	r6,r2,8009b2c <__udivdi3+0x50c>
 8009b14:	348d883a 	add	r6,r6,r18
 8009b18:	b8ffffc4 	addi	r3,r23,-1
 8009b1c:	34804836 	bltu	r6,r18,8009c40 <__udivdi3+0x620>
 8009b20:	3080472e 	bgeu	r6,r2,8009c40 <__udivdi3+0x620>
 8009b24:	bdffff84 	addi	r23,r23,-2
 8009b28:	348d883a 	add	r6,r6,r18
 8009b2c:	30a7c83a 	sub	r19,r6,r2
 8009b30:	9809883a 	mov	r4,r19
 8009b34:	a00b883a 	mov	r5,r20
 8009b38:	800a3a00 	call	800a3a0 <__umodsi3>
 8009b3c:	9809883a 	mov	r4,r19
 8009b40:	a00b883a 	mov	r5,r20
 8009b44:	1039883a 	mov	fp,r2
 8009b48:	800a3980 	call	800a398 <__udivsi3>
 8009b4c:	1009883a 	mov	r4,r2
 8009b50:	a80b883a 	mov	r5,r21
 8009b54:	e038943a 	slli	fp,fp,16
 8009b58:	1027883a 	mov	r19,r2
 8009b5c:	800a3a80 	call	800a3a8 <__mulsi3>
 8009b60:	b1bfffcc 	andi	r6,r22,65535
 8009b64:	e18cb03a 	or	r6,fp,r6
 8009b68:	3080062e 	bgeu	r6,r2,8009b84 <__udivdi3+0x564>
 8009b6c:	348d883a 	add	r6,r6,r18
 8009b70:	98ffffc4 	addi	r3,r19,-1
 8009b74:	34803036 	bltu	r6,r18,8009c38 <__udivdi3+0x618>
 8009b78:	30802f2e 	bgeu	r6,r2,8009c38 <__udivdi3+0x618>
 8009b7c:	9cffff84 	addi	r19,r19,-2
 8009b80:	348d883a 	add	r6,r6,r18
 8009b84:	b82e943a 	slli	r23,r23,16
 8009b88:	30a1c83a 	sub	r16,r6,r2
 8009b8c:	9dc6b03a 	or	r3,r19,r23
 8009b90:	003f2606 	br	800982c <__alt_data_end+0xfc00982c>
 8009b94:	2027883a 	mov	r19,r4
 8009b98:	003f5106 	br	80098e0 <__alt_data_end+0xfc0098e0>
 8009b9c:	1827883a 	mov	r19,r3
 8009ba0:	003ef006 	br	8009764 <__alt_data_end+0xfc009764>
 8009ba4:	1808943a 	slli	r4,r3,16
 8009ba8:	9dc6983a 	sll	r3,r19,r23
 8009bac:	e73fffcc 	andi	fp,fp,65535
 8009bb0:	2709883a 	add	r4,r4,fp
 8009bb4:	193fbd2e 	bgeu	r3,r4,8009aac <__alt_data_end+0xfc009aac>
 8009bb8:	a0bfffc4 	addi	r2,r20,-1
 8009bbc:	0007883a 	mov	r3,zero
 8009bc0:	003f4c06 	br	80098f4 <__alt_data_end+0xfc0098f4>
 8009bc4:	01400404 	movi	r5,16
 8009bc8:	2811883a 	mov	r8,r5
 8009bcc:	003ef106 	br	8009794 <__alt_data_end+0xfc009794>
 8009bd0:	000b883a 	mov	r5,zero
 8009bd4:	0011883a 	mov	r8,zero
 8009bd8:	003eee06 	br	8009794 <__alt_data_end+0xfc009794>
 8009bdc:	00800404 	movi	r2,16
 8009be0:	1007883a 	mov	r3,r2
 8009be4:	003ea606 	br	8009680 <__alt_data_end+0xfc009680>
 8009be8:	00800404 	movi	r2,16
 8009bec:	1007883a 	mov	r3,r2
 8009bf0:	003f0106 	br	80097f8 <__alt_data_end+0xfc0097f8>
 8009bf4:	0005883a 	mov	r2,zero
 8009bf8:	0007883a 	mov	r3,zero
 8009bfc:	003efe06 	br	80097f8 <__alt_data_end+0xfc0097f8>
 8009c00:	0005883a 	mov	r2,zero
 8009c04:	0007883a 	mov	r3,zero
 8009c08:	003e9d06 	br	8009680 <__alt_data_end+0xfc009680>
 8009c0c:	0007883a 	mov	r3,zero
 8009c10:	00800044 	movi	r2,1
 8009c14:	003f3706 	br	80098f4 <__alt_data_end+0xfc0098f4>
 8009c18:	80bf832e 	bgeu	r16,r2,8009a28 <__alt_data_end+0xfc009a28>
 8009c1c:	8c7fff84 	addi	r17,r17,-2
 8009c20:	8721883a 	add	r16,r16,fp
 8009c24:	003f8106 	br	8009a2c <__alt_data_end+0xfc009a2c>
 8009c28:	48bf6a2e 	bgeu	r9,r2,80099d4 <__alt_data_end+0xfc0099d4>
 8009c2c:	a53fff84 	addi	r20,r20,-2
 8009c30:	4f13883a 	add	r9,r9,fp
 8009c34:	003f6806 	br	80099d8 <__alt_data_end+0xfc0099d8>
 8009c38:	1827883a 	mov	r19,r3
 8009c3c:	003fd106 	br	8009b84 <__alt_data_end+0xfc009b84>
 8009c40:	182f883a 	mov	r23,r3
 8009c44:	003fb906 	br	8009b2c <__alt_data_end+0xfc009b2c>
 8009c48:	843fff84 	addi	r16,r16,-2
 8009c4c:	348d883a 	add	r6,r6,r18
 8009c50:	003f0c06 	br	8009884 <__alt_data_end+0xfc009884>
 8009c54:	843fff84 	addi	r16,r16,-2
 8009c58:	1c87883a 	add	r3,r3,r18
 8009c5c:	003eac06 	br	8009710 <__alt_data_end+0xfc009710>

08009c60 <__umoddi3>:
 8009c60:	defff404 	addi	sp,sp,-48
 8009c64:	dd800815 	stw	r22,32(sp)
 8009c68:	dc400315 	stw	r17,12(sp)
 8009c6c:	dc000215 	stw	r16,8(sp)
 8009c70:	dfc00b15 	stw	ra,44(sp)
 8009c74:	df000a15 	stw	fp,40(sp)
 8009c78:	ddc00915 	stw	r23,36(sp)
 8009c7c:	dd400715 	stw	r21,28(sp)
 8009c80:	dd000615 	stw	r20,24(sp)
 8009c84:	dcc00515 	stw	r19,20(sp)
 8009c88:	dc800415 	stw	r18,16(sp)
 8009c8c:	2021883a 	mov	r16,r4
 8009c90:	2823883a 	mov	r17,r5
 8009c94:	282d883a 	mov	r22,r5
 8009c98:	38003c1e 	bne	r7,zero,8009d8c <__umoddi3+0x12c>
 8009c9c:	3027883a 	mov	r19,r6
 8009ca0:	2029883a 	mov	r20,r4
 8009ca4:	2980522e 	bgeu	r5,r6,8009df0 <__umoddi3+0x190>
 8009ca8:	00bfffd4 	movui	r2,65535
 8009cac:	1180a436 	bltu	r2,r6,8009f40 <__umoddi3+0x2e0>
 8009cb0:	00803fc4 	movi	r2,255
 8009cb4:	11815e2e 	bgeu	r2,r6,800a230 <__umoddi3+0x5d0>
 8009cb8:	01400204 	movi	r5,8
 8009cbc:	2805883a 	mov	r2,r5
 8009cc0:	314ad83a 	srl	r5,r6,r5
 8009cc4:	00c20074 	movhi	r3,2049
 8009cc8:	18fd4a04 	addi	r3,r3,-2776
 8009ccc:	194b883a 	add	r5,r3,r5
 8009cd0:	29000003 	ldbu	r4,0(r5)
 8009cd4:	2089883a 	add	r4,r4,r2
 8009cd8:	00800804 	movi	r2,32
 8009cdc:	1105c83a 	sub	r2,r2,r4
 8009ce0:	10010c26 	beq	r2,zero,800a114 <__umoddi3+0x4b4>
 8009ce4:	88a2983a 	sll	r17,r17,r2
 8009ce8:	8108d83a 	srl	r4,r16,r4
 8009cec:	30a6983a 	sll	r19,r6,r2
 8009cf0:	80a8983a 	sll	r20,r16,r2
 8009cf4:	1025883a 	mov	r18,r2
 8009cf8:	892cb03a 	or	r22,r17,r4
 8009cfc:	9822d43a 	srli	r17,r19,16
 8009d00:	b009883a 	mov	r4,r22
 8009d04:	9d7fffcc 	andi	r21,r19,65535
 8009d08:	880b883a 	mov	r5,r17
 8009d0c:	800a3a00 	call	800a3a0 <__umodsi3>
 8009d10:	b009883a 	mov	r4,r22
 8009d14:	880b883a 	mov	r5,r17
 8009d18:	102f883a 	mov	r23,r2
 8009d1c:	800a3980 	call	800a398 <__udivsi3>
 8009d20:	1009883a 	mov	r4,r2
 8009d24:	a80b883a 	mov	r5,r21
 8009d28:	800a3a80 	call	800a3a8 <__mulsi3>
 8009d2c:	b82e943a 	slli	r23,r23,16
 8009d30:	a008d43a 	srli	r4,r20,16
 8009d34:	b906b03a 	or	r3,r23,r4
 8009d38:	1880042e 	bgeu	r3,r2,8009d4c <__umoddi3+0xec>
 8009d3c:	1cc7883a 	add	r3,r3,r19
 8009d40:	1cc00236 	bltu	r3,r19,8009d4c <__umoddi3+0xec>
 8009d44:	1880012e 	bgeu	r3,r2,8009d4c <__umoddi3+0xec>
 8009d48:	1cc7883a 	add	r3,r3,r19
 8009d4c:	18a1c83a 	sub	r16,r3,r2
 8009d50:	8009883a 	mov	r4,r16
 8009d54:	880b883a 	mov	r5,r17
 8009d58:	800a3a00 	call	800a3a0 <__umodsi3>
 8009d5c:	8009883a 	mov	r4,r16
 8009d60:	880b883a 	mov	r5,r17
 8009d64:	102d883a 	mov	r22,r2
 8009d68:	800a3980 	call	800a398 <__udivsi3>
 8009d6c:	1009883a 	mov	r4,r2
 8009d70:	a80b883a 	mov	r5,r21
 8009d74:	b02c943a 	slli	r22,r22,16
 8009d78:	800a3a80 	call	800a3a8 <__mulsi3>
 8009d7c:	a13fffcc 	andi	r4,r20,65535
 8009d80:	b106b03a 	or	r3,r22,r4
 8009d84:	1880572e 	bgeu	r3,r2,8009ee4 <__umoddi3+0x284>
 8009d88:	00005206 	br	8009ed4 <__umoddi3+0x274>
 8009d8c:	29c05936 	bltu	r5,r7,8009ef4 <__umoddi3+0x294>
 8009d90:	00bfffd4 	movui	r2,65535
 8009d94:	11c0652e 	bgeu	r2,r7,8009f2c <__umoddi3+0x2cc>
 8009d98:	00804034 	movhi	r2,256
 8009d9c:	10bfffc4 	addi	r2,r2,-1
 8009da0:	11c1172e 	bgeu	r2,r7,800a200 <__umoddi3+0x5a0>
 8009da4:	01400604 	movi	r5,24
 8009da8:	282b883a 	mov	r21,r5
 8009dac:	394ad83a 	srl	r5,r7,r5
 8009db0:	00c20074 	movhi	r3,2049
 8009db4:	18fd4a04 	addi	r3,r3,-2776
 8009db8:	194b883a 	add	r5,r3,r5
 8009dbc:	28800003 	ldbu	r2,0(r5)
 8009dc0:	00c00804 	movi	r3,32
 8009dc4:	156b883a 	add	r21,r2,r21
 8009dc8:	1d69c83a 	sub	r20,r3,r21
 8009dcc:	a000671e 	bne	r20,zero,8009f6c <__umoddi3+0x30c>
 8009dd0:	3c400136 	bltu	r7,r17,8009dd8 <__umoddi3+0x178>
 8009dd4:	81812336 	bltu	r16,r6,800a264 <__umoddi3+0x604>
 8009dd8:	8185c83a 	sub	r2,r16,r6
 8009ddc:	89e3c83a 	sub	r17,r17,r7
 8009de0:	8087803a 	cmpltu	r3,r16,r2
 8009de4:	88edc83a 	sub	r22,r17,r3
 8009de8:	b007883a 	mov	r3,r22
 8009dec:	00004306 	br	8009efc <__umoddi3+0x29c>
 8009df0:	3000041e 	bne	r6,zero,8009e04 <__umoddi3+0x1a4>
 8009df4:	01000044 	movi	r4,1
 8009df8:	000b883a 	mov	r5,zero
 8009dfc:	800a3980 	call	800a398 <__udivsi3>
 8009e00:	1027883a 	mov	r19,r2
 8009e04:	00bfffd4 	movui	r2,65535
 8009e08:	14c0532e 	bgeu	r2,r19,8009f58 <__umoddi3+0x2f8>
 8009e0c:	00804034 	movhi	r2,256
 8009e10:	10bfffc4 	addi	r2,r2,-1
 8009e14:	14c1032e 	bgeu	r2,r19,800a224 <__umoddi3+0x5c4>
 8009e18:	00800604 	movi	r2,24
 8009e1c:	1007883a 	mov	r3,r2
 8009e20:	9884d83a 	srl	r2,r19,r2
 8009e24:	01020074 	movhi	r4,2049
 8009e28:	213d4a04 	addi	r4,r4,-2776
 8009e2c:	2085883a 	add	r2,r4,r2
 8009e30:	11000003 	ldbu	r4,0(r2)
 8009e34:	00800804 	movi	r2,32
 8009e38:	20c7883a 	add	r3,r4,r3
 8009e3c:	10c5c83a 	sub	r2,r2,r3
 8009e40:	1000b61e 	bne	r2,zero,800a11c <__umoddi3+0x4bc>
 8009e44:	982ad43a 	srli	r21,r19,16
 8009e48:	8ce3c83a 	sub	r17,r17,r19
 8009e4c:	9dbfffcc 	andi	r22,r19,65535
 8009e50:	0025883a 	mov	r18,zero
 8009e54:	8809883a 	mov	r4,r17
 8009e58:	a80b883a 	mov	r5,r21
 8009e5c:	800a3a00 	call	800a3a0 <__umodsi3>
 8009e60:	8809883a 	mov	r4,r17
 8009e64:	a80b883a 	mov	r5,r21
 8009e68:	102f883a 	mov	r23,r2
 8009e6c:	800a3980 	call	800a398 <__udivsi3>
 8009e70:	1009883a 	mov	r4,r2
 8009e74:	b00b883a 	mov	r5,r22
 8009e78:	800a3a80 	call	800a3a8 <__mulsi3>
 8009e7c:	b82e943a 	slli	r23,r23,16
 8009e80:	a008d43a 	srli	r4,r20,16
 8009e84:	b906b03a 	or	r3,r23,r4
 8009e88:	1880032e 	bgeu	r3,r2,8009e98 <__umoddi3+0x238>
 8009e8c:	1cc7883a 	add	r3,r3,r19
 8009e90:	1cc00136 	bltu	r3,r19,8009e98 <__umoddi3+0x238>
 8009e94:	1880f136 	bltu	r3,r2,800a25c <__umoddi3+0x5fc>
 8009e98:	18a1c83a 	sub	r16,r3,r2
 8009e9c:	8009883a 	mov	r4,r16
 8009ea0:	a80b883a 	mov	r5,r21
 8009ea4:	800a3a00 	call	800a3a0 <__umodsi3>
 8009ea8:	8009883a 	mov	r4,r16
 8009eac:	a80b883a 	mov	r5,r21
 8009eb0:	1023883a 	mov	r17,r2
 8009eb4:	800a3980 	call	800a398 <__udivsi3>
 8009eb8:	1009883a 	mov	r4,r2
 8009ebc:	b00b883a 	mov	r5,r22
 8009ec0:	8822943a 	slli	r17,r17,16
 8009ec4:	800a3a80 	call	800a3a8 <__mulsi3>
 8009ec8:	a13fffcc 	andi	r4,r20,65535
 8009ecc:	8906b03a 	or	r3,r17,r4
 8009ed0:	1880042e 	bgeu	r3,r2,8009ee4 <__umoddi3+0x284>
 8009ed4:	1cc7883a 	add	r3,r3,r19
 8009ed8:	1cc00236 	bltu	r3,r19,8009ee4 <__umoddi3+0x284>
 8009edc:	1880012e 	bgeu	r3,r2,8009ee4 <__umoddi3+0x284>
 8009ee0:	1cc7883a 	add	r3,r3,r19
 8009ee4:	1887c83a 	sub	r3,r3,r2
 8009ee8:	1c84d83a 	srl	r2,r3,r18
 8009eec:	0007883a 	mov	r3,zero
 8009ef0:	00000206 	br	8009efc <__umoddi3+0x29c>
 8009ef4:	2005883a 	mov	r2,r4
 8009ef8:	2807883a 	mov	r3,r5
 8009efc:	dfc00b17 	ldw	ra,44(sp)
 8009f00:	df000a17 	ldw	fp,40(sp)
 8009f04:	ddc00917 	ldw	r23,36(sp)
 8009f08:	dd800817 	ldw	r22,32(sp)
 8009f0c:	dd400717 	ldw	r21,28(sp)
 8009f10:	dd000617 	ldw	r20,24(sp)
 8009f14:	dcc00517 	ldw	r19,20(sp)
 8009f18:	dc800417 	ldw	r18,16(sp)
 8009f1c:	dc400317 	ldw	r17,12(sp)
 8009f20:	dc000217 	ldw	r16,8(sp)
 8009f24:	dec00c04 	addi	sp,sp,48
 8009f28:	f800283a 	ret
 8009f2c:	00803fc4 	movi	r2,255
 8009f30:	11c0b02e 	bgeu	r2,r7,800a1f4 <__umoddi3+0x594>
 8009f34:	01400204 	movi	r5,8
 8009f38:	282b883a 	mov	r21,r5
 8009f3c:	003f9b06 	br	8009dac <__alt_data_end+0xfc009dac>
 8009f40:	00804034 	movhi	r2,256
 8009f44:	10bfffc4 	addi	r2,r2,-1
 8009f48:	1180b02e 	bgeu	r2,r6,800a20c <__umoddi3+0x5ac>
 8009f4c:	01400604 	movi	r5,24
 8009f50:	2805883a 	mov	r2,r5
 8009f54:	003f5a06 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 8009f58:	00803fc4 	movi	r2,255
 8009f5c:	14c0ae2e 	bgeu	r2,r19,800a218 <__umoddi3+0x5b8>
 8009f60:	00800204 	movi	r2,8
 8009f64:	1007883a 	mov	r3,r2
 8009f68:	003fad06 	br	8009e20 <__alt_data_end+0xfc009e20>
 8009f6c:	3d0a983a 	sll	r5,r7,r20
 8009f70:	356cd83a 	srl	r22,r6,r21
 8009f74:	8d78d83a 	srl	fp,r17,r21
 8009f78:	8d10983a 	sll	r8,r17,r20
 8009f7c:	2dacb03a 	or	r22,r5,r22
 8009f80:	b02ed43a 	srli	r23,r22,16
 8009f84:	8564d83a 	srl	r18,r16,r21
 8009f88:	e009883a 	mov	r4,fp
 8009f8c:	b80b883a 	mov	r5,r23
 8009f90:	44a4b03a 	or	r18,r8,r18
 8009f94:	3526983a 	sll	r19,r6,r20
 8009f98:	800a3a00 	call	800a3a0 <__umodsi3>
 8009f9c:	e009883a 	mov	r4,fp
 8009fa0:	b80b883a 	mov	r5,r23
 8009fa4:	b47fffcc 	andi	r17,r22,65535
 8009fa8:	d8800015 	stw	r2,0(sp)
 8009fac:	800a3980 	call	800a398 <__udivsi3>
 8009fb0:	1009883a 	mov	r4,r2
 8009fb4:	880b883a 	mov	r5,r17
 8009fb8:	1039883a 	mov	fp,r2
 8009fbc:	800a3a80 	call	800a3a8 <__mulsi3>
 8009fc0:	d9800017 	ldw	r6,0(sp)
 8009fc4:	9008d43a 	srli	r4,r18,16
 8009fc8:	8520983a 	sll	r16,r16,r20
 8009fcc:	300c943a 	slli	r6,r6,16
 8009fd0:	3106b03a 	or	r3,r6,r4
 8009fd4:	1880042e 	bgeu	r3,r2,8009fe8 <__umoddi3+0x388>
 8009fd8:	1d87883a 	add	r3,r3,r22
 8009fdc:	e13fffc4 	addi	r4,fp,-1
 8009fe0:	1d809a2e 	bgeu	r3,r22,800a24c <__umoddi3+0x5ec>
 8009fe4:	2039883a 	mov	fp,r4
 8009fe8:	1887c83a 	sub	r3,r3,r2
 8009fec:	1809883a 	mov	r4,r3
 8009ff0:	b80b883a 	mov	r5,r23
 8009ff4:	d8c00115 	stw	r3,4(sp)
 8009ff8:	800a3a00 	call	800a3a0 <__umodsi3>
 8009ffc:	d8c00117 	ldw	r3,4(sp)
 800a000:	b80b883a 	mov	r5,r23
 800a004:	d8800015 	stw	r2,0(sp)
 800a008:	1809883a 	mov	r4,r3
 800a00c:	800a3980 	call	800a398 <__udivsi3>
 800a010:	880b883a 	mov	r5,r17
 800a014:	1009883a 	mov	r4,r2
 800a018:	102f883a 	mov	r23,r2
 800a01c:	800a3a80 	call	800a3a8 <__mulsi3>
 800a020:	d9800017 	ldw	r6,0(sp)
 800a024:	947fffcc 	andi	r17,r18,65535
 800a028:	300c943a 	slli	r6,r6,16
 800a02c:	3464b03a 	or	r18,r6,r17
 800a030:	9080042e 	bgeu	r18,r2,800a044 <__umoddi3+0x3e4>
 800a034:	95a5883a 	add	r18,r18,r22
 800a038:	b8ffffc4 	addi	r3,r23,-1
 800a03c:	95807f2e 	bgeu	r18,r22,800a23c <__umoddi3+0x5dc>
 800a040:	182f883a 	mov	r23,r3
 800a044:	e038943a 	slli	fp,fp,16
 800a048:	980cd43a 	srli	r6,r19,16
 800a04c:	98ffffcc 	andi	r3,r19,65535
 800a050:	bf38b03a 	or	fp,r23,fp
 800a054:	e02ed43a 	srli	r23,fp,16
 800a058:	e73fffcc 	andi	fp,fp,65535
 800a05c:	180b883a 	mov	r5,r3
 800a060:	e009883a 	mov	r4,fp
 800a064:	d9800015 	stw	r6,0(sp)
 800a068:	d8c00115 	stw	r3,4(sp)
 800a06c:	90a5c83a 	sub	r18,r18,r2
 800a070:	800a3a80 	call	800a3a8 <__mulsi3>
 800a074:	d8c00117 	ldw	r3,4(sp)
 800a078:	b809883a 	mov	r4,r23
 800a07c:	1023883a 	mov	r17,r2
 800a080:	180b883a 	mov	r5,r3
 800a084:	800a3a80 	call	800a3a8 <__mulsi3>
 800a088:	d9800017 	ldw	r6,0(sp)
 800a08c:	b809883a 	mov	r4,r23
 800a090:	d8800115 	stw	r2,4(sp)
 800a094:	300b883a 	mov	r5,r6
 800a098:	302f883a 	mov	r23,r6
 800a09c:	800a3a80 	call	800a3a8 <__mulsi3>
 800a0a0:	e009883a 	mov	r4,fp
 800a0a4:	b80b883a 	mov	r5,r23
 800a0a8:	d8800015 	stw	r2,0(sp)
 800a0ac:	800a3a80 	call	800a3a8 <__mulsi3>
 800a0b0:	d8c00117 	ldw	r3,4(sp)
 800a0b4:	880cd43a 	srli	r6,r17,16
 800a0b8:	d9c00017 	ldw	r7,0(sp)
 800a0bc:	1885883a 	add	r2,r3,r2
 800a0c0:	118d883a 	add	r6,r2,r6
 800a0c4:	30c0022e 	bgeu	r6,r3,800a0d0 <__umoddi3+0x470>
 800a0c8:	00800074 	movhi	r2,1
 800a0cc:	388f883a 	add	r7,r7,r2
 800a0d0:	3006d43a 	srli	r3,r6,16
 800a0d4:	300c943a 	slli	r6,r6,16
 800a0d8:	8c7fffcc 	andi	r17,r17,65535
 800a0dc:	38c7883a 	add	r3,r7,r3
 800a0e0:	3463883a 	add	r17,r6,r17
 800a0e4:	90c03d36 	bltu	r18,r3,800a1dc <__umoddi3+0x57c>
 800a0e8:	90c06026 	beq	r18,r3,800a26c <__umoddi3+0x60c>
 800a0ec:	90c9c83a 	sub	r4,r18,r3
 800a0f0:	880f883a 	mov	r7,r17
 800a0f4:	81cfc83a 	sub	r7,r16,r7
 800a0f8:	81c7803a 	cmpltu	r3,r16,r7
 800a0fc:	20c7c83a 	sub	r3,r4,r3
 800a100:	1d44983a 	sll	r2,r3,r21
 800a104:	3d0ed83a 	srl	r7,r7,r20
 800a108:	1d06d83a 	srl	r3,r3,r20
 800a10c:	11c4b03a 	or	r2,r2,r7
 800a110:	003f7a06 	br	8009efc <__alt_data_end+0xfc009efc>
 800a114:	0025883a 	mov	r18,zero
 800a118:	003ef806 	br	8009cfc <__alt_data_end+0xfc009cfc>
 800a11c:	98a6983a 	sll	r19,r19,r2
 800a120:	88e8d83a 	srl	r20,r17,r3
 800a124:	80c6d83a 	srl	r3,r16,r3
 800a128:	982ad43a 	srli	r21,r19,16
 800a12c:	88a2983a 	sll	r17,r17,r2
 800a130:	a009883a 	mov	r4,r20
 800a134:	a80b883a 	mov	r5,r21
 800a138:	88eeb03a 	or	r23,r17,r3
 800a13c:	1025883a 	mov	r18,r2
 800a140:	800a3a00 	call	800a3a0 <__umodsi3>
 800a144:	a009883a 	mov	r4,r20
 800a148:	a80b883a 	mov	r5,r21
 800a14c:	1023883a 	mov	r17,r2
 800a150:	9dbfffcc 	andi	r22,r19,65535
 800a154:	800a3980 	call	800a398 <__udivsi3>
 800a158:	1009883a 	mov	r4,r2
 800a15c:	b00b883a 	mov	r5,r22
 800a160:	800a3a80 	call	800a3a8 <__mulsi3>
 800a164:	8822943a 	slli	r17,r17,16
 800a168:	b808d43a 	srli	r4,r23,16
 800a16c:	84a8983a 	sll	r20,r16,r18
 800a170:	8906b03a 	or	r3,r17,r4
 800a174:	1880042e 	bgeu	r3,r2,800a188 <__umoddi3+0x528>
 800a178:	1cc7883a 	add	r3,r3,r19
 800a17c:	1cc00236 	bltu	r3,r19,800a188 <__umoddi3+0x528>
 800a180:	1880012e 	bgeu	r3,r2,800a188 <__umoddi3+0x528>
 800a184:	1cc7883a 	add	r3,r3,r19
 800a188:	18a1c83a 	sub	r16,r3,r2
 800a18c:	8009883a 	mov	r4,r16
 800a190:	a80b883a 	mov	r5,r21
 800a194:	800a3a00 	call	800a3a0 <__umodsi3>
 800a198:	8009883a 	mov	r4,r16
 800a19c:	a80b883a 	mov	r5,r21
 800a1a0:	1039883a 	mov	fp,r2
 800a1a4:	800a3980 	call	800a398 <__udivsi3>
 800a1a8:	1009883a 	mov	r4,r2
 800a1ac:	b00b883a 	mov	r5,r22
 800a1b0:	800a3a80 	call	800a3a8 <__mulsi3>
 800a1b4:	e006943a 	slli	r3,fp,16
 800a1b8:	b93fffcc 	andi	r4,r23,65535
 800a1bc:	1906b03a 	or	r3,r3,r4
 800a1c0:	1880042e 	bgeu	r3,r2,800a1d4 <__umoddi3+0x574>
 800a1c4:	1cc7883a 	add	r3,r3,r19
 800a1c8:	1cc00236 	bltu	r3,r19,800a1d4 <__umoddi3+0x574>
 800a1cc:	1880012e 	bgeu	r3,r2,800a1d4 <__umoddi3+0x574>
 800a1d0:	1cc7883a 	add	r3,r3,r19
 800a1d4:	18a3c83a 	sub	r17,r3,r2
 800a1d8:	003f1e06 	br	8009e54 <__alt_data_end+0xfc009e54>
 800a1dc:	8ccfc83a 	sub	r7,r17,r19
 800a1e0:	1d89c83a 	sub	r4,r3,r22
 800a1e4:	89e3803a 	cmpltu	r17,r17,r7
 800a1e8:	2463c83a 	sub	r17,r4,r17
 800a1ec:	9449c83a 	sub	r4,r18,r17
 800a1f0:	003fc006 	br	800a0f4 <__alt_data_end+0xfc00a0f4>
 800a1f4:	000b883a 	mov	r5,zero
 800a1f8:	002b883a 	mov	r21,zero
 800a1fc:	003eeb06 	br	8009dac <__alt_data_end+0xfc009dac>
 800a200:	01400404 	movi	r5,16
 800a204:	282b883a 	mov	r21,r5
 800a208:	003ee806 	br	8009dac <__alt_data_end+0xfc009dac>
 800a20c:	01400404 	movi	r5,16
 800a210:	2805883a 	mov	r2,r5
 800a214:	003eaa06 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 800a218:	0005883a 	mov	r2,zero
 800a21c:	0007883a 	mov	r3,zero
 800a220:	003eff06 	br	8009e20 <__alt_data_end+0xfc009e20>
 800a224:	00800404 	movi	r2,16
 800a228:	1007883a 	mov	r3,r2
 800a22c:	003efc06 	br	8009e20 <__alt_data_end+0xfc009e20>
 800a230:	000b883a 	mov	r5,zero
 800a234:	0005883a 	mov	r2,zero
 800a238:	003ea106 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 800a23c:	90bf802e 	bgeu	r18,r2,800a040 <__alt_data_end+0xfc00a040>
 800a240:	bdffff84 	addi	r23,r23,-2
 800a244:	95a5883a 	add	r18,r18,r22
 800a248:	003f7e06 	br	800a044 <__alt_data_end+0xfc00a044>
 800a24c:	18bf652e 	bgeu	r3,r2,8009fe4 <__alt_data_end+0xfc009fe4>
 800a250:	e73fff84 	addi	fp,fp,-2
 800a254:	1d87883a 	add	r3,r3,r22
 800a258:	003f6306 	br	8009fe8 <__alt_data_end+0xfc009fe8>
 800a25c:	1cc7883a 	add	r3,r3,r19
 800a260:	003f0d06 	br	8009e98 <__alt_data_end+0xfc009e98>
 800a264:	8005883a 	mov	r2,r16
 800a268:	003edf06 	br	8009de8 <__alt_data_end+0xfc009de8>
 800a26c:	847fdb36 	bltu	r16,r17,800a1dc <__alt_data_end+0xfc00a1dc>
 800a270:	880f883a 	mov	r7,r17
 800a274:	0009883a 	mov	r4,zero
 800a278:	003f9e06 	br	800a0f4 <__alt_data_end+0xfc00a0f4>

0800a27c <udivmodsi4>:
 800a27c:	2900182e 	bgeu	r5,r4,800a2e0 <udivmodsi4+0x64>
 800a280:	28001716 	blt	r5,zero,800a2e0 <udivmodsi4+0x64>
 800a284:	00800804 	movi	r2,32
 800a288:	00c00044 	movi	r3,1
 800a28c:	00000206 	br	800a298 <udivmodsi4+0x1c>
 800a290:	10001126 	beq	r2,zero,800a2d8 <udivmodsi4+0x5c>
 800a294:	28000516 	blt	r5,zero,800a2ac <udivmodsi4+0x30>
 800a298:	294b883a 	add	r5,r5,r5
 800a29c:	10bfffc4 	addi	r2,r2,-1
 800a2a0:	18c7883a 	add	r3,r3,r3
 800a2a4:	293ffa36 	bltu	r5,r4,800a290 <__alt_data_end+0xfc00a290>
 800a2a8:	18000b26 	beq	r3,zero,800a2d8 <udivmodsi4+0x5c>
 800a2ac:	0005883a 	mov	r2,zero
 800a2b0:	21400236 	bltu	r4,r5,800a2bc <udivmodsi4+0x40>
 800a2b4:	2149c83a 	sub	r4,r4,r5
 800a2b8:	10c4b03a 	or	r2,r2,r3
 800a2bc:	1806d07a 	srli	r3,r3,1
 800a2c0:	280ad07a 	srli	r5,r5,1
 800a2c4:	183ffa1e 	bne	r3,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a2c8:	3000011e 	bne	r6,zero,800a2d0 <udivmodsi4+0x54>
 800a2cc:	f800283a 	ret
 800a2d0:	2005883a 	mov	r2,r4
 800a2d4:	f800283a 	ret
 800a2d8:	0005883a 	mov	r2,zero
 800a2dc:	003ffa06 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800a2e0:	00c00044 	movi	r3,1
 800a2e4:	003ff106 	br	800a2ac <__alt_data_end+0xfc00a2ac>

0800a2e8 <__divsi3>:
 800a2e8:	defffe04 	addi	sp,sp,-8
 800a2ec:	dfc00115 	stw	ra,4(sp)
 800a2f0:	dc000015 	stw	r16,0(sp)
 800a2f4:	20000b16 	blt	r4,zero,800a324 <__divsi3+0x3c>
 800a2f8:	0021883a 	mov	r16,zero
 800a2fc:	28000c16 	blt	r5,zero,800a330 <__divsi3+0x48>
 800a300:	000d883a 	mov	r6,zero
 800a304:	800a27c0 	call	800a27c <udivmodsi4>
 800a308:	0407c83a 	sub	r3,zero,r16
 800a30c:	1884f03a 	xor	r2,r3,r2
 800a310:	1405883a 	add	r2,r2,r16
 800a314:	dfc00117 	ldw	ra,4(sp)
 800a318:	dc000017 	ldw	r16,0(sp)
 800a31c:	dec00204 	addi	sp,sp,8
 800a320:	f800283a 	ret
 800a324:	0109c83a 	sub	r4,zero,r4
 800a328:	04000044 	movi	r16,1
 800a32c:	283ff40e 	bge	r5,zero,800a300 <__alt_data_end+0xfc00a300>
 800a330:	014bc83a 	sub	r5,zero,r5
 800a334:	8400005c 	xori	r16,r16,1
 800a338:	003ff106 	br	800a300 <__alt_data_end+0xfc00a300>

0800a33c <__modsi3>:
 800a33c:	defffd04 	addi	sp,sp,-12
 800a340:	dfc00215 	stw	ra,8(sp)
 800a344:	dc400115 	stw	r17,4(sp)
 800a348:	dc000015 	stw	r16,0(sp)
 800a34c:	20000c16 	blt	r4,zero,800a380 <__modsi3+0x44>
 800a350:	0023883a 	mov	r17,zero
 800a354:	0021883a 	mov	r16,zero
 800a358:	28000d16 	blt	r5,zero,800a390 <__modsi3+0x54>
 800a35c:	01800044 	movi	r6,1
 800a360:	800a27c0 	call	800a27c <udivmodsi4>
 800a364:	1404f03a 	xor	r2,r2,r16
 800a368:	8885883a 	add	r2,r17,r2
 800a36c:	dfc00217 	ldw	ra,8(sp)
 800a370:	dc400117 	ldw	r17,4(sp)
 800a374:	dc000017 	ldw	r16,0(sp)
 800a378:	dec00304 	addi	sp,sp,12
 800a37c:	f800283a 	ret
 800a380:	0109c83a 	sub	r4,zero,r4
 800a384:	04400044 	movi	r17,1
 800a388:	043fffc4 	movi	r16,-1
 800a38c:	283ff30e 	bge	r5,zero,800a35c <__alt_data_end+0xfc00a35c>
 800a390:	014bc83a 	sub	r5,zero,r5
 800a394:	003ff106 	br	800a35c <__alt_data_end+0xfc00a35c>

0800a398 <__udivsi3>:
 800a398:	000d883a 	mov	r6,zero
 800a39c:	800a27c1 	jmpi	800a27c <udivmodsi4>

0800a3a0 <__umodsi3>:
 800a3a0:	01800044 	movi	r6,1
 800a3a4:	800a27c1 	jmpi	800a27c <udivmodsi4>

0800a3a8 <__mulsi3>:
 800a3a8:	0005883a 	mov	r2,zero
 800a3ac:	20000726 	beq	r4,zero,800a3cc <__mulsi3+0x24>
 800a3b0:	20c0004c 	andi	r3,r4,1
 800a3b4:	2008d07a 	srli	r4,r4,1
 800a3b8:	18000126 	beq	r3,zero,800a3c0 <__mulsi3+0x18>
 800a3bc:	1145883a 	add	r2,r2,r5
 800a3c0:	294b883a 	add	r5,r5,r5
 800a3c4:	203ffa1e 	bne	r4,zero,800a3b0 <__alt_data_end+0xfc00a3b0>
 800a3c8:	f800283a 	ret
 800a3cc:	f800283a 	ret

0800a3d0 <__adddf3>:
 800a3d0:	02000434 	movhi	r8,16
 800a3d4:	423fffc4 	addi	r8,r8,-1
 800a3d8:	defffb04 	addi	sp,sp,-20
 800a3dc:	2a12703a 	and	r9,r5,r8
 800a3e0:	2806d7fa 	srli	r3,r5,31
 800a3e4:	3a10703a 	and	r8,r7,r8
 800a3e8:	3804d53a 	srli	r2,r7,20
 800a3ec:	3014d77a 	srli	r10,r6,29
 800a3f0:	dc000015 	stw	r16,0(sp)
 800a3f4:	481290fa 	slli	r9,r9,3
 800a3f8:	2820d53a 	srli	r16,r5,20
 800a3fc:	401090fa 	slli	r8,r8,3
 800a400:	200ad77a 	srli	r5,r4,29
 800a404:	380ed7fa 	srli	r7,r7,31
 800a408:	dc800215 	stw	r18,8(sp)
 800a40c:	dc400115 	stw	r17,4(sp)
 800a410:	dfc00415 	stw	ra,16(sp)
 800a414:	dcc00315 	stw	r19,12(sp)
 800a418:	1c803fcc 	andi	r18,r3,255
 800a41c:	8401ffcc 	andi	r16,r16,2047
 800a420:	494ab03a 	or	r5,r9,r5
 800a424:	202290fa 	slli	r17,r4,3
 800a428:	1081ffcc 	andi	r2,r2,2047
 800a42c:	4290b03a 	or	r8,r8,r10
 800a430:	300c90fa 	slli	r6,r6,3
 800a434:	91c07026 	beq	r18,r7,800a5f8 <__adddf3+0x228>
 800a438:	8087c83a 	sub	r3,r16,r2
 800a43c:	00c0b30e 	bge	zero,r3,800a70c <__adddf3+0x33c>
 800a440:	10002a1e 	bne	r2,zero,800a4ec <__adddf3+0x11c>
 800a444:	4184b03a 	or	r2,r8,r6
 800a448:	1000991e 	bne	r2,zero,800a6b0 <__adddf3+0x2e0>
 800a44c:	888001cc 	andi	r2,r17,7
 800a450:	10005b26 	beq	r2,zero,800a5c0 <__adddf3+0x1f0>
 800a454:	88c003cc 	andi	r3,r17,15
 800a458:	00800104 	movi	r2,4
 800a45c:	18805826 	beq	r3,r2,800a5c0 <__adddf3+0x1f0>
 800a460:	89800104 	addi	r6,r17,4
 800a464:	3463803a 	cmpltu	r17,r6,r17
 800a468:	2c4b883a 	add	r5,r5,r17
 800a46c:	2880202c 	andhi	r2,r5,128
 800a470:	9007883a 	mov	r3,r18
 800a474:	3023883a 	mov	r17,r6
 800a478:	10005426 	beq	r2,zero,800a5cc <__adddf3+0x1fc>
 800a47c:	84000044 	addi	r16,r16,1
 800a480:	0081ffc4 	movi	r2,2047
 800a484:	8080c126 	beq	r16,r2,800a78c <__adddf3+0x3bc>
 800a488:	013fe034 	movhi	r4,65408
 800a48c:	213fffc4 	addi	r4,r4,-1
 800a490:	290a703a 	and	r5,r5,r4
 800a494:	2804977a 	slli	r2,r5,29
 800a498:	280a927a 	slli	r5,r5,9
 800a49c:	8822d0fa 	srli	r17,r17,3
 800a4a0:	8401ffcc 	andi	r16,r16,2047
 800a4a4:	2808d33a 	srli	r4,r5,12
 800a4a8:	1444b03a 	or	r2,r2,r17
 800a4ac:	8401ffcc 	andi	r16,r16,2047
 800a4b0:	800a953a 	slli	r5,r16,20
 800a4b4:	18c03fcc 	andi	r3,r3,255
 800a4b8:	04000434 	movhi	r16,16
 800a4bc:	180697fa 	slli	r3,r3,31
 800a4c0:	843fffc4 	addi	r16,r16,-1
 800a4c4:	2420703a 	and	r16,r4,r16
 800a4c8:	8160b03a 	or	r16,r16,r5
 800a4cc:	80c6b03a 	or	r3,r16,r3
 800a4d0:	dfc00417 	ldw	ra,16(sp)
 800a4d4:	dcc00317 	ldw	r19,12(sp)
 800a4d8:	dc800217 	ldw	r18,8(sp)
 800a4dc:	dc400117 	ldw	r17,4(sp)
 800a4e0:	dc000017 	ldw	r16,0(sp)
 800a4e4:	dec00504 	addi	sp,sp,20
 800a4e8:	f800283a 	ret
 800a4ec:	0081ffc4 	movi	r2,2047
 800a4f0:	80bfd626 	beq	r16,r2,800a44c <__alt_data_end+0xfc00a44c>
 800a4f4:	42002034 	orhi	r8,r8,128
 800a4f8:	00800e04 	movi	r2,56
 800a4fc:	10c0a616 	blt	r2,r3,800a798 <__adddf3+0x3c8>
 800a500:	008007c4 	movi	r2,31
 800a504:	10c0c916 	blt	r2,r3,800a82c <__adddf3+0x45c>
 800a508:	00800804 	movi	r2,32
 800a50c:	10c5c83a 	sub	r2,r2,r3
 800a510:	408e983a 	sll	r7,r8,r2
 800a514:	30c8d83a 	srl	r4,r6,r3
 800a518:	3084983a 	sll	r2,r6,r2
 800a51c:	40c6d83a 	srl	r3,r8,r3
 800a520:	390cb03a 	or	r6,r7,r4
 800a524:	1004c03a 	cmpne	r2,r2,zero
 800a528:	308cb03a 	or	r6,r6,r2
 800a52c:	898dc83a 	sub	r6,r17,r6
 800a530:	89a3803a 	cmpltu	r17,r17,r6
 800a534:	28cbc83a 	sub	r5,r5,r3
 800a538:	2c4bc83a 	sub	r5,r5,r17
 800a53c:	3023883a 	mov	r17,r6
 800a540:	2880202c 	andhi	r2,r5,128
 800a544:	10006d26 	beq	r2,zero,800a6fc <__adddf3+0x32c>
 800a548:	04c02034 	movhi	r19,128
 800a54c:	9cffffc4 	addi	r19,r19,-1
 800a550:	2ce6703a 	and	r19,r5,r19
 800a554:	98007e26 	beq	r19,zero,800a750 <__adddf3+0x380>
 800a558:	9809883a 	mov	r4,r19
 800a55c:	800cb680 	call	800cb68 <__clzsi2>
 800a560:	10fffe04 	addi	r3,r2,-8
 800a564:	010007c4 	movi	r4,31
 800a568:	20c07f16 	blt	r4,r3,800a768 <__adddf3+0x398>
 800a56c:	01400a04 	movi	r5,40
 800a570:	2885c83a 	sub	r2,r5,r2
 800a574:	888ad83a 	srl	r5,r17,r2
 800a578:	98e6983a 	sll	r19,r19,r3
 800a57c:	88e2983a 	sll	r17,r17,r3
 800a580:	2ce6b03a 	or	r19,r5,r19
 800a584:	1c007c16 	blt	r3,r16,800a778 <__adddf3+0x3a8>
 800a588:	1c21c83a 	sub	r16,r3,r16
 800a58c:	81400044 	addi	r5,r16,1
 800a590:	00c007c4 	movi	r3,31
 800a594:	19409816 	blt	r3,r5,800a7f8 <__adddf3+0x428>
 800a598:	1c21c83a 	sub	r16,r3,r16
 800a59c:	8c08983a 	sll	r4,r17,r16
 800a5a0:	8946d83a 	srl	r3,r17,r5
 800a5a4:	9c20983a 	sll	r16,r19,r16
 800a5a8:	2008c03a 	cmpne	r4,r4,zero
 800a5ac:	994ad83a 	srl	r5,r19,r5
 800a5b0:	1c06b03a 	or	r3,r3,r16
 800a5b4:	1922b03a 	or	r17,r3,r4
 800a5b8:	0021883a 	mov	r16,zero
 800a5bc:	003fa306 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a5c0:	2880202c 	andhi	r2,r5,128
 800a5c4:	9007883a 	mov	r3,r18
 800a5c8:	103fac1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a5cc:	2804977a 	slli	r2,r5,29
 800a5d0:	8822d0fa 	srli	r17,r17,3
 800a5d4:	0101ffc4 	movi	r4,2047
 800a5d8:	280ad0fa 	srli	r5,r5,3
 800a5dc:	1444b03a 	or	r2,r2,r17
 800a5e0:	81002c26 	beq	r16,r4,800a694 <__adddf3+0x2c4>
 800a5e4:	8120703a 	and	r16,r16,r4
 800a5e8:	01000434 	movhi	r4,16
 800a5ec:	213fffc4 	addi	r4,r4,-1
 800a5f0:	2908703a 	and	r4,r5,r4
 800a5f4:	003fad06 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a5f8:	8089c83a 	sub	r4,r16,r2
 800a5fc:	01006a0e 	bge	zero,r4,800a7a8 <__adddf3+0x3d8>
 800a600:	10003326 	beq	r2,zero,800a6d0 <__adddf3+0x300>
 800a604:	0081ffc4 	movi	r2,2047
 800a608:	80bf9026 	beq	r16,r2,800a44c <__alt_data_end+0xfc00a44c>
 800a60c:	42002034 	orhi	r8,r8,128
 800a610:	00800e04 	movi	r2,56
 800a614:	1100b116 	blt	r2,r4,800a8dc <__adddf3+0x50c>
 800a618:	008007c4 	movi	r2,31
 800a61c:	1100e216 	blt	r2,r4,800a9a8 <__adddf3+0x5d8>
 800a620:	00800804 	movi	r2,32
 800a624:	1105c83a 	sub	r2,r2,r4
 800a628:	4092983a 	sll	r9,r8,r2
 800a62c:	310ed83a 	srl	r7,r6,r4
 800a630:	3084983a 	sll	r2,r6,r2
 800a634:	4110d83a 	srl	r8,r8,r4
 800a638:	49ccb03a 	or	r6,r9,r7
 800a63c:	1004c03a 	cmpne	r2,r2,zero
 800a640:	308cb03a 	or	r6,r6,r2
 800a644:	344d883a 	add	r6,r6,r17
 800a648:	3463803a 	cmpltu	r17,r6,r17
 800a64c:	414b883a 	add	r5,r8,r5
 800a650:	2c4b883a 	add	r5,r5,r17
 800a654:	3023883a 	mov	r17,r6
 800a658:	2880202c 	andhi	r2,r5,128
 800a65c:	10002726 	beq	r2,zero,800a6fc <__adddf3+0x32c>
 800a660:	84000044 	addi	r16,r16,1
 800a664:	0081ffc4 	movi	r2,2047
 800a668:	8080ae26 	beq	r16,r2,800a924 <__adddf3+0x554>
 800a66c:	00bfe034 	movhi	r2,65408
 800a670:	10bfffc4 	addi	r2,r2,-1
 800a674:	288a703a 	and	r5,r5,r2
 800a678:	880cd07a 	srli	r6,r17,1
 800a67c:	280897fa 	slli	r4,r5,31
 800a680:	88c0004c 	andi	r3,r17,1
 800a684:	30e2b03a 	or	r17,r6,r3
 800a688:	280ad07a 	srli	r5,r5,1
 800a68c:	8922b03a 	or	r17,r17,r4
 800a690:	003f6e06 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a694:	1148b03a 	or	r4,r2,r5
 800a698:	20003c26 	beq	r4,zero,800a78c <__adddf3+0x3bc>
 800a69c:	29000234 	orhi	r4,r5,8
 800a6a0:	01400434 	movhi	r5,16
 800a6a4:	297fffc4 	addi	r5,r5,-1
 800a6a8:	2148703a 	and	r4,r4,r5
 800a6ac:	003f7f06 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a6b0:	18ffffc4 	addi	r3,r3,-1
 800a6b4:	18004d1e 	bne	r3,zero,800a7ec <__adddf3+0x41c>
 800a6b8:	898dc83a 	sub	r6,r17,r6
 800a6bc:	89a3803a 	cmpltu	r17,r17,r6
 800a6c0:	2a0bc83a 	sub	r5,r5,r8
 800a6c4:	2c4bc83a 	sub	r5,r5,r17
 800a6c8:	3023883a 	mov	r17,r6
 800a6cc:	003f9c06 	br	800a540 <__alt_data_end+0xfc00a540>
 800a6d0:	4184b03a 	or	r2,r8,r6
 800a6d4:	103f5d26 	beq	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a6d8:	213fffc4 	addi	r4,r4,-1
 800a6dc:	203fd926 	beq	r4,zero,800a644 <__alt_data_end+0xfc00a644>
 800a6e0:	0081ffc4 	movi	r2,2047
 800a6e4:	80bfca1e 	bne	r16,r2,800a610 <__alt_data_end+0xfc00a610>
 800a6e8:	003f5806 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a6ec:	10c8b03a 	or	r4,r2,r3
 800a6f0:	20008b26 	beq	r4,zero,800a920 <__adddf3+0x550>
 800a6f4:	100b883a 	mov	r5,r2
 800a6f8:	1823883a 	mov	r17,r3
 800a6fc:	888001cc 	andi	r2,r17,7
 800a700:	103f541e 	bne	r2,zero,800a454 <__alt_data_end+0xfc00a454>
 800a704:	9007883a 	mov	r3,r18
 800a708:	003fb006 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a70c:	1800531e 	bne	r3,zero,800a85c <__adddf3+0x48c>
 800a710:	80800044 	addi	r2,r16,1
 800a714:	1081ffcc 	andi	r2,r2,2047
 800a718:	00c00044 	movi	r3,1
 800a71c:	1880990e 	bge	r3,r2,800a984 <__adddf3+0x5b4>
 800a720:	8985c83a 	sub	r2,r17,r6
 800a724:	8887803a 	cmpltu	r3,r17,r2
 800a728:	2a27c83a 	sub	r19,r5,r8
 800a72c:	98e7c83a 	sub	r19,r19,r3
 800a730:	98c0202c 	andhi	r3,r19,128
 800a734:	18006226 	beq	r3,zero,800a8c0 <__adddf3+0x4f0>
 800a738:	3463c83a 	sub	r17,r6,r17
 800a73c:	4151c83a 	sub	r8,r8,r5
 800a740:	344d803a 	cmpltu	r6,r6,r17
 800a744:	41a7c83a 	sub	r19,r8,r6
 800a748:	3825883a 	mov	r18,r7
 800a74c:	983f821e 	bne	r19,zero,800a558 <__alt_data_end+0xfc00a558>
 800a750:	8809883a 	mov	r4,r17
 800a754:	800cb680 	call	800cb68 <__clzsi2>
 800a758:	10800804 	addi	r2,r2,32
 800a75c:	10fffe04 	addi	r3,r2,-8
 800a760:	010007c4 	movi	r4,31
 800a764:	20ff810e 	bge	r4,r3,800a56c <__alt_data_end+0xfc00a56c>
 800a768:	14fff604 	addi	r19,r2,-40
 800a76c:	8ce6983a 	sll	r19,r17,r19
 800a770:	0023883a 	mov	r17,zero
 800a774:	1c3f840e 	bge	r3,r16,800a588 <__alt_data_end+0xfc00a588>
 800a778:	017fe034 	movhi	r5,65408
 800a77c:	297fffc4 	addi	r5,r5,-1
 800a780:	80e1c83a 	sub	r16,r16,r3
 800a784:	994a703a 	and	r5,r19,r5
 800a788:	003f3006 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a78c:	0009883a 	mov	r4,zero
 800a790:	0005883a 	mov	r2,zero
 800a794:	003f4506 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a798:	418cb03a 	or	r6,r8,r6
 800a79c:	300cc03a 	cmpne	r6,r6,zero
 800a7a0:	0007883a 	mov	r3,zero
 800a7a4:	003f6106 	br	800a52c <__alt_data_end+0xfc00a52c>
 800a7a8:	2000921e 	bne	r4,zero,800a9f4 <__adddf3+0x624>
 800a7ac:	80800044 	addi	r2,r16,1
 800a7b0:	11c1ffcc 	andi	r7,r2,2047
 800a7b4:	01000044 	movi	r4,1
 800a7b8:	21c0610e 	bge	r4,r7,800a940 <__adddf3+0x570>
 800a7bc:	0101ffc4 	movi	r4,2047
 800a7c0:	1100a326 	beq	r2,r4,800aa50 <__adddf3+0x680>
 800a7c4:	344d883a 	add	r6,r6,r17
 800a7c8:	3463803a 	cmpltu	r17,r6,r17
 800a7cc:	414b883a 	add	r5,r8,r5
 800a7d0:	2c4b883a 	add	r5,r5,r17
 800a7d4:	282297fa 	slli	r17,r5,31
 800a7d8:	300cd07a 	srli	r6,r6,1
 800a7dc:	280ad07a 	srli	r5,r5,1
 800a7e0:	1021883a 	mov	r16,r2
 800a7e4:	89a2b03a 	or	r17,r17,r6
 800a7e8:	003f1806 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a7ec:	0081ffc4 	movi	r2,2047
 800a7f0:	80bf411e 	bne	r16,r2,800a4f8 <__alt_data_end+0xfc00a4f8>
 800a7f4:	003f1506 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a7f8:	80bff844 	addi	r2,r16,-31
 800a7fc:	00c00804 	movi	r3,32
 800a800:	9884d83a 	srl	r2,r19,r2
 800a804:	28c04a26 	beq	r5,r3,800a930 <__adddf3+0x560>
 800a808:	00c00fc4 	movi	r3,63
 800a80c:	1c21c83a 	sub	r16,r3,r16
 800a810:	9c26983a 	sll	r19,r19,r16
 800a814:	9c62b03a 	or	r17,r19,r17
 800a818:	8822c03a 	cmpne	r17,r17,zero
 800a81c:	88a2b03a 	or	r17,r17,r2
 800a820:	000b883a 	mov	r5,zero
 800a824:	0021883a 	mov	r16,zero
 800a828:	003fb406 	br	800a6fc <__alt_data_end+0xfc00a6fc>
 800a82c:	18bff804 	addi	r2,r3,-32
 800a830:	01000804 	movi	r4,32
 800a834:	4084d83a 	srl	r2,r8,r2
 800a838:	19003f26 	beq	r3,r4,800a938 <__adddf3+0x568>
 800a83c:	01001004 	movi	r4,64
 800a840:	20c7c83a 	sub	r3,r4,r3
 800a844:	40d0983a 	sll	r8,r8,r3
 800a848:	418cb03a 	or	r6,r8,r6
 800a84c:	300cc03a 	cmpne	r6,r6,zero
 800a850:	308cb03a 	or	r6,r6,r2
 800a854:	0007883a 	mov	r3,zero
 800a858:	003f3406 	br	800a52c <__alt_data_end+0xfc00a52c>
 800a85c:	80002326 	beq	r16,zero,800a8ec <__adddf3+0x51c>
 800a860:	0101ffc4 	movi	r4,2047
 800a864:	11005e26 	beq	r2,r4,800a9e0 <__adddf3+0x610>
 800a868:	00c7c83a 	sub	r3,zero,r3
 800a86c:	29402034 	orhi	r5,r5,128
 800a870:	01000e04 	movi	r4,56
 800a874:	20c07216 	blt	r4,r3,800aa40 <__adddf3+0x670>
 800a878:	010007c4 	movi	r4,31
 800a87c:	20c0ce16 	blt	r4,r3,800abb8 <__adddf3+0x7e8>
 800a880:	01000804 	movi	r4,32
 800a884:	20c9c83a 	sub	r4,r4,r3
 800a888:	2914983a 	sll	r10,r5,r4
 800a88c:	88d2d83a 	srl	r9,r17,r3
 800a890:	8908983a 	sll	r4,r17,r4
 800a894:	28c6d83a 	srl	r3,r5,r3
 800a898:	5262b03a 	or	r17,r10,r9
 800a89c:	2008c03a 	cmpne	r4,r4,zero
 800a8a0:	8922b03a 	or	r17,r17,r4
 800a8a4:	3463c83a 	sub	r17,r6,r17
 800a8a8:	40c7c83a 	sub	r3,r8,r3
 800a8ac:	344d803a 	cmpltu	r6,r6,r17
 800a8b0:	198bc83a 	sub	r5,r3,r6
 800a8b4:	1021883a 	mov	r16,r2
 800a8b8:	3825883a 	mov	r18,r7
 800a8bc:	003f2006 	br	800a540 <__alt_data_end+0xfc00a540>
 800a8c0:	9886b03a 	or	r3,r19,r2
 800a8c4:	1800141e 	bne	r3,zero,800a918 <__adddf3+0x548>
 800a8c8:	0007883a 	mov	r3,zero
 800a8cc:	000b883a 	mov	r5,zero
 800a8d0:	0023883a 	mov	r17,zero
 800a8d4:	0021883a 	mov	r16,zero
 800a8d8:	003f3c06 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a8dc:	418cb03a 	or	r6,r8,r6
 800a8e0:	300cc03a 	cmpne	r6,r6,zero
 800a8e4:	0011883a 	mov	r8,zero
 800a8e8:	003f5606 	br	800a644 <__alt_data_end+0xfc00a644>
 800a8ec:	2c48b03a 	or	r4,r5,r17
 800a8f0:	20003b26 	beq	r4,zero,800a9e0 <__adddf3+0x610>
 800a8f4:	00c6303a 	nor	r3,zero,r3
 800a8f8:	1800371e 	bne	r3,zero,800a9d8 <__adddf3+0x608>
 800a8fc:	3463c83a 	sub	r17,r6,r17
 800a900:	414bc83a 	sub	r5,r8,r5
 800a904:	344d803a 	cmpltu	r6,r6,r17
 800a908:	298bc83a 	sub	r5,r5,r6
 800a90c:	1021883a 	mov	r16,r2
 800a910:	3825883a 	mov	r18,r7
 800a914:	003f0a06 	br	800a540 <__alt_data_end+0xfc00a540>
 800a918:	1023883a 	mov	r17,r2
 800a91c:	003f0d06 	br	800a554 <__alt_data_end+0xfc00a554>
 800a920:	0007883a 	mov	r3,zero
 800a924:	000b883a 	mov	r5,zero
 800a928:	0023883a 	mov	r17,zero
 800a92c:	003f2706 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a930:	0027883a 	mov	r19,zero
 800a934:	003fb706 	br	800a814 <__alt_data_end+0xfc00a814>
 800a938:	0011883a 	mov	r8,zero
 800a93c:	003fc206 	br	800a848 <__alt_data_end+0xfc00a848>
 800a940:	2c44b03a 	or	r2,r5,r17
 800a944:	8000871e 	bne	r16,zero,800ab64 <__adddf3+0x794>
 800a948:	1000b126 	beq	r2,zero,800ac10 <__adddf3+0x840>
 800a94c:	4184b03a 	or	r2,r8,r6
 800a950:	103ebe26 	beq	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a954:	3445883a 	add	r2,r6,r17
 800a958:	1463803a 	cmpltu	r17,r2,r17
 800a95c:	414b883a 	add	r5,r8,r5
 800a960:	2c4b883a 	add	r5,r5,r17
 800a964:	28c0202c 	andhi	r3,r5,128
 800a968:	1023883a 	mov	r17,r2
 800a96c:	183f6326 	beq	r3,zero,800a6fc <__alt_data_end+0xfc00a6fc>
 800a970:	00bfe034 	movhi	r2,65408
 800a974:	10bfffc4 	addi	r2,r2,-1
 800a978:	2021883a 	mov	r16,r4
 800a97c:	288a703a 	and	r5,r5,r2
 800a980:	003eb206 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a984:	2c44b03a 	or	r2,r5,r17
 800a988:	8000251e 	bne	r16,zero,800aa20 <__adddf3+0x650>
 800a98c:	10004b1e 	bne	r2,zero,800aabc <__adddf3+0x6ec>
 800a990:	4184b03a 	or	r2,r8,r6
 800a994:	103fe226 	beq	r2,zero,800a920 <__alt_data_end+0xfc00a920>
 800a998:	400b883a 	mov	r5,r8
 800a99c:	3023883a 	mov	r17,r6
 800a9a0:	3825883a 	mov	r18,r7
 800a9a4:	003ea906 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a9a8:	20bff804 	addi	r2,r4,-32
 800a9ac:	01c00804 	movi	r7,32
 800a9b0:	4084d83a 	srl	r2,r8,r2
 800a9b4:	21c07e26 	beq	r4,r7,800abb0 <__adddf3+0x7e0>
 800a9b8:	01c01004 	movi	r7,64
 800a9bc:	3909c83a 	sub	r4,r7,r4
 800a9c0:	4110983a 	sll	r8,r8,r4
 800a9c4:	418cb03a 	or	r6,r8,r6
 800a9c8:	300cc03a 	cmpne	r6,r6,zero
 800a9cc:	308cb03a 	or	r6,r6,r2
 800a9d0:	0011883a 	mov	r8,zero
 800a9d4:	003f1b06 	br	800a644 <__alt_data_end+0xfc00a644>
 800a9d8:	0101ffc4 	movi	r4,2047
 800a9dc:	113fa41e 	bne	r2,r4,800a870 <__alt_data_end+0xfc00a870>
 800a9e0:	400b883a 	mov	r5,r8
 800a9e4:	3023883a 	mov	r17,r6
 800a9e8:	1021883a 	mov	r16,r2
 800a9ec:	3825883a 	mov	r18,r7
 800a9f0:	003e9606 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a9f4:	80001a1e 	bne	r16,zero,800aa60 <__adddf3+0x690>
 800a9f8:	2c4eb03a 	or	r7,r5,r17
 800a9fc:	38005526 	beq	r7,zero,800ab54 <__adddf3+0x784>
 800aa00:	0108303a 	nor	r4,zero,r4
 800aa04:	2000511e 	bne	r4,zero,800ab4c <__adddf3+0x77c>
 800aa08:	89a3883a 	add	r17,r17,r6
 800aa0c:	414b883a 	add	r5,r8,r5
 800aa10:	898d803a 	cmpltu	r6,r17,r6
 800aa14:	298b883a 	add	r5,r5,r6
 800aa18:	1021883a 	mov	r16,r2
 800aa1c:	003f0e06 	br	800a658 <__alt_data_end+0xfc00a658>
 800aa20:	1000341e 	bne	r2,zero,800aaf4 <__adddf3+0x724>
 800aa24:	4184b03a 	or	r2,r8,r6
 800aa28:	10006f26 	beq	r2,zero,800abe8 <__adddf3+0x818>
 800aa2c:	400b883a 	mov	r5,r8
 800aa30:	3023883a 	mov	r17,r6
 800aa34:	3825883a 	mov	r18,r7
 800aa38:	0401ffc4 	movi	r16,2047
 800aa3c:	003e8306 	br	800a44c <__alt_data_end+0xfc00a44c>
 800aa40:	2c62b03a 	or	r17,r5,r17
 800aa44:	8822c03a 	cmpne	r17,r17,zero
 800aa48:	0007883a 	mov	r3,zero
 800aa4c:	003f9506 	br	800a8a4 <__alt_data_end+0xfc00a8a4>
 800aa50:	1021883a 	mov	r16,r2
 800aa54:	000b883a 	mov	r5,zero
 800aa58:	0023883a 	mov	r17,zero
 800aa5c:	003edb06 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800aa60:	01c1ffc4 	movi	r7,2047
 800aa64:	11c03b26 	beq	r2,r7,800ab54 <__adddf3+0x784>
 800aa68:	0109c83a 	sub	r4,zero,r4
 800aa6c:	29402034 	orhi	r5,r5,128
 800aa70:	01c00e04 	movi	r7,56
 800aa74:	39006216 	blt	r7,r4,800ac00 <__adddf3+0x830>
 800aa78:	01c007c4 	movi	r7,31
 800aa7c:	39006b16 	blt	r7,r4,800ac2c <__adddf3+0x85c>
 800aa80:	01c00804 	movi	r7,32
 800aa84:	390fc83a 	sub	r7,r7,r4
 800aa88:	29d4983a 	sll	r10,r5,r7
 800aa8c:	8912d83a 	srl	r9,r17,r4
 800aa90:	89ce983a 	sll	r7,r17,r7
 800aa94:	2908d83a 	srl	r4,r5,r4
 800aa98:	5262b03a 	or	r17,r10,r9
 800aa9c:	380ac03a 	cmpne	r5,r7,zero
 800aaa0:	8962b03a 	or	r17,r17,r5
 800aaa4:	89a3883a 	add	r17,r17,r6
 800aaa8:	2211883a 	add	r8,r4,r8
 800aaac:	898d803a 	cmpltu	r6,r17,r6
 800aab0:	418b883a 	add	r5,r8,r6
 800aab4:	1021883a 	mov	r16,r2
 800aab8:	003ee706 	br	800a658 <__alt_data_end+0xfc00a658>
 800aabc:	4184b03a 	or	r2,r8,r6
 800aac0:	103e6226 	beq	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800aac4:	8987c83a 	sub	r3,r17,r6
 800aac8:	88c9803a 	cmpltu	r4,r17,r3
 800aacc:	2a05c83a 	sub	r2,r5,r8
 800aad0:	1105c83a 	sub	r2,r2,r4
 800aad4:	1100202c 	andhi	r4,r2,128
 800aad8:	203f0426 	beq	r4,zero,800a6ec <__alt_data_end+0xfc00a6ec>
 800aadc:	3463c83a 	sub	r17,r6,r17
 800aae0:	414bc83a 	sub	r5,r8,r5
 800aae4:	344d803a 	cmpltu	r6,r6,r17
 800aae8:	298bc83a 	sub	r5,r5,r6
 800aaec:	3825883a 	mov	r18,r7
 800aaf0:	003e5606 	br	800a44c <__alt_data_end+0xfc00a44c>
 800aaf4:	4184b03a 	or	r2,r8,r6
 800aaf8:	10002b26 	beq	r2,zero,800aba8 <__adddf3+0x7d8>
 800aafc:	2804d0fa 	srli	r2,r5,3
 800ab00:	8822d0fa 	srli	r17,r17,3
 800ab04:	280a977a 	slli	r5,r5,29
 800ab08:	10c0022c 	andhi	r3,r2,8
 800ab0c:	2c62b03a 	or	r17,r5,r17
 800ab10:	18000826 	beq	r3,zero,800ab34 <__adddf3+0x764>
 800ab14:	4008d0fa 	srli	r4,r8,3
 800ab18:	20c0022c 	andhi	r3,r4,8
 800ab1c:	1800051e 	bne	r3,zero,800ab34 <__adddf3+0x764>
 800ab20:	300cd0fa 	srli	r6,r6,3
 800ab24:	4010977a 	slli	r8,r8,29
 800ab28:	2005883a 	mov	r2,r4
 800ab2c:	3825883a 	mov	r18,r7
 800ab30:	41a2b03a 	or	r17,r8,r6
 800ab34:	880ad77a 	srli	r5,r17,29
 800ab38:	100490fa 	slli	r2,r2,3
 800ab3c:	882290fa 	slli	r17,r17,3
 800ab40:	0401ffc4 	movi	r16,2047
 800ab44:	288ab03a 	or	r5,r5,r2
 800ab48:	003e4006 	br	800a44c <__alt_data_end+0xfc00a44c>
 800ab4c:	01c1ffc4 	movi	r7,2047
 800ab50:	11ffc71e 	bne	r2,r7,800aa70 <__alt_data_end+0xfc00aa70>
 800ab54:	400b883a 	mov	r5,r8
 800ab58:	3023883a 	mov	r17,r6
 800ab5c:	1021883a 	mov	r16,r2
 800ab60:	003e3a06 	br	800a44c <__alt_data_end+0xfc00a44c>
 800ab64:	10002d26 	beq	r2,zero,800ac1c <__adddf3+0x84c>
 800ab68:	4184b03a 	or	r2,r8,r6
 800ab6c:	10000e26 	beq	r2,zero,800aba8 <__adddf3+0x7d8>
 800ab70:	2804d0fa 	srli	r2,r5,3
 800ab74:	8822d0fa 	srli	r17,r17,3
 800ab78:	280a977a 	slli	r5,r5,29
 800ab7c:	10c0022c 	andhi	r3,r2,8
 800ab80:	2c62b03a 	or	r17,r5,r17
 800ab84:	183feb26 	beq	r3,zero,800ab34 <__alt_data_end+0xfc00ab34>
 800ab88:	4008d0fa 	srli	r4,r8,3
 800ab8c:	20c0022c 	andhi	r3,r4,8
 800ab90:	183fe81e 	bne	r3,zero,800ab34 <__alt_data_end+0xfc00ab34>
 800ab94:	300cd0fa 	srli	r6,r6,3
 800ab98:	4010977a 	slli	r8,r8,29
 800ab9c:	2005883a 	mov	r2,r4
 800aba0:	41a2b03a 	or	r17,r8,r6
 800aba4:	003fe306 	br	800ab34 <__alt_data_end+0xfc00ab34>
 800aba8:	0401ffc4 	movi	r16,2047
 800abac:	003e2706 	br	800a44c <__alt_data_end+0xfc00a44c>
 800abb0:	0011883a 	mov	r8,zero
 800abb4:	003f8306 	br	800a9c4 <__alt_data_end+0xfc00a9c4>
 800abb8:	193ff804 	addi	r4,r3,-32
 800abbc:	02400804 	movi	r9,32
 800abc0:	2908d83a 	srl	r4,r5,r4
 800abc4:	1a402526 	beq	r3,r9,800ac5c <__adddf3+0x88c>
 800abc8:	02401004 	movi	r9,64
 800abcc:	48c7c83a 	sub	r3,r9,r3
 800abd0:	28ca983a 	sll	r5,r5,r3
 800abd4:	2c62b03a 	or	r17,r5,r17
 800abd8:	8822c03a 	cmpne	r17,r17,zero
 800abdc:	8922b03a 	or	r17,r17,r4
 800abe0:	0007883a 	mov	r3,zero
 800abe4:	003f2f06 	br	800a8a4 <__alt_data_end+0xfc00a8a4>
 800abe8:	01402034 	movhi	r5,128
 800abec:	0007883a 	mov	r3,zero
 800abf0:	297fffc4 	addi	r5,r5,-1
 800abf4:	047ffe04 	movi	r17,-8
 800abf8:	0401ffc4 	movi	r16,2047
 800abfc:	003e7306 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800ac00:	2c62b03a 	or	r17,r5,r17
 800ac04:	8822c03a 	cmpne	r17,r17,zero
 800ac08:	0009883a 	mov	r4,zero
 800ac0c:	003fa506 	br	800aaa4 <__alt_data_end+0xfc00aaa4>
 800ac10:	400b883a 	mov	r5,r8
 800ac14:	3023883a 	mov	r17,r6
 800ac18:	003e0c06 	br	800a44c <__alt_data_end+0xfc00a44c>
 800ac1c:	400b883a 	mov	r5,r8
 800ac20:	3023883a 	mov	r17,r6
 800ac24:	0401ffc4 	movi	r16,2047
 800ac28:	003e0806 	br	800a44c <__alt_data_end+0xfc00a44c>
 800ac2c:	21fff804 	addi	r7,r4,-32
 800ac30:	02400804 	movi	r9,32
 800ac34:	29ced83a 	srl	r7,r5,r7
 800ac38:	22400a26 	beq	r4,r9,800ac64 <__adddf3+0x894>
 800ac3c:	02401004 	movi	r9,64
 800ac40:	4909c83a 	sub	r4,r9,r4
 800ac44:	290a983a 	sll	r5,r5,r4
 800ac48:	2c62b03a 	or	r17,r5,r17
 800ac4c:	8822c03a 	cmpne	r17,r17,zero
 800ac50:	89e2b03a 	or	r17,r17,r7
 800ac54:	0009883a 	mov	r4,zero
 800ac58:	003f9206 	br	800aaa4 <__alt_data_end+0xfc00aaa4>
 800ac5c:	000b883a 	mov	r5,zero
 800ac60:	003fdc06 	br	800abd4 <__alt_data_end+0xfc00abd4>
 800ac64:	000b883a 	mov	r5,zero
 800ac68:	003ff706 	br	800ac48 <__alt_data_end+0xfc00ac48>

0800ac6c <__divdf3>:
 800ac6c:	defff004 	addi	sp,sp,-64
 800ac70:	dc800815 	stw	r18,32(sp)
 800ac74:	2824d53a 	srli	r18,r5,20
 800ac78:	dd800c15 	stw	r22,48(sp)
 800ac7c:	282cd7fa 	srli	r22,r5,31
 800ac80:	dc000615 	stw	r16,24(sp)
 800ac84:	04000434 	movhi	r16,16
 800ac88:	df000e15 	stw	fp,56(sp)
 800ac8c:	dd000a15 	stw	r20,40(sp)
 800ac90:	dcc00915 	stw	r19,36(sp)
 800ac94:	dc400715 	stw	r17,28(sp)
 800ac98:	843fffc4 	addi	r16,r16,-1
 800ac9c:	dfc00f15 	stw	ra,60(sp)
 800aca0:	ddc00d15 	stw	r23,52(sp)
 800aca4:	dd400b15 	stw	r21,44(sp)
 800aca8:	9481ffcc 	andi	r18,r18,2047
 800acac:	2029883a 	mov	r20,r4
 800acb0:	2027883a 	mov	r19,r4
 800acb4:	2c22703a 	and	r17,r5,r16
 800acb8:	b7003fcc 	andi	fp,r22,255
 800acbc:	90005e26 	beq	r18,zero,800ae38 <__divdf3+0x1cc>
 800acc0:	0081ffc4 	movi	r2,2047
 800acc4:	90803526 	beq	r18,r2,800ad9c <__divdf3+0x130>
 800acc8:	8c000434 	orhi	r16,r17,16
 800accc:	2004d77a 	srli	r2,r4,29
 800acd0:	802090fa 	slli	r16,r16,3
 800acd4:	202690fa 	slli	r19,r4,3
 800acd8:	94bf0044 	addi	r18,r18,-1023
 800acdc:	80a2b03a 	or	r17,r16,r2
 800ace0:	0029883a 	mov	r20,zero
 800ace4:	0011883a 	mov	r8,zero
 800ace8:	380ad53a 	srli	r5,r7,20
 800acec:	382ed7fa 	srli	r23,r7,31
 800acf0:	04000434 	movhi	r16,16
 800acf4:	843fffc4 	addi	r16,r16,-1
 800acf8:	2941ffcc 	andi	r5,r5,2047
 800acfc:	302b883a 	mov	r21,r6
 800ad00:	3c20703a 	and	r16,r7,r16
 800ad04:	ba403fcc 	andi	r9,r23,255
 800ad08:	28006726 	beq	r5,zero,800aea8 <__divdf3+0x23c>
 800ad0c:	0081ffc4 	movi	r2,2047
 800ad10:	28805f26 	beq	r5,r2,800ae90 <__divdf3+0x224>
 800ad14:	84000434 	orhi	r16,r16,16
 800ad18:	3004d77a 	srli	r2,r6,29
 800ad1c:	802090fa 	slli	r16,r16,3
 800ad20:	302a90fa 	slli	r21,r6,3
 800ad24:	297f0044 	addi	r5,r5,-1023
 800ad28:	80a0b03a 	or	r16,r16,r2
 800ad2c:	000f883a 	mov	r7,zero
 800ad30:	3d06b03a 	or	r3,r7,r20
 800ad34:	180690ba 	slli	r3,r3,2
 800ad38:	00820074 	movhi	r2,2049
 800ad3c:	10ab5704 	addi	r2,r2,-21156
 800ad40:	1885883a 	add	r2,r3,r2
 800ad44:	10800017 	ldw	r2,0(r2)
 800ad48:	b5c8f03a 	xor	r4,r22,r23
 800ad4c:	200d883a 	mov	r6,r4
 800ad50:	25003fcc 	andi	r20,r4,255
 800ad54:	9165c83a 	sub	r18,r18,r5
 800ad58:	1000683a 	jmp	r2
 800ad5c:	0800afa4 	muli	zero,at,702
 800ad60:	0800add4 	ori	zero,at,695
 800ad64:	0800af68 	cmpgeui	zero,at,701
 800ad68:	0800adb8 	rdprs	zero,at,694
 800ad6c:	0800af68 	cmpgeui	zero,at,701
 800ad70:	0800af3c 	xorhi	zero,at,700
 800ad74:	0800af68 	cmpgeui	zero,at,701
 800ad78:	0800adb8 	rdprs	zero,at,694
 800ad7c:	0800add4 	ori	zero,at,695
 800ad80:	0800add4 	ori	zero,at,695
 800ad84:	0800af3c 	xorhi	zero,at,700
 800ad88:	0800adb8 	rdprs	zero,at,694
 800ad8c:	0800adc8 	cmpgei	zero,at,695
 800ad90:	0800adc8 	cmpgei	zero,at,695
 800ad94:	0800adc8 	cmpgei	zero,at,695
 800ad98:	0800af78 	rdprs	zero,at,701
 800ad9c:	8904b03a 	or	r2,r17,r4
 800ada0:	1000631e 	bne	r2,zero,800af30 <__divdf3+0x2c4>
 800ada4:	05000204 	movi	r20,8
 800ada8:	0023883a 	mov	r17,zero
 800adac:	0027883a 	mov	r19,zero
 800adb0:	02000084 	movi	r8,2
 800adb4:	003fcc06 	br	800ace8 <__alt_data_end+0xfc00ace8>
 800adb8:	8023883a 	mov	r17,r16
 800adbc:	a827883a 	mov	r19,r21
 800adc0:	4839883a 	mov	fp,r9
 800adc4:	3811883a 	mov	r8,r7
 800adc8:	00800084 	movi	r2,2
 800adcc:	4081531e 	bne	r8,r2,800b31c <__divdf3+0x6b0>
 800add0:	e029883a 	mov	r20,fp
 800add4:	a180004c 	andi	r6,r20,1
 800add8:	0201ffc4 	movi	r8,2047
 800addc:	000b883a 	mov	r5,zero
 800ade0:	0027883a 	mov	r19,zero
 800ade4:	4010953a 	slli	r8,r8,20
 800ade8:	30c03fcc 	andi	r3,r6,255
 800adec:	04000434 	movhi	r16,16
 800adf0:	180697fa 	slli	r3,r3,31
 800adf4:	843fffc4 	addi	r16,r16,-1
 800adf8:	2c20703a 	and	r16,r5,r16
 800adfc:	8220b03a 	or	r16,r16,r8
 800ae00:	80c6b03a 	or	r3,r16,r3
 800ae04:	9805883a 	mov	r2,r19
 800ae08:	dfc00f17 	ldw	ra,60(sp)
 800ae0c:	df000e17 	ldw	fp,56(sp)
 800ae10:	ddc00d17 	ldw	r23,52(sp)
 800ae14:	dd800c17 	ldw	r22,48(sp)
 800ae18:	dd400b17 	ldw	r21,44(sp)
 800ae1c:	dd000a17 	ldw	r20,40(sp)
 800ae20:	dcc00917 	ldw	r19,36(sp)
 800ae24:	dc800817 	ldw	r18,32(sp)
 800ae28:	dc400717 	ldw	r17,28(sp)
 800ae2c:	dc000617 	ldw	r16,24(sp)
 800ae30:	dec01004 	addi	sp,sp,64
 800ae34:	f800283a 	ret
 800ae38:	8904b03a 	or	r2,r17,r4
 800ae3c:	10003726 	beq	r2,zero,800af1c <__divdf3+0x2b0>
 800ae40:	88014d26 	beq	r17,zero,800b378 <__divdf3+0x70c>
 800ae44:	8809883a 	mov	r4,r17
 800ae48:	d9800215 	stw	r6,8(sp)
 800ae4c:	d9c00515 	stw	r7,20(sp)
 800ae50:	800cb680 	call	800cb68 <__clzsi2>
 800ae54:	d9800217 	ldw	r6,8(sp)
 800ae58:	d9c00517 	ldw	r7,20(sp)
 800ae5c:	1007883a 	mov	r3,r2
 800ae60:	01000a04 	movi	r4,40
 800ae64:	1cfffe04 	addi	r19,r3,-8
 800ae68:	20c9c83a 	sub	r4,r4,r3
 800ae6c:	8cca983a 	sll	r5,r17,r19
 800ae70:	a108d83a 	srl	r4,r20,r4
 800ae74:	a4e6983a 	sll	r19,r20,r19
 800ae78:	2162b03a 	or	r17,r4,r5
 800ae7c:	04bf0344 	movi	r18,-1011
 800ae80:	90e5c83a 	sub	r18,r18,r3
 800ae84:	0029883a 	mov	r20,zero
 800ae88:	0011883a 	mov	r8,zero
 800ae8c:	003f9606 	br	800ace8 <__alt_data_end+0xfc00ace8>
 800ae90:	8184b03a 	or	r2,r16,r6
 800ae94:	10001f1e 	bne	r2,zero,800af14 <__divdf3+0x2a8>
 800ae98:	0021883a 	mov	r16,zero
 800ae9c:	002b883a 	mov	r21,zero
 800aea0:	01c00084 	movi	r7,2
 800aea4:	003fa206 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800aea8:	8184b03a 	or	r2,r16,r6
 800aeac:	10001526 	beq	r2,zero,800af04 <__divdf3+0x298>
 800aeb0:	80013d26 	beq	r16,zero,800b3a8 <__divdf3+0x73c>
 800aeb4:	8009883a 	mov	r4,r16
 800aeb8:	d9800215 	stw	r6,8(sp)
 800aebc:	da000315 	stw	r8,12(sp)
 800aec0:	da400415 	stw	r9,16(sp)
 800aec4:	800cb680 	call	800cb68 <__clzsi2>
 800aec8:	d9800217 	ldw	r6,8(sp)
 800aecc:	da000317 	ldw	r8,12(sp)
 800aed0:	da400417 	ldw	r9,16(sp)
 800aed4:	1007883a 	mov	r3,r2
 800aed8:	01000a04 	movi	r4,40
 800aedc:	1d7ffe04 	addi	r21,r3,-8
 800aee0:	20c9c83a 	sub	r4,r4,r3
 800aee4:	8560983a 	sll	r16,r16,r21
 800aee8:	3108d83a 	srl	r4,r6,r4
 800aeec:	356a983a 	sll	r21,r6,r21
 800aef0:	2420b03a 	or	r16,r4,r16
 800aef4:	017f0344 	movi	r5,-1011
 800aef8:	28cbc83a 	sub	r5,r5,r3
 800aefc:	000f883a 	mov	r7,zero
 800af00:	003f8b06 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800af04:	0021883a 	mov	r16,zero
 800af08:	002b883a 	mov	r21,zero
 800af0c:	01c00044 	movi	r7,1
 800af10:	003f8706 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800af14:	01c000c4 	movi	r7,3
 800af18:	003f8506 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800af1c:	05000104 	movi	r20,4
 800af20:	0023883a 	mov	r17,zero
 800af24:	0027883a 	mov	r19,zero
 800af28:	02000044 	movi	r8,1
 800af2c:	003f6e06 	br	800ace8 <__alt_data_end+0xfc00ace8>
 800af30:	05000304 	movi	r20,12
 800af34:	020000c4 	movi	r8,3
 800af38:	003f6b06 	br	800ace8 <__alt_data_end+0xfc00ace8>
 800af3c:	01400434 	movhi	r5,16
 800af40:	000d883a 	mov	r6,zero
 800af44:	297fffc4 	addi	r5,r5,-1
 800af48:	04ffffc4 	movi	r19,-1
 800af4c:	0201ffc4 	movi	r8,2047
 800af50:	003fa406 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800af54:	043f0084 	movi	r16,-1022
 800af58:	84a1c83a 	sub	r16,r16,r18
 800af5c:	00800e04 	movi	r2,56
 800af60:	14014d0e 	bge	r2,r16,800b498 <__divdf3+0x82c>
 800af64:	a180004c 	andi	r6,r20,1
 800af68:	0011883a 	mov	r8,zero
 800af6c:	000b883a 	mov	r5,zero
 800af70:	0027883a 	mov	r19,zero
 800af74:	003f9b06 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800af78:	8880022c 	andhi	r2,r17,8
 800af7c:	1000f026 	beq	r2,zero,800b340 <__divdf3+0x6d4>
 800af80:	8080022c 	andhi	r2,r16,8
 800af84:	1000ee1e 	bne	r2,zero,800b340 <__divdf3+0x6d4>
 800af88:	00800434 	movhi	r2,16
 800af8c:	81400234 	orhi	r5,r16,8
 800af90:	10bfffc4 	addi	r2,r2,-1
 800af94:	b80d883a 	mov	r6,r23
 800af98:	288a703a 	and	r5,r5,r2
 800af9c:	a827883a 	mov	r19,r21
 800afa0:	003fea06 	br	800af4c <__alt_data_end+0xfc00af4c>
 800afa4:	84411c36 	bltu	r16,r17,800b418 <__divdf3+0x7ac>
 800afa8:	8c011a26 	beq	r17,r16,800b414 <__divdf3+0x7a8>
 800afac:	94bfffc4 	addi	r18,r18,-1
 800afb0:	dcc00015 	stw	r19,0(sp)
 800afb4:	8811883a 	mov	r8,r17
 800afb8:	002d883a 	mov	r22,zero
 800afbc:	a80cd63a 	srli	r6,r21,24
 800afc0:	8020923a 	slli	r16,r16,8
 800afc4:	a82a923a 	slli	r21,r21,8
 800afc8:	4009883a 	mov	r4,r8
 800afcc:	342eb03a 	or	r23,r6,r16
 800afd0:	dd400115 	stw	r21,4(sp)
 800afd4:	b82ad43a 	srli	r21,r23,16
 800afd8:	da000315 	stw	r8,12(sp)
 800afdc:	bcffffcc 	andi	r19,r23,65535
 800afe0:	a80b883a 	mov	r5,r21
 800afe4:	800a3980 	call	800a398 <__udivsi3>
 800afe8:	1009883a 	mov	r4,r2
 800afec:	980b883a 	mov	r5,r19
 800aff0:	1023883a 	mov	r17,r2
 800aff4:	800a3a80 	call	800a3a8 <__mulsi3>
 800aff8:	da000317 	ldw	r8,12(sp)
 800affc:	a80b883a 	mov	r5,r21
 800b000:	1039883a 	mov	fp,r2
 800b004:	4009883a 	mov	r4,r8
 800b008:	800a3a00 	call	800a3a0 <__umodsi3>
 800b00c:	d8c00017 	ldw	r3,0(sp)
 800b010:	1004943a 	slli	r2,r2,16
 800b014:	1810d43a 	srli	r8,r3,16
 800b018:	120eb03a 	or	r7,r2,r8
 800b01c:	3f00062e 	bgeu	r7,fp,800b038 <__divdf3+0x3cc>
 800b020:	3dcf883a 	add	r7,r7,r23
 800b024:	88bfffc4 	addi	r2,r17,-1
 800b028:	3dc10a36 	bltu	r7,r23,800b454 <__divdf3+0x7e8>
 800b02c:	3f01092e 	bgeu	r7,fp,800b454 <__divdf3+0x7e8>
 800b030:	8c7fff84 	addi	r17,r17,-2
 800b034:	3dcf883a 	add	r7,r7,r23
 800b038:	3f39c83a 	sub	fp,r7,fp
 800b03c:	e009883a 	mov	r4,fp
 800b040:	a80b883a 	mov	r5,r21
 800b044:	800a3980 	call	800a398 <__udivsi3>
 800b048:	1009883a 	mov	r4,r2
 800b04c:	980b883a 	mov	r5,r19
 800b050:	1021883a 	mov	r16,r2
 800b054:	800a3a80 	call	800a3a8 <__mulsi3>
 800b058:	e009883a 	mov	r4,fp
 800b05c:	a80b883a 	mov	r5,r21
 800b060:	d8800315 	stw	r2,12(sp)
 800b064:	800a3a00 	call	800a3a0 <__umodsi3>
 800b068:	d9000017 	ldw	r4,0(sp)
 800b06c:	1004943a 	slli	r2,r2,16
 800b070:	da000317 	ldw	r8,12(sp)
 800b074:	20ffffcc 	andi	r3,r4,65535
 800b078:	10ceb03a 	or	r7,r2,r3
 800b07c:	3a00062e 	bgeu	r7,r8,800b098 <__divdf3+0x42c>
 800b080:	3dcf883a 	add	r7,r7,r23
 800b084:	80bfffc4 	addi	r2,r16,-1
 800b088:	3dc0f036 	bltu	r7,r23,800b44c <__divdf3+0x7e0>
 800b08c:	3a00ef2e 	bgeu	r7,r8,800b44c <__divdf3+0x7e0>
 800b090:	843fff84 	addi	r16,r16,-2
 800b094:	3dcf883a 	add	r7,r7,r23
 800b098:	d8c00117 	ldw	r3,4(sp)
 800b09c:	8822943a 	slli	r17,r17,16
 800b0a0:	3a0fc83a 	sub	r7,r7,r8
 800b0a4:	1806d43a 	srli	r3,r3,16
 800b0a8:	8462b03a 	or	r17,r16,r17
 800b0ac:	8affffcc 	andi	r11,r17,65535
 800b0b0:	d8c00015 	stw	r3,0(sp)
 800b0b4:	d8c00117 	ldw	r3,4(sp)
 800b0b8:	8820d43a 	srli	r16,r17,16
 800b0bc:	5809883a 	mov	r4,r11
 800b0c0:	1f3fffcc 	andi	fp,r3,65535
 800b0c4:	e00b883a 	mov	r5,fp
 800b0c8:	d9c00515 	stw	r7,20(sp)
 800b0cc:	dac00215 	stw	r11,8(sp)
 800b0d0:	800a3a80 	call	800a3a8 <__mulsi3>
 800b0d4:	8009883a 	mov	r4,r16
 800b0d8:	e00b883a 	mov	r5,fp
 800b0dc:	d8800415 	stw	r2,16(sp)
 800b0e0:	800a3a80 	call	800a3a8 <__mulsi3>
 800b0e4:	d9400017 	ldw	r5,0(sp)
 800b0e8:	8009883a 	mov	r4,r16
 800b0ec:	d8800315 	stw	r2,12(sp)
 800b0f0:	800a3a80 	call	800a3a8 <__mulsi3>
 800b0f4:	dac00217 	ldw	r11,8(sp)
 800b0f8:	d9400017 	ldw	r5,0(sp)
 800b0fc:	d8800215 	stw	r2,8(sp)
 800b100:	5809883a 	mov	r4,r11
 800b104:	800a3a80 	call	800a3a8 <__mulsi3>
 800b108:	da400417 	ldw	r9,16(sp)
 800b10c:	da800317 	ldw	r10,12(sp)
 800b110:	d9c00517 	ldw	r7,20(sp)
 800b114:	480ad43a 	srli	r5,r9,16
 800b118:	5085883a 	add	r2,r10,r2
 800b11c:	db000217 	ldw	r12,8(sp)
 800b120:	1151883a 	add	r8,r2,r5
 800b124:	4280022e 	bgeu	r8,r10,800b130 <__divdf3+0x4c4>
 800b128:	00800074 	movhi	r2,1
 800b12c:	6099883a 	add	r12,r12,r2
 800b130:	400ad43a 	srli	r5,r8,16
 800b134:	4010943a 	slli	r8,r8,16
 800b138:	4c3fffcc 	andi	r16,r9,65535
 800b13c:	6149883a 	add	r4,r12,r5
 800b140:	4411883a 	add	r8,r8,r16
 800b144:	3900a736 	bltu	r7,r4,800b3e4 <__divdf3+0x778>
 800b148:	3900c426 	beq	r7,r4,800b45c <__divdf3+0x7f0>
 800b14c:	3909c83a 	sub	r4,r7,r4
 800b150:	b221c83a 	sub	r16,r22,r8
 800b154:	b42d803a 	cmpltu	r22,r22,r16
 800b158:	25adc83a 	sub	r22,r4,r22
 800b15c:	b5c0c626 	beq	r22,r23,800b478 <__divdf3+0x80c>
 800b160:	b009883a 	mov	r4,r22
 800b164:	a80b883a 	mov	r5,r21
 800b168:	800a3980 	call	800a398 <__udivsi3>
 800b16c:	1009883a 	mov	r4,r2
 800b170:	980b883a 	mov	r5,r19
 800b174:	d8800315 	stw	r2,12(sp)
 800b178:	800a3a80 	call	800a3a8 <__mulsi3>
 800b17c:	a80b883a 	mov	r5,r21
 800b180:	b009883a 	mov	r4,r22
 800b184:	d8800415 	stw	r2,16(sp)
 800b188:	800a3a00 	call	800a3a0 <__umodsi3>
 800b18c:	1004943a 	slli	r2,r2,16
 800b190:	800ed43a 	srli	r7,r16,16
 800b194:	da400417 	ldw	r9,16(sp)
 800b198:	da000317 	ldw	r8,12(sp)
 800b19c:	11cab03a 	or	r5,r2,r7
 800b1a0:	2a40062e 	bgeu	r5,r9,800b1bc <__divdf3+0x550>
 800b1a4:	2dcb883a 	add	r5,r5,r23
 800b1a8:	40bfffc4 	addi	r2,r8,-1
 800b1ac:	2dc0b436 	bltu	r5,r23,800b480 <__divdf3+0x814>
 800b1b0:	2a40b32e 	bgeu	r5,r9,800b480 <__divdf3+0x814>
 800b1b4:	423fff84 	addi	r8,r8,-2
 800b1b8:	2dcb883a 	add	r5,r5,r23
 800b1bc:	2a6dc83a 	sub	r22,r5,r9
 800b1c0:	b009883a 	mov	r4,r22
 800b1c4:	a80b883a 	mov	r5,r21
 800b1c8:	da000315 	stw	r8,12(sp)
 800b1cc:	800a3980 	call	800a398 <__udivsi3>
 800b1d0:	980b883a 	mov	r5,r19
 800b1d4:	1009883a 	mov	r4,r2
 800b1d8:	d8800415 	stw	r2,16(sp)
 800b1dc:	800a3a80 	call	800a3a8 <__mulsi3>
 800b1e0:	b009883a 	mov	r4,r22
 800b1e4:	a80b883a 	mov	r5,r21
 800b1e8:	1027883a 	mov	r19,r2
 800b1ec:	800a3a00 	call	800a3a0 <__umodsi3>
 800b1f0:	1004943a 	slli	r2,r2,16
 800b1f4:	843fffcc 	andi	r16,r16,65535
 800b1f8:	da000317 	ldw	r8,12(sp)
 800b1fc:	140eb03a 	or	r7,r2,r16
 800b200:	da400417 	ldw	r9,16(sp)
 800b204:	3cc0062e 	bgeu	r7,r19,800b220 <__divdf3+0x5b4>
 800b208:	3dcf883a 	add	r7,r7,r23
 800b20c:	48bfffc4 	addi	r2,r9,-1
 800b210:	3dc09d36 	bltu	r7,r23,800b488 <__divdf3+0x81c>
 800b214:	3cc09c2e 	bgeu	r7,r19,800b488 <__divdf3+0x81c>
 800b218:	4a7fff84 	addi	r9,r9,-2
 800b21c:	3dcf883a 	add	r7,r7,r23
 800b220:	4010943a 	slli	r8,r8,16
 800b224:	3cebc83a 	sub	r21,r7,r19
 800b228:	e00b883a 	mov	r5,fp
 800b22c:	4a26b03a 	or	r19,r9,r8
 800b230:	99ffffcc 	andi	r7,r19,65535
 800b234:	9820d43a 	srli	r16,r19,16
 800b238:	3809883a 	mov	r4,r7
 800b23c:	d9c00515 	stw	r7,20(sp)
 800b240:	800a3a80 	call	800a3a8 <__mulsi3>
 800b244:	8009883a 	mov	r4,r16
 800b248:	e00b883a 	mov	r5,fp
 800b24c:	102d883a 	mov	r22,r2
 800b250:	800a3a80 	call	800a3a8 <__mulsi3>
 800b254:	d9400017 	ldw	r5,0(sp)
 800b258:	8009883a 	mov	r4,r16
 800b25c:	1039883a 	mov	fp,r2
 800b260:	800a3a80 	call	800a3a8 <__mulsi3>
 800b264:	d9c00517 	ldw	r7,20(sp)
 800b268:	d9400017 	ldw	r5,0(sp)
 800b26c:	1021883a 	mov	r16,r2
 800b270:	3809883a 	mov	r4,r7
 800b274:	800a3a80 	call	800a3a8 <__mulsi3>
 800b278:	b008d43a 	srli	r4,r22,16
 800b27c:	e085883a 	add	r2,fp,r2
 800b280:	1109883a 	add	r4,r2,r4
 800b284:	2700022e 	bgeu	r4,fp,800b290 <__divdf3+0x624>
 800b288:	00800074 	movhi	r2,1
 800b28c:	80a1883a 	add	r16,r16,r2
 800b290:	200ad43a 	srli	r5,r4,16
 800b294:	2008943a 	slli	r4,r4,16
 800b298:	b5bfffcc 	andi	r22,r22,65535
 800b29c:	8145883a 	add	r2,r16,r5
 800b2a0:	2589883a 	add	r4,r4,r22
 800b2a4:	a8802c36 	bltu	r21,r2,800b358 <__divdf3+0x6ec>
 800b2a8:	a880a426 	beq	r21,r2,800b53c <__divdf3+0x8d0>
 800b2ac:	9cc00054 	ori	r19,r19,1
 800b2b0:	9200ffc4 	addi	r8,r18,1023
 800b2b4:	023f270e 	bge	zero,r8,800af54 <__alt_data_end+0xfc00af54>
 800b2b8:	988001cc 	andi	r2,r19,7
 800b2bc:	10000726 	beq	r2,zero,800b2dc <__divdf3+0x670>
 800b2c0:	990003cc 	andi	r4,r19,15
 800b2c4:	00800104 	movi	r2,4
 800b2c8:	20800426 	beq	r4,r2,800b2dc <__divdf3+0x670>
 800b2cc:	9885883a 	add	r2,r19,r2
 800b2d0:	14e7803a 	cmpltu	r19,r2,r19
 800b2d4:	8ce3883a 	add	r17,r17,r19
 800b2d8:	1027883a 	mov	r19,r2
 800b2dc:	8880402c 	andhi	r2,r17,256
 800b2e0:	10000426 	beq	r2,zero,800b2f4 <__divdf3+0x688>
 800b2e4:	00bfc034 	movhi	r2,65280
 800b2e8:	10bfffc4 	addi	r2,r2,-1
 800b2ec:	92010004 	addi	r8,r18,1024
 800b2f0:	88a2703a 	and	r17,r17,r2
 800b2f4:	0081ff84 	movi	r2,2046
 800b2f8:	123eb616 	blt	r2,r8,800add4 <__alt_data_end+0xfc00add4>
 800b2fc:	9826d0fa 	srli	r19,r19,3
 800b300:	8804977a 	slli	r2,r17,29
 800b304:	8820927a 	slli	r16,r17,9
 800b308:	4201ffcc 	andi	r8,r8,2047
 800b30c:	14e6b03a 	or	r19,r2,r19
 800b310:	800ad33a 	srli	r5,r16,12
 800b314:	a180004c 	andi	r6,r20,1
 800b318:	003eb206 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800b31c:	008000c4 	movi	r2,3
 800b320:	4080ac26 	beq	r8,r2,800b5d4 <__divdf3+0x968>
 800b324:	00800044 	movi	r2,1
 800b328:	4080591e 	bne	r8,r2,800b490 <__divdf3+0x824>
 800b32c:	e00d883a 	mov	r6,fp
 800b330:	0011883a 	mov	r8,zero
 800b334:	000b883a 	mov	r5,zero
 800b338:	0027883a 	mov	r19,zero
 800b33c:	003ea906 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800b340:	00800434 	movhi	r2,16
 800b344:	89400234 	orhi	r5,r17,8
 800b348:	10bfffc4 	addi	r2,r2,-1
 800b34c:	b00d883a 	mov	r6,r22
 800b350:	288a703a 	and	r5,r5,r2
 800b354:	003efd06 	br	800af4c <__alt_data_end+0xfc00af4c>
 800b358:	adcf883a 	add	r7,r21,r23
 800b35c:	997fffc4 	addi	r5,r19,-1
 800b360:	3dc0412e 	bgeu	r7,r23,800b468 <__divdf3+0x7fc>
 800b364:	2827883a 	mov	r19,r5
 800b368:	38bfd01e 	bne	r7,r2,800b2ac <__alt_data_end+0xfc00b2ac>
 800b36c:	d8c00117 	ldw	r3,4(sp)
 800b370:	193fce1e 	bne	r3,r4,800b2ac <__alt_data_end+0xfc00b2ac>
 800b374:	003fce06 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b378:	d9800215 	stw	r6,8(sp)
 800b37c:	d9c00515 	stw	r7,20(sp)
 800b380:	800cb680 	call	800cb68 <__clzsi2>
 800b384:	10c00804 	addi	r3,r2,32
 800b388:	010009c4 	movi	r4,39
 800b38c:	d9800217 	ldw	r6,8(sp)
 800b390:	d9c00517 	ldw	r7,20(sp)
 800b394:	20feb20e 	bge	r4,r3,800ae60 <__alt_data_end+0xfc00ae60>
 800b398:	117ffe04 	addi	r5,r2,-8
 800b39c:	a162983a 	sll	r17,r20,r5
 800b3a0:	0027883a 	mov	r19,zero
 800b3a4:	003eb506 	br	800ae7c <__alt_data_end+0xfc00ae7c>
 800b3a8:	3009883a 	mov	r4,r6
 800b3ac:	d9800215 	stw	r6,8(sp)
 800b3b0:	da000315 	stw	r8,12(sp)
 800b3b4:	da400415 	stw	r9,16(sp)
 800b3b8:	800cb680 	call	800cb68 <__clzsi2>
 800b3bc:	10c00804 	addi	r3,r2,32
 800b3c0:	010009c4 	movi	r4,39
 800b3c4:	d9800217 	ldw	r6,8(sp)
 800b3c8:	da000317 	ldw	r8,12(sp)
 800b3cc:	da400417 	ldw	r9,16(sp)
 800b3d0:	20fec10e 	bge	r4,r3,800aed8 <__alt_data_end+0xfc00aed8>
 800b3d4:	10bffe04 	addi	r2,r2,-8
 800b3d8:	a8a0983a 	sll	r16,r21,r2
 800b3dc:	002b883a 	mov	r21,zero
 800b3e0:	003ec406 	br	800aef4 <__alt_data_end+0xfc00aef4>
 800b3e4:	d8c00117 	ldw	r3,4(sp)
 800b3e8:	b0ed883a 	add	r22,r22,r3
 800b3ec:	b0c5803a 	cmpltu	r2,r22,r3
 800b3f0:	15c5883a 	add	r2,r2,r23
 800b3f4:	11cf883a 	add	r7,r2,r7
 800b3f8:	88bfffc4 	addi	r2,r17,-1
 800b3fc:	b9c00d2e 	bgeu	r23,r7,800b434 <__divdf3+0x7c8>
 800b400:	39003f36 	bltu	r7,r4,800b500 <__divdf3+0x894>
 800b404:	21c06a26 	beq	r4,r7,800b5b0 <__divdf3+0x944>
 800b408:	3909c83a 	sub	r4,r7,r4
 800b40c:	1023883a 	mov	r17,r2
 800b410:	003f4f06 	br	800b150 <__alt_data_end+0xfc00b150>
 800b414:	9d7ee536 	bltu	r19,r21,800afac <__alt_data_end+0xfc00afac>
 800b418:	982ed07a 	srli	r23,r19,1
 800b41c:	880497fa 	slli	r2,r17,31
 800b420:	8810d07a 	srli	r8,r17,1
 800b424:	982c97fa 	slli	r22,r19,31
 800b428:	b884b03a 	or	r2,r23,r2
 800b42c:	d8800015 	stw	r2,0(sp)
 800b430:	003ee206 	br	800afbc <__alt_data_end+0xfc00afbc>
 800b434:	3dfff41e 	bne	r7,r23,800b408 <__alt_data_end+0xfc00b408>
 800b438:	d8c00117 	ldw	r3,4(sp)
 800b43c:	b0fff02e 	bgeu	r22,r3,800b400 <__alt_data_end+0xfc00b400>
 800b440:	b909c83a 	sub	r4,r23,r4
 800b444:	1023883a 	mov	r17,r2
 800b448:	003f4106 	br	800b150 <__alt_data_end+0xfc00b150>
 800b44c:	1021883a 	mov	r16,r2
 800b450:	003f1106 	br	800b098 <__alt_data_end+0xfc00b098>
 800b454:	1023883a 	mov	r17,r2
 800b458:	003ef706 	br	800b038 <__alt_data_end+0xfc00b038>
 800b45c:	b23fe136 	bltu	r22,r8,800b3e4 <__alt_data_end+0xfc00b3e4>
 800b460:	0009883a 	mov	r4,zero
 800b464:	003f3a06 	br	800b150 <__alt_data_end+0xfc00b150>
 800b468:	38802c36 	bltu	r7,r2,800b51c <__divdf3+0x8b0>
 800b46c:	11c05326 	beq	r2,r7,800b5bc <__divdf3+0x950>
 800b470:	2827883a 	mov	r19,r5
 800b474:	003f8d06 	br	800b2ac <__alt_data_end+0xfc00b2ac>
 800b478:	04ffffc4 	movi	r19,-1
 800b47c:	003f8c06 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b480:	1011883a 	mov	r8,r2
 800b484:	003f4d06 	br	800b1bc <__alt_data_end+0xfc00b1bc>
 800b488:	1013883a 	mov	r9,r2
 800b48c:	003f6406 	br	800b220 <__alt_data_end+0xfc00b220>
 800b490:	e029883a 	mov	r20,fp
 800b494:	003f8606 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b498:	008007c4 	movi	r2,31
 800b49c:	14002a16 	blt	r2,r16,800b548 <__divdf3+0x8dc>
 800b4a0:	91410784 	addi	r5,r18,1054
 800b4a4:	9c0cd83a 	srl	r6,r19,r16
 800b4a8:	8948983a 	sll	r4,r17,r5
 800b4ac:	9944983a 	sll	r2,r19,r5
 800b4b0:	8c20d83a 	srl	r16,r17,r16
 800b4b4:	3108b03a 	or	r4,r6,r4
 800b4b8:	1004c03a 	cmpne	r2,r2,zero
 800b4bc:	2084b03a 	or	r2,r4,r2
 800b4c0:	110001cc 	andi	r4,r2,7
 800b4c4:	20000726 	beq	r4,zero,800b4e4 <__divdf3+0x878>
 800b4c8:	114003cc 	andi	r5,r2,15
 800b4cc:	01000104 	movi	r4,4
 800b4d0:	29000426 	beq	r5,r4,800b4e4 <__divdf3+0x878>
 800b4d4:	11000104 	addi	r4,r2,4
 800b4d8:	2085803a 	cmpltu	r2,r4,r2
 800b4dc:	80a1883a 	add	r16,r16,r2
 800b4e0:	2005883a 	mov	r2,r4
 800b4e4:	8100202c 	andhi	r4,r16,128
 800b4e8:	20002d26 	beq	r4,zero,800b5a0 <__divdf3+0x934>
 800b4ec:	a180004c 	andi	r6,r20,1
 800b4f0:	02000044 	movi	r8,1
 800b4f4:	000b883a 	mov	r5,zero
 800b4f8:	0027883a 	mov	r19,zero
 800b4fc:	003e3906 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800b500:	d8c00117 	ldw	r3,4(sp)
 800b504:	8c7fff84 	addi	r17,r17,-2
 800b508:	b0ed883a 	add	r22,r22,r3
 800b50c:	b0c5803a 	cmpltu	r2,r22,r3
 800b510:	15c5883a 	add	r2,r2,r23
 800b514:	11cf883a 	add	r7,r2,r7
 800b518:	003f0c06 	br	800b14c <__alt_data_end+0xfc00b14c>
 800b51c:	d8c00117 	ldw	r3,4(sp)
 800b520:	997fff84 	addi	r5,r19,-2
 800b524:	18d1883a 	add	r8,r3,r3
 800b528:	40c7803a 	cmpltu	r3,r8,r3
 800b52c:	1dcd883a 	add	r6,r3,r23
 800b530:	398f883a 	add	r7,r7,r6
 800b534:	da000115 	stw	r8,4(sp)
 800b538:	003f8a06 	br	800b364 <__alt_data_end+0xfc00b364>
 800b53c:	203f861e 	bne	r4,zero,800b358 <__alt_data_end+0xfc00b358>
 800b540:	d8000115 	stw	zero,4(sp)
 800b544:	003f8906 	br	800b36c <__alt_data_end+0xfc00b36c>
 800b548:	00bef884 	movi	r2,-1054
 800b54c:	1485c83a 	sub	r2,r2,r18
 800b550:	01000804 	movi	r4,32
 800b554:	8884d83a 	srl	r2,r17,r2
 800b558:	81001c26 	beq	r16,r4,800b5cc <__divdf3+0x960>
 800b55c:	91010f84 	addi	r4,r18,1086
 800b560:	8908983a 	sll	r4,r17,r4
 800b564:	24c8b03a 	or	r4,r4,r19
 800b568:	2008c03a 	cmpne	r4,r4,zero
 800b56c:	2084b03a 	or	r2,r4,r2
 800b570:	140001cc 	andi	r16,r2,7
 800b574:	8000061e 	bne	r16,zero,800b590 <__divdf3+0x924>
 800b578:	000b883a 	mov	r5,zero
 800b57c:	1004d0fa 	srli	r2,r2,3
 800b580:	a180004c 	andi	r6,r20,1
 800b584:	0011883a 	mov	r8,zero
 800b588:	1426b03a 	or	r19,r2,r16
 800b58c:	003e1506 	br	800ade4 <__alt_data_end+0xfc00ade4>
 800b590:	114003cc 	andi	r5,r2,15
 800b594:	01000104 	movi	r4,4
 800b598:	0021883a 	mov	r16,zero
 800b59c:	293fcd1e 	bne	r5,r4,800b4d4 <__alt_data_end+0xfc00b4d4>
 800b5a0:	800a927a 	slli	r5,r16,9
 800b5a4:	8020977a 	slli	r16,r16,29
 800b5a8:	280ad33a 	srli	r5,r5,12
 800b5ac:	003ff306 	br	800b57c <__alt_data_end+0xfc00b57c>
 800b5b0:	b23fd336 	bltu	r22,r8,800b500 <__alt_data_end+0xfc00b500>
 800b5b4:	1023883a 	mov	r17,r2
 800b5b8:	003fa906 	br	800b460 <__alt_data_end+0xfc00b460>
 800b5bc:	d8c00117 	ldw	r3,4(sp)
 800b5c0:	193fd636 	bltu	r3,r4,800b51c <__alt_data_end+0xfc00b51c>
 800b5c4:	2827883a 	mov	r19,r5
 800b5c8:	003f6806 	br	800b36c <__alt_data_end+0xfc00b36c>
 800b5cc:	0009883a 	mov	r4,zero
 800b5d0:	003fe406 	br	800b564 <__alt_data_end+0xfc00b564>
 800b5d4:	00800434 	movhi	r2,16
 800b5d8:	89400234 	orhi	r5,r17,8
 800b5dc:	10bfffc4 	addi	r2,r2,-1
 800b5e0:	e00d883a 	mov	r6,fp
 800b5e4:	288a703a 	and	r5,r5,r2
 800b5e8:	003e5806 	br	800af4c <__alt_data_end+0xfc00af4c>

0800b5ec <__eqdf2>:
 800b5ec:	2804d53a 	srli	r2,r5,20
 800b5f0:	3806d53a 	srli	r3,r7,20
 800b5f4:	02000434 	movhi	r8,16
 800b5f8:	423fffc4 	addi	r8,r8,-1
 800b5fc:	1081ffcc 	andi	r2,r2,2047
 800b600:	0241ffc4 	movi	r9,2047
 800b604:	2a14703a 	and	r10,r5,r8
 800b608:	18c1ffcc 	andi	r3,r3,2047
 800b60c:	3a10703a 	and	r8,r7,r8
 800b610:	280ad7fa 	srli	r5,r5,31
 800b614:	380ed7fa 	srli	r7,r7,31
 800b618:	12400f26 	beq	r2,r9,800b658 <__eqdf2+0x6c>
 800b61c:	0241ffc4 	movi	r9,2047
 800b620:	1a400326 	beq	r3,r9,800b630 <__eqdf2+0x44>
 800b624:	10c00526 	beq	r2,r3,800b63c <__eqdf2+0x50>
 800b628:	00800044 	movi	r2,1
 800b62c:	f800283a 	ret
 800b630:	4192b03a 	or	r9,r8,r6
 800b634:	483ffc1e 	bne	r9,zero,800b628 <__alt_data_end+0xfc00b628>
 800b638:	10fffb1e 	bne	r2,r3,800b628 <__alt_data_end+0xfc00b628>
 800b63c:	523ffa1e 	bne	r10,r8,800b628 <__alt_data_end+0xfc00b628>
 800b640:	21bff91e 	bne	r4,r6,800b628 <__alt_data_end+0xfc00b628>
 800b644:	29c00826 	beq	r5,r7,800b668 <__eqdf2+0x7c>
 800b648:	103ff71e 	bne	r2,zero,800b628 <__alt_data_end+0xfc00b628>
 800b64c:	5104b03a 	or	r2,r10,r4
 800b650:	1004c03a 	cmpne	r2,r2,zero
 800b654:	f800283a 	ret
 800b658:	5112b03a 	or	r9,r10,r4
 800b65c:	483fef26 	beq	r9,zero,800b61c <__alt_data_end+0xfc00b61c>
 800b660:	00800044 	movi	r2,1
 800b664:	f800283a 	ret
 800b668:	0005883a 	mov	r2,zero
 800b66c:	f800283a 	ret

0800b670 <__gedf2>:
 800b670:	2804d53a 	srli	r2,r5,20
 800b674:	3806d53a 	srli	r3,r7,20
 800b678:	02000434 	movhi	r8,16
 800b67c:	423fffc4 	addi	r8,r8,-1
 800b680:	0241ffc4 	movi	r9,2047
 800b684:	1081ffcc 	andi	r2,r2,2047
 800b688:	2a14703a 	and	r10,r5,r8
 800b68c:	1a46703a 	and	r3,r3,r9
 800b690:	3a10703a 	and	r8,r7,r8
 800b694:	280ad7fa 	srli	r5,r5,31
 800b698:	380ed7fa 	srli	r7,r7,31
 800b69c:	12400b26 	beq	r2,r9,800b6cc <__gedf2+0x5c>
 800b6a0:	1a401626 	beq	r3,r9,800b6fc <__gedf2+0x8c>
 800b6a4:	10000c1e 	bne	r2,zero,800b6d8 <__gedf2+0x68>
 800b6a8:	5112b03a 	or	r9,r10,r4
 800b6ac:	4813003a 	cmpeq	r9,r9,zero
 800b6b0:	4817883a 	mov	r11,r9
 800b6b4:	18000c1e 	bne	r3,zero,800b6e8 <__gedf2+0x78>
 800b6b8:	4198b03a 	or	r12,r8,r6
 800b6bc:	60000a1e 	bne	r12,zero,800b6e8 <__gedf2+0x78>
 800b6c0:	48001326 	beq	r9,zero,800b710 <__gedf2+0xa0>
 800b6c4:	0005883a 	mov	r2,zero
 800b6c8:	f800283a 	ret
 800b6cc:	5112b03a 	or	r9,r10,r4
 800b6d0:	4800191e 	bne	r9,zero,800b738 <__gedf2+0xc8>
 800b6d4:	18800926 	beq	r3,r2,800b6fc <__gedf2+0x8c>
 800b6d8:	18000b1e 	bne	r3,zero,800b708 <__gedf2+0x98>
 800b6dc:	4192b03a 	or	r9,r8,r6
 800b6e0:	0017883a 	mov	r11,zero
 800b6e4:	48000a26 	beq	r9,zero,800b710 <__gedf2+0xa0>
 800b6e8:	39c03fcc 	andi	r7,r7,255
 800b6ec:	58000726 	beq	r11,zero,800b70c <__gedf2+0x9c>
 800b6f0:	3800081e 	bne	r7,zero,800b714 <__gedf2+0xa4>
 800b6f4:	00bfffc4 	movi	r2,-1
 800b6f8:	f800283a 	ret
 800b6fc:	4192b03a 	or	r9,r8,r6
 800b700:	48000d1e 	bne	r9,zero,800b738 <__gedf2+0xc8>
 800b704:	103fe826 	beq	r2,zero,800b6a8 <__alt_data_end+0xfc00b6a8>
 800b708:	39c03fcc 	andi	r7,r7,255
 800b70c:	29c00326 	beq	r5,r7,800b71c <__gedf2+0xac>
 800b710:	283ff81e 	bne	r5,zero,800b6f4 <__alt_data_end+0xfc00b6f4>
 800b714:	00800044 	movi	r2,1
 800b718:	f800283a 	ret
 800b71c:	18bffc16 	blt	r3,r2,800b710 <__alt_data_end+0xfc00b710>
 800b720:	10c00316 	blt	r2,r3,800b730 <__gedf2+0xc0>
 800b724:	42bffa36 	bltu	r8,r10,800b710 <__alt_data_end+0xfc00b710>
 800b728:	52000526 	beq	r10,r8,800b740 <__gedf2+0xd0>
 800b72c:	523fe52e 	bgeu	r10,r8,800b6c4 <__alt_data_end+0xfc00b6c4>
 800b730:	283ff026 	beq	r5,zero,800b6f4 <__alt_data_end+0xfc00b6f4>
 800b734:	003ff706 	br	800b714 <__alt_data_end+0xfc00b714>
 800b738:	00bfff84 	movi	r2,-2
 800b73c:	f800283a 	ret
 800b740:	313ff336 	bltu	r6,r4,800b710 <__alt_data_end+0xfc00b710>
 800b744:	21bfdf2e 	bgeu	r4,r6,800b6c4 <__alt_data_end+0xfc00b6c4>
 800b748:	283fea26 	beq	r5,zero,800b6f4 <__alt_data_end+0xfc00b6f4>
 800b74c:	003ff106 	br	800b714 <__alt_data_end+0xfc00b714>

0800b750 <__ledf2>:
 800b750:	2804d53a 	srli	r2,r5,20
 800b754:	3810d53a 	srli	r8,r7,20
 800b758:	00c00434 	movhi	r3,16
 800b75c:	18ffffc4 	addi	r3,r3,-1
 800b760:	0241ffc4 	movi	r9,2047
 800b764:	1081ffcc 	andi	r2,r2,2047
 800b768:	28d4703a 	and	r10,r5,r3
 800b76c:	4250703a 	and	r8,r8,r9
 800b770:	38c6703a 	and	r3,r7,r3
 800b774:	280ad7fa 	srli	r5,r5,31
 800b778:	380ed7fa 	srli	r7,r7,31
 800b77c:	12400b26 	beq	r2,r9,800b7ac <__ledf2+0x5c>
 800b780:	42401926 	beq	r8,r9,800b7e8 <__ledf2+0x98>
 800b784:	10000c1e 	bne	r2,zero,800b7b8 <__ledf2+0x68>
 800b788:	5112b03a 	or	r9,r10,r4
 800b78c:	4813003a 	cmpeq	r9,r9,zero
 800b790:	4817883a 	mov	r11,r9
 800b794:	40000f26 	beq	r8,zero,800b7d4 <__ledf2+0x84>
 800b798:	39c03fcc 	andi	r7,r7,255
 800b79c:	58001826 	beq	r11,zero,800b800 <__ledf2+0xb0>
 800b7a0:	38000a1e 	bne	r7,zero,800b7cc <__ledf2+0x7c>
 800b7a4:	00bfffc4 	movi	r2,-1
 800b7a8:	f800283a 	ret
 800b7ac:	5112b03a 	or	r9,r10,r4
 800b7b0:	48000f1e 	bne	r9,zero,800b7f0 <__ledf2+0xa0>
 800b7b4:	40800c26 	beq	r8,r2,800b7e8 <__ledf2+0x98>
 800b7b8:	4000101e 	bne	r8,zero,800b7fc <__ledf2+0xac>
 800b7bc:	1992b03a 	or	r9,r3,r6
 800b7c0:	0017883a 	mov	r11,zero
 800b7c4:	483ff41e 	bne	r9,zero,800b798 <__alt_data_end+0xfc00b798>
 800b7c8:	283ff61e 	bne	r5,zero,800b7a4 <__alt_data_end+0xfc00b7a4>
 800b7cc:	00800044 	movi	r2,1
 800b7d0:	f800283a 	ret
 800b7d4:	1998b03a 	or	r12,r3,r6
 800b7d8:	603fef1e 	bne	r12,zero,800b798 <__alt_data_end+0xfc00b798>
 800b7dc:	483ffa26 	beq	r9,zero,800b7c8 <__alt_data_end+0xfc00b7c8>
 800b7e0:	0005883a 	mov	r2,zero
 800b7e4:	f800283a 	ret
 800b7e8:	1992b03a 	or	r9,r3,r6
 800b7ec:	48000226 	beq	r9,zero,800b7f8 <__ledf2+0xa8>
 800b7f0:	00800084 	movi	r2,2
 800b7f4:	f800283a 	ret
 800b7f8:	103fe326 	beq	r2,zero,800b788 <__alt_data_end+0xfc00b788>
 800b7fc:	39c03fcc 	andi	r7,r7,255
 800b800:	29fff11e 	bne	r5,r7,800b7c8 <__alt_data_end+0xfc00b7c8>
 800b804:	40bff016 	blt	r8,r2,800b7c8 <__alt_data_end+0xfc00b7c8>
 800b808:	12000316 	blt	r2,r8,800b818 <__ledf2+0xc8>
 800b80c:	1abfee36 	bltu	r3,r10,800b7c8 <__alt_data_end+0xfc00b7c8>
 800b810:	50c00326 	beq	r10,r3,800b820 <__ledf2+0xd0>
 800b814:	50fff22e 	bgeu	r10,r3,800b7e0 <__alt_data_end+0xfc00b7e0>
 800b818:	283fe226 	beq	r5,zero,800b7a4 <__alt_data_end+0xfc00b7a4>
 800b81c:	003feb06 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800b820:	313fe936 	bltu	r6,r4,800b7c8 <__alt_data_end+0xfc00b7c8>
 800b824:	21bfee2e 	bgeu	r4,r6,800b7e0 <__alt_data_end+0xfc00b7e0>
 800b828:	283fde26 	beq	r5,zero,800b7a4 <__alt_data_end+0xfc00b7a4>
 800b82c:	003fe706 	br	800b7cc <__alt_data_end+0xfc00b7cc>

0800b830 <__muldf3>:
 800b830:	deffee04 	addi	sp,sp,-72
 800b834:	dd000c15 	stw	r20,48(sp)
 800b838:	2828d53a 	srli	r20,r5,20
 800b83c:	dd400d15 	stw	r21,52(sp)
 800b840:	282ad7fa 	srli	r21,r5,31
 800b844:	dc000815 	stw	r16,32(sp)
 800b848:	04000434 	movhi	r16,16
 800b84c:	ddc00f15 	stw	r23,60(sp)
 800b850:	dcc00b15 	stw	r19,44(sp)
 800b854:	dc800a15 	stw	r18,40(sp)
 800b858:	843fffc4 	addi	r16,r16,-1
 800b85c:	dfc01115 	stw	ra,68(sp)
 800b860:	df001015 	stw	fp,64(sp)
 800b864:	dd800e15 	stw	r22,56(sp)
 800b868:	dc400915 	stw	r17,36(sp)
 800b86c:	a501ffcc 	andi	r20,r20,2047
 800b870:	2025883a 	mov	r18,r4
 800b874:	202f883a 	mov	r23,r4
 800b878:	2c20703a 	and	r16,r5,r16
 800b87c:	a827883a 	mov	r19,r21
 800b880:	aa403fcc 	andi	r9,r21,255
 800b884:	a0005926 	beq	r20,zero,800b9ec <__muldf3+0x1bc>
 800b888:	0081ffc4 	movi	r2,2047
 800b88c:	a0803426 	beq	r20,r2,800b960 <__muldf3+0x130>
 800b890:	84000434 	orhi	r16,r16,16
 800b894:	2004d77a 	srli	r2,r4,29
 800b898:	802090fa 	slli	r16,r16,3
 800b89c:	202e90fa 	slli	r23,r4,3
 800b8a0:	a53f0044 	addi	r20,r20,-1023
 800b8a4:	80a0b03a 	or	r16,r16,r2
 800b8a8:	000b883a 	mov	r5,zero
 800b8ac:	0039883a 	mov	fp,zero
 800b8b0:	3806d53a 	srli	r3,r7,20
 800b8b4:	382cd7fa 	srli	r22,r7,31
 800b8b8:	00800434 	movhi	r2,16
 800b8bc:	10bfffc4 	addi	r2,r2,-1
 800b8c0:	18c1ffcc 	andi	r3,r3,2047
 800b8c4:	3025883a 	mov	r18,r6
 800b8c8:	38a2703a 	and	r17,r7,r2
 800b8cc:	b2803fcc 	andi	r10,r22,255
 800b8d0:	18006426 	beq	r3,zero,800ba64 <__muldf3+0x234>
 800b8d4:	0081ffc4 	movi	r2,2047
 800b8d8:	18805c26 	beq	r3,r2,800ba4c <__muldf3+0x21c>
 800b8dc:	8c400434 	orhi	r17,r17,16
 800b8e0:	3004d77a 	srli	r2,r6,29
 800b8e4:	882290fa 	slli	r17,r17,3
 800b8e8:	302490fa 	slli	r18,r6,3
 800b8ec:	18ff0044 	addi	r3,r3,-1023
 800b8f0:	88a2b03a 	or	r17,r17,r2
 800b8f4:	000f883a 	mov	r7,zero
 800b8f8:	394ab03a 	or	r5,r7,r5
 800b8fc:	280a90ba 	slli	r5,r5,2
 800b900:	00820074 	movhi	r2,2049
 800b904:	10ae4804 	addi	r2,r2,-18144
 800b908:	288b883a 	add	r5,r5,r2
 800b90c:	28800017 	ldw	r2,0(r5)
 800b910:	a0c7883a 	add	r3,r20,r3
 800b914:	b54cf03a 	xor	r6,r22,r21
 800b918:	1a000044 	addi	r8,r3,1
 800b91c:	1000683a 	jmp	r2
 800b920:	0800bb64 	muli	zero,at,749
 800b924:	0800bb50 	cmplti	zero,at,749
 800b928:	0800bb50 	cmplti	zero,at,749
 800b92c:	0800bb3c 	xorhi	zero,at,748
 800b930:	0800b97c 	xorhi	zero,at,741
 800b934:	0800b97c 	xorhi	zero,at,741
 800b938:	0800bb24 	muli	zero,at,748
 800b93c:	0800bb3c 	xorhi	zero,at,748
 800b940:	0800b97c 	xorhi	zero,at,741
 800b944:	0800bb24 	muli	zero,at,748
 800b948:	0800b97c 	xorhi	zero,at,741
 800b94c:	0800bb3c 	xorhi	zero,at,748
 800b950:	0800b980 	call	800b98 <__alt_mem_onchip_memory2_0+0x800b98>
 800b954:	0800b980 	call	800b98 <__alt_mem_onchip_memory2_0+0x800b98>
 800b958:	0800b980 	call	800b98 <__alt_mem_onchip_memory2_0+0x800b98>
 800b95c:	0800bea0 	cmpeqi	zero,at,762
 800b960:	8104b03a 	or	r2,r16,r4
 800b964:	10006c1e 	bne	r2,zero,800bb18 <__muldf3+0x2e8>
 800b968:	01400204 	movi	r5,8
 800b96c:	0021883a 	mov	r16,zero
 800b970:	002f883a 	mov	r23,zero
 800b974:	07000084 	movi	fp,2
 800b978:	003fcd06 	br	800b8b0 <__alt_data_end+0xfc00b8b0>
 800b97c:	3013883a 	mov	r9,r6
 800b980:	00800084 	movi	r2,2
 800b984:	e080501e 	bne	fp,r2,800bac8 <__muldf3+0x298>
 800b988:	4cc0004c 	andi	r19,r9,1
 800b98c:	0101ffc4 	movi	r4,2047
 800b990:	0021883a 	mov	r16,zero
 800b994:	002f883a 	mov	r23,zero
 800b998:	2008953a 	slli	r4,r4,20
 800b99c:	98c03fcc 	andi	r3,r19,255
 800b9a0:	04400434 	movhi	r17,16
 800b9a4:	8c7fffc4 	addi	r17,r17,-1
 800b9a8:	180697fa 	slli	r3,r3,31
 800b9ac:	8460703a 	and	r16,r16,r17
 800b9b0:	8120b03a 	or	r16,r16,r4
 800b9b4:	80c6b03a 	or	r3,r16,r3
 800b9b8:	b805883a 	mov	r2,r23
 800b9bc:	dfc01117 	ldw	ra,68(sp)
 800b9c0:	df001017 	ldw	fp,64(sp)
 800b9c4:	ddc00f17 	ldw	r23,60(sp)
 800b9c8:	dd800e17 	ldw	r22,56(sp)
 800b9cc:	dd400d17 	ldw	r21,52(sp)
 800b9d0:	dd000c17 	ldw	r20,48(sp)
 800b9d4:	dcc00b17 	ldw	r19,44(sp)
 800b9d8:	dc800a17 	ldw	r18,40(sp)
 800b9dc:	dc400917 	ldw	r17,36(sp)
 800b9e0:	dc000817 	ldw	r16,32(sp)
 800b9e4:	dec01204 	addi	sp,sp,72
 800b9e8:	f800283a 	ret
 800b9ec:	8104b03a 	or	r2,r16,r4
 800b9f0:	10004426 	beq	r2,zero,800bb04 <__muldf3+0x2d4>
 800b9f4:	80014b26 	beq	r16,zero,800bf24 <__muldf3+0x6f4>
 800b9f8:	8009883a 	mov	r4,r16
 800b9fc:	d9800715 	stw	r6,28(sp)
 800ba00:	d9c00215 	stw	r7,8(sp)
 800ba04:	da400415 	stw	r9,16(sp)
 800ba08:	800cb680 	call	800cb68 <__clzsi2>
 800ba0c:	d9800717 	ldw	r6,28(sp)
 800ba10:	d9c00217 	ldw	r7,8(sp)
 800ba14:	da400417 	ldw	r9,16(sp)
 800ba18:	1007883a 	mov	r3,r2
 800ba1c:	01000a04 	movi	r4,40
 800ba20:	1dfffe04 	addi	r23,r3,-8
 800ba24:	20c9c83a 	sub	r4,r4,r3
 800ba28:	85e0983a 	sll	r16,r16,r23
 800ba2c:	9108d83a 	srl	r4,r18,r4
 800ba30:	95ee983a 	sll	r23,r18,r23
 800ba34:	2420b03a 	or	r16,r4,r16
 800ba38:	053f0344 	movi	r20,-1011
 800ba3c:	a0e9c83a 	sub	r20,r20,r3
 800ba40:	000b883a 	mov	r5,zero
 800ba44:	0039883a 	mov	fp,zero
 800ba48:	003f9906 	br	800b8b0 <__alt_data_end+0xfc00b8b0>
 800ba4c:	8984b03a 	or	r2,r17,r6
 800ba50:	10002a1e 	bne	r2,zero,800bafc <__muldf3+0x2cc>
 800ba54:	0023883a 	mov	r17,zero
 800ba58:	0025883a 	mov	r18,zero
 800ba5c:	01c00084 	movi	r7,2
 800ba60:	003fa506 	br	800b8f8 <__alt_data_end+0xfc00b8f8>
 800ba64:	8984b03a 	or	r2,r17,r6
 800ba68:	10002026 	beq	r2,zero,800baec <__muldf3+0x2bc>
 800ba6c:	88011c26 	beq	r17,zero,800bee0 <__muldf3+0x6b0>
 800ba70:	8809883a 	mov	r4,r17
 800ba74:	d9400215 	stw	r5,8(sp)
 800ba78:	d9800715 	stw	r6,28(sp)
 800ba7c:	da400415 	stw	r9,16(sp)
 800ba80:	da800315 	stw	r10,12(sp)
 800ba84:	800cb680 	call	800cb68 <__clzsi2>
 800ba88:	d9400217 	ldw	r5,8(sp)
 800ba8c:	d9800717 	ldw	r6,28(sp)
 800ba90:	da400417 	ldw	r9,16(sp)
 800ba94:	da800317 	ldw	r10,12(sp)
 800ba98:	1007883a 	mov	r3,r2
 800ba9c:	01000a04 	movi	r4,40
 800baa0:	1cbffe04 	addi	r18,r3,-8
 800baa4:	20c9c83a 	sub	r4,r4,r3
 800baa8:	8ca2983a 	sll	r17,r17,r18
 800baac:	3108d83a 	srl	r4,r6,r4
 800bab0:	34a4983a 	sll	r18,r6,r18
 800bab4:	2462b03a 	or	r17,r4,r17
 800bab8:	00bf0344 	movi	r2,-1011
 800babc:	10c7c83a 	sub	r3,r2,r3
 800bac0:	000f883a 	mov	r7,zero
 800bac4:	003f8c06 	br	800b8f8 <__alt_data_end+0xfc00b8f8>
 800bac8:	008000c4 	movi	r2,3
 800bacc:	e0816d26 	beq	fp,r2,800c084 <__muldf3+0x854>
 800bad0:	00800044 	movi	r2,1
 800bad4:	e081321e 	bne	fp,r2,800bfa0 <__muldf3+0x770>
 800bad8:	48a6703a 	and	r19,r9,r2
 800badc:	0009883a 	mov	r4,zero
 800bae0:	0021883a 	mov	r16,zero
 800bae4:	002f883a 	mov	r23,zero
 800bae8:	003fab06 	br	800b998 <__alt_data_end+0xfc00b998>
 800baec:	0023883a 	mov	r17,zero
 800baf0:	0025883a 	mov	r18,zero
 800baf4:	01c00044 	movi	r7,1
 800baf8:	003f7f06 	br	800b8f8 <__alt_data_end+0xfc00b8f8>
 800bafc:	01c000c4 	movi	r7,3
 800bb00:	003f7d06 	br	800b8f8 <__alt_data_end+0xfc00b8f8>
 800bb04:	01400104 	movi	r5,4
 800bb08:	0021883a 	mov	r16,zero
 800bb0c:	002f883a 	mov	r23,zero
 800bb10:	07000044 	movi	fp,1
 800bb14:	003f6606 	br	800b8b0 <__alt_data_end+0xfc00b8b0>
 800bb18:	01400304 	movi	r5,12
 800bb1c:	070000c4 	movi	fp,3
 800bb20:	003f6306 	br	800b8b0 <__alt_data_end+0xfc00b8b0>
 800bb24:	04000434 	movhi	r16,16
 800bb28:	0027883a 	mov	r19,zero
 800bb2c:	843fffc4 	addi	r16,r16,-1
 800bb30:	05ffffc4 	movi	r23,-1
 800bb34:	0101ffc4 	movi	r4,2047
 800bb38:	003f9706 	br	800b998 <__alt_data_end+0xfc00b998>
 800bb3c:	8821883a 	mov	r16,r17
 800bb40:	902f883a 	mov	r23,r18
 800bb44:	5013883a 	mov	r9,r10
 800bb48:	3839883a 	mov	fp,r7
 800bb4c:	003f8c06 	br	800b980 <__alt_data_end+0xfc00b980>
 800bb50:	8821883a 	mov	r16,r17
 800bb54:	902f883a 	mov	r23,r18
 800bb58:	3013883a 	mov	r9,r6
 800bb5c:	3839883a 	mov	fp,r7
 800bb60:	003f8706 	br	800b980 <__alt_data_end+0xfc00b980>
 800bb64:	b82ad43a 	srli	r21,r23,16
 800bb68:	9038d43a 	srli	fp,r18,16
 800bb6c:	bdffffcc 	andi	r23,r23,65535
 800bb70:	94bfffcc 	andi	r18,r18,65535
 800bb74:	9009883a 	mov	r4,r18
 800bb78:	b80b883a 	mov	r5,r23
 800bb7c:	d8c00515 	stw	r3,20(sp)
 800bb80:	d9800715 	stw	r6,28(sp)
 800bb84:	da000615 	stw	r8,24(sp)
 800bb88:	800a3a80 	call	800a3a8 <__mulsi3>
 800bb8c:	9009883a 	mov	r4,r18
 800bb90:	a80b883a 	mov	r5,r21
 800bb94:	1029883a 	mov	r20,r2
 800bb98:	800a3a80 	call	800a3a8 <__mulsi3>
 800bb9c:	e009883a 	mov	r4,fp
 800bba0:	a80b883a 	mov	r5,r21
 800bba4:	102d883a 	mov	r22,r2
 800bba8:	800a3a80 	call	800a3a8 <__mulsi3>
 800bbac:	e009883a 	mov	r4,fp
 800bbb0:	b80b883a 	mov	r5,r23
 800bbb4:	1027883a 	mov	r19,r2
 800bbb8:	800a3a80 	call	800a3a8 <__mulsi3>
 800bbbc:	a008d43a 	srli	r4,r20,16
 800bbc0:	b085883a 	add	r2,r22,r2
 800bbc4:	d8c00517 	ldw	r3,20(sp)
 800bbc8:	110f883a 	add	r7,r2,r4
 800bbcc:	d9800717 	ldw	r6,28(sp)
 800bbd0:	da000617 	ldw	r8,24(sp)
 800bbd4:	3d80022e 	bgeu	r7,r22,800bbe0 <__muldf3+0x3b0>
 800bbd8:	00800074 	movhi	r2,1
 800bbdc:	98a7883a 	add	r19,r19,r2
 800bbe0:	3804943a 	slli	r2,r7,16
 800bbe4:	380ed43a 	srli	r7,r7,16
 800bbe8:	882cd43a 	srli	r22,r17,16
 800bbec:	a53fffcc 	andi	r20,r20,65535
 800bbf0:	8c7fffcc 	andi	r17,r17,65535
 800bbf4:	1529883a 	add	r20,r2,r20
 800bbf8:	8809883a 	mov	r4,r17
 800bbfc:	b80b883a 	mov	r5,r23
 800bc00:	d8c00515 	stw	r3,20(sp)
 800bc04:	d9800715 	stw	r6,28(sp)
 800bc08:	da000615 	stw	r8,24(sp)
 800bc0c:	d9c00015 	stw	r7,0(sp)
 800bc10:	dd000115 	stw	r20,4(sp)
 800bc14:	800a3a80 	call	800a3a8 <__mulsi3>
 800bc18:	a80b883a 	mov	r5,r21
 800bc1c:	8809883a 	mov	r4,r17
 800bc20:	d8800415 	stw	r2,16(sp)
 800bc24:	800a3a80 	call	800a3a8 <__mulsi3>
 800bc28:	a80b883a 	mov	r5,r21
 800bc2c:	b009883a 	mov	r4,r22
 800bc30:	1029883a 	mov	r20,r2
 800bc34:	800a3a80 	call	800a3a8 <__mulsi3>
 800bc38:	b009883a 	mov	r4,r22
 800bc3c:	b80b883a 	mov	r5,r23
 800bc40:	102b883a 	mov	r21,r2
 800bc44:	800a3a80 	call	800a3a8 <__mulsi3>
 800bc48:	da400417 	ldw	r9,16(sp)
 800bc4c:	a085883a 	add	r2,r20,r2
 800bc50:	d8c00517 	ldw	r3,20(sp)
 800bc54:	4808d43a 	srli	r4,r9,16
 800bc58:	d9800717 	ldw	r6,28(sp)
 800bc5c:	da000617 	ldw	r8,24(sp)
 800bc60:	1109883a 	add	r4,r2,r4
 800bc64:	2500022e 	bgeu	r4,r20,800bc70 <__muldf3+0x440>
 800bc68:	00800074 	movhi	r2,1
 800bc6c:	a8ab883a 	add	r21,r21,r2
 800bc70:	200e943a 	slli	r7,r4,16
 800bc74:	2004d43a 	srli	r2,r4,16
 800bc78:	802ed43a 	srli	r23,r16,16
 800bc7c:	843fffcc 	andi	r16,r16,65535
 800bc80:	4d3fffcc 	andi	r20,r9,65535
 800bc84:	9009883a 	mov	r4,r18
 800bc88:	800b883a 	mov	r5,r16
 800bc8c:	3d29883a 	add	r20,r7,r20
 800bc90:	d8c00515 	stw	r3,20(sp)
 800bc94:	d9800715 	stw	r6,28(sp)
 800bc98:	da000615 	stw	r8,24(sp)
 800bc9c:	a8ab883a 	add	r21,r21,r2
 800bca0:	800a3a80 	call	800a3a8 <__mulsi3>
 800bca4:	9009883a 	mov	r4,r18
 800bca8:	b80b883a 	mov	r5,r23
 800bcac:	d8800315 	stw	r2,12(sp)
 800bcb0:	800a3a80 	call	800a3a8 <__mulsi3>
 800bcb4:	e009883a 	mov	r4,fp
 800bcb8:	b80b883a 	mov	r5,r23
 800bcbc:	1025883a 	mov	r18,r2
 800bcc0:	800a3a80 	call	800a3a8 <__mulsi3>
 800bcc4:	e009883a 	mov	r4,fp
 800bcc8:	800b883a 	mov	r5,r16
 800bccc:	d8800215 	stw	r2,8(sp)
 800bcd0:	800a3a80 	call	800a3a8 <__mulsi3>
 800bcd4:	da800317 	ldw	r10,12(sp)
 800bcd8:	d9400017 	ldw	r5,0(sp)
 800bcdc:	9085883a 	add	r2,r18,r2
 800bce0:	5008d43a 	srli	r4,r10,16
 800bce4:	a153883a 	add	r9,r20,r5
 800bce8:	d8c00517 	ldw	r3,20(sp)
 800bcec:	1109883a 	add	r4,r2,r4
 800bcf0:	d9800717 	ldw	r6,28(sp)
 800bcf4:	da000617 	ldw	r8,24(sp)
 800bcf8:	dac00217 	ldw	r11,8(sp)
 800bcfc:	2480022e 	bgeu	r4,r18,800bd08 <__muldf3+0x4d8>
 800bd00:	00800074 	movhi	r2,1
 800bd04:	5897883a 	add	r11,r11,r2
 800bd08:	200e943a 	slli	r7,r4,16
 800bd0c:	2038d43a 	srli	fp,r4,16
 800bd10:	52bfffcc 	andi	r10,r10,65535
 800bd14:	3a8f883a 	add	r7,r7,r10
 800bd18:	8809883a 	mov	r4,r17
 800bd1c:	800b883a 	mov	r5,r16
 800bd20:	d8c00515 	stw	r3,20(sp)
 800bd24:	d9800715 	stw	r6,28(sp)
 800bd28:	d9c00215 	stw	r7,8(sp)
 800bd2c:	da000615 	stw	r8,24(sp)
 800bd30:	da400415 	stw	r9,16(sp)
 800bd34:	5f39883a 	add	fp,r11,fp
 800bd38:	800a3a80 	call	800a3a8 <__mulsi3>
 800bd3c:	8809883a 	mov	r4,r17
 800bd40:	b80b883a 	mov	r5,r23
 800bd44:	1025883a 	mov	r18,r2
 800bd48:	800a3a80 	call	800a3a8 <__mulsi3>
 800bd4c:	b009883a 	mov	r4,r22
 800bd50:	b80b883a 	mov	r5,r23
 800bd54:	d8800315 	stw	r2,12(sp)
 800bd58:	800a3a80 	call	800a3a8 <__mulsi3>
 800bd5c:	b009883a 	mov	r4,r22
 800bd60:	800b883a 	mov	r5,r16
 800bd64:	1023883a 	mov	r17,r2
 800bd68:	800a3a80 	call	800a3a8 <__mulsi3>
 800bd6c:	da800317 	ldw	r10,12(sp)
 800bd70:	9008d43a 	srli	r4,r18,16
 800bd74:	d8c00517 	ldw	r3,20(sp)
 800bd78:	5085883a 	add	r2,r10,r2
 800bd7c:	1109883a 	add	r4,r2,r4
 800bd80:	d9800717 	ldw	r6,28(sp)
 800bd84:	d9c00217 	ldw	r7,8(sp)
 800bd88:	da000617 	ldw	r8,24(sp)
 800bd8c:	da400417 	ldw	r9,16(sp)
 800bd90:	2280022e 	bgeu	r4,r10,800bd9c <__muldf3+0x56c>
 800bd94:	00800074 	movhi	r2,1
 800bd98:	88a3883a 	add	r17,r17,r2
 800bd9c:	2004943a 	slli	r2,r4,16
 800bda0:	94bfffcc 	andi	r18,r18,65535
 800bda4:	4ce7883a 	add	r19,r9,r19
 800bda8:	14a5883a 	add	r18,r2,r18
 800bdac:	9d29803a 	cmpltu	r20,r19,r20
 800bdb0:	9565883a 	add	r18,r18,r21
 800bdb4:	9505883a 	add	r2,r18,r20
 800bdb8:	99e7883a 	add	r19,r19,r7
 800bdbc:	99cf803a 	cmpltu	r7,r19,r7
 800bdc0:	e08b883a 	add	r5,fp,r2
 800bdc4:	2008d43a 	srli	r4,r4,16
 800bdc8:	29ef883a 	add	r23,r5,r7
 800bdcc:	1529803a 	cmpltu	r20,r2,r20
 800bdd0:	956b803a 	cmpltu	r21,r18,r21
 800bdd4:	b9cf803a 	cmpltu	r7,r23,r7
 800bdd8:	a564b03a 	or	r18,r20,r21
 800bddc:	2f39803a 	cmpltu	fp,r5,fp
 800bde0:	9125883a 	add	r18,r18,r4
 800bde4:	3f38b03a 	or	fp,r7,fp
 800bde8:	9725883a 	add	r18,r18,fp
 800bdec:	9804927a 	slli	r2,r19,9
 800bdf0:	9463883a 	add	r17,r18,r17
 800bdf4:	d9000117 	ldw	r4,4(sp)
 800bdf8:	b820d5fa 	srli	r16,r23,23
 800bdfc:	8822927a 	slli	r17,r17,9
 800be00:	9826d5fa 	srli	r19,r19,23
 800be04:	1104b03a 	or	r2,r2,r4
 800be08:	b82e927a 	slli	r23,r23,9
 800be0c:	1004c03a 	cmpne	r2,r2,zero
 800be10:	8c20b03a 	or	r16,r17,r16
 800be14:	14e6b03a 	or	r19,r2,r19
 800be18:	8080402c 	andhi	r2,r16,256
 800be1c:	9deeb03a 	or	r23,r19,r23
 800be20:	10000726 	beq	r2,zero,800be40 <__muldf3+0x610>
 800be24:	b804d07a 	srli	r2,r23,1
 800be28:	800697fa 	slli	r3,r16,31
 800be2c:	bdc0004c 	andi	r23,r23,1
 800be30:	8020d07a 	srli	r16,r16,1
 800be34:	b8aeb03a 	or	r23,r23,r2
 800be38:	b8eeb03a 	or	r23,r23,r3
 800be3c:	4007883a 	mov	r3,r8
 800be40:	1900ffc4 	addi	r4,r3,1023
 800be44:	01004d0e 	bge	zero,r4,800bf7c <__muldf3+0x74c>
 800be48:	b88001cc 	andi	r2,r23,7
 800be4c:	10000726 	beq	r2,zero,800be6c <__muldf3+0x63c>
 800be50:	b94003cc 	andi	r5,r23,15
 800be54:	00800104 	movi	r2,4
 800be58:	28800426 	beq	r5,r2,800be6c <__muldf3+0x63c>
 800be5c:	b885883a 	add	r2,r23,r2
 800be60:	15ef803a 	cmpltu	r23,r2,r23
 800be64:	85e1883a 	add	r16,r16,r23
 800be68:	102f883a 	mov	r23,r2
 800be6c:	8080402c 	andhi	r2,r16,256
 800be70:	10000426 	beq	r2,zero,800be84 <__muldf3+0x654>
 800be74:	00bfc034 	movhi	r2,65280
 800be78:	10bfffc4 	addi	r2,r2,-1
 800be7c:	19010004 	addi	r4,r3,1024
 800be80:	80a0703a 	and	r16,r16,r2
 800be84:	0081ff84 	movi	r2,2046
 800be88:	1100340e 	bge	r2,r4,800bf5c <__muldf3+0x72c>
 800be8c:	34c0004c 	andi	r19,r6,1
 800be90:	0101ffc4 	movi	r4,2047
 800be94:	0021883a 	mov	r16,zero
 800be98:	002f883a 	mov	r23,zero
 800be9c:	003ebe06 	br	800b998 <__alt_data_end+0xfc00b998>
 800bea0:	8080022c 	andhi	r2,r16,8
 800bea4:	10000926 	beq	r2,zero,800becc <__muldf3+0x69c>
 800bea8:	8880022c 	andhi	r2,r17,8
 800beac:	1000071e 	bne	r2,zero,800becc <__muldf3+0x69c>
 800beb0:	00800434 	movhi	r2,16
 800beb4:	8c000234 	orhi	r16,r17,8
 800beb8:	10bfffc4 	addi	r2,r2,-1
 800bebc:	b027883a 	mov	r19,r22
 800bec0:	80a0703a 	and	r16,r16,r2
 800bec4:	902f883a 	mov	r23,r18
 800bec8:	003f1a06 	br	800bb34 <__alt_data_end+0xfc00bb34>
 800becc:	00800434 	movhi	r2,16
 800bed0:	84000234 	orhi	r16,r16,8
 800bed4:	10bfffc4 	addi	r2,r2,-1
 800bed8:	80a0703a 	and	r16,r16,r2
 800bedc:	003f1506 	br	800bb34 <__alt_data_end+0xfc00bb34>
 800bee0:	3009883a 	mov	r4,r6
 800bee4:	d9400215 	stw	r5,8(sp)
 800bee8:	d9800715 	stw	r6,28(sp)
 800beec:	da400415 	stw	r9,16(sp)
 800bef0:	da800315 	stw	r10,12(sp)
 800bef4:	800cb680 	call	800cb68 <__clzsi2>
 800bef8:	10c00804 	addi	r3,r2,32
 800befc:	010009c4 	movi	r4,39
 800bf00:	d9400217 	ldw	r5,8(sp)
 800bf04:	d9800717 	ldw	r6,28(sp)
 800bf08:	da400417 	ldw	r9,16(sp)
 800bf0c:	da800317 	ldw	r10,12(sp)
 800bf10:	20fee20e 	bge	r4,r3,800ba9c <__alt_data_end+0xfc00ba9c>
 800bf14:	147ffe04 	addi	r17,r2,-8
 800bf18:	9462983a 	sll	r17,r18,r17
 800bf1c:	0025883a 	mov	r18,zero
 800bf20:	003ee506 	br	800bab8 <__alt_data_end+0xfc00bab8>
 800bf24:	d9800715 	stw	r6,28(sp)
 800bf28:	d9c00215 	stw	r7,8(sp)
 800bf2c:	da400415 	stw	r9,16(sp)
 800bf30:	800cb680 	call	800cb68 <__clzsi2>
 800bf34:	10c00804 	addi	r3,r2,32
 800bf38:	010009c4 	movi	r4,39
 800bf3c:	d9800717 	ldw	r6,28(sp)
 800bf40:	d9c00217 	ldw	r7,8(sp)
 800bf44:	da400417 	ldw	r9,16(sp)
 800bf48:	20feb40e 	bge	r4,r3,800ba1c <__alt_data_end+0xfc00ba1c>
 800bf4c:	143ffe04 	addi	r16,r2,-8
 800bf50:	9420983a 	sll	r16,r18,r16
 800bf54:	002f883a 	mov	r23,zero
 800bf58:	003eb706 	br	800ba38 <__alt_data_end+0xfc00ba38>
 800bf5c:	8004977a 	slli	r2,r16,29
 800bf60:	b82ed0fa 	srli	r23,r23,3
 800bf64:	8020927a 	slli	r16,r16,9
 800bf68:	2101ffcc 	andi	r4,r4,2047
 800bf6c:	15eeb03a 	or	r23,r2,r23
 800bf70:	8020d33a 	srli	r16,r16,12
 800bf74:	34c0004c 	andi	r19,r6,1
 800bf78:	003e8706 	br	800b998 <__alt_data_end+0xfc00b998>
 800bf7c:	00bf0084 	movi	r2,-1022
 800bf80:	10c5c83a 	sub	r2,r2,r3
 800bf84:	01000e04 	movi	r4,56
 800bf88:	2080080e 	bge	r4,r2,800bfac <__muldf3+0x77c>
 800bf8c:	34c0004c 	andi	r19,r6,1
 800bf90:	0009883a 	mov	r4,zero
 800bf94:	0021883a 	mov	r16,zero
 800bf98:	002f883a 	mov	r23,zero
 800bf9c:	003e7e06 	br	800b998 <__alt_data_end+0xfc00b998>
 800bfa0:	4007883a 	mov	r3,r8
 800bfa4:	480d883a 	mov	r6,r9
 800bfa8:	003fa506 	br	800be40 <__alt_data_end+0xfc00be40>
 800bfac:	010007c4 	movi	r4,31
 800bfb0:	20801816 	blt	r4,r2,800c014 <__muldf3+0x7e4>
 800bfb4:	18c10784 	addi	r3,r3,1054
 800bfb8:	80c8983a 	sll	r4,r16,r3
 800bfbc:	b88ad83a 	srl	r5,r23,r2
 800bfc0:	b8c6983a 	sll	r3,r23,r3
 800bfc4:	80a0d83a 	srl	r16,r16,r2
 800bfc8:	2908b03a 	or	r4,r5,r4
 800bfcc:	1804c03a 	cmpne	r2,r3,zero
 800bfd0:	2088b03a 	or	r4,r4,r2
 800bfd4:	208001cc 	andi	r2,r4,7
 800bfd8:	10000726 	beq	r2,zero,800bff8 <__muldf3+0x7c8>
 800bfdc:	20c003cc 	andi	r3,r4,15
 800bfe0:	00800104 	movi	r2,4
 800bfe4:	18800426 	beq	r3,r2,800bff8 <__muldf3+0x7c8>
 800bfe8:	20c00104 	addi	r3,r4,4
 800bfec:	1905803a 	cmpltu	r2,r3,r4
 800bff0:	80a1883a 	add	r16,r16,r2
 800bff4:	1809883a 	mov	r4,r3
 800bff8:	8080202c 	andhi	r2,r16,128
 800bffc:	10001b26 	beq	r2,zero,800c06c <__muldf3+0x83c>
 800c000:	34c0004c 	andi	r19,r6,1
 800c004:	01000044 	movi	r4,1
 800c008:	0021883a 	mov	r16,zero
 800c00c:	002f883a 	mov	r23,zero
 800c010:	003e6106 	br	800b998 <__alt_data_end+0xfc00b998>
 800c014:	013ef884 	movi	r4,-1054
 800c018:	20c9c83a 	sub	r4,r4,r3
 800c01c:	01400804 	movi	r5,32
 800c020:	8108d83a 	srl	r4,r16,r4
 800c024:	11401526 	beq	r2,r5,800c07c <__muldf3+0x84c>
 800c028:	18c10f84 	addi	r3,r3,1086
 800c02c:	80e0983a 	sll	r16,r16,r3
 800c030:	85eeb03a 	or	r23,r16,r23
 800c034:	b804c03a 	cmpne	r2,r23,zero
 800c038:	1108b03a 	or	r4,r2,r4
 800c03c:	20c001cc 	andi	r3,r4,7
 800c040:	1800061e 	bne	r3,zero,800c05c <__muldf3+0x82c>
 800c044:	0021883a 	mov	r16,zero
 800c048:	202ed0fa 	srli	r23,r4,3
 800c04c:	34c0004c 	andi	r19,r6,1
 800c050:	0009883a 	mov	r4,zero
 800c054:	b8eeb03a 	or	r23,r23,r3
 800c058:	003e4f06 	br	800b998 <__alt_data_end+0xfc00b998>
 800c05c:	20c003cc 	andi	r3,r4,15
 800c060:	00800104 	movi	r2,4
 800c064:	0021883a 	mov	r16,zero
 800c068:	18bfdf1e 	bne	r3,r2,800bfe8 <__alt_data_end+0xfc00bfe8>
 800c06c:	8004927a 	slli	r2,r16,9
 800c070:	8006977a 	slli	r3,r16,29
 800c074:	1020d33a 	srli	r16,r2,12
 800c078:	003ff306 	br	800c048 <__alt_data_end+0xfc00c048>
 800c07c:	0021883a 	mov	r16,zero
 800c080:	003feb06 	br	800c030 <__alt_data_end+0xfc00c030>
 800c084:	00800434 	movhi	r2,16
 800c088:	84000234 	orhi	r16,r16,8
 800c08c:	10bfffc4 	addi	r2,r2,-1
 800c090:	4cc0004c 	andi	r19,r9,1
 800c094:	80a0703a 	and	r16,r16,r2
 800c098:	003ea606 	br	800bb34 <__alt_data_end+0xfc00bb34>

0800c09c <__subdf3>:
 800c09c:	00c00434 	movhi	r3,16
 800c0a0:	18ffffc4 	addi	r3,r3,-1
 800c0a4:	defffb04 	addi	sp,sp,-20
 800c0a8:	28d2703a 	and	r9,r5,r3
 800c0ac:	3814d53a 	srli	r10,r7,20
 800c0b0:	38c6703a 	and	r3,r7,r3
 800c0b4:	3004d77a 	srli	r2,r6,29
 800c0b8:	dc800215 	stw	r18,8(sp)
 800c0bc:	dc000015 	stw	r16,0(sp)
 800c0c0:	2824d7fa 	srli	r18,r5,31
 800c0c4:	2820d53a 	srli	r16,r5,20
 800c0c8:	481290fa 	slli	r9,r9,3
 800c0cc:	200ad77a 	srli	r5,r4,29
 800c0d0:	180690fa 	slli	r3,r3,3
 800c0d4:	dc400115 	stw	r17,4(sp)
 800c0d8:	dfc00415 	stw	ra,16(sp)
 800c0dc:	202290fa 	slli	r17,r4,3
 800c0e0:	dcc00315 	stw	r19,12(sp)
 800c0e4:	5281ffcc 	andi	r10,r10,2047
 800c0e8:	0101ffc4 	movi	r4,2047
 800c0ec:	9011883a 	mov	r8,r18
 800c0f0:	8401ffcc 	andi	r16,r16,2047
 800c0f4:	94803fcc 	andi	r18,r18,255
 800c0f8:	494ab03a 	or	r5,r9,r5
 800c0fc:	380ed7fa 	srli	r7,r7,31
 800c100:	1886b03a 	or	r3,r3,r2
 800c104:	300c90fa 	slli	r6,r6,3
 800c108:	51009026 	beq	r10,r4,800c34c <__subdf3+0x2b0>
 800c10c:	39c0005c 	xori	r7,r7,1
 800c110:	8285c83a 	sub	r2,r16,r10
 800c114:	91c06f26 	beq	r18,r7,800c2d4 <__subdf3+0x238>
 800c118:	0080b10e 	bge	zero,r2,800c3e0 <__subdf3+0x344>
 800c11c:	50002a1e 	bne	r10,zero,800c1c8 <__subdf3+0x12c>
 800c120:	1988b03a 	or	r4,r3,r6
 800c124:	2000941e 	bne	r4,zero,800c378 <__subdf3+0x2dc>
 800c128:	888001cc 	andi	r2,r17,7
 800c12c:	10005b26 	beq	r2,zero,800c29c <__subdf3+0x200>
 800c130:	88c003cc 	andi	r3,r17,15
 800c134:	00800104 	movi	r2,4
 800c138:	18805826 	beq	r3,r2,800c29c <__subdf3+0x200>
 800c13c:	88c00104 	addi	r3,r17,4
 800c140:	1c63803a 	cmpltu	r17,r3,r17
 800c144:	2c4b883a 	add	r5,r5,r17
 800c148:	2880202c 	andhi	r2,r5,128
 800c14c:	9200004c 	andi	r8,r18,1
 800c150:	1823883a 	mov	r17,r3
 800c154:	10005426 	beq	r2,zero,800c2a8 <__subdf3+0x20c>
 800c158:	84000044 	addi	r16,r16,1
 800c15c:	0081ffc4 	movi	r2,2047
 800c160:	8080bf26 	beq	r16,r2,800c460 <__subdf3+0x3c4>
 800c164:	013fe034 	movhi	r4,65408
 800c168:	213fffc4 	addi	r4,r4,-1
 800c16c:	290a703a 	and	r5,r5,r4
 800c170:	2804977a 	slli	r2,r5,29
 800c174:	280a927a 	slli	r5,r5,9
 800c178:	8822d0fa 	srli	r17,r17,3
 800c17c:	8401ffcc 	andi	r16,r16,2047
 800c180:	2808d33a 	srli	r4,r5,12
 800c184:	1444b03a 	or	r2,r2,r17
 800c188:	8401ffcc 	andi	r16,r16,2047
 800c18c:	800a953a 	slli	r5,r16,20
 800c190:	40c03fcc 	andi	r3,r8,255
 800c194:	04000434 	movhi	r16,16
 800c198:	180697fa 	slli	r3,r3,31
 800c19c:	843fffc4 	addi	r16,r16,-1
 800c1a0:	2420703a 	and	r16,r4,r16
 800c1a4:	8160b03a 	or	r16,r16,r5
 800c1a8:	80c6b03a 	or	r3,r16,r3
 800c1ac:	dfc00417 	ldw	ra,16(sp)
 800c1b0:	dcc00317 	ldw	r19,12(sp)
 800c1b4:	dc800217 	ldw	r18,8(sp)
 800c1b8:	dc400117 	ldw	r17,4(sp)
 800c1bc:	dc000017 	ldw	r16,0(sp)
 800c1c0:	dec00504 	addi	sp,sp,20
 800c1c4:	f800283a 	ret
 800c1c8:	0101ffc4 	movi	r4,2047
 800c1cc:	813fd626 	beq	r16,r4,800c128 <__alt_data_end+0xfc00c128>
 800c1d0:	18c02034 	orhi	r3,r3,128
 800c1d4:	01000e04 	movi	r4,56
 800c1d8:	2080a416 	blt	r4,r2,800c46c <__subdf3+0x3d0>
 800c1dc:	010007c4 	movi	r4,31
 800c1e0:	2080c716 	blt	r4,r2,800c500 <__subdf3+0x464>
 800c1e4:	01000804 	movi	r4,32
 800c1e8:	2089c83a 	sub	r4,r4,r2
 800c1ec:	1910983a 	sll	r8,r3,r4
 800c1f0:	308ed83a 	srl	r7,r6,r2
 800c1f4:	3108983a 	sll	r4,r6,r4
 800c1f8:	1884d83a 	srl	r2,r3,r2
 800c1fc:	41ccb03a 	or	r6,r8,r7
 800c200:	2008c03a 	cmpne	r4,r4,zero
 800c204:	310cb03a 	or	r6,r6,r4
 800c208:	898dc83a 	sub	r6,r17,r6
 800c20c:	89a3803a 	cmpltu	r17,r17,r6
 800c210:	288bc83a 	sub	r5,r5,r2
 800c214:	2c4bc83a 	sub	r5,r5,r17
 800c218:	3023883a 	mov	r17,r6
 800c21c:	2880202c 	andhi	r2,r5,128
 800c220:	10006b26 	beq	r2,zero,800c3d0 <__subdf3+0x334>
 800c224:	04c02034 	movhi	r19,128
 800c228:	9cffffc4 	addi	r19,r19,-1
 800c22c:	2ce6703a 	and	r19,r5,r19
 800c230:	98007c26 	beq	r19,zero,800c424 <__subdf3+0x388>
 800c234:	9809883a 	mov	r4,r19
 800c238:	800cb680 	call	800cb68 <__clzsi2>
 800c23c:	10fffe04 	addi	r3,r2,-8
 800c240:	010007c4 	movi	r4,31
 800c244:	20c07d16 	blt	r4,r3,800c43c <__subdf3+0x3a0>
 800c248:	01400a04 	movi	r5,40
 800c24c:	2885c83a 	sub	r2,r5,r2
 800c250:	888ad83a 	srl	r5,r17,r2
 800c254:	98e6983a 	sll	r19,r19,r3
 800c258:	88e2983a 	sll	r17,r17,r3
 800c25c:	2ce6b03a 	or	r19,r5,r19
 800c260:	1c007a16 	blt	r3,r16,800c44c <__subdf3+0x3b0>
 800c264:	1c21c83a 	sub	r16,r3,r16
 800c268:	81400044 	addi	r5,r16,1
 800c26c:	00c007c4 	movi	r3,31
 800c270:	19409616 	blt	r3,r5,800c4cc <__subdf3+0x430>
 800c274:	1c21c83a 	sub	r16,r3,r16
 800c278:	8c08983a 	sll	r4,r17,r16
 800c27c:	8946d83a 	srl	r3,r17,r5
 800c280:	9c20983a 	sll	r16,r19,r16
 800c284:	2008c03a 	cmpne	r4,r4,zero
 800c288:	994ad83a 	srl	r5,r19,r5
 800c28c:	1c06b03a 	or	r3,r3,r16
 800c290:	1922b03a 	or	r17,r3,r4
 800c294:	0021883a 	mov	r16,zero
 800c298:	003fa306 	br	800c128 <__alt_data_end+0xfc00c128>
 800c29c:	2880202c 	andhi	r2,r5,128
 800c2a0:	9200004c 	andi	r8,r18,1
 800c2a4:	103fac1e 	bne	r2,zero,800c158 <__alt_data_end+0xfc00c158>
 800c2a8:	2804977a 	slli	r2,r5,29
 800c2ac:	8822d0fa 	srli	r17,r17,3
 800c2b0:	00c1ffc4 	movi	r3,2047
 800c2b4:	280ad0fa 	srli	r5,r5,3
 800c2b8:	1444b03a 	or	r2,r2,r17
 800c2bc:	80c02726 	beq	r16,r3,800c35c <__subdf3+0x2c0>
 800c2c0:	01000434 	movhi	r4,16
 800c2c4:	213fffc4 	addi	r4,r4,-1
 800c2c8:	80e0703a 	and	r16,r16,r3
 800c2cc:	2908703a 	and	r4,r5,r4
 800c2d0:	003fad06 	br	800c188 <__alt_data_end+0xfc00c188>
 800c2d4:	0080690e 	bge	zero,r2,800c47c <__subdf3+0x3e0>
 800c2d8:	50002f26 	beq	r10,zero,800c398 <__subdf3+0x2fc>
 800c2dc:	0101ffc4 	movi	r4,2047
 800c2e0:	813f9126 	beq	r16,r4,800c128 <__alt_data_end+0xfc00c128>
 800c2e4:	18c02034 	orhi	r3,r3,128
 800c2e8:	01000e04 	movi	r4,56
 800c2ec:	2080b00e 	bge	r4,r2,800c5b0 <__subdf3+0x514>
 800c2f0:	198cb03a 	or	r6,r3,r6
 800c2f4:	300ec03a 	cmpne	r7,r6,zero
 800c2f8:	0005883a 	mov	r2,zero
 800c2fc:	3c4f883a 	add	r7,r7,r17
 800c300:	3c63803a 	cmpltu	r17,r7,r17
 800c304:	114b883a 	add	r5,r2,r5
 800c308:	2c4b883a 	add	r5,r5,r17
 800c30c:	3823883a 	mov	r17,r7
 800c310:	2880202c 	andhi	r2,r5,128
 800c314:	10002e26 	beq	r2,zero,800c3d0 <__subdf3+0x334>
 800c318:	84000044 	addi	r16,r16,1
 800c31c:	0081ffc4 	movi	r2,2047
 800c320:	8080de26 	beq	r16,r2,800c69c <__subdf3+0x600>
 800c324:	00bfe034 	movhi	r2,65408
 800c328:	10bfffc4 	addi	r2,r2,-1
 800c32c:	288a703a 	and	r5,r5,r2
 800c330:	880cd07a 	srli	r6,r17,1
 800c334:	280897fa 	slli	r4,r5,31
 800c338:	88c0004c 	andi	r3,r17,1
 800c33c:	30e2b03a 	or	r17,r6,r3
 800c340:	280ad07a 	srli	r5,r5,1
 800c344:	8922b03a 	or	r17,r17,r4
 800c348:	003f7706 	br	800c128 <__alt_data_end+0xfc00c128>
 800c34c:	1984b03a 	or	r2,r3,r6
 800c350:	103f6e26 	beq	r2,zero,800c10c <__alt_data_end+0xfc00c10c>
 800c354:	39c03fcc 	andi	r7,r7,255
 800c358:	003f6d06 	br	800c110 <__alt_data_end+0xfc00c110>
 800c35c:	1146b03a 	or	r3,r2,r5
 800c360:	18003f26 	beq	r3,zero,800c460 <__subdf3+0x3c4>
 800c364:	00c00434 	movhi	r3,16
 800c368:	29000234 	orhi	r4,r5,8
 800c36c:	18ffffc4 	addi	r3,r3,-1
 800c370:	20c8703a 	and	r4,r4,r3
 800c374:	003f8406 	br	800c188 <__alt_data_end+0xfc00c188>
 800c378:	10bfffc4 	addi	r2,r2,-1
 800c37c:	1000501e 	bne	r2,zero,800c4c0 <__subdf3+0x424>
 800c380:	898fc83a 	sub	r7,r17,r6
 800c384:	89e3803a 	cmpltu	r17,r17,r7
 800c388:	28cbc83a 	sub	r5,r5,r3
 800c38c:	2c4bc83a 	sub	r5,r5,r17
 800c390:	3823883a 	mov	r17,r7
 800c394:	003fa106 	br	800c21c <__alt_data_end+0xfc00c21c>
 800c398:	1988b03a 	or	r4,r3,r6
 800c39c:	203f6226 	beq	r4,zero,800c128 <__alt_data_end+0xfc00c128>
 800c3a0:	10bfffc4 	addi	r2,r2,-1
 800c3a4:	10009b1e 	bne	r2,zero,800c614 <__subdf3+0x578>
 800c3a8:	344d883a 	add	r6,r6,r17
 800c3ac:	3463803a 	cmpltu	r17,r6,r17
 800c3b0:	194b883a 	add	r5,r3,r5
 800c3b4:	2c4b883a 	add	r5,r5,r17
 800c3b8:	3023883a 	mov	r17,r6
 800c3bc:	003fd406 	br	800c310 <__alt_data_end+0xfc00c310>
 800c3c0:	1106b03a 	or	r3,r2,r4
 800c3c4:	1800b426 	beq	r3,zero,800c698 <__subdf3+0x5fc>
 800c3c8:	100b883a 	mov	r5,r2
 800c3cc:	2023883a 	mov	r17,r4
 800c3d0:	888001cc 	andi	r2,r17,7
 800c3d4:	103f561e 	bne	r2,zero,800c130 <__alt_data_end+0xfc00c130>
 800c3d8:	9200004c 	andi	r8,r18,1
 800c3dc:	003fb206 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c3e0:	1000531e 	bne	r2,zero,800c530 <__subdf3+0x494>
 800c3e4:	80800044 	addi	r2,r16,1
 800c3e8:	1081ffcc 	andi	r2,r2,2047
 800c3ec:	01000044 	movi	r4,1
 800c3f0:	2080a00e 	bge	r4,r2,800c674 <__subdf3+0x5d8>
 800c3f4:	8985c83a 	sub	r2,r17,r6
 800c3f8:	8889803a 	cmpltu	r4,r17,r2
 800c3fc:	28e7c83a 	sub	r19,r5,r3
 800c400:	9927c83a 	sub	r19,r19,r4
 800c404:	9900202c 	andhi	r4,r19,128
 800c408:	20006226 	beq	r4,zero,800c594 <__subdf3+0x4f8>
 800c40c:	3463c83a 	sub	r17,r6,r17
 800c410:	194bc83a 	sub	r5,r3,r5
 800c414:	344d803a 	cmpltu	r6,r6,r17
 800c418:	29a7c83a 	sub	r19,r5,r6
 800c41c:	3825883a 	mov	r18,r7
 800c420:	983f841e 	bne	r19,zero,800c234 <__alt_data_end+0xfc00c234>
 800c424:	8809883a 	mov	r4,r17
 800c428:	800cb680 	call	800cb68 <__clzsi2>
 800c42c:	10800804 	addi	r2,r2,32
 800c430:	10fffe04 	addi	r3,r2,-8
 800c434:	010007c4 	movi	r4,31
 800c438:	20ff830e 	bge	r4,r3,800c248 <__alt_data_end+0xfc00c248>
 800c43c:	14fff604 	addi	r19,r2,-40
 800c440:	8ce6983a 	sll	r19,r17,r19
 800c444:	0023883a 	mov	r17,zero
 800c448:	1c3f860e 	bge	r3,r16,800c264 <__alt_data_end+0xfc00c264>
 800c44c:	017fe034 	movhi	r5,65408
 800c450:	297fffc4 	addi	r5,r5,-1
 800c454:	80e1c83a 	sub	r16,r16,r3
 800c458:	994a703a 	and	r5,r19,r5
 800c45c:	003f3206 	br	800c128 <__alt_data_end+0xfc00c128>
 800c460:	0009883a 	mov	r4,zero
 800c464:	0005883a 	mov	r2,zero
 800c468:	003f4706 	br	800c188 <__alt_data_end+0xfc00c188>
 800c46c:	198cb03a 	or	r6,r3,r6
 800c470:	300cc03a 	cmpne	r6,r6,zero
 800c474:	0005883a 	mov	r2,zero
 800c478:	003f6306 	br	800c208 <__alt_data_end+0xfc00c208>
 800c47c:	10009d1e 	bne	r2,zero,800c6f4 <__subdf3+0x658>
 800c480:	81c00044 	addi	r7,r16,1
 800c484:	3881ffcc 	andi	r2,r7,2047
 800c488:	02400044 	movi	r9,1
 800c48c:	4880680e 	bge	r9,r2,800c630 <__subdf3+0x594>
 800c490:	0081ffc4 	movi	r2,2047
 800c494:	3880ae26 	beq	r7,r2,800c750 <__subdf3+0x6b4>
 800c498:	344d883a 	add	r6,r6,r17
 800c49c:	3463803a 	cmpltu	r17,r6,r17
 800c4a0:	194b883a 	add	r5,r3,r5
 800c4a4:	2c4b883a 	add	r5,r5,r17
 800c4a8:	282297fa 	slli	r17,r5,31
 800c4ac:	300cd07a 	srli	r6,r6,1
 800c4b0:	280ad07a 	srli	r5,r5,1
 800c4b4:	3821883a 	mov	r16,r7
 800c4b8:	89a2b03a 	or	r17,r17,r6
 800c4bc:	003f1a06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c4c0:	0101ffc4 	movi	r4,2047
 800c4c4:	813f431e 	bne	r16,r4,800c1d4 <__alt_data_end+0xfc00c1d4>
 800c4c8:	003f1706 	br	800c128 <__alt_data_end+0xfc00c128>
 800c4cc:	80bff844 	addi	r2,r16,-31
 800c4d0:	00c00804 	movi	r3,32
 800c4d4:	9884d83a 	srl	r2,r19,r2
 800c4d8:	28c05126 	beq	r5,r3,800c620 <__subdf3+0x584>
 800c4dc:	00c00fc4 	movi	r3,63
 800c4e0:	1c21c83a 	sub	r16,r3,r16
 800c4e4:	9c26983a 	sll	r19,r19,r16
 800c4e8:	9c62b03a 	or	r17,r19,r17
 800c4ec:	8822c03a 	cmpne	r17,r17,zero
 800c4f0:	88a2b03a 	or	r17,r17,r2
 800c4f4:	000b883a 	mov	r5,zero
 800c4f8:	0021883a 	mov	r16,zero
 800c4fc:	003fb406 	br	800c3d0 <__alt_data_end+0xfc00c3d0>
 800c500:	113ff804 	addi	r4,r2,-32
 800c504:	01c00804 	movi	r7,32
 800c508:	1908d83a 	srl	r4,r3,r4
 800c50c:	11c04626 	beq	r2,r7,800c628 <__subdf3+0x58c>
 800c510:	01c01004 	movi	r7,64
 800c514:	3885c83a 	sub	r2,r7,r2
 800c518:	1884983a 	sll	r2,r3,r2
 800c51c:	118cb03a 	or	r6,r2,r6
 800c520:	300cc03a 	cmpne	r6,r6,zero
 800c524:	310cb03a 	or	r6,r6,r4
 800c528:	0005883a 	mov	r2,zero
 800c52c:	003f3606 	br	800c208 <__alt_data_end+0xfc00c208>
 800c530:	80002b26 	beq	r16,zero,800c5e0 <__subdf3+0x544>
 800c534:	0101ffc4 	movi	r4,2047
 800c538:	51006926 	beq	r10,r4,800c6e0 <__subdf3+0x644>
 800c53c:	0085c83a 	sub	r2,zero,r2
 800c540:	29402034 	orhi	r5,r5,128
 800c544:	01000e04 	movi	r4,56
 800c548:	20807d16 	blt	r4,r2,800c740 <__subdf3+0x6a4>
 800c54c:	010007c4 	movi	r4,31
 800c550:	2080d916 	blt	r4,r2,800c8b8 <__subdf3+0x81c>
 800c554:	01000804 	movi	r4,32
 800c558:	2089c83a 	sub	r4,r4,r2
 800c55c:	2912983a 	sll	r9,r5,r4
 800c560:	8890d83a 	srl	r8,r17,r2
 800c564:	8908983a 	sll	r4,r17,r4
 800c568:	2884d83a 	srl	r2,r5,r2
 800c56c:	4a22b03a 	or	r17,r9,r8
 800c570:	2008c03a 	cmpne	r4,r4,zero
 800c574:	8922b03a 	or	r17,r17,r4
 800c578:	3463c83a 	sub	r17,r6,r17
 800c57c:	1885c83a 	sub	r2,r3,r2
 800c580:	344d803a 	cmpltu	r6,r6,r17
 800c584:	118bc83a 	sub	r5,r2,r6
 800c588:	5021883a 	mov	r16,r10
 800c58c:	3825883a 	mov	r18,r7
 800c590:	003f2206 	br	800c21c <__alt_data_end+0xfc00c21c>
 800c594:	9886b03a 	or	r3,r19,r2
 800c598:	18001c1e 	bne	r3,zero,800c60c <__subdf3+0x570>
 800c59c:	0011883a 	mov	r8,zero
 800c5a0:	000b883a 	mov	r5,zero
 800c5a4:	0023883a 	mov	r17,zero
 800c5a8:	0021883a 	mov	r16,zero
 800c5ac:	003f3e06 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c5b0:	010007c4 	movi	r4,31
 800c5b4:	20803c16 	blt	r4,r2,800c6a8 <__subdf3+0x60c>
 800c5b8:	01000804 	movi	r4,32
 800c5bc:	2089c83a 	sub	r4,r4,r2
 800c5c0:	1912983a 	sll	r9,r3,r4
 800c5c4:	308ed83a 	srl	r7,r6,r2
 800c5c8:	3108983a 	sll	r4,r6,r4
 800c5cc:	1884d83a 	srl	r2,r3,r2
 800c5d0:	49ceb03a 	or	r7,r9,r7
 800c5d4:	2008c03a 	cmpne	r4,r4,zero
 800c5d8:	390eb03a 	or	r7,r7,r4
 800c5dc:	003f4706 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c5e0:	2c48b03a 	or	r4,r5,r17
 800c5e4:	20003e26 	beq	r4,zero,800c6e0 <__subdf3+0x644>
 800c5e8:	0084303a 	nor	r2,zero,r2
 800c5ec:	10003a1e 	bne	r2,zero,800c6d8 <__subdf3+0x63c>
 800c5f0:	3463c83a 	sub	r17,r6,r17
 800c5f4:	194bc83a 	sub	r5,r3,r5
 800c5f8:	344d803a 	cmpltu	r6,r6,r17
 800c5fc:	298bc83a 	sub	r5,r5,r6
 800c600:	5021883a 	mov	r16,r10
 800c604:	3825883a 	mov	r18,r7
 800c608:	003f0406 	br	800c21c <__alt_data_end+0xfc00c21c>
 800c60c:	1023883a 	mov	r17,r2
 800c610:	003f0706 	br	800c230 <__alt_data_end+0xfc00c230>
 800c614:	0101ffc4 	movi	r4,2047
 800c618:	813f331e 	bne	r16,r4,800c2e8 <__alt_data_end+0xfc00c2e8>
 800c61c:	003ec206 	br	800c128 <__alt_data_end+0xfc00c128>
 800c620:	0027883a 	mov	r19,zero
 800c624:	003fb006 	br	800c4e8 <__alt_data_end+0xfc00c4e8>
 800c628:	0005883a 	mov	r2,zero
 800c62c:	003fbb06 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c630:	2c44b03a 	or	r2,r5,r17
 800c634:	80008b1e 	bne	r16,zero,800c864 <__subdf3+0x7c8>
 800c638:	1000b526 	beq	r2,zero,800c910 <__subdf3+0x874>
 800c63c:	1984b03a 	or	r2,r3,r6
 800c640:	103eb926 	beq	r2,zero,800c128 <__alt_data_end+0xfc00c128>
 800c644:	3449883a 	add	r4,r6,r17
 800c648:	2463803a 	cmpltu	r17,r4,r17
 800c64c:	194b883a 	add	r5,r3,r5
 800c650:	2c4b883a 	add	r5,r5,r17
 800c654:	2880202c 	andhi	r2,r5,128
 800c658:	2023883a 	mov	r17,r4
 800c65c:	103f5c26 	beq	r2,zero,800c3d0 <__alt_data_end+0xfc00c3d0>
 800c660:	00bfe034 	movhi	r2,65408
 800c664:	10bfffc4 	addi	r2,r2,-1
 800c668:	4821883a 	mov	r16,r9
 800c66c:	288a703a 	and	r5,r5,r2
 800c670:	003ead06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c674:	2c44b03a 	or	r2,r5,r17
 800c678:	8000291e 	bne	r16,zero,800c720 <__subdf3+0x684>
 800c67c:	10004f1e 	bne	r2,zero,800c7bc <__subdf3+0x720>
 800c680:	1984b03a 	or	r2,r3,r6
 800c684:	10000426 	beq	r2,zero,800c698 <__subdf3+0x5fc>
 800c688:	180b883a 	mov	r5,r3
 800c68c:	3023883a 	mov	r17,r6
 800c690:	3825883a 	mov	r18,r7
 800c694:	003ea406 	br	800c128 <__alt_data_end+0xfc00c128>
 800c698:	0011883a 	mov	r8,zero
 800c69c:	000b883a 	mov	r5,zero
 800c6a0:	0023883a 	mov	r17,zero
 800c6a4:	003f0006 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c6a8:	11fff804 	addi	r7,r2,-32
 800c6ac:	19c8d83a 	srl	r4,r3,r7
 800c6b0:	01c00804 	movi	r7,32
 800c6b4:	11c07e26 	beq	r2,r7,800c8b0 <__subdf3+0x814>
 800c6b8:	01c01004 	movi	r7,64
 800c6bc:	3885c83a 	sub	r2,r7,r2
 800c6c0:	1884983a 	sll	r2,r3,r2
 800c6c4:	118cb03a 	or	r6,r2,r6
 800c6c8:	300ec03a 	cmpne	r7,r6,zero
 800c6cc:	390eb03a 	or	r7,r7,r4
 800c6d0:	0005883a 	mov	r2,zero
 800c6d4:	003f0906 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c6d8:	0101ffc4 	movi	r4,2047
 800c6dc:	513f991e 	bne	r10,r4,800c544 <__alt_data_end+0xfc00c544>
 800c6e0:	180b883a 	mov	r5,r3
 800c6e4:	3023883a 	mov	r17,r6
 800c6e8:	5021883a 	mov	r16,r10
 800c6ec:	3825883a 	mov	r18,r7
 800c6f0:	003e8d06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c6f4:	80001a1e 	bne	r16,zero,800c760 <__subdf3+0x6c4>
 800c6f8:	2c48b03a 	or	r4,r5,r17
 800c6fc:	20005526 	beq	r4,zero,800c854 <__subdf3+0x7b8>
 800c700:	0084303a 	nor	r2,zero,r2
 800c704:	1000511e 	bne	r2,zero,800c84c <__subdf3+0x7b0>
 800c708:	89a3883a 	add	r17,r17,r6
 800c70c:	194b883a 	add	r5,r3,r5
 800c710:	898d803a 	cmpltu	r6,r17,r6
 800c714:	298b883a 	add	r5,r5,r6
 800c718:	5021883a 	mov	r16,r10
 800c71c:	003efc06 	br	800c310 <__alt_data_end+0xfc00c310>
 800c720:	1000341e 	bne	r2,zero,800c7f4 <__subdf3+0x758>
 800c724:	1984b03a 	or	r2,r3,r6
 800c728:	10006f26 	beq	r2,zero,800c8e8 <__subdf3+0x84c>
 800c72c:	180b883a 	mov	r5,r3
 800c730:	3023883a 	mov	r17,r6
 800c734:	3825883a 	mov	r18,r7
 800c738:	0401ffc4 	movi	r16,2047
 800c73c:	003e7a06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c740:	2c62b03a 	or	r17,r5,r17
 800c744:	8822c03a 	cmpne	r17,r17,zero
 800c748:	0005883a 	mov	r2,zero
 800c74c:	003f8a06 	br	800c578 <__alt_data_end+0xfc00c578>
 800c750:	3821883a 	mov	r16,r7
 800c754:	000b883a 	mov	r5,zero
 800c758:	0023883a 	mov	r17,zero
 800c75c:	003ed206 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c760:	0101ffc4 	movi	r4,2047
 800c764:	51003b26 	beq	r10,r4,800c854 <__subdf3+0x7b8>
 800c768:	0085c83a 	sub	r2,zero,r2
 800c76c:	29402034 	orhi	r5,r5,128
 800c770:	01000e04 	movi	r4,56
 800c774:	20806216 	blt	r4,r2,800c900 <__subdf3+0x864>
 800c778:	010007c4 	movi	r4,31
 800c77c:	20806b16 	blt	r4,r2,800c92c <__subdf3+0x890>
 800c780:	01000804 	movi	r4,32
 800c784:	2089c83a 	sub	r4,r4,r2
 800c788:	2912983a 	sll	r9,r5,r4
 800c78c:	888ed83a 	srl	r7,r17,r2
 800c790:	8908983a 	sll	r4,r17,r4
 800c794:	2884d83a 	srl	r2,r5,r2
 800c798:	49e2b03a 	or	r17,r9,r7
 800c79c:	2008c03a 	cmpne	r4,r4,zero
 800c7a0:	8922b03a 	or	r17,r17,r4
 800c7a4:	89a3883a 	add	r17,r17,r6
 800c7a8:	10c5883a 	add	r2,r2,r3
 800c7ac:	898d803a 	cmpltu	r6,r17,r6
 800c7b0:	118b883a 	add	r5,r2,r6
 800c7b4:	5021883a 	mov	r16,r10
 800c7b8:	003ed506 	br	800c310 <__alt_data_end+0xfc00c310>
 800c7bc:	1984b03a 	or	r2,r3,r6
 800c7c0:	103e5926 	beq	r2,zero,800c128 <__alt_data_end+0xfc00c128>
 800c7c4:	8989c83a 	sub	r4,r17,r6
 800c7c8:	8911803a 	cmpltu	r8,r17,r4
 800c7cc:	28c5c83a 	sub	r2,r5,r3
 800c7d0:	1205c83a 	sub	r2,r2,r8
 800c7d4:	1200202c 	andhi	r8,r2,128
 800c7d8:	403ef926 	beq	r8,zero,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c7dc:	3463c83a 	sub	r17,r6,r17
 800c7e0:	194bc83a 	sub	r5,r3,r5
 800c7e4:	344d803a 	cmpltu	r6,r6,r17
 800c7e8:	298bc83a 	sub	r5,r5,r6
 800c7ec:	3825883a 	mov	r18,r7
 800c7f0:	003e4d06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c7f4:	1984b03a 	or	r2,r3,r6
 800c7f8:	10002b26 	beq	r2,zero,800c8a8 <__subdf3+0x80c>
 800c7fc:	2808d0fa 	srli	r4,r5,3
 800c800:	8822d0fa 	srli	r17,r17,3
 800c804:	280a977a 	slli	r5,r5,29
 800c808:	2080022c 	andhi	r2,r4,8
 800c80c:	2c62b03a 	or	r17,r5,r17
 800c810:	10000826 	beq	r2,zero,800c834 <__subdf3+0x798>
 800c814:	1810d0fa 	srli	r8,r3,3
 800c818:	4080022c 	andhi	r2,r8,8
 800c81c:	1000051e 	bne	r2,zero,800c834 <__subdf3+0x798>
 800c820:	300cd0fa 	srli	r6,r6,3
 800c824:	1804977a 	slli	r2,r3,29
 800c828:	4009883a 	mov	r4,r8
 800c82c:	3825883a 	mov	r18,r7
 800c830:	11a2b03a 	or	r17,r2,r6
 800c834:	880ad77a 	srli	r5,r17,29
 800c838:	200890fa 	slli	r4,r4,3
 800c83c:	882290fa 	slli	r17,r17,3
 800c840:	0401ffc4 	movi	r16,2047
 800c844:	290ab03a 	or	r5,r5,r4
 800c848:	003e3706 	br	800c128 <__alt_data_end+0xfc00c128>
 800c84c:	0101ffc4 	movi	r4,2047
 800c850:	513fc71e 	bne	r10,r4,800c770 <__alt_data_end+0xfc00c770>
 800c854:	180b883a 	mov	r5,r3
 800c858:	3023883a 	mov	r17,r6
 800c85c:	5021883a 	mov	r16,r10
 800c860:	003e3106 	br	800c128 <__alt_data_end+0xfc00c128>
 800c864:	10002d26 	beq	r2,zero,800c91c <__subdf3+0x880>
 800c868:	1984b03a 	or	r2,r3,r6
 800c86c:	10000e26 	beq	r2,zero,800c8a8 <__subdf3+0x80c>
 800c870:	2808d0fa 	srli	r4,r5,3
 800c874:	8822d0fa 	srli	r17,r17,3
 800c878:	280a977a 	slli	r5,r5,29
 800c87c:	2080022c 	andhi	r2,r4,8
 800c880:	2c62b03a 	or	r17,r5,r17
 800c884:	103feb26 	beq	r2,zero,800c834 <__alt_data_end+0xfc00c834>
 800c888:	180ed0fa 	srli	r7,r3,3
 800c88c:	3880022c 	andhi	r2,r7,8
 800c890:	103fe81e 	bne	r2,zero,800c834 <__alt_data_end+0xfc00c834>
 800c894:	300cd0fa 	srli	r6,r6,3
 800c898:	1804977a 	slli	r2,r3,29
 800c89c:	3809883a 	mov	r4,r7
 800c8a0:	11a2b03a 	or	r17,r2,r6
 800c8a4:	003fe306 	br	800c834 <__alt_data_end+0xfc00c834>
 800c8a8:	0401ffc4 	movi	r16,2047
 800c8ac:	003e1e06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c8b0:	0005883a 	mov	r2,zero
 800c8b4:	003f8306 	br	800c6c4 <__alt_data_end+0xfc00c6c4>
 800c8b8:	113ff804 	addi	r4,r2,-32
 800c8bc:	02000804 	movi	r8,32
 800c8c0:	2908d83a 	srl	r4,r5,r4
 800c8c4:	12002526 	beq	r2,r8,800c95c <__subdf3+0x8c0>
 800c8c8:	02001004 	movi	r8,64
 800c8cc:	4085c83a 	sub	r2,r8,r2
 800c8d0:	288a983a 	sll	r5,r5,r2
 800c8d4:	2c62b03a 	or	r17,r5,r17
 800c8d8:	8822c03a 	cmpne	r17,r17,zero
 800c8dc:	8922b03a 	or	r17,r17,r4
 800c8e0:	0005883a 	mov	r2,zero
 800c8e4:	003f2406 	br	800c578 <__alt_data_end+0xfc00c578>
 800c8e8:	01402034 	movhi	r5,128
 800c8ec:	0011883a 	mov	r8,zero
 800c8f0:	297fffc4 	addi	r5,r5,-1
 800c8f4:	047ffe04 	movi	r17,-8
 800c8f8:	0401ffc4 	movi	r16,2047
 800c8fc:	003e6a06 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c900:	2c62b03a 	or	r17,r5,r17
 800c904:	8822c03a 	cmpne	r17,r17,zero
 800c908:	0005883a 	mov	r2,zero
 800c90c:	003fa506 	br	800c7a4 <__alt_data_end+0xfc00c7a4>
 800c910:	180b883a 	mov	r5,r3
 800c914:	3023883a 	mov	r17,r6
 800c918:	003e0306 	br	800c128 <__alt_data_end+0xfc00c128>
 800c91c:	180b883a 	mov	r5,r3
 800c920:	3023883a 	mov	r17,r6
 800c924:	0401ffc4 	movi	r16,2047
 800c928:	003dff06 	br	800c128 <__alt_data_end+0xfc00c128>
 800c92c:	113ff804 	addi	r4,r2,-32
 800c930:	01c00804 	movi	r7,32
 800c934:	2908d83a 	srl	r4,r5,r4
 800c938:	11c00a26 	beq	r2,r7,800c964 <__subdf3+0x8c8>
 800c93c:	01c01004 	movi	r7,64
 800c940:	3885c83a 	sub	r2,r7,r2
 800c944:	288a983a 	sll	r5,r5,r2
 800c948:	2c62b03a 	or	r17,r5,r17
 800c94c:	8822c03a 	cmpne	r17,r17,zero
 800c950:	8922b03a 	or	r17,r17,r4
 800c954:	0005883a 	mov	r2,zero
 800c958:	003f9206 	br	800c7a4 <__alt_data_end+0xfc00c7a4>
 800c95c:	000b883a 	mov	r5,zero
 800c960:	003fdc06 	br	800c8d4 <__alt_data_end+0xfc00c8d4>
 800c964:	000b883a 	mov	r5,zero
 800c968:	003ff706 	br	800c948 <__alt_data_end+0xfc00c948>

0800c96c <__fixdfsi>:
 800c96c:	2806d53a 	srli	r3,r5,20
 800c970:	00800434 	movhi	r2,16
 800c974:	10bfffc4 	addi	r2,r2,-1
 800c978:	18c1ffcc 	andi	r3,r3,2047
 800c97c:	0180ff84 	movi	r6,1022
 800c980:	2884703a 	and	r2,r5,r2
 800c984:	280ad7fa 	srli	r5,r5,31
 800c988:	30c0130e 	bge	r6,r3,800c9d8 <__fixdfsi+0x6c>
 800c98c:	01810744 	movi	r6,1053
 800c990:	30c00d16 	blt	r6,r3,800c9c8 <__fixdfsi+0x5c>
 800c994:	01810cc4 	movi	r6,1075
 800c998:	30cdc83a 	sub	r6,r6,r3
 800c99c:	01c007c4 	movi	r7,31
 800c9a0:	10800434 	orhi	r2,r2,16
 800c9a4:	39800e0e 	bge	r7,r6,800c9e0 <__fixdfsi+0x74>
 800c9a8:	010104c4 	movi	r4,1043
 800c9ac:	20c7c83a 	sub	r3,r4,r3
 800c9b0:	10c6d83a 	srl	r3,r2,r3
 800c9b4:	29403fcc 	andi	r5,r5,255
 800c9b8:	0145c83a 	sub	r2,zero,r5
 800c9bc:	1884f03a 	xor	r2,r3,r2
 800c9c0:	1145883a 	add	r2,r2,r5
 800c9c4:	f800283a 	ret
 800c9c8:	00a00034 	movhi	r2,32768
 800c9cc:	10bfffc4 	addi	r2,r2,-1
 800c9d0:	2885883a 	add	r2,r5,r2
 800c9d4:	f800283a 	ret
 800c9d8:	0005883a 	mov	r2,zero
 800c9dc:	f800283a 	ret
 800c9e0:	18fefb44 	addi	r3,r3,-1043
 800c9e4:	2188d83a 	srl	r4,r4,r6
 800c9e8:	10c6983a 	sll	r3,r2,r3
 800c9ec:	20c6b03a 	or	r3,r4,r3
 800c9f0:	003ff006 	br	800c9b4 <__alt_data_end+0xfc00c9b4>

0800c9f4 <__floatsidf>:
 800c9f4:	defffd04 	addi	sp,sp,-12
 800c9f8:	dc400115 	stw	r17,4(sp)
 800c9fc:	dfc00215 	stw	ra,8(sp)
 800ca00:	dc000015 	stw	r16,0(sp)
 800ca04:	2023883a 	mov	r17,r4
 800ca08:	20001426 	beq	r4,zero,800ca5c <__floatsidf+0x68>
 800ca0c:	2020d7fa 	srli	r16,r4,31
 800ca10:	80000126 	beq	r16,zero,800ca18 <__floatsidf+0x24>
 800ca14:	0123c83a 	sub	r17,zero,r4
 800ca18:	8809883a 	mov	r4,r17
 800ca1c:	800cb680 	call	800cb68 <__clzsi2>
 800ca20:	01410784 	movi	r5,1054
 800ca24:	00c00284 	movi	r3,10
 800ca28:	288bc83a 	sub	r5,r5,r2
 800ca2c:	18801c16 	blt	r3,r2,800caa0 <__floatsidf+0xac>
 800ca30:	00c002c4 	movi	r3,11
 800ca34:	1887c83a 	sub	r3,r3,r2
 800ca38:	88c8d83a 	srl	r4,r17,r3
 800ca3c:	00c00434 	movhi	r3,16
 800ca40:	18ffffc4 	addi	r3,r3,-1
 800ca44:	10800544 	addi	r2,r2,21
 800ca48:	20c8703a 	and	r4,r4,r3
 800ca4c:	8884983a 	sll	r2,r17,r2
 800ca50:	28c1ffcc 	andi	r3,r5,2047
 800ca54:	800d883a 	mov	r6,r16
 800ca58:	00000406 	br	800ca6c <__floatsidf+0x78>
 800ca5c:	000d883a 	mov	r6,zero
 800ca60:	0007883a 	mov	r3,zero
 800ca64:	0009883a 	mov	r4,zero
 800ca68:	0005883a 	mov	r2,zero
 800ca6c:	180a953a 	slli	r5,r3,20
 800ca70:	31803fcc 	andi	r6,r6,255
 800ca74:	00c00434 	movhi	r3,16
 800ca78:	300c97fa 	slli	r6,r6,31
 800ca7c:	18ffffc4 	addi	r3,r3,-1
 800ca80:	20c6703a 	and	r3,r4,r3
 800ca84:	1946b03a 	or	r3,r3,r5
 800ca88:	1986b03a 	or	r3,r3,r6
 800ca8c:	dfc00217 	ldw	ra,8(sp)
 800ca90:	dc400117 	ldw	r17,4(sp)
 800ca94:	dc000017 	ldw	r16,0(sp)
 800ca98:	dec00304 	addi	sp,sp,12
 800ca9c:	f800283a 	ret
 800caa0:	10fffd44 	addi	r3,r2,-11
 800caa4:	88c8983a 	sll	r4,r17,r3
 800caa8:	00800434 	movhi	r2,16
 800caac:	10bfffc4 	addi	r2,r2,-1
 800cab0:	2088703a 	and	r4,r4,r2
 800cab4:	28c1ffcc 	andi	r3,r5,2047
 800cab8:	800d883a 	mov	r6,r16
 800cabc:	0005883a 	mov	r2,zero
 800cac0:	003fea06 	br	800ca6c <__alt_data_end+0xfc00ca6c>

0800cac4 <__floatunsidf>:
 800cac4:	defffe04 	addi	sp,sp,-8
 800cac8:	dc000015 	stw	r16,0(sp)
 800cacc:	dfc00115 	stw	ra,4(sp)
 800cad0:	2021883a 	mov	r16,r4
 800cad4:	20001026 	beq	r4,zero,800cb18 <__floatunsidf+0x54>
 800cad8:	800cb680 	call	800cb68 <__clzsi2>
 800cadc:	01410784 	movi	r5,1054
 800cae0:	100d883a 	mov	r6,r2
 800cae4:	288bc83a 	sub	r5,r5,r2
 800cae8:	00800284 	movi	r2,10
 800caec:	11801616 	blt	r2,r6,800cb48 <__floatunsidf+0x84>
 800caf0:	008002c4 	movi	r2,11
 800caf4:	1185c83a 	sub	r2,r2,r6
 800caf8:	8084d83a 	srl	r2,r16,r2
 800cafc:	00c00434 	movhi	r3,16
 800cb00:	31c00544 	addi	r7,r6,21
 800cb04:	18ffffc4 	addi	r3,r3,-1
 800cb08:	81e0983a 	sll	r16,r16,r7
 800cb0c:	10cc703a 	and	r6,r2,r3
 800cb10:	2941ffcc 	andi	r5,r5,2047
 800cb14:	00000206 	br	800cb20 <__floatunsidf+0x5c>
 800cb18:	000b883a 	mov	r5,zero
 800cb1c:	000d883a 	mov	r6,zero
 800cb20:	280a953a 	slli	r5,r5,20
 800cb24:	00c00434 	movhi	r3,16
 800cb28:	18ffffc4 	addi	r3,r3,-1
 800cb2c:	30c6703a 	and	r3,r6,r3
 800cb30:	8005883a 	mov	r2,r16
 800cb34:	1946b03a 	or	r3,r3,r5
 800cb38:	dfc00117 	ldw	ra,4(sp)
 800cb3c:	dc000017 	ldw	r16,0(sp)
 800cb40:	dec00204 	addi	sp,sp,8
 800cb44:	f800283a 	ret
 800cb48:	31bffd44 	addi	r6,r6,-11
 800cb4c:	818c983a 	sll	r6,r16,r6
 800cb50:	00800434 	movhi	r2,16
 800cb54:	10bfffc4 	addi	r2,r2,-1
 800cb58:	2941ffcc 	andi	r5,r5,2047
 800cb5c:	0021883a 	mov	r16,zero
 800cb60:	308c703a 	and	r6,r6,r2
 800cb64:	003fee06 	br	800cb20 <__alt_data_end+0xfc00cb20>

0800cb68 <__clzsi2>:
 800cb68:	00bfffd4 	movui	r2,65535
 800cb6c:	11000b36 	bltu	r2,r4,800cb9c <__clzsi2+0x34>
 800cb70:	00803fc4 	movi	r2,255
 800cb74:	1100122e 	bgeu	r2,r4,800cbc0 <__clzsi2+0x58>
 800cb78:	00c00204 	movi	r3,8
 800cb7c:	01400604 	movi	r5,24
 800cb80:	20c8d83a 	srl	r4,r4,r3
 800cb84:	00820074 	movhi	r2,2049
 800cb88:	10bd4a04 	addi	r2,r2,-2776
 800cb8c:	1109883a 	add	r4,r2,r4
 800cb90:	20800003 	ldbu	r2,0(r4)
 800cb94:	2885c83a 	sub	r2,r5,r2
 800cb98:	f800283a 	ret
 800cb9c:	00804034 	movhi	r2,256
 800cba0:	10bfffc4 	addi	r2,r2,-1
 800cba4:	11000336 	bltu	r2,r4,800cbb4 <__clzsi2+0x4c>
 800cba8:	00c00404 	movi	r3,16
 800cbac:	180b883a 	mov	r5,r3
 800cbb0:	003ff306 	br	800cb80 <__alt_data_end+0xfc00cb80>
 800cbb4:	00c00604 	movi	r3,24
 800cbb8:	01400204 	movi	r5,8
 800cbbc:	003ff006 	br	800cb80 <__alt_data_end+0xfc00cb80>
 800cbc0:	0007883a 	mov	r3,zero
 800cbc4:	01400804 	movi	r5,32
 800cbc8:	003fed06 	br	800cb80 <__alt_data_end+0xfc00cb80>

0800cbcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cbcc:	defffe04 	addi	sp,sp,-8
 800cbd0:	dfc00115 	stw	ra,4(sp)
 800cbd4:	df000015 	stw	fp,0(sp)
 800cbd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cbdc:	00820074 	movhi	r2,2049
 800cbe0:	10844d04 	addi	r2,r2,4404
 800cbe4:	10800017 	ldw	r2,0(r2)
 800cbe8:	10000526 	beq	r2,zero,800cc00 <alt_get_errno+0x34>
 800cbec:	00820074 	movhi	r2,2049
 800cbf0:	10844d04 	addi	r2,r2,4404
 800cbf4:	10800017 	ldw	r2,0(r2)
 800cbf8:	103ee83a 	callr	r2
 800cbfc:	00000206 	br	800cc08 <alt_get_errno+0x3c>
 800cc00:	00820074 	movhi	r2,2049
 800cc04:	108b1304 	addi	r2,r2,11340
}
 800cc08:	e037883a 	mov	sp,fp
 800cc0c:	dfc00117 	ldw	ra,4(sp)
 800cc10:	df000017 	ldw	fp,0(sp)
 800cc14:	dec00204 	addi	sp,sp,8
 800cc18:	f800283a 	ret

0800cc1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800cc1c:	defffb04 	addi	sp,sp,-20
 800cc20:	dfc00415 	stw	ra,16(sp)
 800cc24:	df000315 	stw	fp,12(sp)
 800cc28:	df000304 	addi	fp,sp,12
 800cc2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cc30:	e0bfff17 	ldw	r2,-4(fp)
 800cc34:	10000816 	blt	r2,zero,800cc58 <close+0x3c>
 800cc38:	e13fff17 	ldw	r4,-4(fp)
 800cc3c:	01400304 	movi	r5,12
 800cc40:	800a3a80 	call	800a3a8 <__mulsi3>
 800cc44:	1007883a 	mov	r3,r2
 800cc48:	00820074 	movhi	r2,2049
 800cc4c:	10bfca04 	addi	r2,r2,-216
 800cc50:	1885883a 	add	r2,r3,r2
 800cc54:	00000106 	br	800cc5c <close+0x40>
 800cc58:	0005883a 	mov	r2,zero
 800cc5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800cc60:	e0bffd17 	ldw	r2,-12(fp)
 800cc64:	10001926 	beq	r2,zero,800cccc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cc68:	e0bffd17 	ldw	r2,-12(fp)
 800cc6c:	10800017 	ldw	r2,0(r2)
 800cc70:	10800417 	ldw	r2,16(r2)
 800cc74:	10000626 	beq	r2,zero,800cc90 <close+0x74>
 800cc78:	e0bffd17 	ldw	r2,-12(fp)
 800cc7c:	10800017 	ldw	r2,0(r2)
 800cc80:	10800417 	ldw	r2,16(r2)
 800cc84:	e13ffd17 	ldw	r4,-12(fp)
 800cc88:	103ee83a 	callr	r2
 800cc8c:	00000106 	br	800cc94 <close+0x78>
 800cc90:	0005883a 	mov	r2,zero
 800cc94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cc98:	e13fff17 	ldw	r4,-4(fp)
 800cc9c:	800d3400 	call	800d340 <alt_release_fd>
    if (rval < 0)
 800cca0:	e0bffe17 	ldw	r2,-8(fp)
 800cca4:	1000070e 	bge	r2,zero,800ccc4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800cca8:	800cbcc0 	call	800cbcc <alt_get_errno>
 800ccac:	1007883a 	mov	r3,r2
 800ccb0:	e0bffe17 	ldw	r2,-8(fp)
 800ccb4:	0085c83a 	sub	r2,zero,r2
 800ccb8:	18800015 	stw	r2,0(r3)
      return -1;
 800ccbc:	00bfffc4 	movi	r2,-1
 800ccc0:	00000706 	br	800cce0 <close+0xc4>
    }
    return 0;
 800ccc4:	0005883a 	mov	r2,zero
 800ccc8:	00000506 	br	800cce0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cccc:	800cbcc0 	call	800cbcc <alt_get_errno>
 800ccd0:	1007883a 	mov	r3,r2
 800ccd4:	00801444 	movi	r2,81
 800ccd8:	18800015 	stw	r2,0(r3)
    return -1;
 800ccdc:	00bfffc4 	movi	r2,-1
  }
}
 800cce0:	e037883a 	mov	sp,fp
 800cce4:	dfc00117 	ldw	ra,4(sp)
 800cce8:	df000017 	ldw	fp,0(sp)
 800ccec:	dec00204 	addi	sp,sp,8
 800ccf0:	f800283a 	ret

0800ccf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ccf4:	defffc04 	addi	sp,sp,-16
 800ccf8:	df000315 	stw	fp,12(sp)
 800ccfc:	df000304 	addi	fp,sp,12
 800cd00:	e13ffd15 	stw	r4,-12(fp)
 800cd04:	e17ffe15 	stw	r5,-8(fp)
 800cd08:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800cd0c:	e0bfff17 	ldw	r2,-4(fp)
}
 800cd10:	e037883a 	mov	sp,fp
 800cd14:	df000017 	ldw	fp,0(sp)
 800cd18:	dec00104 	addi	sp,sp,4
 800cd1c:	f800283a 	ret

0800cd20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cd20:	defffe04 	addi	sp,sp,-8
 800cd24:	dfc00115 	stw	ra,4(sp)
 800cd28:	df000015 	stw	fp,0(sp)
 800cd2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cd30:	00820074 	movhi	r2,2049
 800cd34:	10844d04 	addi	r2,r2,4404
 800cd38:	10800017 	ldw	r2,0(r2)
 800cd3c:	10000526 	beq	r2,zero,800cd54 <alt_get_errno+0x34>
 800cd40:	00820074 	movhi	r2,2049
 800cd44:	10844d04 	addi	r2,r2,4404
 800cd48:	10800017 	ldw	r2,0(r2)
 800cd4c:	103ee83a 	callr	r2
 800cd50:	00000206 	br	800cd5c <alt_get_errno+0x3c>
 800cd54:	00820074 	movhi	r2,2049
 800cd58:	108b1304 	addi	r2,r2,11340
}
 800cd5c:	e037883a 	mov	sp,fp
 800cd60:	dfc00117 	ldw	ra,4(sp)
 800cd64:	df000017 	ldw	fp,0(sp)
 800cd68:	dec00204 	addi	sp,sp,8
 800cd6c:	f800283a 	ret

0800cd70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800cd70:	defffb04 	addi	sp,sp,-20
 800cd74:	dfc00415 	stw	ra,16(sp)
 800cd78:	df000315 	stw	fp,12(sp)
 800cd7c:	df000304 	addi	fp,sp,12
 800cd80:	e13ffe15 	stw	r4,-8(fp)
 800cd84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cd88:	e0bffe17 	ldw	r2,-8(fp)
 800cd8c:	10000816 	blt	r2,zero,800cdb0 <fstat+0x40>
 800cd90:	e13ffe17 	ldw	r4,-8(fp)
 800cd94:	01400304 	movi	r5,12
 800cd98:	800a3a80 	call	800a3a8 <__mulsi3>
 800cd9c:	1007883a 	mov	r3,r2
 800cda0:	00820074 	movhi	r2,2049
 800cda4:	10bfca04 	addi	r2,r2,-216
 800cda8:	1885883a 	add	r2,r3,r2
 800cdac:	00000106 	br	800cdb4 <fstat+0x44>
 800cdb0:	0005883a 	mov	r2,zero
 800cdb4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800cdb8:	e0bffd17 	ldw	r2,-12(fp)
 800cdbc:	10001026 	beq	r2,zero,800ce00 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800cdc0:	e0bffd17 	ldw	r2,-12(fp)
 800cdc4:	10800017 	ldw	r2,0(r2)
 800cdc8:	10800817 	ldw	r2,32(r2)
 800cdcc:	10000726 	beq	r2,zero,800cdec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800cdd0:	e0bffd17 	ldw	r2,-12(fp)
 800cdd4:	10800017 	ldw	r2,0(r2)
 800cdd8:	10800817 	ldw	r2,32(r2)
 800cddc:	e13ffd17 	ldw	r4,-12(fp)
 800cde0:	e17fff17 	ldw	r5,-4(fp)
 800cde4:	103ee83a 	callr	r2
 800cde8:	00000a06 	br	800ce14 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800cdec:	e0bfff17 	ldw	r2,-4(fp)
 800cdf0:	00c80004 	movi	r3,8192
 800cdf4:	10c00115 	stw	r3,4(r2)
      return 0;
 800cdf8:	0005883a 	mov	r2,zero
 800cdfc:	00000506 	br	800ce14 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ce00:	800cd200 	call	800cd20 <alt_get_errno>
 800ce04:	1007883a 	mov	r3,r2
 800ce08:	00801444 	movi	r2,81
 800ce0c:	18800015 	stw	r2,0(r3)
    return -1;
 800ce10:	00bfffc4 	movi	r2,-1
  }
}
 800ce14:	e037883a 	mov	sp,fp
 800ce18:	dfc00117 	ldw	ra,4(sp)
 800ce1c:	df000017 	ldw	fp,0(sp)
 800ce20:	dec00204 	addi	sp,sp,8
 800ce24:	f800283a 	ret

0800ce28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce28:	defffe04 	addi	sp,sp,-8
 800ce2c:	dfc00115 	stw	ra,4(sp)
 800ce30:	df000015 	stw	fp,0(sp)
 800ce34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce38:	00820074 	movhi	r2,2049
 800ce3c:	10844d04 	addi	r2,r2,4404
 800ce40:	10800017 	ldw	r2,0(r2)
 800ce44:	10000526 	beq	r2,zero,800ce5c <alt_get_errno+0x34>
 800ce48:	00820074 	movhi	r2,2049
 800ce4c:	10844d04 	addi	r2,r2,4404
 800ce50:	10800017 	ldw	r2,0(r2)
 800ce54:	103ee83a 	callr	r2
 800ce58:	00000206 	br	800ce64 <alt_get_errno+0x3c>
 800ce5c:	00820074 	movhi	r2,2049
 800ce60:	108b1304 	addi	r2,r2,11340
}
 800ce64:	e037883a 	mov	sp,fp
 800ce68:	dfc00117 	ldw	ra,4(sp)
 800ce6c:	df000017 	ldw	fp,0(sp)
 800ce70:	dec00204 	addi	sp,sp,8
 800ce74:	f800283a 	ret

0800ce78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ce78:	deffed04 	addi	sp,sp,-76
 800ce7c:	dfc01215 	stw	ra,72(sp)
 800ce80:	df001115 	stw	fp,68(sp)
 800ce84:	df001104 	addi	fp,sp,68
 800ce88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ce8c:	e0bfff17 	ldw	r2,-4(fp)
 800ce90:	10000816 	blt	r2,zero,800ceb4 <isatty+0x3c>
 800ce94:	e13fff17 	ldw	r4,-4(fp)
 800ce98:	01400304 	movi	r5,12
 800ce9c:	800a3a80 	call	800a3a8 <__mulsi3>
 800cea0:	1007883a 	mov	r3,r2
 800cea4:	00820074 	movhi	r2,2049
 800cea8:	10bfca04 	addi	r2,r2,-216
 800ceac:	1885883a 	add	r2,r3,r2
 800ceb0:	00000106 	br	800ceb8 <isatty+0x40>
 800ceb4:	0005883a 	mov	r2,zero
 800ceb8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800cebc:	e0bfef17 	ldw	r2,-68(fp)
 800cec0:	10000e26 	beq	r2,zero,800cefc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800cec4:	e0bfef17 	ldw	r2,-68(fp)
 800cec8:	10800017 	ldw	r2,0(r2)
 800cecc:	10800817 	ldw	r2,32(r2)
 800ced0:	1000021e 	bne	r2,zero,800cedc <isatty+0x64>
    {
      return 1;
 800ced4:	00800044 	movi	r2,1
 800ced8:	00000d06 	br	800cf10 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800cedc:	e0bff004 	addi	r2,fp,-64
 800cee0:	e13fff17 	ldw	r4,-4(fp)
 800cee4:	100b883a 	mov	r5,r2
 800cee8:	800cd700 	call	800cd70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ceec:	e0bff117 	ldw	r2,-60(fp)
 800cef0:	10880020 	cmpeqi	r2,r2,8192
 800cef4:	10803fcc 	andi	r2,r2,255
 800cef8:	00000506 	br	800cf10 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cefc:	800ce280 	call	800ce28 <alt_get_errno>
 800cf00:	1007883a 	mov	r3,r2
 800cf04:	00801444 	movi	r2,81
 800cf08:	18800015 	stw	r2,0(r3)
    return 0;
 800cf0c:	0005883a 	mov	r2,zero
  }
}
 800cf10:	e037883a 	mov	sp,fp
 800cf14:	dfc00117 	ldw	ra,4(sp)
 800cf18:	df000017 	ldw	fp,0(sp)
 800cf1c:	dec00204 	addi	sp,sp,8
 800cf20:	f800283a 	ret

0800cf24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800cf24:	defffc04 	addi	sp,sp,-16
 800cf28:	df000315 	stw	fp,12(sp)
 800cf2c:	df000304 	addi	fp,sp,12
 800cf30:	e13ffd15 	stw	r4,-12(fp)
 800cf34:	e17ffe15 	stw	r5,-8(fp)
 800cf38:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800cf3c:	e0fffe17 	ldw	r3,-8(fp)
 800cf40:	e0bffd17 	ldw	r2,-12(fp)
 800cf44:	18800c26 	beq	r3,r2,800cf78 <alt_load_section+0x54>
  {
    while( to != end )
 800cf48:	00000806 	br	800cf6c <alt_load_section+0x48>
    {
      *to++ = *from++;
 800cf4c:	e0bffe17 	ldw	r2,-8(fp)
 800cf50:	10c00104 	addi	r3,r2,4
 800cf54:	e0fffe15 	stw	r3,-8(fp)
 800cf58:	e0fffd17 	ldw	r3,-12(fp)
 800cf5c:	19000104 	addi	r4,r3,4
 800cf60:	e13ffd15 	stw	r4,-12(fp)
 800cf64:	18c00017 	ldw	r3,0(r3)
 800cf68:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800cf6c:	e0fffe17 	ldw	r3,-8(fp)
 800cf70:	e0bfff17 	ldw	r2,-4(fp)
 800cf74:	18bff51e 	bne	r3,r2,800cf4c <__alt_data_end+0xfc00cf4c>
    {
      *to++ = *from++;
    }
  }
}
 800cf78:	e037883a 	mov	sp,fp
 800cf7c:	df000017 	ldw	fp,0(sp)
 800cf80:	dec00104 	addi	sp,sp,4
 800cf84:	f800283a 	ret

0800cf88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800cf88:	defffe04 	addi	sp,sp,-8
 800cf8c:	dfc00115 	stw	ra,4(sp)
 800cf90:	df000015 	stw	fp,0(sp)
 800cf94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800cf98:	01020074 	movhi	r4,2049
 800cf9c:	21045204 	addi	r4,r4,4424
 800cfa0:	01420074 	movhi	r5,2049
 800cfa4:	297d9704 	addi	r5,r5,-2468
 800cfa8:	01820074 	movhi	r6,2049
 800cfac:	31845204 	addi	r6,r6,4424
 800cfb0:	800cf240 	call	800cf24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800cfb4:	01020034 	movhi	r4,2048
 800cfb8:	21000804 	addi	r4,r4,32
 800cfbc:	01420034 	movhi	r5,2048
 800cfc0:	29400804 	addi	r5,r5,32
 800cfc4:	01820034 	movhi	r6,2048
 800cfc8:	31808b04 	addi	r6,r6,556
 800cfcc:	800cf240 	call	800cf24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800cfd0:	01020074 	movhi	r4,2049
 800cfd4:	213cc804 	addi	r4,r4,-3296
 800cfd8:	01420074 	movhi	r5,2049
 800cfdc:	297cc804 	addi	r5,r5,-3296
 800cfe0:	01820074 	movhi	r6,2049
 800cfe4:	31bd9704 	addi	r6,r6,-2468
 800cfe8:	800cf240 	call	800cf24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800cfec:	800e1fc0 	call	800e1fc <alt_dcache_flush_all>
  alt_icache_flush_all();
 800cff0:	800e3c40 	call	800e3c4 <alt_icache_flush_all>
}
 800cff4:	e037883a 	mov	sp,fp
 800cff8:	dfc00117 	ldw	ra,4(sp)
 800cffc:	df000017 	ldw	fp,0(sp)
 800d000:	dec00204 	addi	sp,sp,8
 800d004:	f800283a 	ret

0800d008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d008:	defffe04 	addi	sp,sp,-8
 800d00c:	dfc00115 	stw	ra,4(sp)
 800d010:	df000015 	stw	fp,0(sp)
 800d014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d018:	00820074 	movhi	r2,2049
 800d01c:	10844d04 	addi	r2,r2,4404
 800d020:	10800017 	ldw	r2,0(r2)
 800d024:	10000526 	beq	r2,zero,800d03c <alt_get_errno+0x34>
 800d028:	00820074 	movhi	r2,2049
 800d02c:	10844d04 	addi	r2,r2,4404
 800d030:	10800017 	ldw	r2,0(r2)
 800d034:	103ee83a 	callr	r2
 800d038:	00000206 	br	800d044 <alt_get_errno+0x3c>
 800d03c:	00820074 	movhi	r2,2049
 800d040:	108b1304 	addi	r2,r2,11340
}
 800d044:	e037883a 	mov	sp,fp
 800d048:	dfc00117 	ldw	ra,4(sp)
 800d04c:	df000017 	ldw	fp,0(sp)
 800d050:	dec00204 	addi	sp,sp,8
 800d054:	f800283a 	ret

0800d058 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d058:	defff904 	addi	sp,sp,-28
 800d05c:	dfc00615 	stw	ra,24(sp)
 800d060:	df000515 	stw	fp,20(sp)
 800d064:	df000504 	addi	fp,sp,20
 800d068:	e13ffd15 	stw	r4,-12(fp)
 800d06c:	e17ffe15 	stw	r5,-8(fp)
 800d070:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d074:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d078:	e0bffd17 	ldw	r2,-12(fp)
 800d07c:	10000816 	blt	r2,zero,800d0a0 <lseek+0x48>
 800d080:	e13ffd17 	ldw	r4,-12(fp)
 800d084:	01400304 	movi	r5,12
 800d088:	800a3a80 	call	800a3a8 <__mulsi3>
 800d08c:	1007883a 	mov	r3,r2
 800d090:	00820074 	movhi	r2,2049
 800d094:	10bfca04 	addi	r2,r2,-216
 800d098:	1885883a 	add	r2,r3,r2
 800d09c:	00000106 	br	800d0a4 <lseek+0x4c>
 800d0a0:	0005883a 	mov	r2,zero
 800d0a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d0a8:	e0bffc17 	ldw	r2,-16(fp)
 800d0ac:	10001026 	beq	r2,zero,800d0f0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d0b0:	e0bffc17 	ldw	r2,-16(fp)
 800d0b4:	10800017 	ldw	r2,0(r2)
 800d0b8:	10800717 	ldw	r2,28(r2)
 800d0bc:	10000926 	beq	r2,zero,800d0e4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d0c0:	e0bffc17 	ldw	r2,-16(fp)
 800d0c4:	10800017 	ldw	r2,0(r2)
 800d0c8:	10800717 	ldw	r2,28(r2)
 800d0cc:	e13ffc17 	ldw	r4,-16(fp)
 800d0d0:	e17ffe17 	ldw	r5,-8(fp)
 800d0d4:	e1bfff17 	ldw	r6,-4(fp)
 800d0d8:	103ee83a 	callr	r2
 800d0dc:	e0bffb15 	stw	r2,-20(fp)
 800d0e0:	00000506 	br	800d0f8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d0e4:	00bfde84 	movi	r2,-134
 800d0e8:	e0bffb15 	stw	r2,-20(fp)
 800d0ec:	00000206 	br	800d0f8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d0f0:	00bfebc4 	movi	r2,-81
 800d0f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d0f8:	e0bffb17 	ldw	r2,-20(fp)
 800d0fc:	1000070e 	bge	r2,zero,800d11c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800d100:	800d0080 	call	800d008 <alt_get_errno>
 800d104:	1007883a 	mov	r3,r2
 800d108:	e0bffb17 	ldw	r2,-20(fp)
 800d10c:	0085c83a 	sub	r2,zero,r2
 800d110:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d114:	00bfffc4 	movi	r2,-1
 800d118:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d11c:	e0bffb17 	ldw	r2,-20(fp)
}
 800d120:	e037883a 	mov	sp,fp
 800d124:	dfc00117 	ldw	ra,4(sp)
 800d128:	df000017 	ldw	fp,0(sp)
 800d12c:	dec00204 	addi	sp,sp,8
 800d130:	f800283a 	ret

0800d134 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d134:	defffd04 	addi	sp,sp,-12
 800d138:	dfc00215 	stw	ra,8(sp)
 800d13c:	df000115 	stw	fp,4(sp)
 800d140:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d144:	0009883a 	mov	r4,zero
 800d148:	800d5f80 	call	800d5f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d14c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d150:	800d62c0 	call	800d62c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d154:	01020074 	movhi	r4,2049
 800d158:	213d8d04 	addi	r4,r4,-2508
 800d15c:	01420074 	movhi	r5,2049
 800d160:	297d8d04 	addi	r5,r5,-2508
 800d164:	01820074 	movhi	r6,2049
 800d168:	31bd8d04 	addi	r6,r6,-2508
 800d16c:	800e7900 	call	800e790 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d170:	800e30c0 	call	800e30c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d174:	01020074 	movhi	r4,2049
 800d178:	2138da04 	addi	r4,r4,-7320
 800d17c:	800ef7c0 	call	800ef7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d180:	d126d217 	ldw	r4,-25784(gp)
 800d184:	d0e6d317 	ldw	r3,-25780(gp)
 800d188:	d0a6d417 	ldw	r2,-25776(gp)
 800d18c:	180b883a 	mov	r5,r3
 800d190:	100d883a 	mov	r6,r2
 800d194:	80002680 	call	8000268 <main>
 800d198:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d19c:	01000044 	movi	r4,1
 800d1a0:	800cc1c0 	call	800cc1c <close>
  exit (result);
 800d1a4:	e13fff17 	ldw	r4,-4(fp)
 800d1a8:	800ef900 	call	800ef90 <exit>

0800d1ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d1ac:	defffe04 	addi	sp,sp,-8
 800d1b0:	df000115 	stw	fp,4(sp)
 800d1b4:	df000104 	addi	fp,sp,4
 800d1b8:	e13fff15 	stw	r4,-4(fp)
}
 800d1bc:	e037883a 	mov	sp,fp
 800d1c0:	df000017 	ldw	fp,0(sp)
 800d1c4:	dec00104 	addi	sp,sp,4
 800d1c8:	f800283a 	ret

0800d1cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d1cc:	defffe04 	addi	sp,sp,-8
 800d1d0:	df000115 	stw	fp,4(sp)
 800d1d4:	df000104 	addi	fp,sp,4
 800d1d8:	e13fff15 	stw	r4,-4(fp)
}
 800d1dc:	e037883a 	mov	sp,fp
 800d1e0:	df000017 	ldw	fp,0(sp)
 800d1e4:	dec00104 	addi	sp,sp,4
 800d1e8:	f800283a 	ret

0800d1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d1ec:	defffe04 	addi	sp,sp,-8
 800d1f0:	dfc00115 	stw	ra,4(sp)
 800d1f4:	df000015 	stw	fp,0(sp)
 800d1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d1fc:	00820074 	movhi	r2,2049
 800d200:	10844d04 	addi	r2,r2,4404
 800d204:	10800017 	ldw	r2,0(r2)
 800d208:	10000526 	beq	r2,zero,800d220 <alt_get_errno+0x34>
 800d20c:	00820074 	movhi	r2,2049
 800d210:	10844d04 	addi	r2,r2,4404
 800d214:	10800017 	ldw	r2,0(r2)
 800d218:	103ee83a 	callr	r2
 800d21c:	00000206 	br	800d228 <alt_get_errno+0x3c>
 800d220:	00820074 	movhi	r2,2049
 800d224:	108b1304 	addi	r2,r2,11340
}
 800d228:	e037883a 	mov	sp,fp
 800d22c:	dfc00117 	ldw	ra,4(sp)
 800d230:	df000017 	ldw	fp,0(sp)
 800d234:	dec00204 	addi	sp,sp,8
 800d238:	f800283a 	ret

0800d23c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d23c:	defff904 	addi	sp,sp,-28
 800d240:	dfc00615 	stw	ra,24(sp)
 800d244:	df000515 	stw	fp,20(sp)
 800d248:	df000504 	addi	fp,sp,20
 800d24c:	e13ffd15 	stw	r4,-12(fp)
 800d250:	e17ffe15 	stw	r5,-8(fp)
 800d254:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d258:	e0bffd17 	ldw	r2,-12(fp)
 800d25c:	10000816 	blt	r2,zero,800d280 <read+0x44>
 800d260:	e13ffd17 	ldw	r4,-12(fp)
 800d264:	01400304 	movi	r5,12
 800d268:	800a3a80 	call	800a3a8 <__mulsi3>
 800d26c:	1007883a 	mov	r3,r2
 800d270:	00820074 	movhi	r2,2049
 800d274:	10bfca04 	addi	r2,r2,-216
 800d278:	1885883a 	add	r2,r3,r2
 800d27c:	00000106 	br	800d284 <read+0x48>
 800d280:	0005883a 	mov	r2,zero
 800d284:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d288:	e0bffb17 	ldw	r2,-20(fp)
 800d28c:	10002226 	beq	r2,zero,800d318 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d290:	e0bffb17 	ldw	r2,-20(fp)
 800d294:	10800217 	ldw	r2,8(r2)
 800d298:	108000cc 	andi	r2,r2,3
 800d29c:	10800060 	cmpeqi	r2,r2,1
 800d2a0:	1000181e 	bne	r2,zero,800d304 <read+0xc8>
        (fd->dev->read))
 800d2a4:	e0bffb17 	ldw	r2,-20(fp)
 800d2a8:	10800017 	ldw	r2,0(r2)
 800d2ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d2b0:	10001426 	beq	r2,zero,800d304 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d2b4:	e0bffb17 	ldw	r2,-20(fp)
 800d2b8:	10800017 	ldw	r2,0(r2)
 800d2bc:	10800517 	ldw	r2,20(r2)
 800d2c0:	e0ffff17 	ldw	r3,-4(fp)
 800d2c4:	e13ffb17 	ldw	r4,-20(fp)
 800d2c8:	e17ffe17 	ldw	r5,-8(fp)
 800d2cc:	180d883a 	mov	r6,r3
 800d2d0:	103ee83a 	callr	r2
 800d2d4:	e0bffc15 	stw	r2,-16(fp)
 800d2d8:	e0bffc17 	ldw	r2,-16(fp)
 800d2dc:	1000070e 	bge	r2,zero,800d2fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800d2e0:	800d1ec0 	call	800d1ec <alt_get_errno>
 800d2e4:	1007883a 	mov	r3,r2
 800d2e8:	e0bffc17 	ldw	r2,-16(fp)
 800d2ec:	0085c83a 	sub	r2,zero,r2
 800d2f0:	18800015 	stw	r2,0(r3)
          return -1;
 800d2f4:	00bfffc4 	movi	r2,-1
 800d2f8:	00000c06 	br	800d32c <read+0xf0>
        }
        return rval;
 800d2fc:	e0bffc17 	ldw	r2,-16(fp)
 800d300:	00000a06 	br	800d32c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d304:	800d1ec0 	call	800d1ec <alt_get_errno>
 800d308:	1007883a 	mov	r3,r2
 800d30c:	00800344 	movi	r2,13
 800d310:	18800015 	stw	r2,0(r3)
 800d314:	00000406 	br	800d328 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d318:	800d1ec0 	call	800d1ec <alt_get_errno>
 800d31c:	1007883a 	mov	r3,r2
 800d320:	00801444 	movi	r2,81
 800d324:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d328:	00bfffc4 	movi	r2,-1
}
 800d32c:	e037883a 	mov	sp,fp
 800d330:	dfc00117 	ldw	ra,4(sp)
 800d334:	df000017 	ldw	fp,0(sp)
 800d338:	dec00204 	addi	sp,sp,8
 800d33c:	f800283a 	ret

0800d340 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d340:	defffc04 	addi	sp,sp,-16
 800d344:	dfc00315 	stw	ra,12(sp)
 800d348:	df000215 	stw	fp,8(sp)
 800d34c:	dc000115 	stw	r16,4(sp)
 800d350:	df000204 	addi	fp,sp,8
 800d354:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800d358:	e0bffe17 	ldw	r2,-8(fp)
 800d35c:	108000d0 	cmplti	r2,r2,3
 800d360:	1000111e 	bne	r2,zero,800d3a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d364:	04020074 	movhi	r16,2049
 800d368:	843fca04 	addi	r16,r16,-216
 800d36c:	e0bffe17 	ldw	r2,-8(fp)
 800d370:	1009883a 	mov	r4,r2
 800d374:	01400304 	movi	r5,12
 800d378:	800a3a80 	call	800a3a8 <__mulsi3>
 800d37c:	8085883a 	add	r2,r16,r2
 800d380:	10800204 	addi	r2,r2,8
 800d384:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d388:	04020074 	movhi	r16,2049
 800d38c:	843fca04 	addi	r16,r16,-216
 800d390:	e0bffe17 	ldw	r2,-8(fp)
 800d394:	1009883a 	mov	r4,r2
 800d398:	01400304 	movi	r5,12
 800d39c:	800a3a80 	call	800a3a8 <__mulsi3>
 800d3a0:	8085883a 	add	r2,r16,r2
 800d3a4:	10000015 	stw	zero,0(r2)
  }
}
 800d3a8:	e6ffff04 	addi	sp,fp,-4
 800d3ac:	dfc00217 	ldw	ra,8(sp)
 800d3b0:	df000117 	ldw	fp,4(sp)
 800d3b4:	dc000017 	ldw	r16,0(sp)
 800d3b8:	dec00304 	addi	sp,sp,12
 800d3bc:	f800283a 	ret

0800d3c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d3c0:	defff904 	addi	sp,sp,-28
 800d3c4:	df000615 	stw	fp,24(sp)
 800d3c8:	df000604 	addi	fp,sp,24
 800d3cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d3d0:	0005303a 	rdctl	r2,status
 800d3d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d3d8:	e0fffc17 	ldw	r3,-16(fp)
 800d3dc:	00bfff84 	movi	r2,-2
 800d3e0:	1884703a 	and	r2,r3,r2
 800d3e4:	1001703a 	wrctl	status,r2
  
  return context;
 800d3e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d3ec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d3f0:	d0a00c17 	ldw	r2,-32720(gp)
 800d3f4:	10c000c4 	addi	r3,r2,3
 800d3f8:	00bfff04 	movi	r2,-4
 800d3fc:	1884703a 	and	r2,r3,r2
 800d400:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d404:	d0e00c17 	ldw	r3,-32720(gp)
 800d408:	e0bfff17 	ldw	r2,-4(fp)
 800d40c:	1887883a 	add	r3,r3,r2
 800d410:	00830034 	movhi	r2,3072
 800d414:	10800004 	addi	r2,r2,0
 800d418:	10c0062e 	bgeu	r2,r3,800d434 <sbrk+0x74>
 800d41c:	e0bffa17 	ldw	r2,-24(fp)
 800d420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d424:	e0bffd17 	ldw	r2,-12(fp)
 800d428:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d42c:	00bfffc4 	movi	r2,-1
 800d430:	00000b06 	br	800d460 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d434:	d0a00c17 	ldw	r2,-32720(gp)
 800d438:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800d43c:	d0e00c17 	ldw	r3,-32720(gp)
 800d440:	e0bfff17 	ldw	r2,-4(fp)
 800d444:	1885883a 	add	r2,r3,r2
 800d448:	d0a00c15 	stw	r2,-32720(gp)
 800d44c:	e0bffa17 	ldw	r2,-24(fp)
 800d450:	e0bffe15 	stw	r2,-8(fp)
 800d454:	e0bffe17 	ldw	r2,-8(fp)
 800d458:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d45c:	e0bffb17 	ldw	r2,-20(fp)
} 
 800d460:	e037883a 	mov	sp,fp
 800d464:	df000017 	ldw	fp,0(sp)
 800d468:	dec00104 	addi	sp,sp,4
 800d46c:	f800283a 	ret

0800d470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d470:	defffe04 	addi	sp,sp,-8
 800d474:	dfc00115 	stw	ra,4(sp)
 800d478:	df000015 	stw	fp,0(sp)
 800d47c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d480:	00820074 	movhi	r2,2049
 800d484:	10844d04 	addi	r2,r2,4404
 800d488:	10800017 	ldw	r2,0(r2)
 800d48c:	10000526 	beq	r2,zero,800d4a4 <alt_get_errno+0x34>
 800d490:	00820074 	movhi	r2,2049
 800d494:	10844d04 	addi	r2,r2,4404
 800d498:	10800017 	ldw	r2,0(r2)
 800d49c:	103ee83a 	callr	r2
 800d4a0:	00000206 	br	800d4ac <alt_get_errno+0x3c>
 800d4a4:	00820074 	movhi	r2,2049
 800d4a8:	108b1304 	addi	r2,r2,11340
}
 800d4ac:	e037883a 	mov	sp,fp
 800d4b0:	dfc00117 	ldw	ra,4(sp)
 800d4b4:	df000017 	ldw	fp,0(sp)
 800d4b8:	dec00204 	addi	sp,sp,8
 800d4bc:	f800283a 	ret

0800d4c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d4c0:	defff904 	addi	sp,sp,-28
 800d4c4:	dfc00615 	stw	ra,24(sp)
 800d4c8:	df000515 	stw	fp,20(sp)
 800d4cc:	df000504 	addi	fp,sp,20
 800d4d0:	e13ffd15 	stw	r4,-12(fp)
 800d4d4:	e17ffe15 	stw	r5,-8(fp)
 800d4d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d4dc:	e0bffd17 	ldw	r2,-12(fp)
 800d4e0:	10000816 	blt	r2,zero,800d504 <write+0x44>
 800d4e4:	e13ffd17 	ldw	r4,-12(fp)
 800d4e8:	01400304 	movi	r5,12
 800d4ec:	800a3a80 	call	800a3a8 <__mulsi3>
 800d4f0:	1007883a 	mov	r3,r2
 800d4f4:	00820074 	movhi	r2,2049
 800d4f8:	10bfca04 	addi	r2,r2,-216
 800d4fc:	1885883a 	add	r2,r3,r2
 800d500:	00000106 	br	800d508 <write+0x48>
 800d504:	0005883a 	mov	r2,zero
 800d508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d50c:	e0bffb17 	ldw	r2,-20(fp)
 800d510:	10002126 	beq	r2,zero,800d598 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d514:	e0bffb17 	ldw	r2,-20(fp)
 800d518:	10800217 	ldw	r2,8(r2)
 800d51c:	108000cc 	andi	r2,r2,3
 800d520:	10001826 	beq	r2,zero,800d584 <write+0xc4>
 800d524:	e0bffb17 	ldw	r2,-20(fp)
 800d528:	10800017 	ldw	r2,0(r2)
 800d52c:	10800617 	ldw	r2,24(r2)
 800d530:	10001426 	beq	r2,zero,800d584 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d534:	e0bffb17 	ldw	r2,-20(fp)
 800d538:	10800017 	ldw	r2,0(r2)
 800d53c:	10800617 	ldw	r2,24(r2)
 800d540:	e0ffff17 	ldw	r3,-4(fp)
 800d544:	e13ffb17 	ldw	r4,-20(fp)
 800d548:	e17ffe17 	ldw	r5,-8(fp)
 800d54c:	180d883a 	mov	r6,r3
 800d550:	103ee83a 	callr	r2
 800d554:	e0bffc15 	stw	r2,-16(fp)
 800d558:	e0bffc17 	ldw	r2,-16(fp)
 800d55c:	1000070e 	bge	r2,zero,800d57c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800d560:	800d4700 	call	800d470 <alt_get_errno>
 800d564:	1007883a 	mov	r3,r2
 800d568:	e0bffc17 	ldw	r2,-16(fp)
 800d56c:	0085c83a 	sub	r2,zero,r2
 800d570:	18800015 	stw	r2,0(r3)
        return -1;
 800d574:	00bfffc4 	movi	r2,-1
 800d578:	00000c06 	br	800d5ac <write+0xec>
      }
      return rval;
 800d57c:	e0bffc17 	ldw	r2,-16(fp)
 800d580:	00000a06 	br	800d5ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d584:	800d4700 	call	800d470 <alt_get_errno>
 800d588:	1007883a 	mov	r3,r2
 800d58c:	00800344 	movi	r2,13
 800d590:	18800015 	stw	r2,0(r3)
 800d594:	00000406 	br	800d5a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d598:	800d4700 	call	800d470 <alt_get_errno>
 800d59c:	1007883a 	mov	r3,r2
 800d5a0:	00801444 	movi	r2,81
 800d5a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d5a8:	00bfffc4 	movi	r2,-1
}
 800d5ac:	e037883a 	mov	sp,fp
 800d5b0:	dfc00117 	ldw	ra,4(sp)
 800d5b4:	df000017 	ldw	fp,0(sp)
 800d5b8:	dec00204 	addi	sp,sp,8
 800d5bc:	f800283a 	ret

0800d5c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d5c0:	defffd04 	addi	sp,sp,-12
 800d5c4:	dfc00215 	stw	ra,8(sp)
 800d5c8:	df000115 	stw	fp,4(sp)
 800d5cc:	df000104 	addi	fp,sp,4
 800d5d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d5d4:	e13fff17 	ldw	r4,-4(fp)
 800d5d8:	01420074 	movhi	r5,2049
 800d5dc:	29444a04 	addi	r5,r5,4392
 800d5e0:	800e2680 	call	800e268 <alt_dev_llist_insert>
}
 800d5e4:	e037883a 	mov	sp,fp
 800d5e8:	dfc00117 	ldw	ra,4(sp)
 800d5ec:	df000017 	ldw	fp,0(sp)
 800d5f0:	dec00204 	addi	sp,sp,8
 800d5f4:	f800283a 	ret

0800d5f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d5f8:	defffd04 	addi	sp,sp,-12
 800d5fc:	dfc00215 	stw	ra,8(sp)
 800d600:	df000115 	stw	fp,4(sp)
 800d604:	df000104 	addi	fp,sp,4
 800d608:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800d60c:	800ec480 	call	800ec48 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d610:	00800044 	movi	r2,1
 800d614:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d618:	e037883a 	mov	sp,fp
 800d61c:	dfc00117 	ldw	ra,4(sp)
 800d620:	df000017 	ldw	fp,0(sp)
 800d624:	dec00204 	addi	sp,sp,8
 800d628:	f800283a 	ret

0800d62c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d62c:	defffe04 	addi	sp,sp,-8
 800d630:	dfc00115 	stw	ra,4(sp)
 800d634:	df000015 	stw	fp,0(sp)
 800d638:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d63c:	01020074 	movhi	r4,2049
 800d640:	21003404 	addi	r4,r4,208
 800d644:	000b883a 	mov	r5,zero
 800d648:	01800144 	movi	r6,5
 800d64c:	800d7d40 	call	800d7d4 <altera_avalon_jtag_uart_init>
 800d650:	01020074 	movhi	r4,2049
 800d654:	21002a04 	addi	r4,r4,168
 800d658:	800d5c00 	call	800d5c0 <alt_dev_reg>
}
 800d65c:	e037883a 	mov	sp,fp
 800d660:	dfc00117 	ldw	ra,4(sp)
 800d664:	df000017 	ldw	fp,0(sp)
 800d668:	dec00204 	addi	sp,sp,8
 800d66c:	f800283a 	ret

0800d670 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d670:	defffa04 	addi	sp,sp,-24
 800d674:	dfc00515 	stw	ra,20(sp)
 800d678:	df000415 	stw	fp,16(sp)
 800d67c:	df000404 	addi	fp,sp,16
 800d680:	e13ffd15 	stw	r4,-12(fp)
 800d684:	e17ffe15 	stw	r5,-8(fp)
 800d688:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d68c:	e0bffd17 	ldw	r2,-12(fp)
 800d690:	10800017 	ldw	r2,0(r2)
 800d694:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d698:	e0bffc17 	ldw	r2,-16(fp)
 800d69c:	10c00a04 	addi	r3,r2,40
 800d6a0:	e0bffd17 	ldw	r2,-12(fp)
 800d6a4:	10800217 	ldw	r2,8(r2)
 800d6a8:	1809883a 	mov	r4,r3
 800d6ac:	e17ffe17 	ldw	r5,-8(fp)
 800d6b0:	e1bfff17 	ldw	r6,-4(fp)
 800d6b4:	100f883a 	mov	r7,r2
 800d6b8:	800dc980 	call	800dc98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d6bc:	e037883a 	mov	sp,fp
 800d6c0:	dfc00117 	ldw	ra,4(sp)
 800d6c4:	df000017 	ldw	fp,0(sp)
 800d6c8:	dec00204 	addi	sp,sp,8
 800d6cc:	f800283a 	ret

0800d6d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d6d0:	defffa04 	addi	sp,sp,-24
 800d6d4:	dfc00515 	stw	ra,20(sp)
 800d6d8:	df000415 	stw	fp,16(sp)
 800d6dc:	df000404 	addi	fp,sp,16
 800d6e0:	e13ffd15 	stw	r4,-12(fp)
 800d6e4:	e17ffe15 	stw	r5,-8(fp)
 800d6e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d6ec:	e0bffd17 	ldw	r2,-12(fp)
 800d6f0:	10800017 	ldw	r2,0(r2)
 800d6f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800d6f8:	e0bffc17 	ldw	r2,-16(fp)
 800d6fc:	10c00a04 	addi	r3,r2,40
 800d700:	e0bffd17 	ldw	r2,-12(fp)
 800d704:	10800217 	ldw	r2,8(r2)
 800d708:	1809883a 	mov	r4,r3
 800d70c:	e17ffe17 	ldw	r5,-8(fp)
 800d710:	e1bfff17 	ldw	r6,-4(fp)
 800d714:	100f883a 	mov	r7,r2
 800d718:	800dea40 	call	800dea4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800d71c:	e037883a 	mov	sp,fp
 800d720:	dfc00117 	ldw	ra,4(sp)
 800d724:	df000017 	ldw	fp,0(sp)
 800d728:	dec00204 	addi	sp,sp,8
 800d72c:	f800283a 	ret

0800d730 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800d730:	defffc04 	addi	sp,sp,-16
 800d734:	dfc00315 	stw	ra,12(sp)
 800d738:	df000215 	stw	fp,8(sp)
 800d73c:	df000204 	addi	fp,sp,8
 800d740:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d744:	e0bfff17 	ldw	r2,-4(fp)
 800d748:	10800017 	ldw	r2,0(r2)
 800d74c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800d750:	e0bffe17 	ldw	r2,-8(fp)
 800d754:	10c00a04 	addi	r3,r2,40
 800d758:	e0bfff17 	ldw	r2,-4(fp)
 800d75c:	10800217 	ldw	r2,8(r2)
 800d760:	1809883a 	mov	r4,r3
 800d764:	100b883a 	mov	r5,r2
 800d768:	800db440 	call	800db44 <altera_avalon_jtag_uart_close>
}
 800d76c:	e037883a 	mov	sp,fp
 800d770:	dfc00117 	ldw	ra,4(sp)
 800d774:	df000017 	ldw	fp,0(sp)
 800d778:	dec00204 	addi	sp,sp,8
 800d77c:	f800283a 	ret

0800d780 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800d780:	defffa04 	addi	sp,sp,-24
 800d784:	dfc00515 	stw	ra,20(sp)
 800d788:	df000415 	stw	fp,16(sp)
 800d78c:	df000404 	addi	fp,sp,16
 800d790:	e13ffd15 	stw	r4,-12(fp)
 800d794:	e17ffe15 	stw	r5,-8(fp)
 800d798:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800d79c:	e0bffd17 	ldw	r2,-12(fp)
 800d7a0:	10800017 	ldw	r2,0(r2)
 800d7a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800d7a8:	e0bffc17 	ldw	r2,-16(fp)
 800d7ac:	10800a04 	addi	r2,r2,40
 800d7b0:	1009883a 	mov	r4,r2
 800d7b4:	e17ffe17 	ldw	r5,-8(fp)
 800d7b8:	e1bfff17 	ldw	r6,-4(fp)
 800d7bc:	800dbac0 	call	800dbac <altera_avalon_jtag_uart_ioctl>
}
 800d7c0:	e037883a 	mov	sp,fp
 800d7c4:	dfc00117 	ldw	ra,4(sp)
 800d7c8:	df000017 	ldw	fp,0(sp)
 800d7cc:	dec00204 	addi	sp,sp,8
 800d7d0:	f800283a 	ret

0800d7d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800d7d4:	defffa04 	addi	sp,sp,-24
 800d7d8:	dfc00515 	stw	ra,20(sp)
 800d7dc:	df000415 	stw	fp,16(sp)
 800d7e0:	df000404 	addi	fp,sp,16
 800d7e4:	e13ffd15 	stw	r4,-12(fp)
 800d7e8:	e17ffe15 	stw	r5,-8(fp)
 800d7ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d7f0:	e0bffd17 	ldw	r2,-12(fp)
 800d7f4:	00c00044 	movi	r3,1
 800d7f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800d7fc:	e0bffd17 	ldw	r2,-12(fp)
 800d800:	10800017 	ldw	r2,0(r2)
 800d804:	10800104 	addi	r2,r2,4
 800d808:	1007883a 	mov	r3,r2
 800d80c:	e0bffd17 	ldw	r2,-12(fp)
 800d810:	10800817 	ldw	r2,32(r2)
 800d814:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800d818:	e0fffe17 	ldw	r3,-8(fp)
 800d81c:	e0bfff17 	ldw	r2,-4(fp)
 800d820:	d8000015 	stw	zero,0(sp)
 800d824:	1809883a 	mov	r4,r3
 800d828:	100b883a 	mov	r5,r2
 800d82c:	01820074 	movhi	r6,2049
 800d830:	31b62604 	addi	r6,r6,-10088
 800d834:	e1fffd17 	ldw	r7,-12(fp)
 800d838:	800e3e00 	call	800e3e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800d83c:	e0bffd17 	ldw	r2,-12(fp)
 800d840:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800d844:	e0bffd17 	ldw	r2,-12(fp)
 800d848:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800d84c:	00820074 	movhi	r2,2049
 800d850:	108b1804 	addi	r2,r2,11360
 800d854:	10800017 	ldw	r2,0(r2)
 800d858:	1809883a 	mov	r4,r3
 800d85c:	100b883a 	mov	r5,r2
 800d860:	01820074 	movhi	r6,2049
 800d864:	31b6a704 	addi	r6,r6,-9572
 800d868:	e1fffd17 	ldw	r7,-12(fp)
 800d86c:	800e0bc0 	call	800e0bc <alt_alarm_start>
 800d870:	1000040e 	bge	r2,zero,800d884 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800d874:	e0fffd17 	ldw	r3,-12(fp)
 800d878:	00a00034 	movhi	r2,32768
 800d87c:	10bfffc4 	addi	r2,r2,-1
 800d880:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800d884:	e037883a 	mov	sp,fp
 800d888:	dfc00117 	ldw	ra,4(sp)
 800d88c:	df000017 	ldw	fp,0(sp)
 800d890:	dec00204 	addi	sp,sp,8
 800d894:	f800283a 	ret

0800d898 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800d898:	defff804 	addi	sp,sp,-32
 800d89c:	df000715 	stw	fp,28(sp)
 800d8a0:	df000704 	addi	fp,sp,28
 800d8a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800d8a8:	e0bfff17 	ldw	r2,-4(fp)
 800d8ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800d8b0:	e0bffb17 	ldw	r2,-20(fp)
 800d8b4:	10800017 	ldw	r2,0(r2)
 800d8b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d8bc:	e0bffc17 	ldw	r2,-16(fp)
 800d8c0:	10800104 	addi	r2,r2,4
 800d8c4:	10800037 	ldwio	r2,0(r2)
 800d8c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800d8cc:	e0bffd17 	ldw	r2,-12(fp)
 800d8d0:	1080c00c 	andi	r2,r2,768
 800d8d4:	1000011e 	bne	r2,zero,800d8dc <altera_avalon_jtag_uart_irq+0x44>
      break;
 800d8d8:	00006c06 	br	800da8c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800d8dc:	e0bffd17 	ldw	r2,-12(fp)
 800d8e0:	1080400c 	andi	r2,r2,256
 800d8e4:	10003426 	beq	r2,zero,800d9b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800d8e8:	00800074 	movhi	r2,1
 800d8ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d8f0:	e0bffb17 	ldw	r2,-20(fp)
 800d8f4:	10800a17 	ldw	r2,40(r2)
 800d8f8:	10800044 	addi	r2,r2,1
 800d8fc:	1081ffcc 	andi	r2,r2,2047
 800d900:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800d904:	e0bffb17 	ldw	r2,-20(fp)
 800d908:	10c00b17 	ldw	r3,44(r2)
 800d90c:	e0bffe17 	ldw	r2,-8(fp)
 800d910:	1880011e 	bne	r3,r2,800d918 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800d914:	00001606 	br	800d970 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800d918:	e0bffc17 	ldw	r2,-16(fp)
 800d91c:	10800037 	ldwio	r2,0(r2)
 800d920:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800d924:	e0bff917 	ldw	r2,-28(fp)
 800d928:	10a0000c 	andi	r2,r2,32768
 800d92c:	1000011e 	bne	r2,zero,800d934 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800d930:	00000f06 	br	800d970 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800d934:	e0bffb17 	ldw	r2,-20(fp)
 800d938:	10800a17 	ldw	r2,40(r2)
 800d93c:	e0fff917 	ldw	r3,-28(fp)
 800d940:	1809883a 	mov	r4,r3
 800d944:	e0fffb17 	ldw	r3,-20(fp)
 800d948:	1885883a 	add	r2,r3,r2
 800d94c:	10800e04 	addi	r2,r2,56
 800d950:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d954:	e0bffb17 	ldw	r2,-20(fp)
 800d958:	10800a17 	ldw	r2,40(r2)
 800d95c:	10800044 	addi	r2,r2,1
 800d960:	10c1ffcc 	andi	r3,r2,2047
 800d964:	e0bffb17 	ldw	r2,-20(fp)
 800d968:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800d96c:	003fe006 	br	800d8f0 <__alt_data_end+0xfc00d8f0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800d970:	e0bff917 	ldw	r2,-28(fp)
 800d974:	10bfffec 	andhi	r2,r2,65535
 800d978:	10000f26 	beq	r2,zero,800d9b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d97c:	e0bffb17 	ldw	r2,-20(fp)
 800d980:	10c00817 	ldw	r3,32(r2)
 800d984:	00bfff84 	movi	r2,-2
 800d988:	1886703a 	and	r3,r3,r2
 800d98c:	e0bffb17 	ldw	r2,-20(fp)
 800d990:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800d994:	e0bffc17 	ldw	r2,-16(fp)
 800d998:	10800104 	addi	r2,r2,4
 800d99c:	1007883a 	mov	r3,r2
 800d9a0:	e0bffb17 	ldw	r2,-20(fp)
 800d9a4:	10800817 	ldw	r2,32(r2)
 800d9a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d9ac:	e0bffc17 	ldw	r2,-16(fp)
 800d9b0:	10800104 	addi	r2,r2,4
 800d9b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800d9b8:	e0bffd17 	ldw	r2,-12(fp)
 800d9bc:	1080800c 	andi	r2,r2,512
 800d9c0:	10003126 	beq	r2,zero,800da88 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800d9c4:	e0bffd17 	ldw	r2,-12(fp)
 800d9c8:	1004d43a 	srli	r2,r2,16
 800d9cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d9d0:	00001406 	br	800da24 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800d9d4:	e0bffc17 	ldw	r2,-16(fp)
 800d9d8:	e0fffb17 	ldw	r3,-20(fp)
 800d9dc:	18c00d17 	ldw	r3,52(r3)
 800d9e0:	e13ffb17 	ldw	r4,-20(fp)
 800d9e4:	20c7883a 	add	r3,r4,r3
 800d9e8:	18c20e04 	addi	r3,r3,2104
 800d9ec:	18c00003 	ldbu	r3,0(r3)
 800d9f0:	18c03fcc 	andi	r3,r3,255
 800d9f4:	18c0201c 	xori	r3,r3,128
 800d9f8:	18ffe004 	addi	r3,r3,-128
 800d9fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800da00:	e0bffb17 	ldw	r2,-20(fp)
 800da04:	10800d17 	ldw	r2,52(r2)
 800da08:	10800044 	addi	r2,r2,1
 800da0c:	10c1ffcc 	andi	r3,r2,2047
 800da10:	e0bffb17 	ldw	r2,-20(fp)
 800da14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800da18:	e0bffa17 	ldw	r2,-24(fp)
 800da1c:	10bfffc4 	addi	r2,r2,-1
 800da20:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800da24:	e0bffa17 	ldw	r2,-24(fp)
 800da28:	10000526 	beq	r2,zero,800da40 <altera_avalon_jtag_uart_irq+0x1a8>
 800da2c:	e0bffb17 	ldw	r2,-20(fp)
 800da30:	10c00d17 	ldw	r3,52(r2)
 800da34:	e0bffb17 	ldw	r2,-20(fp)
 800da38:	10800c17 	ldw	r2,48(r2)
 800da3c:	18bfe51e 	bne	r3,r2,800d9d4 <__alt_data_end+0xfc00d9d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800da40:	e0bffa17 	ldw	r2,-24(fp)
 800da44:	10001026 	beq	r2,zero,800da88 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800da48:	e0bffb17 	ldw	r2,-20(fp)
 800da4c:	10c00817 	ldw	r3,32(r2)
 800da50:	00bfff44 	movi	r2,-3
 800da54:	1886703a 	and	r3,r3,r2
 800da58:	e0bffb17 	ldw	r2,-20(fp)
 800da5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800da60:	e0bffb17 	ldw	r2,-20(fp)
 800da64:	10800017 	ldw	r2,0(r2)
 800da68:	10800104 	addi	r2,r2,4
 800da6c:	1007883a 	mov	r3,r2
 800da70:	e0bffb17 	ldw	r2,-20(fp)
 800da74:	10800817 	ldw	r2,32(r2)
 800da78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800da7c:	e0bffc17 	ldw	r2,-16(fp)
 800da80:	10800104 	addi	r2,r2,4
 800da84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800da88:	003f8c06 	br	800d8bc <__alt_data_end+0xfc00d8bc>
}
 800da8c:	e037883a 	mov	sp,fp
 800da90:	df000017 	ldw	fp,0(sp)
 800da94:	dec00104 	addi	sp,sp,4
 800da98:	f800283a 	ret

0800da9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800da9c:	defff804 	addi	sp,sp,-32
 800daa0:	df000715 	stw	fp,28(sp)
 800daa4:	df000704 	addi	fp,sp,28
 800daa8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800daac:	e0bffb17 	ldw	r2,-20(fp)
 800dab0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800dab4:	e0bff917 	ldw	r2,-28(fp)
 800dab8:	10800017 	ldw	r2,0(r2)
 800dabc:	10800104 	addi	r2,r2,4
 800dac0:	10800037 	ldwio	r2,0(r2)
 800dac4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800dac8:	e0bffa17 	ldw	r2,-24(fp)
 800dacc:	1081000c 	andi	r2,r2,1024
 800dad0:	10000b26 	beq	r2,zero,800db00 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800dad4:	e0bff917 	ldw	r2,-28(fp)
 800dad8:	10800017 	ldw	r2,0(r2)
 800dadc:	10800104 	addi	r2,r2,4
 800dae0:	1007883a 	mov	r3,r2
 800dae4:	e0bff917 	ldw	r2,-28(fp)
 800dae8:	10800817 	ldw	r2,32(r2)
 800daec:	10810014 	ori	r2,r2,1024
 800daf0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800daf4:	e0bff917 	ldw	r2,-28(fp)
 800daf8:	10000915 	stw	zero,36(r2)
 800dafc:	00000a06 	br	800db28 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800db00:	e0bff917 	ldw	r2,-28(fp)
 800db04:	10c00917 	ldw	r3,36(r2)
 800db08:	00a00034 	movhi	r2,32768
 800db0c:	10bfff04 	addi	r2,r2,-4
 800db10:	10c00536 	bltu	r2,r3,800db28 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800db14:	e0bff917 	ldw	r2,-28(fp)
 800db18:	10800917 	ldw	r2,36(r2)
 800db1c:	10c00044 	addi	r3,r2,1
 800db20:	e0bff917 	ldw	r2,-28(fp)
 800db24:	10c00915 	stw	r3,36(r2)
 800db28:	00820074 	movhi	r2,2049
 800db2c:	108b1804 	addi	r2,r2,11360
 800db30:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800db34:	e037883a 	mov	sp,fp
 800db38:	df000017 	ldw	fp,0(sp)
 800db3c:	dec00104 	addi	sp,sp,4
 800db40:	f800283a 	ret

0800db44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800db44:	defffd04 	addi	sp,sp,-12
 800db48:	df000215 	stw	fp,8(sp)
 800db4c:	df000204 	addi	fp,sp,8
 800db50:	e13ffe15 	stw	r4,-8(fp)
 800db54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800db58:	00000506 	br	800db70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800db5c:	e0bfff17 	ldw	r2,-4(fp)
 800db60:	1090000c 	andi	r2,r2,16384
 800db64:	10000226 	beq	r2,zero,800db70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800db68:	00bffd44 	movi	r2,-11
 800db6c:	00000b06 	br	800db9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800db70:	e0bffe17 	ldw	r2,-8(fp)
 800db74:	10c00d17 	ldw	r3,52(r2)
 800db78:	e0bffe17 	ldw	r2,-8(fp)
 800db7c:	10800c17 	ldw	r2,48(r2)
 800db80:	18800526 	beq	r3,r2,800db98 <altera_avalon_jtag_uart_close+0x54>
 800db84:	e0bffe17 	ldw	r2,-8(fp)
 800db88:	10c00917 	ldw	r3,36(r2)
 800db8c:	e0bffe17 	ldw	r2,-8(fp)
 800db90:	10800117 	ldw	r2,4(r2)
 800db94:	18bff136 	bltu	r3,r2,800db5c <__alt_data_end+0xfc00db5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800db98:	0005883a 	mov	r2,zero
}
 800db9c:	e037883a 	mov	sp,fp
 800dba0:	df000017 	ldw	fp,0(sp)
 800dba4:	dec00104 	addi	sp,sp,4
 800dba8:	f800283a 	ret

0800dbac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800dbac:	defffa04 	addi	sp,sp,-24
 800dbb0:	df000515 	stw	fp,20(sp)
 800dbb4:	df000504 	addi	fp,sp,20
 800dbb8:	e13ffd15 	stw	r4,-12(fp)
 800dbbc:	e17ffe15 	stw	r5,-8(fp)
 800dbc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800dbc4:	00bff9c4 	movi	r2,-25
 800dbc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800dbcc:	e0bffe17 	ldw	r2,-8(fp)
 800dbd0:	10da8060 	cmpeqi	r3,r2,27137
 800dbd4:	1800031e 	bne	r3,zero,800dbe4 <altera_avalon_jtag_uart_ioctl+0x38>
 800dbd8:	109a80a0 	cmpeqi	r2,r2,27138
 800dbdc:	1000191e 	bne	r2,zero,800dc44 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800dbe0:	00002806 	br	800dc84 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800dbe4:	e0bffd17 	ldw	r2,-12(fp)
 800dbe8:	10c00117 	ldw	r3,4(r2)
 800dbec:	00a00034 	movhi	r2,32768
 800dbf0:	10bfffc4 	addi	r2,r2,-1
 800dbf4:	18801226 	beq	r3,r2,800dc40 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800dbf8:	e0bfff17 	ldw	r2,-4(fp)
 800dbfc:	10800017 	ldw	r2,0(r2)
 800dc00:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800dc04:	e0bffc17 	ldw	r2,-16(fp)
 800dc08:	10800090 	cmplti	r2,r2,2
 800dc0c:	1000061e 	bne	r2,zero,800dc28 <altera_avalon_jtag_uart_ioctl+0x7c>
 800dc10:	e0fffc17 	ldw	r3,-16(fp)
 800dc14:	00a00034 	movhi	r2,32768
 800dc18:	10bfffc4 	addi	r2,r2,-1
 800dc1c:	18800226 	beq	r3,r2,800dc28 <altera_avalon_jtag_uart_ioctl+0x7c>
 800dc20:	e0bffc17 	ldw	r2,-16(fp)
 800dc24:	00000206 	br	800dc30 <altera_avalon_jtag_uart_ioctl+0x84>
 800dc28:	00a00034 	movhi	r2,32768
 800dc2c:	10bfff84 	addi	r2,r2,-2
 800dc30:	e0fffd17 	ldw	r3,-12(fp)
 800dc34:	18800115 	stw	r2,4(r3)
      rc = 0;
 800dc38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800dc3c:	00001106 	br	800dc84 <altera_avalon_jtag_uart_ioctl+0xd8>
 800dc40:	00001006 	br	800dc84 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800dc44:	e0bffd17 	ldw	r2,-12(fp)
 800dc48:	10c00117 	ldw	r3,4(r2)
 800dc4c:	00a00034 	movhi	r2,32768
 800dc50:	10bfffc4 	addi	r2,r2,-1
 800dc54:	18800a26 	beq	r3,r2,800dc80 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800dc58:	e0bffd17 	ldw	r2,-12(fp)
 800dc5c:	10c00917 	ldw	r3,36(r2)
 800dc60:	e0bffd17 	ldw	r2,-12(fp)
 800dc64:	10800117 	ldw	r2,4(r2)
 800dc68:	1885803a 	cmpltu	r2,r3,r2
 800dc6c:	10c03fcc 	andi	r3,r2,255
 800dc70:	e0bfff17 	ldw	r2,-4(fp)
 800dc74:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800dc78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800dc7c:	00000006 	br	800dc80 <altera_avalon_jtag_uart_ioctl+0xd4>
 800dc80:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800dc84:	e0bffb17 	ldw	r2,-20(fp)
}
 800dc88:	e037883a 	mov	sp,fp
 800dc8c:	df000017 	ldw	fp,0(sp)
 800dc90:	dec00104 	addi	sp,sp,4
 800dc94:	f800283a 	ret

0800dc98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800dc98:	defff304 	addi	sp,sp,-52
 800dc9c:	dfc00c15 	stw	ra,48(sp)
 800dca0:	df000b15 	stw	fp,44(sp)
 800dca4:	df000b04 	addi	fp,sp,44
 800dca8:	e13ffc15 	stw	r4,-16(fp)
 800dcac:	e17ffd15 	stw	r5,-12(fp)
 800dcb0:	e1bffe15 	stw	r6,-8(fp)
 800dcb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800dcb8:	e0bffd17 	ldw	r2,-12(fp)
 800dcbc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800dcc0:	00004906 	br	800dde8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800dcc4:	e0bffc17 	ldw	r2,-16(fp)
 800dcc8:	10800a17 	ldw	r2,40(r2)
 800dccc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800dcd0:	e0bffc17 	ldw	r2,-16(fp)
 800dcd4:	10800b17 	ldw	r2,44(r2)
 800dcd8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800dcdc:	e0fff717 	ldw	r3,-36(fp)
 800dce0:	e0bff817 	ldw	r2,-32(fp)
 800dce4:	18800536 	bltu	r3,r2,800dcfc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800dce8:	e0fff717 	ldw	r3,-36(fp)
 800dcec:	e0bff817 	ldw	r2,-32(fp)
 800dcf0:	1885c83a 	sub	r2,r3,r2
 800dcf4:	e0bff615 	stw	r2,-40(fp)
 800dcf8:	00000406 	br	800dd0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800dcfc:	00c20004 	movi	r3,2048
 800dd00:	e0bff817 	ldw	r2,-32(fp)
 800dd04:	1885c83a 	sub	r2,r3,r2
 800dd08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800dd0c:	e0bff617 	ldw	r2,-40(fp)
 800dd10:	1000011e 	bne	r2,zero,800dd18 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800dd14:	00001d06 	br	800dd8c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800dd18:	e0fffe17 	ldw	r3,-8(fp)
 800dd1c:	e0bff617 	ldw	r2,-40(fp)
 800dd20:	1880022e 	bgeu	r3,r2,800dd2c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800dd24:	e0bffe17 	ldw	r2,-8(fp)
 800dd28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800dd2c:	e0bff817 	ldw	r2,-32(fp)
 800dd30:	10800e04 	addi	r2,r2,56
 800dd34:	e0fffc17 	ldw	r3,-16(fp)
 800dd38:	1885883a 	add	r2,r3,r2
 800dd3c:	e13ff517 	ldw	r4,-44(fp)
 800dd40:	100b883a 	mov	r5,r2
 800dd44:	e1bff617 	ldw	r6,-40(fp)
 800dd48:	80055f40 	call	80055f4 <memcpy>
      ptr   += n;
 800dd4c:	e0fff517 	ldw	r3,-44(fp)
 800dd50:	e0bff617 	ldw	r2,-40(fp)
 800dd54:	1885883a 	add	r2,r3,r2
 800dd58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800dd5c:	e0fffe17 	ldw	r3,-8(fp)
 800dd60:	e0bff617 	ldw	r2,-40(fp)
 800dd64:	1885c83a 	sub	r2,r3,r2
 800dd68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dd6c:	e0fff817 	ldw	r3,-32(fp)
 800dd70:	e0bff617 	ldw	r2,-40(fp)
 800dd74:	1885883a 	add	r2,r3,r2
 800dd78:	10c1ffcc 	andi	r3,r2,2047
 800dd7c:	e0bffc17 	ldw	r2,-16(fp)
 800dd80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800dd84:	e0bffe17 	ldw	r2,-8(fp)
 800dd88:	00bfce16 	blt	zero,r2,800dcc4 <__alt_data_end+0xfc00dcc4>

    /* If we read any data then return it */
    if (ptr != buffer)
 800dd8c:	e0fff517 	ldw	r3,-44(fp)
 800dd90:	e0bffd17 	ldw	r2,-12(fp)
 800dd94:	18800126 	beq	r3,r2,800dd9c <altera_avalon_jtag_uart_read+0x104>
      break;
 800dd98:	00001506 	br	800ddf0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800dd9c:	e0bfff17 	ldw	r2,-4(fp)
 800dda0:	1090000c 	andi	r2,r2,16384
 800dda4:	10000126 	beq	r2,zero,800ddac <altera_avalon_jtag_uart_read+0x114>
      break;
 800dda8:	00001106 	br	800ddf0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800ddac:	0001883a 	nop
 800ddb0:	e0bffc17 	ldw	r2,-16(fp)
 800ddb4:	10c00a17 	ldw	r3,40(r2)
 800ddb8:	e0bff717 	ldw	r2,-36(fp)
 800ddbc:	1880051e 	bne	r3,r2,800ddd4 <altera_avalon_jtag_uart_read+0x13c>
 800ddc0:	e0bffc17 	ldw	r2,-16(fp)
 800ddc4:	10c00917 	ldw	r3,36(r2)
 800ddc8:	e0bffc17 	ldw	r2,-16(fp)
 800ddcc:	10800117 	ldw	r2,4(r2)
 800ddd0:	18bff736 	bltu	r3,r2,800ddb0 <__alt_data_end+0xfc00ddb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800ddd4:	e0bffc17 	ldw	r2,-16(fp)
 800ddd8:	10c00a17 	ldw	r3,40(r2)
 800dddc:	e0bff717 	ldw	r2,-36(fp)
 800dde0:	1880011e 	bne	r3,r2,800dde8 <altera_avalon_jtag_uart_read+0x150>
      break;
 800dde4:	00000206 	br	800ddf0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800dde8:	e0bffe17 	ldw	r2,-8(fp)
 800ddec:	00bfb516 	blt	zero,r2,800dcc4 <__alt_data_end+0xfc00dcc4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800ddf0:	e0fff517 	ldw	r3,-44(fp)
 800ddf4:	e0bffd17 	ldw	r2,-12(fp)
 800ddf8:	18801826 	beq	r3,r2,800de5c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ddfc:	0005303a 	rdctl	r2,status
 800de00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800de04:	e0fffa17 	ldw	r3,-24(fp)
 800de08:	00bfff84 	movi	r2,-2
 800de0c:	1884703a 	and	r2,r3,r2
 800de10:	1001703a 	wrctl	status,r2
  
  return context;
 800de14:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800de18:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800de1c:	e0bffc17 	ldw	r2,-16(fp)
 800de20:	10800817 	ldw	r2,32(r2)
 800de24:	10c00054 	ori	r3,r2,1
 800de28:	e0bffc17 	ldw	r2,-16(fp)
 800de2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800de30:	e0bffc17 	ldw	r2,-16(fp)
 800de34:	10800017 	ldw	r2,0(r2)
 800de38:	10800104 	addi	r2,r2,4
 800de3c:	1007883a 	mov	r3,r2
 800de40:	e0bffc17 	ldw	r2,-16(fp)
 800de44:	10800817 	ldw	r2,32(r2)
 800de48:	18800035 	stwio	r2,0(r3)
 800de4c:	e0bff917 	ldw	r2,-28(fp)
 800de50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800de54:	e0bffb17 	ldw	r2,-20(fp)
 800de58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800de5c:	e0fff517 	ldw	r3,-44(fp)
 800de60:	e0bffd17 	ldw	r2,-12(fp)
 800de64:	18800426 	beq	r3,r2,800de78 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800de68:	e0fff517 	ldw	r3,-44(fp)
 800de6c:	e0bffd17 	ldw	r2,-12(fp)
 800de70:	1885c83a 	sub	r2,r3,r2
 800de74:	00000606 	br	800de90 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800de78:	e0bfff17 	ldw	r2,-4(fp)
 800de7c:	1090000c 	andi	r2,r2,16384
 800de80:	10000226 	beq	r2,zero,800de8c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800de84:	00bffd44 	movi	r2,-11
 800de88:	00000106 	br	800de90 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800de8c:	00bffec4 	movi	r2,-5
}
 800de90:	e037883a 	mov	sp,fp
 800de94:	dfc00117 	ldw	ra,4(sp)
 800de98:	df000017 	ldw	fp,0(sp)
 800de9c:	dec00204 	addi	sp,sp,8
 800dea0:	f800283a 	ret

0800dea4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800dea4:	defff304 	addi	sp,sp,-52
 800dea8:	dfc00c15 	stw	ra,48(sp)
 800deac:	df000b15 	stw	fp,44(sp)
 800deb0:	df000b04 	addi	fp,sp,44
 800deb4:	e13ffc15 	stw	r4,-16(fp)
 800deb8:	e17ffd15 	stw	r5,-12(fp)
 800debc:	e1bffe15 	stw	r6,-8(fp)
 800dec0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800dec4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800dec8:	e0bffd17 	ldw	r2,-12(fp)
 800decc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ded0:	00003806 	br	800dfb4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800ded4:	e0bffc17 	ldw	r2,-16(fp)
 800ded8:	10800c17 	ldw	r2,48(r2)
 800dedc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800dee0:	e0bffc17 	ldw	r2,-16(fp)
 800dee4:	10800d17 	ldw	r2,52(r2)
 800dee8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800deec:	e0fff817 	ldw	r3,-32(fp)
 800def0:	e0bff517 	ldw	r2,-44(fp)
 800def4:	1880062e 	bgeu	r3,r2,800df10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800def8:	e0fff517 	ldw	r3,-44(fp)
 800defc:	e0bff817 	ldw	r2,-32(fp)
 800df00:	1885c83a 	sub	r2,r3,r2
 800df04:	10bfffc4 	addi	r2,r2,-1
 800df08:	e0bff615 	stw	r2,-40(fp)
 800df0c:	00000b06 	br	800df3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800df10:	e0bff517 	ldw	r2,-44(fp)
 800df14:	10000526 	beq	r2,zero,800df2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800df18:	00c20004 	movi	r3,2048
 800df1c:	e0bff817 	ldw	r2,-32(fp)
 800df20:	1885c83a 	sub	r2,r3,r2
 800df24:	e0bff615 	stw	r2,-40(fp)
 800df28:	00000406 	br	800df3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800df2c:	00c1ffc4 	movi	r3,2047
 800df30:	e0bff817 	ldw	r2,-32(fp)
 800df34:	1885c83a 	sub	r2,r3,r2
 800df38:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800df3c:	e0bff617 	ldw	r2,-40(fp)
 800df40:	1000011e 	bne	r2,zero,800df48 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800df44:	00001d06 	br	800dfbc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800df48:	e0fffe17 	ldw	r3,-8(fp)
 800df4c:	e0bff617 	ldw	r2,-40(fp)
 800df50:	1880022e 	bgeu	r3,r2,800df5c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800df54:	e0bffe17 	ldw	r2,-8(fp)
 800df58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800df5c:	e0bff817 	ldw	r2,-32(fp)
 800df60:	10820e04 	addi	r2,r2,2104
 800df64:	e0fffc17 	ldw	r3,-16(fp)
 800df68:	1885883a 	add	r2,r3,r2
 800df6c:	1009883a 	mov	r4,r2
 800df70:	e17ffd17 	ldw	r5,-12(fp)
 800df74:	e1bff617 	ldw	r6,-40(fp)
 800df78:	80055f40 	call	80055f4 <memcpy>
      ptr   += n;
 800df7c:	e0fffd17 	ldw	r3,-12(fp)
 800df80:	e0bff617 	ldw	r2,-40(fp)
 800df84:	1885883a 	add	r2,r3,r2
 800df88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800df8c:	e0fffe17 	ldw	r3,-8(fp)
 800df90:	e0bff617 	ldw	r2,-40(fp)
 800df94:	1885c83a 	sub	r2,r3,r2
 800df98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800df9c:	e0fff817 	ldw	r3,-32(fp)
 800dfa0:	e0bff617 	ldw	r2,-40(fp)
 800dfa4:	1885883a 	add	r2,r3,r2
 800dfa8:	10c1ffcc 	andi	r3,r2,2047
 800dfac:	e0bffc17 	ldw	r2,-16(fp)
 800dfb0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800dfb4:	e0bffe17 	ldw	r2,-8(fp)
 800dfb8:	00bfc616 	blt	zero,r2,800ded4 <__alt_data_end+0xfc00ded4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dfbc:	0005303a 	rdctl	r2,status
 800dfc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dfc4:	e0fffa17 	ldw	r3,-24(fp)
 800dfc8:	00bfff84 	movi	r2,-2
 800dfcc:	1884703a 	and	r2,r3,r2
 800dfd0:	1001703a 	wrctl	status,r2
  
  return context;
 800dfd4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800dfd8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800dfdc:	e0bffc17 	ldw	r2,-16(fp)
 800dfe0:	10800817 	ldw	r2,32(r2)
 800dfe4:	10c00094 	ori	r3,r2,2
 800dfe8:	e0bffc17 	ldw	r2,-16(fp)
 800dfec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800dff0:	e0bffc17 	ldw	r2,-16(fp)
 800dff4:	10800017 	ldw	r2,0(r2)
 800dff8:	10800104 	addi	r2,r2,4
 800dffc:	1007883a 	mov	r3,r2
 800e000:	e0bffc17 	ldw	r2,-16(fp)
 800e004:	10800817 	ldw	r2,32(r2)
 800e008:	18800035 	stwio	r2,0(r3)
 800e00c:	e0bff917 	ldw	r2,-28(fp)
 800e010:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e014:	e0bffb17 	ldw	r2,-20(fp)
 800e018:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e01c:	e0bffe17 	ldw	r2,-8(fp)
 800e020:	0080120e 	bge	zero,r2,800e06c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800e024:	e0bfff17 	ldw	r2,-4(fp)
 800e028:	1090000c 	andi	r2,r2,16384
 800e02c:	10000126 	beq	r2,zero,800e034 <altera_avalon_jtag_uart_write+0x190>
        break;
 800e030:	00001006 	br	800e074 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e034:	0001883a 	nop
 800e038:	e0bffc17 	ldw	r2,-16(fp)
 800e03c:	10c00d17 	ldw	r3,52(r2)
 800e040:	e0bff517 	ldw	r2,-44(fp)
 800e044:	1880051e 	bne	r3,r2,800e05c <altera_avalon_jtag_uart_write+0x1b8>
 800e048:	e0bffc17 	ldw	r2,-16(fp)
 800e04c:	10c00917 	ldw	r3,36(r2)
 800e050:	e0bffc17 	ldw	r2,-16(fp)
 800e054:	10800117 	ldw	r2,4(r2)
 800e058:	18bff736 	bltu	r3,r2,800e038 <__alt_data_end+0xfc00e038>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e05c:	e0bffc17 	ldw	r2,-16(fp)
 800e060:	10800917 	ldw	r2,36(r2)
 800e064:	10000126 	beq	r2,zero,800e06c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800e068:	00000206 	br	800e074 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800e06c:	e0bffe17 	ldw	r2,-8(fp)
 800e070:	00bf9716 	blt	zero,r2,800ded0 <__alt_data_end+0xfc00ded0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e074:	e0fffd17 	ldw	r3,-12(fp)
 800e078:	e0bff717 	ldw	r2,-36(fp)
 800e07c:	18800426 	beq	r3,r2,800e090 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800e080:	e0fffd17 	ldw	r3,-12(fp)
 800e084:	e0bff717 	ldw	r2,-36(fp)
 800e088:	1885c83a 	sub	r2,r3,r2
 800e08c:	00000606 	br	800e0a8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800e090:	e0bfff17 	ldw	r2,-4(fp)
 800e094:	1090000c 	andi	r2,r2,16384
 800e098:	10000226 	beq	r2,zero,800e0a4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800e09c:	00bffd44 	movi	r2,-11
 800e0a0:	00000106 	br	800e0a8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e0a4:	00bffec4 	movi	r2,-5
}
 800e0a8:	e037883a 	mov	sp,fp
 800e0ac:	dfc00117 	ldw	ra,4(sp)
 800e0b0:	df000017 	ldw	fp,0(sp)
 800e0b4:	dec00204 	addi	sp,sp,8
 800e0b8:	f800283a 	ret

0800e0bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e0bc:	defff504 	addi	sp,sp,-44
 800e0c0:	df000a15 	stw	fp,40(sp)
 800e0c4:	df000a04 	addi	fp,sp,40
 800e0c8:	e13ffc15 	stw	r4,-16(fp)
 800e0cc:	e17ffd15 	stw	r5,-12(fp)
 800e0d0:	e1bffe15 	stw	r6,-8(fp)
 800e0d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e0d8:	e03ff615 	stw	zero,-40(fp)
 800e0dc:	00820074 	movhi	r2,2049
 800e0e0:	108b1804 	addi	r2,r2,11360
 800e0e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e0e8:	10003f26 	beq	r2,zero,800e1e8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800e0ec:	e0bffc17 	ldw	r2,-16(fp)
 800e0f0:	10003b26 	beq	r2,zero,800e1e0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800e0f4:	e0bffc17 	ldw	r2,-16(fp)
 800e0f8:	e0fffe17 	ldw	r3,-8(fp)
 800e0fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e100:	e0bffc17 	ldw	r2,-16(fp)
 800e104:	e0ffff17 	ldw	r3,-4(fp)
 800e108:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e10c:	0005303a 	rdctl	r2,status
 800e110:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e114:	e0fff817 	ldw	r3,-32(fp)
 800e118:	00bfff84 	movi	r2,-2
 800e11c:	1884703a 	and	r2,r3,r2
 800e120:	1001703a 	wrctl	status,r2
  
  return context;
 800e124:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800e128:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e12c:	00820074 	movhi	r2,2049
 800e130:	108b1904 	addi	r2,r2,11364
 800e134:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800e138:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e13c:	e0fffd17 	ldw	r3,-12(fp)
 800e140:	e0bff617 	ldw	r2,-40(fp)
 800e144:	1885883a 	add	r2,r3,r2
 800e148:	10c00044 	addi	r3,r2,1
 800e14c:	e0bffc17 	ldw	r2,-16(fp)
 800e150:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e154:	e0bffc17 	ldw	r2,-16(fp)
 800e158:	10c00217 	ldw	r3,8(r2)
 800e15c:	e0bff617 	ldw	r2,-40(fp)
 800e160:	1880042e 	bgeu	r3,r2,800e174 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800e164:	e0bffc17 	ldw	r2,-16(fp)
 800e168:	00c00044 	movi	r3,1
 800e16c:	10c00405 	stb	r3,16(r2)
 800e170:	00000206 	br	800e17c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800e174:	e0bffc17 	ldw	r2,-16(fp)
 800e178:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e17c:	e0fffc17 	ldw	r3,-16(fp)
 800e180:	00820074 	movhi	r2,2049
 800e184:	10845004 	addi	r2,r2,4416
 800e188:	e0bff915 	stw	r2,-28(fp)
 800e18c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e190:	e0bffa17 	ldw	r2,-24(fp)
 800e194:	e0fff917 	ldw	r3,-28(fp)
 800e198:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e19c:	e0bff917 	ldw	r2,-28(fp)
 800e1a0:	10c00017 	ldw	r3,0(r2)
 800e1a4:	e0bffa17 	ldw	r2,-24(fp)
 800e1a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e1ac:	e0bff917 	ldw	r2,-28(fp)
 800e1b0:	10800017 	ldw	r2,0(r2)
 800e1b4:	e0fffa17 	ldw	r3,-24(fp)
 800e1b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e1bc:	e0bff917 	ldw	r2,-28(fp)
 800e1c0:	e0fffa17 	ldw	r3,-24(fp)
 800e1c4:	10c00015 	stw	r3,0(r2)
 800e1c8:	e0bff717 	ldw	r2,-36(fp)
 800e1cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e1d0:	e0bffb17 	ldw	r2,-20(fp)
 800e1d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e1d8:	0005883a 	mov	r2,zero
 800e1dc:	00000306 	br	800e1ec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800e1e0:	00bffa84 	movi	r2,-22
 800e1e4:	00000106 	br	800e1ec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800e1e8:	00bfde84 	movi	r2,-134
  }
}
 800e1ec:	e037883a 	mov	sp,fp
 800e1f0:	df000017 	ldw	fp,0(sp)
 800e1f4:	dec00104 	addi	sp,sp,4
 800e1f8:	f800283a 	ret

0800e1fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800e1fc:	deffff04 	addi	sp,sp,-4
 800e200:	df000015 	stw	fp,0(sp)
 800e204:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800e208:	e037883a 	mov	sp,fp
 800e20c:	df000017 	ldw	fp,0(sp)
 800e210:	dec00104 	addi	sp,sp,4
 800e214:	f800283a 	ret

0800e218 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e218:	defffe04 	addi	sp,sp,-8
 800e21c:	dfc00115 	stw	ra,4(sp)
 800e220:	df000015 	stw	fp,0(sp)
 800e224:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e228:	00820074 	movhi	r2,2049
 800e22c:	10844d04 	addi	r2,r2,4404
 800e230:	10800017 	ldw	r2,0(r2)
 800e234:	10000526 	beq	r2,zero,800e24c <alt_get_errno+0x34>
 800e238:	00820074 	movhi	r2,2049
 800e23c:	10844d04 	addi	r2,r2,4404
 800e240:	10800017 	ldw	r2,0(r2)
 800e244:	103ee83a 	callr	r2
 800e248:	00000206 	br	800e254 <alt_get_errno+0x3c>
 800e24c:	00820074 	movhi	r2,2049
 800e250:	108b1304 	addi	r2,r2,11340
}
 800e254:	e037883a 	mov	sp,fp
 800e258:	dfc00117 	ldw	ra,4(sp)
 800e25c:	df000017 	ldw	fp,0(sp)
 800e260:	dec00204 	addi	sp,sp,8
 800e264:	f800283a 	ret

0800e268 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800e268:	defffa04 	addi	sp,sp,-24
 800e26c:	dfc00515 	stw	ra,20(sp)
 800e270:	df000415 	stw	fp,16(sp)
 800e274:	df000404 	addi	fp,sp,16
 800e278:	e13ffe15 	stw	r4,-8(fp)
 800e27c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800e280:	e0bffe17 	ldw	r2,-8(fp)
 800e284:	10000326 	beq	r2,zero,800e294 <alt_dev_llist_insert+0x2c>
 800e288:	e0bffe17 	ldw	r2,-8(fp)
 800e28c:	10800217 	ldw	r2,8(r2)
 800e290:	1000061e 	bne	r2,zero,800e2ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800e294:	800e2180 	call	800e218 <alt_get_errno>
 800e298:	1007883a 	mov	r3,r2
 800e29c:	00800584 	movi	r2,22
 800e2a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800e2a4:	00bffa84 	movi	r2,-22
 800e2a8:	00001306 	br	800e2f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800e2ac:	e0bffe17 	ldw	r2,-8(fp)
 800e2b0:	e0ffff17 	ldw	r3,-4(fp)
 800e2b4:	e0fffc15 	stw	r3,-16(fp)
 800e2b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e2bc:	e0bffd17 	ldw	r2,-12(fp)
 800e2c0:	e0fffc17 	ldw	r3,-16(fp)
 800e2c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e2c8:	e0bffc17 	ldw	r2,-16(fp)
 800e2cc:	10c00017 	ldw	r3,0(r2)
 800e2d0:	e0bffd17 	ldw	r2,-12(fp)
 800e2d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e2d8:	e0bffc17 	ldw	r2,-16(fp)
 800e2dc:	10800017 	ldw	r2,0(r2)
 800e2e0:	e0fffd17 	ldw	r3,-12(fp)
 800e2e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e2e8:	e0bffc17 	ldw	r2,-16(fp)
 800e2ec:	e0fffd17 	ldw	r3,-12(fp)
 800e2f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 800e2f4:	0005883a 	mov	r2,zero
}
 800e2f8:	e037883a 	mov	sp,fp
 800e2fc:	dfc00117 	ldw	ra,4(sp)
 800e300:	df000017 	ldw	fp,0(sp)
 800e304:	dec00204 	addi	sp,sp,8
 800e308:	f800283a 	ret

0800e30c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800e30c:	defffd04 	addi	sp,sp,-12
 800e310:	dfc00215 	stw	ra,8(sp)
 800e314:	df000115 	stw	fp,4(sp)
 800e318:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e31c:	00820074 	movhi	r2,2049
 800e320:	10bcc704 	addi	r2,r2,-3300
 800e324:	e0bfff15 	stw	r2,-4(fp)
 800e328:	00000606 	br	800e344 <_do_ctors+0x38>
        (*ctor) (); 
 800e32c:	e0bfff17 	ldw	r2,-4(fp)
 800e330:	10800017 	ldw	r2,0(r2)
 800e334:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e338:	e0bfff17 	ldw	r2,-4(fp)
 800e33c:	10bfff04 	addi	r2,r2,-4
 800e340:	e0bfff15 	stw	r2,-4(fp)
 800e344:	e0ffff17 	ldw	r3,-4(fp)
 800e348:	00820074 	movhi	r2,2049
 800e34c:	10bcc804 	addi	r2,r2,-3296
 800e350:	18bff62e 	bgeu	r3,r2,800e32c <__alt_data_end+0xfc00e32c>
        (*ctor) (); 
}
 800e354:	e037883a 	mov	sp,fp
 800e358:	dfc00117 	ldw	ra,4(sp)
 800e35c:	df000017 	ldw	fp,0(sp)
 800e360:	dec00204 	addi	sp,sp,8
 800e364:	f800283a 	ret

0800e368 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e368:	defffd04 	addi	sp,sp,-12
 800e36c:	dfc00215 	stw	ra,8(sp)
 800e370:	df000115 	stw	fp,4(sp)
 800e374:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e378:	00820074 	movhi	r2,2049
 800e37c:	10bcc704 	addi	r2,r2,-3300
 800e380:	e0bfff15 	stw	r2,-4(fp)
 800e384:	00000606 	br	800e3a0 <_do_dtors+0x38>
        (*dtor) (); 
 800e388:	e0bfff17 	ldw	r2,-4(fp)
 800e38c:	10800017 	ldw	r2,0(r2)
 800e390:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e394:	e0bfff17 	ldw	r2,-4(fp)
 800e398:	10bfff04 	addi	r2,r2,-4
 800e39c:	e0bfff15 	stw	r2,-4(fp)
 800e3a0:	e0ffff17 	ldw	r3,-4(fp)
 800e3a4:	00820074 	movhi	r2,2049
 800e3a8:	10bcc804 	addi	r2,r2,-3296
 800e3ac:	18bff62e 	bgeu	r3,r2,800e388 <__alt_data_end+0xfc00e388>
        (*dtor) (); 
}
 800e3b0:	e037883a 	mov	sp,fp
 800e3b4:	dfc00117 	ldw	ra,4(sp)
 800e3b8:	df000017 	ldw	fp,0(sp)
 800e3bc:	dec00204 	addi	sp,sp,8
 800e3c0:	f800283a 	ret

0800e3c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e3c4:	deffff04 	addi	sp,sp,-4
 800e3c8:	df000015 	stw	fp,0(sp)
 800e3cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800e3d0:	e037883a 	mov	sp,fp
 800e3d4:	df000017 	ldw	fp,0(sp)
 800e3d8:	dec00104 	addi	sp,sp,4
 800e3dc:	f800283a 	ret

0800e3e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e3e0:	defff904 	addi	sp,sp,-28
 800e3e4:	dfc00615 	stw	ra,24(sp)
 800e3e8:	df000515 	stw	fp,20(sp)
 800e3ec:	df000504 	addi	fp,sp,20
 800e3f0:	e13ffc15 	stw	r4,-16(fp)
 800e3f4:	e17ffd15 	stw	r5,-12(fp)
 800e3f8:	e1bffe15 	stw	r6,-8(fp)
 800e3fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800e400:	e0800217 	ldw	r2,8(fp)
 800e404:	d8800015 	stw	r2,0(sp)
 800e408:	e13ffc17 	ldw	r4,-16(fp)
 800e40c:	e17ffd17 	ldw	r5,-12(fp)
 800e410:	e1bffe17 	ldw	r6,-8(fp)
 800e414:	e1ffff17 	ldw	r7,-4(fp)
 800e418:	800e5c00 	call	800e5c0 <alt_iic_isr_register>
}  
 800e41c:	e037883a 	mov	sp,fp
 800e420:	dfc00117 	ldw	ra,4(sp)
 800e424:	df000017 	ldw	fp,0(sp)
 800e428:	dec00204 	addi	sp,sp,8
 800e42c:	f800283a 	ret

0800e430 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800e430:	defff904 	addi	sp,sp,-28
 800e434:	df000615 	stw	fp,24(sp)
 800e438:	df000604 	addi	fp,sp,24
 800e43c:	e13ffe15 	stw	r4,-8(fp)
 800e440:	e17fff15 	stw	r5,-4(fp)
 800e444:	e0bfff17 	ldw	r2,-4(fp)
 800e448:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e44c:	0005303a 	rdctl	r2,status
 800e450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e454:	e0fffb17 	ldw	r3,-20(fp)
 800e458:	00bfff84 	movi	r2,-2
 800e45c:	1884703a 	and	r2,r3,r2
 800e460:	1001703a 	wrctl	status,r2
  
  return context;
 800e464:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e468:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800e46c:	e0bffa17 	ldw	r2,-24(fp)
 800e470:	00c00044 	movi	r3,1
 800e474:	1884983a 	sll	r2,r3,r2
 800e478:	1007883a 	mov	r3,r2
 800e47c:	00820074 	movhi	r2,2049
 800e480:	108b1704 	addi	r2,r2,11356
 800e484:	10800017 	ldw	r2,0(r2)
 800e488:	1886b03a 	or	r3,r3,r2
 800e48c:	00820074 	movhi	r2,2049
 800e490:	108b1704 	addi	r2,r2,11356
 800e494:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e498:	00820074 	movhi	r2,2049
 800e49c:	108b1704 	addi	r2,r2,11356
 800e4a0:	10800017 	ldw	r2,0(r2)
 800e4a4:	100170fa 	wrctl	ienable,r2
 800e4a8:	e0bffc17 	ldw	r2,-16(fp)
 800e4ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e4b0:	e0bffd17 	ldw	r2,-12(fp)
 800e4b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e4b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800e4bc:	0001883a 	nop
}
 800e4c0:	e037883a 	mov	sp,fp
 800e4c4:	df000017 	ldw	fp,0(sp)
 800e4c8:	dec00104 	addi	sp,sp,4
 800e4cc:	f800283a 	ret

0800e4d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800e4d0:	defff904 	addi	sp,sp,-28
 800e4d4:	df000615 	stw	fp,24(sp)
 800e4d8:	df000604 	addi	fp,sp,24
 800e4dc:	e13ffe15 	stw	r4,-8(fp)
 800e4e0:	e17fff15 	stw	r5,-4(fp)
 800e4e4:	e0bfff17 	ldw	r2,-4(fp)
 800e4e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e4ec:	0005303a 	rdctl	r2,status
 800e4f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e4f4:	e0fffb17 	ldw	r3,-20(fp)
 800e4f8:	00bfff84 	movi	r2,-2
 800e4fc:	1884703a 	and	r2,r3,r2
 800e500:	1001703a 	wrctl	status,r2
  
  return context;
 800e504:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e508:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800e50c:	e0bffa17 	ldw	r2,-24(fp)
 800e510:	00c00044 	movi	r3,1
 800e514:	1884983a 	sll	r2,r3,r2
 800e518:	0084303a 	nor	r2,zero,r2
 800e51c:	1007883a 	mov	r3,r2
 800e520:	00820074 	movhi	r2,2049
 800e524:	108b1704 	addi	r2,r2,11356
 800e528:	10800017 	ldw	r2,0(r2)
 800e52c:	1886703a 	and	r3,r3,r2
 800e530:	00820074 	movhi	r2,2049
 800e534:	108b1704 	addi	r2,r2,11356
 800e538:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e53c:	00820074 	movhi	r2,2049
 800e540:	108b1704 	addi	r2,r2,11356
 800e544:	10800017 	ldw	r2,0(r2)
 800e548:	100170fa 	wrctl	ienable,r2
 800e54c:	e0bffc17 	ldw	r2,-16(fp)
 800e550:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e554:	e0bffd17 	ldw	r2,-12(fp)
 800e558:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e55c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800e560:	0001883a 	nop
}
 800e564:	e037883a 	mov	sp,fp
 800e568:	df000017 	ldw	fp,0(sp)
 800e56c:	dec00104 	addi	sp,sp,4
 800e570:	f800283a 	ret

0800e574 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800e574:	defffc04 	addi	sp,sp,-16
 800e578:	df000315 	stw	fp,12(sp)
 800e57c:	df000304 	addi	fp,sp,12
 800e580:	e13ffe15 	stw	r4,-8(fp)
 800e584:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800e588:	000530fa 	rdctl	r2,ienable
 800e58c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800e590:	e0bfff17 	ldw	r2,-4(fp)
 800e594:	00c00044 	movi	r3,1
 800e598:	1884983a 	sll	r2,r3,r2
 800e59c:	1007883a 	mov	r3,r2
 800e5a0:	e0bffd17 	ldw	r2,-12(fp)
 800e5a4:	1884703a 	and	r2,r3,r2
 800e5a8:	1004c03a 	cmpne	r2,r2,zero
 800e5ac:	10803fcc 	andi	r2,r2,255
}
 800e5b0:	e037883a 	mov	sp,fp
 800e5b4:	df000017 	ldw	fp,0(sp)
 800e5b8:	dec00104 	addi	sp,sp,4
 800e5bc:	f800283a 	ret

0800e5c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e5c0:	defff504 	addi	sp,sp,-44
 800e5c4:	dfc00a15 	stw	ra,40(sp)
 800e5c8:	df000915 	stw	fp,36(sp)
 800e5cc:	df000904 	addi	fp,sp,36
 800e5d0:	e13ffc15 	stw	r4,-16(fp)
 800e5d4:	e17ffd15 	stw	r5,-12(fp)
 800e5d8:	e1bffe15 	stw	r6,-8(fp)
 800e5dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800e5e0:	00bffa84 	movi	r2,-22
 800e5e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800e5e8:	e0bffd17 	ldw	r2,-12(fp)
 800e5ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800e5f0:	e0bff817 	ldw	r2,-32(fp)
 800e5f4:	10800808 	cmpgei	r2,r2,32
 800e5f8:	1000271e 	bne	r2,zero,800e698 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e5fc:	0005303a 	rdctl	r2,status
 800e600:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e604:	e0fffa17 	ldw	r3,-24(fp)
 800e608:	00bfff84 	movi	r2,-2
 800e60c:	1884703a 	and	r2,r3,r2
 800e610:	1001703a 	wrctl	status,r2
  
  return context;
 800e614:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800e618:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800e61c:	00820074 	movhi	r2,2049
 800e620:	108b2504 	addi	r2,r2,11412
 800e624:	e0fff817 	ldw	r3,-32(fp)
 800e628:	180690fa 	slli	r3,r3,3
 800e62c:	10c5883a 	add	r2,r2,r3
 800e630:	e0fffe17 	ldw	r3,-8(fp)
 800e634:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800e638:	00820074 	movhi	r2,2049
 800e63c:	108b2504 	addi	r2,r2,11412
 800e640:	e0fff817 	ldw	r3,-32(fp)
 800e644:	180690fa 	slli	r3,r3,3
 800e648:	10c5883a 	add	r2,r2,r3
 800e64c:	10800104 	addi	r2,r2,4
 800e650:	e0ffff17 	ldw	r3,-4(fp)
 800e654:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800e658:	e0bffe17 	ldw	r2,-8(fp)
 800e65c:	10000526 	beq	r2,zero,800e674 <alt_iic_isr_register+0xb4>
 800e660:	e0bff817 	ldw	r2,-32(fp)
 800e664:	e13ffc17 	ldw	r4,-16(fp)
 800e668:	100b883a 	mov	r5,r2
 800e66c:	800e4300 	call	800e430 <alt_ic_irq_enable>
 800e670:	00000406 	br	800e684 <alt_iic_isr_register+0xc4>
 800e674:	e0bff817 	ldw	r2,-32(fp)
 800e678:	e13ffc17 	ldw	r4,-16(fp)
 800e67c:	100b883a 	mov	r5,r2
 800e680:	800e4d00 	call	800e4d0 <alt_ic_irq_disable>
 800e684:	e0bff715 	stw	r2,-36(fp)
 800e688:	e0bff917 	ldw	r2,-28(fp)
 800e68c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e690:	e0bffb17 	ldw	r2,-20(fp)
 800e694:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800e698:	e0bff717 	ldw	r2,-36(fp)
}
 800e69c:	e037883a 	mov	sp,fp
 800e6a0:	dfc00117 	ldw	ra,4(sp)
 800e6a4:	df000017 	ldw	fp,0(sp)
 800e6a8:	dec00204 	addi	sp,sp,8
 800e6ac:	f800283a 	ret

0800e6b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800e6b0:	defff804 	addi	sp,sp,-32
 800e6b4:	dfc00715 	stw	ra,28(sp)
 800e6b8:	df000615 	stw	fp,24(sp)
 800e6bc:	dc000515 	stw	r16,20(sp)
 800e6c0:	df000604 	addi	fp,sp,24
 800e6c4:	e13ffb15 	stw	r4,-20(fp)
 800e6c8:	e17ffc15 	stw	r5,-16(fp)
 800e6cc:	e1bffd15 	stw	r6,-12(fp)
 800e6d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800e6d4:	e13ffc17 	ldw	r4,-16(fp)
 800e6d8:	e17ffd17 	ldw	r5,-12(fp)
 800e6dc:	e1bffe17 	ldw	r6,-8(fp)
 800e6e0:	800e94c0 	call	800e94c <open>
 800e6e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800e6e8:	e0bffa17 	ldw	r2,-24(fp)
 800e6ec:	10002216 	blt	r2,zero,800e778 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800e6f0:	04020074 	movhi	r16,2049
 800e6f4:	843fca04 	addi	r16,r16,-216
 800e6f8:	e0bffa17 	ldw	r2,-24(fp)
 800e6fc:	1009883a 	mov	r4,r2
 800e700:	01400304 	movi	r5,12
 800e704:	800a3a80 	call	800a3a8 <__mulsi3>
 800e708:	8085883a 	add	r2,r16,r2
 800e70c:	10c00017 	ldw	r3,0(r2)
 800e710:	e0bffb17 	ldw	r2,-20(fp)
 800e714:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800e718:	04020074 	movhi	r16,2049
 800e71c:	843fca04 	addi	r16,r16,-216
 800e720:	e0bffa17 	ldw	r2,-24(fp)
 800e724:	1009883a 	mov	r4,r2
 800e728:	01400304 	movi	r5,12
 800e72c:	800a3a80 	call	800a3a8 <__mulsi3>
 800e730:	8085883a 	add	r2,r16,r2
 800e734:	10800104 	addi	r2,r2,4
 800e738:	10c00017 	ldw	r3,0(r2)
 800e73c:	e0bffb17 	ldw	r2,-20(fp)
 800e740:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800e744:	04020074 	movhi	r16,2049
 800e748:	843fca04 	addi	r16,r16,-216
 800e74c:	e0bffa17 	ldw	r2,-24(fp)
 800e750:	1009883a 	mov	r4,r2
 800e754:	01400304 	movi	r5,12
 800e758:	800a3a80 	call	800a3a8 <__mulsi3>
 800e75c:	8085883a 	add	r2,r16,r2
 800e760:	10800204 	addi	r2,r2,8
 800e764:	10c00017 	ldw	r3,0(r2)
 800e768:	e0bffb17 	ldw	r2,-20(fp)
 800e76c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800e770:	e13ffa17 	ldw	r4,-24(fp)
 800e774:	800d3400 	call	800d340 <alt_release_fd>
  }
} 
 800e778:	e6ffff04 	addi	sp,fp,-4
 800e77c:	dfc00217 	ldw	ra,8(sp)
 800e780:	df000117 	ldw	fp,4(sp)
 800e784:	dc000017 	ldw	r16,0(sp)
 800e788:	dec00304 	addi	sp,sp,12
 800e78c:	f800283a 	ret

0800e790 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800e790:	defffb04 	addi	sp,sp,-20
 800e794:	dfc00415 	stw	ra,16(sp)
 800e798:	df000315 	stw	fp,12(sp)
 800e79c:	df000304 	addi	fp,sp,12
 800e7a0:	e13ffd15 	stw	r4,-12(fp)
 800e7a4:	e17ffe15 	stw	r5,-8(fp)
 800e7a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800e7ac:	01020074 	movhi	r4,2049
 800e7b0:	213fcd04 	addi	r4,r4,-204
 800e7b4:	e17ffd17 	ldw	r5,-12(fp)
 800e7b8:	01800044 	movi	r6,1
 800e7bc:	01c07fc4 	movi	r7,511
 800e7c0:	800e6b00 	call	800e6b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800e7c4:	01020074 	movhi	r4,2049
 800e7c8:	213fca04 	addi	r4,r4,-216
 800e7cc:	e17ffe17 	ldw	r5,-8(fp)
 800e7d0:	000d883a 	mov	r6,zero
 800e7d4:	01c07fc4 	movi	r7,511
 800e7d8:	800e6b00 	call	800e6b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800e7dc:	01020074 	movhi	r4,2049
 800e7e0:	213fd004 	addi	r4,r4,-192
 800e7e4:	e17fff17 	ldw	r5,-4(fp)
 800e7e8:	01800044 	movi	r6,1
 800e7ec:	01c07fc4 	movi	r7,511
 800e7f0:	800e6b00 	call	800e6b0 <alt_open_fd>
}  
 800e7f4:	e037883a 	mov	sp,fp
 800e7f8:	dfc00117 	ldw	ra,4(sp)
 800e7fc:	df000017 	ldw	fp,0(sp)
 800e800:	dec00204 	addi	sp,sp,8
 800e804:	f800283a 	ret

0800e808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e808:	defffe04 	addi	sp,sp,-8
 800e80c:	dfc00115 	stw	ra,4(sp)
 800e810:	df000015 	stw	fp,0(sp)
 800e814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e818:	00820074 	movhi	r2,2049
 800e81c:	10844d04 	addi	r2,r2,4404
 800e820:	10800017 	ldw	r2,0(r2)
 800e824:	10000526 	beq	r2,zero,800e83c <alt_get_errno+0x34>
 800e828:	00820074 	movhi	r2,2049
 800e82c:	10844d04 	addi	r2,r2,4404
 800e830:	10800017 	ldw	r2,0(r2)
 800e834:	103ee83a 	callr	r2
 800e838:	00000206 	br	800e844 <alt_get_errno+0x3c>
 800e83c:	00820074 	movhi	r2,2049
 800e840:	108b1304 	addi	r2,r2,11340
}
 800e844:	e037883a 	mov	sp,fp
 800e848:	dfc00117 	ldw	ra,4(sp)
 800e84c:	df000017 	ldw	fp,0(sp)
 800e850:	dec00204 	addi	sp,sp,8
 800e854:	f800283a 	ret

0800e858 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800e858:	defffb04 	addi	sp,sp,-20
 800e85c:	dfc00415 	stw	ra,16(sp)
 800e860:	df000315 	stw	fp,12(sp)
 800e864:	dc000215 	stw	r16,8(sp)
 800e868:	df000304 	addi	fp,sp,12
 800e86c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800e870:	e0bffe17 	ldw	r2,-8(fp)
 800e874:	10800217 	ldw	r2,8(r2)
 800e878:	10d00034 	orhi	r3,r2,16384
 800e87c:	e0bffe17 	ldw	r2,-8(fp)
 800e880:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e884:	e03ffd15 	stw	zero,-12(fp)
 800e888:	00002306 	br	800e918 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e88c:	04020074 	movhi	r16,2049
 800e890:	843fca04 	addi	r16,r16,-216
 800e894:	e0bffd17 	ldw	r2,-12(fp)
 800e898:	1009883a 	mov	r4,r2
 800e89c:	01400304 	movi	r5,12
 800e8a0:	800a3a80 	call	800a3a8 <__mulsi3>
 800e8a4:	8085883a 	add	r2,r16,r2
 800e8a8:	10c00017 	ldw	r3,0(r2)
 800e8ac:	e0bffe17 	ldw	r2,-8(fp)
 800e8b0:	10800017 	ldw	r2,0(r2)
 800e8b4:	1880151e 	bne	r3,r2,800e90c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e8b8:	04020074 	movhi	r16,2049
 800e8bc:	843fca04 	addi	r16,r16,-216
 800e8c0:	e0bffd17 	ldw	r2,-12(fp)
 800e8c4:	1009883a 	mov	r4,r2
 800e8c8:	01400304 	movi	r5,12
 800e8cc:	800a3a80 	call	800a3a8 <__mulsi3>
 800e8d0:	8085883a 	add	r2,r16,r2
 800e8d4:	10800204 	addi	r2,r2,8
 800e8d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e8dc:	10000b0e 	bge	r2,zero,800e90c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800e8e0:	e13ffd17 	ldw	r4,-12(fp)
 800e8e4:	01400304 	movi	r5,12
 800e8e8:	800a3a80 	call	800a3a8 <__mulsi3>
 800e8ec:	1007883a 	mov	r3,r2
 800e8f0:	00820074 	movhi	r2,2049
 800e8f4:	10bfca04 	addi	r2,r2,-216
 800e8f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e8fc:	e0bffe17 	ldw	r2,-8(fp)
 800e900:	18800226 	beq	r3,r2,800e90c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800e904:	00bffcc4 	movi	r2,-13
 800e908:	00000a06 	br	800e934 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e90c:	e0bffd17 	ldw	r2,-12(fp)
 800e910:	10800044 	addi	r2,r2,1
 800e914:	e0bffd15 	stw	r2,-12(fp)
 800e918:	00820074 	movhi	r2,2049
 800e91c:	10844c04 	addi	r2,r2,4400
 800e920:	10800017 	ldw	r2,0(r2)
 800e924:	1007883a 	mov	r3,r2
 800e928:	e0bffd17 	ldw	r2,-12(fp)
 800e92c:	18bfd72e 	bgeu	r3,r2,800e88c <__alt_data_end+0xfc00e88c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800e930:	0005883a 	mov	r2,zero
}
 800e934:	e6ffff04 	addi	sp,fp,-4
 800e938:	dfc00217 	ldw	ra,8(sp)
 800e93c:	df000117 	ldw	fp,4(sp)
 800e940:	dc000017 	ldw	r16,0(sp)
 800e944:	dec00304 	addi	sp,sp,12
 800e948:	f800283a 	ret

0800e94c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e94c:	defff604 	addi	sp,sp,-40
 800e950:	dfc00915 	stw	ra,36(sp)
 800e954:	df000815 	stw	fp,32(sp)
 800e958:	df000804 	addi	fp,sp,32
 800e95c:	e13ffd15 	stw	r4,-12(fp)
 800e960:	e17ffe15 	stw	r5,-8(fp)
 800e964:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e968:	00bfffc4 	movi	r2,-1
 800e96c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800e970:	00bffb44 	movi	r2,-19
 800e974:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800e978:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e97c:	e13ffd17 	ldw	r4,-12(fp)
 800e980:	01420074 	movhi	r5,2049
 800e984:	29444a04 	addi	r5,r5,4392
 800e988:	800ec680 	call	800ec68 <alt_find_dev>
 800e98c:	e0bff815 	stw	r2,-32(fp)
 800e990:	e0bff817 	ldw	r2,-32(fp)
 800e994:	1000051e 	bne	r2,zero,800e9ac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e998:	e13ffd17 	ldw	r4,-12(fp)
 800e99c:	800ecf80 	call	800ecf8 <alt_find_file>
 800e9a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800e9a4:	00800044 	movi	r2,1
 800e9a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e9ac:	e0bff817 	ldw	r2,-32(fp)
 800e9b0:	10002b26 	beq	r2,zero,800ea60 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e9b4:	e13ff817 	ldw	r4,-32(fp)
 800e9b8:	800ee0c0 	call	800ee0c <alt_get_fd>
 800e9bc:	e0bff915 	stw	r2,-28(fp)
 800e9c0:	e0bff917 	ldw	r2,-28(fp)
 800e9c4:	1000030e 	bge	r2,zero,800e9d4 <open+0x88>
    {
      status = index;
 800e9c8:	e0bff917 	ldw	r2,-28(fp)
 800e9cc:	e0bffa15 	stw	r2,-24(fp)
 800e9d0:	00002506 	br	800ea68 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e9d4:	e13ff917 	ldw	r4,-28(fp)
 800e9d8:	01400304 	movi	r5,12
 800e9dc:	800a3a80 	call	800a3a8 <__mulsi3>
 800e9e0:	1007883a 	mov	r3,r2
 800e9e4:	00820074 	movhi	r2,2049
 800e9e8:	10bfca04 	addi	r2,r2,-216
 800e9ec:	1885883a 	add	r2,r3,r2
 800e9f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e9f4:	e0fffe17 	ldw	r3,-8(fp)
 800e9f8:	00900034 	movhi	r2,16384
 800e9fc:	10bfffc4 	addi	r2,r2,-1
 800ea00:	1886703a 	and	r3,r3,r2
 800ea04:	e0bffc17 	ldw	r2,-16(fp)
 800ea08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ea0c:	e0bffb17 	ldw	r2,-20(fp)
 800ea10:	1000051e 	bne	r2,zero,800ea28 <open+0xdc>
 800ea14:	e13ffc17 	ldw	r4,-16(fp)
 800ea18:	800e8580 	call	800e858 <alt_file_locked>
 800ea1c:	e0bffa15 	stw	r2,-24(fp)
 800ea20:	e0bffa17 	ldw	r2,-24(fp)
 800ea24:	10001016 	blt	r2,zero,800ea68 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ea28:	e0bff817 	ldw	r2,-32(fp)
 800ea2c:	10800317 	ldw	r2,12(r2)
 800ea30:	10000826 	beq	r2,zero,800ea54 <open+0x108>
 800ea34:	e0bff817 	ldw	r2,-32(fp)
 800ea38:	10800317 	ldw	r2,12(r2)
 800ea3c:	e13ffc17 	ldw	r4,-16(fp)
 800ea40:	e17ffd17 	ldw	r5,-12(fp)
 800ea44:	e1bffe17 	ldw	r6,-8(fp)
 800ea48:	e1ffff17 	ldw	r7,-4(fp)
 800ea4c:	103ee83a 	callr	r2
 800ea50:	00000106 	br	800ea58 <open+0x10c>
 800ea54:	0005883a 	mov	r2,zero
 800ea58:	e0bffa15 	stw	r2,-24(fp)
 800ea5c:	00000206 	br	800ea68 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ea60:	00bffb44 	movi	r2,-19
 800ea64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ea68:	e0bffa17 	ldw	r2,-24(fp)
 800ea6c:	1000090e 	bge	r2,zero,800ea94 <open+0x148>
  {
    alt_release_fd (index);  
 800ea70:	e13ff917 	ldw	r4,-28(fp)
 800ea74:	800d3400 	call	800d340 <alt_release_fd>
    ALT_ERRNO = -status;
 800ea78:	800e8080 	call	800e808 <alt_get_errno>
 800ea7c:	1007883a 	mov	r3,r2
 800ea80:	e0bffa17 	ldw	r2,-24(fp)
 800ea84:	0085c83a 	sub	r2,zero,r2
 800ea88:	18800015 	stw	r2,0(r3)
    return -1;
 800ea8c:	00bfffc4 	movi	r2,-1
 800ea90:	00000106 	br	800ea98 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800ea94:	e0bff917 	ldw	r2,-28(fp)
}
 800ea98:	e037883a 	mov	sp,fp
 800ea9c:	dfc00117 	ldw	ra,4(sp)
 800eaa0:	df000017 	ldw	fp,0(sp)
 800eaa4:	dec00204 	addi	sp,sp,8
 800eaa8:	f800283a 	ret

0800eaac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800eaac:	defffa04 	addi	sp,sp,-24
 800eab0:	df000515 	stw	fp,20(sp)
 800eab4:	df000504 	addi	fp,sp,20
 800eab8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eabc:	0005303a 	rdctl	r2,status
 800eac0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eac4:	e0fffc17 	ldw	r3,-16(fp)
 800eac8:	00bfff84 	movi	r2,-2
 800eacc:	1884703a 	and	r2,r3,r2
 800ead0:	1001703a 	wrctl	status,r2
  
  return context;
 800ead4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800ead8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800eadc:	e0bfff17 	ldw	r2,-4(fp)
 800eae0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800eae4:	e0bffd17 	ldw	r2,-12(fp)
 800eae8:	10800017 	ldw	r2,0(r2)
 800eaec:	e0fffd17 	ldw	r3,-12(fp)
 800eaf0:	18c00117 	ldw	r3,4(r3)
 800eaf4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800eaf8:	e0bffd17 	ldw	r2,-12(fp)
 800eafc:	10800117 	ldw	r2,4(r2)
 800eb00:	e0fffd17 	ldw	r3,-12(fp)
 800eb04:	18c00017 	ldw	r3,0(r3)
 800eb08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800eb0c:	e0bffd17 	ldw	r2,-12(fp)
 800eb10:	e0fffd17 	ldw	r3,-12(fp)
 800eb14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800eb18:	e0bffd17 	ldw	r2,-12(fp)
 800eb1c:	e0fffd17 	ldw	r3,-12(fp)
 800eb20:	10c00015 	stw	r3,0(r2)
 800eb24:	e0bffb17 	ldw	r2,-20(fp)
 800eb28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb2c:	e0bffe17 	ldw	r2,-8(fp)
 800eb30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800eb34:	e037883a 	mov	sp,fp
 800eb38:	df000017 	ldw	fp,0(sp)
 800eb3c:	dec00104 	addi	sp,sp,4
 800eb40:	f800283a 	ret

0800eb44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800eb44:	defffb04 	addi	sp,sp,-20
 800eb48:	dfc00415 	stw	ra,16(sp)
 800eb4c:	df000315 	stw	fp,12(sp)
 800eb50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800eb54:	d0a00e17 	ldw	r2,-32712(gp)
 800eb58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800eb5c:	d0a6d717 	ldw	r2,-25764(gp)
 800eb60:	10800044 	addi	r2,r2,1
 800eb64:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800eb68:	00002e06 	br	800ec24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800eb6c:	e0bffd17 	ldw	r2,-12(fp)
 800eb70:	10800017 	ldw	r2,0(r2)
 800eb74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800eb78:	e0bffd17 	ldw	r2,-12(fp)
 800eb7c:	10800403 	ldbu	r2,16(r2)
 800eb80:	10803fcc 	andi	r2,r2,255
 800eb84:	10000426 	beq	r2,zero,800eb98 <alt_tick+0x54>
 800eb88:	d0a6d717 	ldw	r2,-25764(gp)
 800eb8c:	1000021e 	bne	r2,zero,800eb98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800eb90:	e0bffd17 	ldw	r2,-12(fp)
 800eb94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800eb98:	e0bffd17 	ldw	r2,-12(fp)
 800eb9c:	10800217 	ldw	r2,8(r2)
 800eba0:	d0e6d717 	ldw	r3,-25764(gp)
 800eba4:	18801d36 	bltu	r3,r2,800ec1c <alt_tick+0xd8>
 800eba8:	e0bffd17 	ldw	r2,-12(fp)
 800ebac:	10800403 	ldbu	r2,16(r2)
 800ebb0:	10803fcc 	andi	r2,r2,255
 800ebb4:	1000191e 	bne	r2,zero,800ec1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800ebb8:	e0bffd17 	ldw	r2,-12(fp)
 800ebbc:	10800317 	ldw	r2,12(r2)
 800ebc0:	e0fffd17 	ldw	r3,-12(fp)
 800ebc4:	18c00517 	ldw	r3,20(r3)
 800ebc8:	1809883a 	mov	r4,r3
 800ebcc:	103ee83a 	callr	r2
 800ebd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800ebd4:	e0bfff17 	ldw	r2,-4(fp)
 800ebd8:	1000031e 	bne	r2,zero,800ebe8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800ebdc:	e13ffd17 	ldw	r4,-12(fp)
 800ebe0:	800eaac0 	call	800eaac <alt_alarm_stop>
 800ebe4:	00000d06 	br	800ec1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800ebe8:	e0bffd17 	ldw	r2,-12(fp)
 800ebec:	10c00217 	ldw	r3,8(r2)
 800ebf0:	e0bfff17 	ldw	r2,-4(fp)
 800ebf4:	1887883a 	add	r3,r3,r2
 800ebf8:	e0bffd17 	ldw	r2,-12(fp)
 800ebfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800ec00:	e0bffd17 	ldw	r2,-12(fp)
 800ec04:	10c00217 	ldw	r3,8(r2)
 800ec08:	d0a6d717 	ldw	r2,-25764(gp)
 800ec0c:	1880032e 	bgeu	r3,r2,800ec1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800ec10:	e0bffd17 	ldw	r2,-12(fp)
 800ec14:	00c00044 	movi	r3,1
 800ec18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800ec1c:	e0bffe17 	ldw	r2,-8(fp)
 800ec20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ec24:	e0fffd17 	ldw	r3,-12(fp)
 800ec28:	d0a00e04 	addi	r2,gp,-32712
 800ec2c:	18bfcf1e 	bne	r3,r2,800eb6c <__alt_data_end+0xfc00eb6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800ec30:	0001883a 	nop
}
 800ec34:	e037883a 	mov	sp,fp
 800ec38:	dfc00117 	ldw	ra,4(sp)
 800ec3c:	df000017 	ldw	fp,0(sp)
 800ec40:	dec00204 	addi	sp,sp,8
 800ec44:	f800283a 	ret

0800ec48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800ec48:	deffff04 	addi	sp,sp,-4
 800ec4c:	df000015 	stw	fp,0(sp)
 800ec50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800ec54:	000170fa 	wrctl	ienable,zero
}
 800ec58:	e037883a 	mov	sp,fp
 800ec5c:	df000017 	ldw	fp,0(sp)
 800ec60:	dec00104 	addi	sp,sp,4
 800ec64:	f800283a 	ret

0800ec68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800ec68:	defffa04 	addi	sp,sp,-24
 800ec6c:	dfc00515 	stw	ra,20(sp)
 800ec70:	df000415 	stw	fp,16(sp)
 800ec74:	df000404 	addi	fp,sp,16
 800ec78:	e13ffe15 	stw	r4,-8(fp)
 800ec7c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800ec80:	e0bfff17 	ldw	r2,-4(fp)
 800ec84:	10800017 	ldw	r2,0(r2)
 800ec88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800ec8c:	e13ffe17 	ldw	r4,-8(fp)
 800ec90:	8006b400 	call	8006b40 <strlen>
 800ec94:	10800044 	addi	r2,r2,1
 800ec98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ec9c:	00000d06 	br	800ecd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800eca0:	e0bffc17 	ldw	r2,-16(fp)
 800eca4:	10c00217 	ldw	r3,8(r2)
 800eca8:	e0bffd17 	ldw	r2,-12(fp)
 800ecac:	1809883a 	mov	r4,r3
 800ecb0:	e17ffe17 	ldw	r5,-8(fp)
 800ecb4:	100d883a 	mov	r6,r2
 800ecb8:	800efc80 	call	800efc8 <memcmp>
 800ecbc:	1000021e 	bne	r2,zero,800ecc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800ecc0:	e0bffc17 	ldw	r2,-16(fp)
 800ecc4:	00000706 	br	800ece4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800ecc8:	e0bffc17 	ldw	r2,-16(fp)
 800eccc:	10800017 	ldw	r2,0(r2)
 800ecd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ecd4:	e0fffc17 	ldw	r3,-16(fp)
 800ecd8:	e0bfff17 	ldw	r2,-4(fp)
 800ecdc:	18bff01e 	bne	r3,r2,800eca0 <__alt_data_end+0xfc00eca0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800ece0:	0005883a 	mov	r2,zero
}
 800ece4:	e037883a 	mov	sp,fp
 800ece8:	dfc00117 	ldw	ra,4(sp)
 800ecec:	df000017 	ldw	fp,0(sp)
 800ecf0:	dec00204 	addi	sp,sp,8
 800ecf4:	f800283a 	ret

0800ecf8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800ecf8:	defffb04 	addi	sp,sp,-20
 800ecfc:	dfc00415 	stw	ra,16(sp)
 800ed00:	df000315 	stw	fp,12(sp)
 800ed04:	df000304 	addi	fp,sp,12
 800ed08:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800ed0c:	00820074 	movhi	r2,2049
 800ed10:	10844804 	addi	r2,r2,4384
 800ed14:	10800017 	ldw	r2,0(r2)
 800ed18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ed1c:	00003106 	br	800ede4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800ed20:	e0bffd17 	ldw	r2,-12(fp)
 800ed24:	10800217 	ldw	r2,8(r2)
 800ed28:	1009883a 	mov	r4,r2
 800ed2c:	8006b400 	call	8006b40 <strlen>
 800ed30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800ed34:	e0bffd17 	ldw	r2,-12(fp)
 800ed38:	10c00217 	ldw	r3,8(r2)
 800ed3c:	e0bffe17 	ldw	r2,-8(fp)
 800ed40:	10bfffc4 	addi	r2,r2,-1
 800ed44:	1885883a 	add	r2,r3,r2
 800ed48:	10800003 	ldbu	r2,0(r2)
 800ed4c:	10803fcc 	andi	r2,r2,255
 800ed50:	1080201c 	xori	r2,r2,128
 800ed54:	10bfe004 	addi	r2,r2,-128
 800ed58:	10800bd8 	cmpnei	r2,r2,47
 800ed5c:	1000031e 	bne	r2,zero,800ed6c <alt_find_file+0x74>
    {
      len -= 1;
 800ed60:	e0bffe17 	ldw	r2,-8(fp)
 800ed64:	10bfffc4 	addi	r2,r2,-1
 800ed68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ed6c:	e0bffe17 	ldw	r2,-8(fp)
 800ed70:	e0ffff17 	ldw	r3,-4(fp)
 800ed74:	1885883a 	add	r2,r3,r2
 800ed78:	10800003 	ldbu	r2,0(r2)
 800ed7c:	10803fcc 	andi	r2,r2,255
 800ed80:	1080201c 	xori	r2,r2,128
 800ed84:	10bfe004 	addi	r2,r2,-128
 800ed88:	10800be0 	cmpeqi	r2,r2,47
 800ed8c:	1000081e 	bne	r2,zero,800edb0 <alt_find_file+0xb8>
 800ed90:	e0bffe17 	ldw	r2,-8(fp)
 800ed94:	e0ffff17 	ldw	r3,-4(fp)
 800ed98:	1885883a 	add	r2,r3,r2
 800ed9c:	10800003 	ldbu	r2,0(r2)
 800eda0:	10803fcc 	andi	r2,r2,255
 800eda4:	1080201c 	xori	r2,r2,128
 800eda8:	10bfe004 	addi	r2,r2,-128
 800edac:	10000a1e 	bne	r2,zero,800edd8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800edb0:	e0bffd17 	ldw	r2,-12(fp)
 800edb4:	10c00217 	ldw	r3,8(r2)
 800edb8:	e0bffe17 	ldw	r2,-8(fp)
 800edbc:	1809883a 	mov	r4,r3
 800edc0:	e17fff17 	ldw	r5,-4(fp)
 800edc4:	100d883a 	mov	r6,r2
 800edc8:	800efc80 	call	800efc8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800edcc:	1000021e 	bne	r2,zero,800edd8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800edd0:	e0bffd17 	ldw	r2,-12(fp)
 800edd4:	00000806 	br	800edf8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800edd8:	e0bffd17 	ldw	r2,-12(fp)
 800eddc:	10800017 	ldw	r2,0(r2)
 800ede0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ede4:	e0fffd17 	ldw	r3,-12(fp)
 800ede8:	00820074 	movhi	r2,2049
 800edec:	10844804 	addi	r2,r2,4384
 800edf0:	18bfcb1e 	bne	r3,r2,800ed20 <__alt_data_end+0xfc00ed20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800edf4:	0005883a 	mov	r2,zero
}
 800edf8:	e037883a 	mov	sp,fp
 800edfc:	dfc00117 	ldw	ra,4(sp)
 800ee00:	df000017 	ldw	fp,0(sp)
 800ee04:	dec00204 	addi	sp,sp,8
 800ee08:	f800283a 	ret

0800ee0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ee0c:	defffa04 	addi	sp,sp,-24
 800ee10:	dfc00515 	stw	ra,20(sp)
 800ee14:	df000415 	stw	fp,16(sp)
 800ee18:	dc000315 	stw	r16,12(sp)
 800ee1c:	df000404 	addi	fp,sp,16
 800ee20:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800ee24:	00bffa04 	movi	r2,-24
 800ee28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ee2c:	e03ffc15 	stw	zero,-16(fp)
 800ee30:	00002106 	br	800eeb8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800ee34:	04020074 	movhi	r16,2049
 800ee38:	843fca04 	addi	r16,r16,-216
 800ee3c:	e0bffc17 	ldw	r2,-16(fp)
 800ee40:	1009883a 	mov	r4,r2
 800ee44:	01400304 	movi	r5,12
 800ee48:	800a3a80 	call	800a3a8 <__mulsi3>
 800ee4c:	8085883a 	add	r2,r16,r2
 800ee50:	10800017 	ldw	r2,0(r2)
 800ee54:	1000151e 	bne	r2,zero,800eeac <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800ee58:	04020074 	movhi	r16,2049
 800ee5c:	843fca04 	addi	r16,r16,-216
 800ee60:	e0bffc17 	ldw	r2,-16(fp)
 800ee64:	1009883a 	mov	r4,r2
 800ee68:	01400304 	movi	r5,12
 800ee6c:	800a3a80 	call	800a3a8 <__mulsi3>
 800ee70:	8085883a 	add	r2,r16,r2
 800ee74:	e0fffe17 	ldw	r3,-8(fp)
 800ee78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800ee7c:	00820074 	movhi	r2,2049
 800ee80:	10844c04 	addi	r2,r2,4400
 800ee84:	10c00017 	ldw	r3,0(r2)
 800ee88:	e0bffc17 	ldw	r2,-16(fp)
 800ee8c:	1880040e 	bge	r3,r2,800eea0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800ee90:	00820074 	movhi	r2,2049
 800ee94:	10844c04 	addi	r2,r2,4400
 800ee98:	e0fffc17 	ldw	r3,-16(fp)
 800ee9c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800eea0:	e0bffc17 	ldw	r2,-16(fp)
 800eea4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800eea8:	00000606 	br	800eec4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800eeac:	e0bffc17 	ldw	r2,-16(fp)
 800eeb0:	10800044 	addi	r2,r2,1
 800eeb4:	e0bffc15 	stw	r2,-16(fp)
 800eeb8:	e0bffc17 	ldw	r2,-16(fp)
 800eebc:	10800810 	cmplti	r2,r2,32
 800eec0:	103fdc1e 	bne	r2,zero,800ee34 <__alt_data_end+0xfc00ee34>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800eec4:	e0bffd17 	ldw	r2,-12(fp)
}
 800eec8:	e6ffff04 	addi	sp,fp,-4
 800eecc:	dfc00217 	ldw	ra,8(sp)
 800eed0:	df000117 	ldw	fp,4(sp)
 800eed4:	dc000017 	ldw	r16,0(sp)
 800eed8:	dec00304 	addi	sp,sp,12
 800eedc:	f800283a 	ret

0800eee0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800eee0:	defffe04 	addi	sp,sp,-8
 800eee4:	df000115 	stw	fp,4(sp)
 800eee8:	df000104 	addi	fp,sp,4
 800eeec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800eef0:	e0bfff17 	ldw	r2,-4(fp)
 800eef4:	10bffe84 	addi	r2,r2,-6
 800eef8:	10c00428 	cmpgeui	r3,r2,16
 800eefc:	18001a1e 	bne	r3,zero,800ef68 <alt_exception_cause_generated_bad_addr+0x88>
 800ef00:	100690ba 	slli	r3,r2,2
 800ef04:	00820074 	movhi	r2,2049
 800ef08:	10bbc604 	addi	r2,r2,-4328
 800ef0c:	1885883a 	add	r2,r3,r2
 800ef10:	10800017 	ldw	r2,0(r2)
 800ef14:	1000683a 	jmp	r2
 800ef18:	0800ef58 	cmpnei	zero,at,957
 800ef1c:	0800ef58 	cmpnei	zero,at,957
 800ef20:	0800ef68 	cmpgeui	zero,at,957
 800ef24:	0800ef68 	cmpgeui	zero,at,957
 800ef28:	0800ef68 	cmpgeui	zero,at,957
 800ef2c:	0800ef58 	cmpnei	zero,at,957
 800ef30:	0800ef60 	cmpeqi	zero,at,957
 800ef34:	0800ef68 	cmpgeui	zero,at,957
 800ef38:	0800ef58 	cmpnei	zero,at,957
 800ef3c:	0800ef58 	cmpnei	zero,at,957
 800ef40:	0800ef68 	cmpgeui	zero,at,957
 800ef44:	0800ef58 	cmpnei	zero,at,957
 800ef48:	0800ef60 	cmpeqi	zero,at,957
 800ef4c:	0800ef68 	cmpgeui	zero,at,957
 800ef50:	0800ef68 	cmpgeui	zero,at,957
 800ef54:	0800ef58 	cmpnei	zero,at,957
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800ef58:	00800044 	movi	r2,1
 800ef5c:	00000306 	br	800ef6c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800ef60:	0005883a 	mov	r2,zero
 800ef64:	00000106 	br	800ef6c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800ef68:	0005883a 	mov	r2,zero
  }
}
 800ef6c:	e037883a 	mov	sp,fp
 800ef70:	df000017 	ldw	fp,0(sp)
 800ef74:	dec00104 	addi	sp,sp,4
 800ef78:	f800283a 	ret

0800ef7c <atexit>:
 800ef7c:	200b883a 	mov	r5,r4
 800ef80:	000d883a 	mov	r6,zero
 800ef84:	0009883a 	mov	r4,zero
 800ef88:	000f883a 	mov	r7,zero
 800ef8c:	800f0441 	jmpi	800f044 <__register_exitproc>

0800ef90 <exit>:
 800ef90:	defffe04 	addi	sp,sp,-8
 800ef94:	000b883a 	mov	r5,zero
 800ef98:	dc000015 	stw	r16,0(sp)
 800ef9c:	dfc00115 	stw	ra,4(sp)
 800efa0:	2021883a 	mov	r16,r4
 800efa4:	800f1580 	call	800f158 <__call_exitprocs>
 800efa8:	00820074 	movhi	r2,2049
 800efac:	10844204 	addi	r2,r2,4360
 800efb0:	11000017 	ldw	r4,0(r2)
 800efb4:	20800f17 	ldw	r2,60(r4)
 800efb8:	10000126 	beq	r2,zero,800efc0 <exit+0x30>
 800efbc:	103ee83a 	callr	r2
 800efc0:	8009883a 	mov	r4,r16
 800efc4:	800f2ec0 	call	800f2ec <_exit>

0800efc8 <memcmp>:
 800efc8:	01c000c4 	movi	r7,3
 800efcc:	3980192e 	bgeu	r7,r6,800f034 <memcmp+0x6c>
 800efd0:	2144b03a 	or	r2,r4,r5
 800efd4:	11c4703a 	and	r2,r2,r7
 800efd8:	10000f26 	beq	r2,zero,800f018 <memcmp+0x50>
 800efdc:	20800003 	ldbu	r2,0(r4)
 800efe0:	28c00003 	ldbu	r3,0(r5)
 800efe4:	10c0151e 	bne	r2,r3,800f03c <memcmp+0x74>
 800efe8:	31bfff84 	addi	r6,r6,-2
 800efec:	01ffffc4 	movi	r7,-1
 800eff0:	00000406 	br	800f004 <memcmp+0x3c>
 800eff4:	20800003 	ldbu	r2,0(r4)
 800eff8:	28c00003 	ldbu	r3,0(r5)
 800effc:	31bfffc4 	addi	r6,r6,-1
 800f000:	10c00e1e 	bne	r2,r3,800f03c <memcmp+0x74>
 800f004:	21000044 	addi	r4,r4,1
 800f008:	29400044 	addi	r5,r5,1
 800f00c:	31fff91e 	bne	r6,r7,800eff4 <__alt_data_end+0xfc00eff4>
 800f010:	0005883a 	mov	r2,zero
 800f014:	f800283a 	ret
 800f018:	20c00017 	ldw	r3,0(r4)
 800f01c:	28800017 	ldw	r2,0(r5)
 800f020:	1880041e 	bne	r3,r2,800f034 <memcmp+0x6c>
 800f024:	31bfff04 	addi	r6,r6,-4
 800f028:	21000104 	addi	r4,r4,4
 800f02c:	29400104 	addi	r5,r5,4
 800f030:	39bff936 	bltu	r7,r6,800f018 <__alt_data_end+0xfc00f018>
 800f034:	303fe91e 	bne	r6,zero,800efdc <__alt_data_end+0xfc00efdc>
 800f038:	003ff506 	br	800f010 <__alt_data_end+0xfc00f010>
 800f03c:	10c5c83a 	sub	r2,r2,r3
 800f040:	f800283a 	ret

0800f044 <__register_exitproc>:
 800f044:	00820074 	movhi	r2,2049
 800f048:	defffa04 	addi	sp,sp,-24
 800f04c:	10844204 	addi	r2,r2,4360
 800f050:	dc000315 	stw	r16,12(sp)
 800f054:	14000017 	ldw	r16,0(r2)
 800f058:	dc400415 	stw	r17,16(sp)
 800f05c:	dfc00515 	stw	ra,20(sp)
 800f060:	80805217 	ldw	r2,328(r16)
 800f064:	2023883a 	mov	r17,r4
 800f068:	10003626 	beq	r2,zero,800f144 <__register_exitproc+0x100>
 800f06c:	10c00117 	ldw	r3,4(r2)
 800f070:	010007c4 	movi	r4,31
 800f074:	20c00e16 	blt	r4,r3,800f0b0 <__register_exitproc+0x6c>
 800f078:	1a400044 	addi	r9,r3,1
 800f07c:	8800211e 	bne	r17,zero,800f104 <__register_exitproc+0xc0>
 800f080:	18c00084 	addi	r3,r3,2
 800f084:	18c7883a 	add	r3,r3,r3
 800f088:	18c7883a 	add	r3,r3,r3
 800f08c:	12400115 	stw	r9,4(r2)
 800f090:	10c7883a 	add	r3,r2,r3
 800f094:	19400015 	stw	r5,0(r3)
 800f098:	0005883a 	mov	r2,zero
 800f09c:	dfc00517 	ldw	ra,20(sp)
 800f0a0:	dc400417 	ldw	r17,16(sp)
 800f0a4:	dc000317 	ldw	r16,12(sp)
 800f0a8:	dec00604 	addi	sp,sp,24
 800f0ac:	f800283a 	ret
 800f0b0:	00800034 	movhi	r2,0
 800f0b4:	10800004 	addi	r2,r2,0
 800f0b8:	10002526 	beq	r2,zero,800f150 <__register_exitproc+0x10c>
 800f0bc:	01006404 	movi	r4,400
 800f0c0:	d9400015 	stw	r5,0(sp)
 800f0c4:	d9800115 	stw	r6,4(sp)
 800f0c8:	d9c00215 	stw	r7,8(sp)
 800f0cc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800f0d0:	d9400017 	ldw	r5,0(sp)
 800f0d4:	d9800117 	ldw	r6,4(sp)
 800f0d8:	d9c00217 	ldw	r7,8(sp)
 800f0dc:	10001c26 	beq	r2,zero,800f150 <__register_exitproc+0x10c>
 800f0e0:	80c05217 	ldw	r3,328(r16)
 800f0e4:	10000115 	stw	zero,4(r2)
 800f0e8:	02400044 	movi	r9,1
 800f0ec:	10c00015 	stw	r3,0(r2)
 800f0f0:	80805215 	stw	r2,328(r16)
 800f0f4:	10006215 	stw	zero,392(r2)
 800f0f8:	10006315 	stw	zero,396(r2)
 800f0fc:	0007883a 	mov	r3,zero
 800f100:	883fdf26 	beq	r17,zero,800f080 <__alt_data_end+0xfc00f080>
 800f104:	18d1883a 	add	r8,r3,r3
 800f108:	4211883a 	add	r8,r8,r8
 800f10c:	1211883a 	add	r8,r2,r8
 800f110:	41802215 	stw	r6,136(r8)
 800f114:	01000044 	movi	r4,1
 800f118:	11806217 	ldw	r6,392(r2)
 800f11c:	20c8983a 	sll	r4,r4,r3
 800f120:	310cb03a 	or	r6,r6,r4
 800f124:	11806215 	stw	r6,392(r2)
 800f128:	41c04215 	stw	r7,264(r8)
 800f12c:	01800084 	movi	r6,2
 800f130:	89bfd31e 	bne	r17,r6,800f080 <__alt_data_end+0xfc00f080>
 800f134:	11806317 	ldw	r6,396(r2)
 800f138:	3108b03a 	or	r4,r6,r4
 800f13c:	11006315 	stw	r4,396(r2)
 800f140:	003fcf06 	br	800f080 <__alt_data_end+0xfc00f080>
 800f144:	80805304 	addi	r2,r16,332
 800f148:	80805215 	stw	r2,328(r16)
 800f14c:	003fc706 	br	800f06c <__alt_data_end+0xfc00f06c>
 800f150:	00bfffc4 	movi	r2,-1
 800f154:	003fd106 	br	800f09c <__alt_data_end+0xfc00f09c>

0800f158 <__call_exitprocs>:
 800f158:	00820074 	movhi	r2,2049
 800f15c:	10844204 	addi	r2,r2,4360
 800f160:	10800017 	ldw	r2,0(r2)
 800f164:	defff404 	addi	sp,sp,-48
 800f168:	dd800815 	stw	r22,32(sp)
 800f16c:	d8800015 	stw	r2,0(sp)
 800f170:	10805204 	addi	r2,r2,328
 800f174:	dd000615 	stw	r20,24(sp)
 800f178:	dc800415 	stw	r18,16(sp)
 800f17c:	dfc00b15 	stw	ra,44(sp)
 800f180:	df000a15 	stw	fp,40(sp)
 800f184:	ddc00915 	stw	r23,36(sp)
 800f188:	dd400715 	stw	r21,28(sp)
 800f18c:	dcc00515 	stw	r19,20(sp)
 800f190:	dc400315 	stw	r17,12(sp)
 800f194:	dc000215 	stw	r16,8(sp)
 800f198:	2025883a 	mov	r18,r4
 800f19c:	2829883a 	mov	r20,r5
 800f1a0:	d8800115 	stw	r2,4(sp)
 800f1a4:	05bfffc4 	movi	r22,-1
 800f1a8:	d8800017 	ldw	r2,0(sp)
 800f1ac:	14c05217 	ldw	r19,328(r2)
 800f1b0:	98001d26 	beq	r19,zero,800f228 <__call_exitprocs+0xd0>
 800f1b4:	dd400117 	ldw	r21,4(sp)
 800f1b8:	98800117 	ldw	r2,4(r19)
 800f1bc:	173fffc4 	addi	fp,r2,-1
 800f1c0:	e0000d16 	blt	fp,zero,800f1f8 <__call_exitprocs+0xa0>
 800f1c4:	14000044 	addi	r16,r2,1
 800f1c8:	8421883a 	add	r16,r16,r16
 800f1cc:	8421883a 	add	r16,r16,r16
 800f1d0:	84402004 	addi	r17,r16,128
 800f1d4:	9c63883a 	add	r17,r19,r17
 800f1d8:	9c21883a 	add	r16,r19,r16
 800f1dc:	a0001e26 	beq	r20,zero,800f258 <__call_exitprocs+0x100>
 800f1e0:	80804017 	ldw	r2,256(r16)
 800f1e4:	15001c26 	beq	r2,r20,800f258 <__call_exitprocs+0x100>
 800f1e8:	e73fffc4 	addi	fp,fp,-1
 800f1ec:	843fff04 	addi	r16,r16,-4
 800f1f0:	8c7fff04 	addi	r17,r17,-4
 800f1f4:	e5bff91e 	bne	fp,r22,800f1dc <__alt_data_end+0xfc00f1dc>
 800f1f8:	00800034 	movhi	r2,0
 800f1fc:	10800004 	addi	r2,r2,0
 800f200:	10000926 	beq	r2,zero,800f228 <__call_exitprocs+0xd0>
 800f204:	98800117 	ldw	r2,4(r19)
 800f208:	1000311e 	bne	r2,zero,800f2d0 <__call_exitprocs+0x178>
 800f20c:	98800017 	ldw	r2,0(r19)
 800f210:	10003426 	beq	r2,zero,800f2e4 <__call_exitprocs+0x18c>
 800f214:	9809883a 	mov	r4,r19
 800f218:	a8800015 	stw	r2,0(r21)
 800f21c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800f220:	acc00017 	ldw	r19,0(r21)
 800f224:	983fe41e 	bne	r19,zero,800f1b8 <__alt_data_end+0xfc00f1b8>
 800f228:	dfc00b17 	ldw	ra,44(sp)
 800f22c:	df000a17 	ldw	fp,40(sp)
 800f230:	ddc00917 	ldw	r23,36(sp)
 800f234:	dd800817 	ldw	r22,32(sp)
 800f238:	dd400717 	ldw	r21,28(sp)
 800f23c:	dd000617 	ldw	r20,24(sp)
 800f240:	dcc00517 	ldw	r19,20(sp)
 800f244:	dc800417 	ldw	r18,16(sp)
 800f248:	dc400317 	ldw	r17,12(sp)
 800f24c:	dc000217 	ldw	r16,8(sp)
 800f250:	dec00c04 	addi	sp,sp,48
 800f254:	f800283a 	ret
 800f258:	98800117 	ldw	r2,4(r19)
 800f25c:	80c00017 	ldw	r3,0(r16)
 800f260:	10bfffc4 	addi	r2,r2,-1
 800f264:	17001526 	beq	r2,fp,800f2bc <__call_exitprocs+0x164>
 800f268:	80000015 	stw	zero,0(r16)
 800f26c:	183fde26 	beq	r3,zero,800f1e8 <__alt_data_end+0xfc00f1e8>
 800f270:	00800044 	movi	r2,1
 800f274:	1708983a 	sll	r4,r2,fp
 800f278:	98806217 	ldw	r2,392(r19)
 800f27c:	9dc00117 	ldw	r23,4(r19)
 800f280:	2084703a 	and	r2,r4,r2
 800f284:	1000061e 	bne	r2,zero,800f2a0 <__call_exitprocs+0x148>
 800f288:	183ee83a 	callr	r3
 800f28c:	98800117 	ldw	r2,4(r19)
 800f290:	15ffc51e 	bne	r2,r23,800f1a8 <__alt_data_end+0xfc00f1a8>
 800f294:	a8800017 	ldw	r2,0(r21)
 800f298:	14ffd326 	beq	r2,r19,800f1e8 <__alt_data_end+0xfc00f1e8>
 800f29c:	003fc206 	br	800f1a8 <__alt_data_end+0xfc00f1a8>
 800f2a0:	98806317 	ldw	r2,396(r19)
 800f2a4:	2084703a 	and	r2,r4,r2
 800f2a8:	1000061e 	bne	r2,zero,800f2c4 <__call_exitprocs+0x16c>
 800f2ac:	89400017 	ldw	r5,0(r17)
 800f2b0:	9009883a 	mov	r4,r18
 800f2b4:	183ee83a 	callr	r3
 800f2b8:	003ff406 	br	800f28c <__alt_data_end+0xfc00f28c>
 800f2bc:	9f000115 	stw	fp,4(r19)
 800f2c0:	003fea06 	br	800f26c <__alt_data_end+0xfc00f26c>
 800f2c4:	89000017 	ldw	r4,0(r17)
 800f2c8:	183ee83a 	callr	r3
 800f2cc:	003fef06 	br	800f28c <__alt_data_end+0xfc00f28c>
 800f2d0:	98800017 	ldw	r2,0(r19)
 800f2d4:	982b883a 	mov	r21,r19
 800f2d8:	1027883a 	mov	r19,r2
 800f2dc:	983fb61e 	bne	r19,zero,800f1b8 <__alt_data_end+0xfc00f1b8>
 800f2e0:	003fd106 	br	800f228 <__alt_data_end+0xfc00f228>
 800f2e4:	0005883a 	mov	r2,zero
 800f2e8:	003ffa06 	br	800f2d4 <__alt_data_end+0xfc00f2d4>

0800f2ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f2ec:	defffd04 	addi	sp,sp,-12
 800f2f0:	df000215 	stw	fp,8(sp)
 800f2f4:	df000204 	addi	fp,sp,8
 800f2f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f2fc:	0001883a 	nop
 800f300:	e0bfff17 	ldw	r2,-4(fp)
 800f304:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f308:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f30c:	10000226 	beq	r2,zero,800f318 <_exit+0x2c>
    ALT_SIM_FAIL();
 800f310:	002af070 	cmpltui	zero,zero,43969
 800f314:	00000106 	br	800f31c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800f318:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f31c:	003fff06 	br	800f31c <__alt_data_end+0xfc00f31c>
