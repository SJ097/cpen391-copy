
wifi_test1.elf:     file format elf32-littlenios2
wifi_test1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000112fc memsz 0x000112fc flags r-x
    LOAD off    0x0001231c vaddr 0x0801131c paddr 0x08012ef8 align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags rw-
    LOAD off    0x00014ad4 vaddr 0x08014ad4 paddr 0x08014ad4 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d88  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d8  08010f44  08010f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bdc  0801131c  08012ef8  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08014ad4  08014ad4  00014ad4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08014c30  08014c30  00013ef8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013ef8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb0  00000000  00000000  00013f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002afaa  00000000  00000000  00014dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ab91  00000000  00000000  0003fd7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb62  00000000  00000000  0004a90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026e4  00000000  00000000  00057470  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a55  00000000  00000000  00059b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b34  00000000  00000000  0005d5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000750e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013a0  00000000  00000000  000750f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079c47  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00079c4a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079c56  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079c57  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00079c58  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00079c63  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00079c6e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00079c79  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  00079c84  2**0
                  CONTENTS, READONLY
 26 .jdi          0000437f  00000000  00000000  00079ca8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ede8  00000000  00000000  0007e027  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08010f44 l    d  .rodata	00000000 .rodata
0801131c l    d  .rwdata	00000000 .rwdata
08014ad4 l    d  .bss	00000000 .bss
08014c30 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../wifi_test1_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080006bc l     F .text	00000008 __fp_lock
080006c4 l     F .text	00000008 __fp_unlock
080006d8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0801131c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
080026c8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011042 l     O .rodata	00000010 zeroes.4181
08011052 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
08004dbc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
08011b68 l     O .rwdata	00000020 lc_ctype_charset
08011b48 l     O .rwdata	00000020 lc_message_charset
08011b88 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08011080 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008778 l     F .text	000000fc __sprint_r.part.0
080111b4 l     O .rodata	00000010 blanks.4125
080111a4 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800af54 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d8a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d9cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d9f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800db00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800dbfc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800dce0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0800dec4 l     F .text	00000050 alt_get_errno
0800df14 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0800e168 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08012ee8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0800e3ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0800e4c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800e614 l     F .text	00000038 alt_dev_reg
08011d68 l     O .rwdata	00001060 jtag_uart_0
08012dc8 l     O .rwdata	000000c4 uart_0
08012e8c l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e938 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800eb3c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800f15c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0800f410 l     F .text	00000098 altera_avalon_uart_irq
0800f4a8 l     F .text	000000e0 altera_avalon_uart_rxirq
0800f588 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0800f720 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0800f94c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801017c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801088c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08007eec g     F .text	00000074 _mprec_log10
08007fd8 g     F .text	0000008c __any_on
08006c48 g     F .text	00000054 _isatty_r
0801108c g     O .rodata	00000028 __mprec_tinytens
0800de0c g     F .text	00000078 alt_main
080025fc g     F .text	000000b8 _puts_r
08014b30 g     O .bss	00000100 alt_irq
08006d7c g     F .text	0000005c _lseek_r
08012ef8 g       *ABS*	00000000 __flash_rwdata_start
0800fbbc g     F .text	0000003c alt_up_character_lcd_send_cmd
0800670c g     F .text	00000098 __sflags
0800c2c4 g     F .text	00000084 .hidden __eqdf2
08014c30 g       *ABS*	00000000 __alt_heap_start
080025c0 g     F .text	0000003c printf
0800a0f8 g     F .text	0000009c _wcrtomb_r
080029b8 g     F .text	0000005c __sseek
08000a20 g     F .text	00000010 __sinit
08009f88 g     F .text	00000154 __swbuf_r
08006c9c g     F .text	0000007c _setlocale_r
08000878 g     F .text	00000078 __sfmoreglue
0800dea4 g     F .text	00000020 __malloc_unlock
08006ec0 g     F .text	0000015c memmove
08000a08 g     F .text	00000018 _cleanup
0800701c g     F .text	000000a8 _Balloc
0800c348 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800fb48 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000000c __reset
0800e43c g     F .text	00000088 times
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001698 g     F .text	00000058 _fstat_r
08014ad4 g     O .bss	00000004 errno
08002934 g     F .text	00000008 __seofread
08014af4 g     O .bss	00000004 alt_argv
0801aeb8 g       *ABS*	00000000 _gp
08011be8 g     O .rwdata	00000180 alt_fd_list
08010328 g     F .text	00000090 alt_find_dev
080022dc g     F .text	00000138 memcpy
08002ab4 g     F .text	00000008 _times_r
0800fd58 g     F .text	00000050 alt_up_character_lcd_write_fd
080006cc g     F .text	0000000c _cleanup_r
0800d6cc g     F .text	000000d0 .hidden __floatsidf
0801096c g     F .text	00000078 alt_io_redirect
0800c428 g     F .text	000000e0 .hidden __ltdf2
08010f44 g       *ABS*	00000000 __DTOR_END__
080026b4 g     F .text	00000014 puts
08008660 g     F .text	00000074 __fpclassifyd
08007e48 g     F .text	000000a4 __ratio
08009cb0 g     F .text	00000024 __vfiprintf_internal
0800ed38 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002594 g     F .text	0000002c _printf_r
0800b070 g     F .text	00000008 .hidden __udivsi3
0800db50 g     F .text	000000ac isatty
080110dc g     O .rodata	000000c8 __mprec_tens
08006d18 g     F .text	0000000c __locale_charset
08014ae0 g     O .bss	00000004 __malloc_top_pad
08012ec8 g     O .rwdata	00000004 __mb_cur_max
08006d48 g     F .text	0000000c _localeconv_r
08007444 g     F .text	0000003c __i2b
080067a4 g     F .text	000004a4 __sfvwrite_r
0800288c g     F .text	00000054 _sbrk_r
08008064 g     F .text	0000005c _read_r
08012ee0 g     O .rwdata	00000004 alt_max_fd
08000350 g     F .text	00000100 _fclose_r
0800068c g     F .text	00000030 fflush
08014adc g     O .bss	00000004 __malloc_max_sbrked_mem
0800b0a8 g     F .text	0000089c .hidden __adddf3
08007bf0 g     F .text	0000011c __b2d
0800a938 g     F .text	0000061c .hidden __umoddi3
0800dd30 g     F .text	000000dc lseek
08012eb8 g     O .rwdata	00000004 _global_impure_ptr
080080c0 g     F .text	000005a0 _realloc_r
08014c30 g       *ABS*	00000000 __bss_end
0801079c g     F .text	000000f0 alt_iic_isr_register
08010a7c g     F .text	00000104 alt_tick
0800a2f8 g     F .text	00000640 .hidden __udivdi3
08009dac g     F .text	00000184 _fputwc_r
080110b4 g     O .rodata	00000028 __mprec_bigtens
08007228 g     F .text	00000104 __s2b
0800d79c g     F .text	000000a4 .hidden __floatunsidf
08007998 g     F .text	00000060 __mcmp
0800f368 g     F .text	000000a8 altera_avalon_uart_init
08000a40 g     F .text	00000018 __fp_lock_all
08010750 g     F .text	0000004c alt_ic_irq_enabled
080109e4 g     F .text	00000098 alt_alarm_stop
08014afc g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08011bc0 g     O .rwdata	00000028 alt_dev_null
0800ffec g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08010160 g     F .text	0000001c alt_dcache_flush_all
0800732c g     F .text	00000068 __hi0bits
0800d644 g     F .text	00000088 .hidden __fixdfsi
08012ef8 g       *ABS*	00000000 __ram_rwdata_end
08012ed8 g     O .rwdata	00000008 alt_dev_list
0800e514 g     F .text	00000100 write
0801131c g       *ABS*	00000000 __ram_rodata_end
0800da48 g     F .text	000000b8 fstat
0800c428 g     F .text	000000e0 .hidden __ledf2
08007710 g     F .text	00000140 __pow5mult
0800888c g     F .text	00001424 ___vfiprintf_internal_r
08014aec g     O .bss	00000004 __nlocale_changed
0800b078 g     F .text	00000008 .hidden __umodsi3
08014c30 g       *ABS*	00000000 end
0800f99c g     F .text	000001ac altera_avalon_uart_write
08001674 g     F .text	00000024 fseek
0800e874 g     F .text	000000c4 altera_avalon_jtag_uart_init
08010f44 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800f1d0 g     F .text	00000088 alt_avalon_timer_sc_init
0800f2b8 g     F .text	00000060 altera_avalon_uart_write_fd
0800d840 g     F .text	00000064 .hidden __clzsi2
0800f318 g     F .text	00000050 altera_avalon_uart_close_fd
0800ef44 g     F .text	00000218 altera_avalon_jtag_uart_write
08000a30 g     F .text	00000004 __sfp_lock_acquire
08006dd8 g     F .text	000000e8 memchr
0800fc6c g     F .text	00000078 alt_up_character_lcd_write
08002abc g     F .text	000020fc ___vfprintf_internal_r
08000f30 g     F .text	000002f0 _free_r
08006d24 g     F .text	00000010 __locale_mb_cur_max
08010d7c g     F .text	00000194 __call_exitprocs
08014ae8 g     O .bss	00000004 __mlocale_changed
08012ec0 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08014b00 g     O .bss	00000004 _alt_tick_rate
08007850 g     F .text	00000148 __lshift
08014b04 g     O .bss	00000004 _alt_nticks
0800e1b8 g     F .text	00000104 read
0800e680 g     F .text	00000090 alt_sys_init
0800fea4 g     F .text	00000088 alt_up_character_lcd_shift_display
08002538 g     F .text	0000005c _open_r
08010c68 g     F .text	00000114 __register_exitproc
08007480 g     F .text	00000290 __multiply
0800ff2c g     F .text	0000008c alt_up_character_lcd_erase_pos
0800ebe4 g     F .text	00000068 altera_avalon_jtag_uart_close
0800b080 g     F .text	00000028 .hidden __mulsi3
0801131c g       *ABS*	00000000 __ram_rwdata_start
08010f44 g       *ABS*	00000000 __ram_rodata_start
08014b08 g     O .bss	00000028 __malloc_current_mallinfo
08007d0c g     F .text	0000013c __d2b
0800e710 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080104cc g     F .text	000000d4 alt_get_fd
08004d68 g     F .text	00000054 _close_r
08010bec g     F .text	0000007c memcmp
0800e7d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08014c30 g       *ABS*	00000000 __alt_stack_base
0800e820 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001860 g     F .text	000000dc _fwrite_r
08004c38 g     F .text	00000130 __swsetup_r
0800b944 g     F .text	00000980 .hidden __divdf3
080008f0 g     F .text	00000118 __sfp
08007f60 g     F .text	00000078 __copybits
08011740 g     O .rwdata	00000408 __malloc_av_
08000a3c g     F .text	00000004 __sinit_lock_release
0800c508 g     F .text	0000086c .hidden __muldf3
080028e0 g     F .text	00000054 __sread
08000dcc g     F .text	00000040 fread
080103b8 g     F .text	00000114 alt_find_file
080101cc g     F .text	000000a4 alt_dev_llist_insert
0800de84 g     F .text	00000020 __malloc_lock
0800e33c g     F .text	000000b0 sbrk
08000464 g     F .text	00000228 _fflush_r
08009cd4 g     F .text	000000d8 _calloc_r
08000b60 g     F .text	0000001c fopen
08014ad4 g       *ABS*	00000000 __bss_start
08002414 g     F .text	00000124 memset
08000238 g     F .text	000000cc main
08014af8 g     O .bss	00000004 alt_envp
08014ad8 g     O .bss	00000004 __malloc_max_total_mem
0800e770 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800a0dc g     F .text	0000001c __swbuf
08000b7c g     F .text	00000250 _fread_r
0800fe1c g     F .text	00000088 alt_up_character_lcd_shift_cursor
08002a14 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08000450 g     F .text	00000014 fclose
08004fe4 g     F .text	00001728 _dtoa_r
08001b34 g     F .text	000007a8 _malloc_r
0800a26c g     F .text	00000030 __ascii_wctomb
08012ee4 g     O .rwdata	00000004 alt_errno
080016f0 g     F .text	000000b8 _fwalk
0800afc0 g     F .text	00000054 .hidden __divsi3
0800fc2c g     F .text	00000040 alt_up_character_lcd_open_dev
08000e0c g     F .text	00000124 _malloc_trim_r
08010f44 g       *ABS*	00000000 __CTOR_END__
0800fbf8 g     F .text	00000034 alt_up_character_lcd_init
080086d4 g     F .text	000000a4 strcmp
08010f44 g       *ABS*	00000000 __flash_rodata_start
08010f44 g       *ABS*	00000000 __DTOR_LIST__
080001f8 g     F .text	00000040 delay
0800c2c4 g     F .text	00000084 .hidden __nedf2
0800e64c g     F .text	00000034 alt_irq_init
0800e2bc g     F .text	00000080 alt_release_fd
0800ffb8 g     F .text	00000034 alt_up_character_lcd_cursor_off
080111c4 g     O .rodata	00000100 .hidden __clz_tab
08014ae4 g     O .bss	00000004 _PathLocale
08010ba0 g     F .text	00000014 atexit
08004bdc g     F .text	0000005c _write_r
08006d54 g     F .text	0000001c setlocale
08012ebc g     O .rwdata	00000004 _impure_ptr
08014af0 g     O .bss	00000004 alt_argc
080102cc g     F .text	0000005c _do_dtors
08006d40 g     F .text	00000008 __locale_cjk_lang
08001220 g     F .text	00000454 _fseek_r
080026e4 g     F .text	000001a8 __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
08007b90 g     F .text	00000060 __ulp
08000a58 g     F .text	00000018 __fp_unlock_all
08012ed0 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006d70 g     F .text	0000000c localeconv
080105bc g     F .text	00000050 alt_ic_isr_register
0800193c g     F .text	00000040 fwrite
08012ef8 g       *ABS*	00000000 _edata
0800f258 g     F .text	00000060 altera_avalon_uart_read_fd
08014c30 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800ec4c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080106ac g     F .text	000000a4 alt_ic_irq_disable
0800293c g     F .text	0000007c __swrite
08012ec4 g     O .rwdata	00000004 __malloc_trim_threshold
08010b80 g     F .text	00000020 altera_nios2_qsys_irq_init
08006d34 g     F .text	0000000c __locale_msgcharset
08010bb4 g     F .text	00000038 exit
080017a8 g     F .text	000000b8 _fwalk_reent
080079f8 g     F .text	00000198 __mdiff
0800b014 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000a34 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800fce4 g     F .text	00000074 alt_up_character_lcd_string
0800f6cc g     F .text	00000054 altera_avalon_uart_close
08000a70 g     F .text	000000f0 _fopen_r
08010f10 g     F .text	00000034 _exit
08010020 g     F .text	00000140 alt_alarm_start
0800197c g     F .text	000001b8 __smakebuf_r
08002a1c g     F .text	00000098 strlen
0800e008 g     F .text	00000160 open
0800c348 g     F .text	000000e0 .hidden __gedf2
08000304 g     F .text	0000004c clock
08012ecc g     O .rwdata	00000004 __wctomb
08008874 g     F .text	00000018 __sprint_r
080105a0 g     F .text	0000001c alt_icache_flush_all
0800fda8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08012eec g     O .rwdata	00000004 alt_priority_mask
0801060c g     F .text	000000a0 alt_ic_irq_enable
08004bb8 g     F .text	00000024 __vfprintf_internal
0800f770 g     F .text	000001dc altera_avalon_uart_read
0800a29c g     F .text	0000005c _wctomb_r
0800cd74 g     F .text	000008d0 .hidden __subdf3
08007394 g     F .text	000000b0 __lo0bits
08012ef0 g     O .rwdata	00000008 alt_alarm_list
08010270 g     F .text	0000005c _do_ctors
0800a194 g     F .text	000000d8 wcrtomb
0800d8f4 g     F .text	000000d8 close
0800dc60 g     F .text	00000080 alt_load
08009f30 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08000a38 g     F .text	00000004 __sinit_lock_acquire
080070ec g     F .text	0000013c __multadd
080070c4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	1092cc04 	addi	r2,r2,19248
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	1092cc04 	addi	r2,r2,19248
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6abae14 	ori	gp,gp,44728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1092b514 	ori	r2,r2,19156

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d30c14 	ori	r3,r3,19504

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800dc600 	call	800dc60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800de0c0 	call	800de0c <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <delay>:
  printf("Finished!\n");
  return 0;
}

void delay(int milliseconds)
{
 80001f8:	defffd04 	addi	sp,sp,-12
 80001fc:	dc400115 	stw	r17,4(sp)
 8000200:	dc000015 	stw	r16,0(sp)
 8000204:	dfc00215 	stw	ra,8(sp)
 8000208:	2021883a 	mov	r16,r4
    long pause;
    clock_t now,then;

    pause = milliseconds*(CLOCKS_PER_SEC/1000);
    now = then = clock();
 800020c:	80003040 	call	8000304 <clock>
 8000210:	1023883a 	mov	r17,r2
    while( (now-then) < pause )
 8000214:	80000326 	beq	r16,zero,8000224 <delay+0x2c>
        now = clock();
 8000218:	80003040 	call	8000304 <clock>
    long pause;
    clock_t now,then;

    pause = milliseconds*(CLOCKS_PER_SEC/1000);
    now = then = clock();
    while( (now-then) < pause )
 800021c:	1445c83a 	sub	r2,r2,r17
 8000220:	143ffd36 	bltu	r2,r16,8000218 <__alt_data_end+0xfc000218>
        now = clock();
}
 8000224:	dfc00217 	ldw	ra,8(sp)
 8000228:	dc400117 	ldw	r17,4(sp)
 800022c:	dc000017 	ldw	r16,0(sp)
 8000230:	dec00304 	addi	sp,sp,12
 8000234:	f800283a 	ret

08000238 <main>:
#include <string.h>
#include <time.h>

int main()
{
  printf("Hello from Nios II!\n");
 8000238:	01020074 	movhi	r4,2049
#include <stdio.h>
#include <string.h>
#include <time.h>

int main()
{
 800023c:	defec904 	addi	sp,sp,-1244
  printf("Hello from Nios II!\n");
 8000240:	2103d104 	addi	r4,r4,3908
#include <stdio.h>
#include <string.h>
#include <time.h>

int main()
{
 8000244:	dfc13615 	stw	ra,1240(sp)
 8000248:	dc013515 	stw	r16,1236(sp)
  printf("Hello from Nios II!\n");
 800024c:	80026b40 	call	80026b4 <puts>
  char *dofile_command = "dofile(\"wifi_db.lua\")\n";
  char *fetch_command = "fetchBooking()\n";
  FILE *f = fopen("/dev/uart_0", "r+");
 8000250:	01020074 	movhi	r4,2049
 8000254:	01420074 	movhi	r5,2049
 8000258:	2103d604 	addi	r4,r4,3928
 800025c:	2943d904 	addi	r5,r5,3940
 8000260:	8000b600 	call	8000b60 <fopen>
 8000264:	1021883a 	mov	r16,r2

  char buffer[1234];

  if(f) {
 8000268:	10002226 	beq	r2,zero,80002f4 <main+0xbc>
	fwrite(dofile_command, strlen(dofile_command), 1, f); // Write a string
 800026c:	01020074 	movhi	r4,2049
 8000270:	01400584 	movi	r5,22
 8000274:	01800044 	movi	r6,1
 8000278:	100f883a 	mov	r7,r2
 800027c:	2103da04 	addi	r4,r4,3944
 8000280:	800193c0 	call	800193c <fwrite>
	//fread(buffer, 10, 1, f);		//random read so I don't get the response to the dofile command
	printf("Sending LUA function command\n");
 8000284:	01020074 	movhi	r4,2049
 8000288:	2103e004 	addi	r4,r4,3968
 800028c:	80026b40 	call	80026b4 <puts>
	fwrite(fetch_command, strlen(fetch_command), 1, f);
 8000290:	01020074 	movhi	r4,2049
 8000294:	2103e804 	addi	r4,r4,4000
 8000298:	014003c4 	movi	r5,15
 800029c:	01800044 	movi	r6,1
 80002a0:	800f883a 	mov	r7,r16
 80002a4:	800193c0 	call	800193c <fwrite>
	fread(buffer, 245, 1, f);
 80002a8:	d809883a 	mov	r4,sp
 80002ac:	01403d44 	movi	r5,245
 80002b0:	01800044 	movi	r6,1
 80002b4:	800f883a 	mov	r7,r16
 80002b8:	8000dcc0 	call	8000dcc <fread>

	printf("Finished execution. String received is \n%s\n", buffer);
 80002bc:	01020074 	movhi	r4,2049
 80002c0:	2103ec04 	addi	r4,r4,4016
 80002c4:	d80b883a 	mov	r5,sp
 80002c8:	80025c00 	call	80025c0 <printf>
	fclose (f);
 80002cc:	8009883a 	mov	r4,r16
 80002d0:	80004500 	call	8000450 <fclose>
  }

  if(!f)
	  printf("File not open\n");

  printf("Finished!\n");
 80002d4:	01020074 	movhi	r4,2049
 80002d8:	2103f704 	addi	r4,r4,4060
 80002dc:	80026b40 	call	80026b4 <puts>
  return 0;
}
 80002e0:	0005883a 	mov	r2,zero
 80002e4:	dfc13617 	ldw	ra,1240(sp)
 80002e8:	dc013517 	ldw	r16,1236(sp)
 80002ec:	dec13704 	addi	sp,sp,1244
 80002f0:	f800283a 	ret
	printf("Finished execution. String received is \n%s\n", buffer);
	fclose (f);
  }

  if(!f)
	  printf("File not open\n");
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	2103fa04 	addi	r4,r4,4072
 80002fc:	80026b40 	call	80026b4 <puts>
 8000300:	003ff406 	br	80002d4 <__alt_data_end+0xfc0002d4>

08000304 <clock>:
 8000304:	00820074 	movhi	r2,2049
 8000308:	108baf04 	addi	r2,r2,11964
 800030c:	11000017 	ldw	r4,0(r2)
 8000310:	defffb04 	addi	sp,sp,-20
 8000314:	d80b883a 	mov	r5,sp
 8000318:	dfc00415 	stw	ra,16(sp)
 800031c:	8002ab40 	call	8002ab4 <_times_r>
 8000320:	00ffffc4 	movi	r3,-1
 8000324:	10c00726 	beq	r2,r3,8000344 <clock+0x40>
 8000328:	d8c00117 	ldw	r3,4(sp)
 800032c:	d8800017 	ldw	r2,0(sp)
 8000330:	1885883a 	add	r2,r3,r2
 8000334:	d8c00217 	ldw	r3,8(sp)
 8000338:	10c7883a 	add	r3,r2,r3
 800033c:	d8800317 	ldw	r2,12(sp)
 8000340:	1885883a 	add	r2,r3,r2
 8000344:	dfc00417 	ldw	ra,16(sp)
 8000348:	dec00504 	addi	sp,sp,20
 800034c:	f800283a 	ret

08000350 <_fclose_r>:
 8000350:	28003226 	beq	r5,zero,800041c <_fclose_r+0xcc>
 8000354:	defffc04 	addi	sp,sp,-16
 8000358:	dc400115 	stw	r17,4(sp)
 800035c:	2023883a 	mov	r17,r4
 8000360:	dc000015 	stw	r16,0(sp)
 8000364:	dfc00315 	stw	ra,12(sp)
 8000368:	dc800215 	stw	r18,8(sp)
 800036c:	2821883a 	mov	r16,r5
 8000370:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8000374:	88000226 	beq	r17,zero,8000380 <_fclose_r+0x30>
 8000378:	88800e17 	ldw	r2,56(r17)
 800037c:	10002926 	beq	r2,zero,8000424 <_fclose_r+0xd4>
 8000380:	8080030f 	ldh	r2,12(r16)
 8000384:	10002226 	beq	r2,zero,8000410 <_fclose_r+0xc0>
 8000388:	8809883a 	mov	r4,r17
 800038c:	800b883a 	mov	r5,r16
 8000390:	80004640 	call	8000464 <_fflush_r>
 8000394:	1025883a 	mov	r18,r2
 8000398:	80800b17 	ldw	r2,44(r16)
 800039c:	10000426 	beq	r2,zero,80003b0 <_fclose_r+0x60>
 80003a0:	81400717 	ldw	r5,28(r16)
 80003a4:	8809883a 	mov	r4,r17
 80003a8:	103ee83a 	callr	r2
 80003ac:	10002616 	blt	r2,zero,8000448 <_fclose_r+0xf8>
 80003b0:	8080030b 	ldhu	r2,12(r16)
 80003b4:	1080200c 	andi	r2,r2,128
 80003b8:	10001f1e 	bne	r2,zero,8000438 <_fclose_r+0xe8>
 80003bc:	81400c17 	ldw	r5,48(r16)
 80003c0:	28000526 	beq	r5,zero,80003d8 <_fclose_r+0x88>
 80003c4:	80801004 	addi	r2,r16,64
 80003c8:	28800226 	beq	r5,r2,80003d4 <_fclose_r+0x84>
 80003cc:	8809883a 	mov	r4,r17
 80003d0:	8000f300 	call	8000f30 <_free_r>
 80003d4:	80000c15 	stw	zero,48(r16)
 80003d8:	81401117 	ldw	r5,68(r16)
 80003dc:	28000326 	beq	r5,zero,80003ec <_fclose_r+0x9c>
 80003e0:	8809883a 	mov	r4,r17
 80003e4:	8000f300 	call	8000f30 <_free_r>
 80003e8:	80001115 	stw	zero,68(r16)
 80003ec:	8000030d 	sth	zero,12(r16)
 80003f0:	8000a340 	call	8000a34 <__sfp_lock_release>
 80003f4:	9005883a 	mov	r2,r18
 80003f8:	dfc00317 	ldw	ra,12(sp)
 80003fc:	dc800217 	ldw	r18,8(sp)
 8000400:	dc400117 	ldw	r17,4(sp)
 8000404:	dc000017 	ldw	r16,0(sp)
 8000408:	dec00404 	addi	sp,sp,16
 800040c:	f800283a 	ret
 8000410:	8000a340 	call	8000a34 <__sfp_lock_release>
 8000414:	0005883a 	mov	r2,zero
 8000418:	003ff706 	br	80003f8 <__alt_data_end+0xfc0003f8>
 800041c:	0005883a 	mov	r2,zero
 8000420:	f800283a 	ret
 8000424:	8809883a 	mov	r4,r17
 8000428:	8000a200 	call	8000a20 <__sinit>
 800042c:	8080030f 	ldh	r2,12(r16)
 8000430:	103fd51e 	bne	r2,zero,8000388 <__alt_data_end+0xfc000388>
 8000434:	003ff606 	br	8000410 <__alt_data_end+0xfc000410>
 8000438:	81400417 	ldw	r5,16(r16)
 800043c:	8809883a 	mov	r4,r17
 8000440:	8000f300 	call	8000f30 <_free_r>
 8000444:	003fdd06 	br	80003bc <__alt_data_end+0xfc0003bc>
 8000448:	04bfffc4 	movi	r18,-1
 800044c:	003fd806 	br	80003b0 <__alt_data_end+0xfc0003b0>

08000450 <fclose>:
 8000450:	00820074 	movhi	r2,2049
 8000454:	108baf04 	addi	r2,r2,11964
 8000458:	200b883a 	mov	r5,r4
 800045c:	11000017 	ldw	r4,0(r2)
 8000460:	80003501 	jmpi	8000350 <_fclose_r>

08000464 <_fflush_r>:
 8000464:	defffb04 	addi	sp,sp,-20
 8000468:	dcc00315 	stw	r19,12(sp)
 800046c:	dc000015 	stw	r16,0(sp)
 8000470:	dfc00415 	stw	ra,16(sp)
 8000474:	dc800215 	stw	r18,8(sp)
 8000478:	dc400115 	stw	r17,4(sp)
 800047c:	2027883a 	mov	r19,r4
 8000480:	2821883a 	mov	r16,r5
 8000484:	20000226 	beq	r4,zero,8000490 <_fflush_r+0x2c>
 8000488:	20800e17 	ldw	r2,56(r4)
 800048c:	10005326 	beq	r2,zero,80005dc <_fflush_r+0x178>
 8000490:	8080030b 	ldhu	r2,12(r16)
 8000494:	10ffffcc 	andi	r3,r2,65535
 8000498:	18e0001c 	xori	r3,r3,32768
 800049c:	18e00004 	addi	r3,r3,-32768
 80004a0:	18002c26 	beq	r3,zero,8000554 <_fflush_r+0xf0>
 80004a4:	10c0020c 	andi	r3,r2,8
 80004a8:	1800321e 	bne	r3,zero,8000574 <_fflush_r+0x110>
 80004ac:	80c00117 	ldw	r3,4(r16)
 80004b0:	10820014 	ori	r2,r2,2048
 80004b4:	8080030d 	sth	r2,12(r16)
 80004b8:	00c0570e 	bge	zero,r3,8000618 <_fflush_r+0x1b4>
 80004bc:	82000a17 	ldw	r8,40(r16)
 80004c0:	40002426 	beq	r8,zero,8000554 <_fflush_r+0xf0>
 80004c4:	9c400017 	ldw	r17,0(r19)
 80004c8:	10c4000c 	andi	r3,r2,4096
 80004cc:	98000015 	stw	zero,0(r19)
 80004d0:	18004626 	beq	r3,zero,80005ec <_fflush_r+0x188>
 80004d4:	81801417 	ldw	r6,80(r16)
 80004d8:	10c0010c 	andi	r3,r2,4
 80004dc:	18000626 	beq	r3,zero,80004f8 <_fflush_r+0x94>
 80004e0:	80c00117 	ldw	r3,4(r16)
 80004e4:	80800c17 	ldw	r2,48(r16)
 80004e8:	30cdc83a 	sub	r6,r6,r3
 80004ec:	10000226 	beq	r2,zero,80004f8 <_fflush_r+0x94>
 80004f0:	80800f17 	ldw	r2,60(r16)
 80004f4:	308dc83a 	sub	r6,r6,r2
 80004f8:	81400717 	ldw	r5,28(r16)
 80004fc:	9809883a 	mov	r4,r19
 8000500:	000f883a 	mov	r7,zero
 8000504:	403ee83a 	callr	r8
 8000508:	00ffffc4 	movi	r3,-1
 800050c:	10c04526 	beq	r2,r3,8000624 <_fflush_r+0x1c0>
 8000510:	80c0030b 	ldhu	r3,12(r16)
 8000514:	81000417 	ldw	r4,16(r16)
 8000518:	80000115 	stw	zero,4(r16)
 800051c:	197dffcc 	andi	r5,r3,63487
 8000520:	8140030d 	sth	r5,12(r16)
 8000524:	81000015 	stw	r4,0(r16)
 8000528:	18c4000c 	andi	r3,r3,4096
 800052c:	18000126 	beq	r3,zero,8000534 <_fflush_r+0xd0>
 8000530:	80801415 	stw	r2,80(r16)
 8000534:	81400c17 	ldw	r5,48(r16)
 8000538:	9c400015 	stw	r17,0(r19)
 800053c:	28000526 	beq	r5,zero,8000554 <_fflush_r+0xf0>
 8000540:	80801004 	addi	r2,r16,64
 8000544:	28800226 	beq	r5,r2,8000550 <_fflush_r+0xec>
 8000548:	9809883a 	mov	r4,r19
 800054c:	8000f300 	call	8000f30 <_free_r>
 8000550:	80000c15 	stw	zero,48(r16)
 8000554:	0005883a 	mov	r2,zero
 8000558:	dfc00417 	ldw	ra,16(sp)
 800055c:	dcc00317 	ldw	r19,12(sp)
 8000560:	dc800217 	ldw	r18,8(sp)
 8000564:	dc400117 	ldw	r17,4(sp)
 8000568:	dc000017 	ldw	r16,0(sp)
 800056c:	dec00504 	addi	sp,sp,20
 8000570:	f800283a 	ret
 8000574:	84800417 	ldw	r18,16(r16)
 8000578:	903ff626 	beq	r18,zero,8000554 <__alt_data_end+0xfc000554>
 800057c:	84400017 	ldw	r17,0(r16)
 8000580:	108000cc 	andi	r2,r2,3
 8000584:	84800015 	stw	r18,0(r16)
 8000588:	8ca3c83a 	sub	r17,r17,r18
 800058c:	10001526 	beq	r2,zero,80005e4 <_fflush_r+0x180>
 8000590:	0005883a 	mov	r2,zero
 8000594:	80800215 	stw	r2,8(r16)
 8000598:	04400316 	blt	zero,r17,80005a8 <_fflush_r+0x144>
 800059c:	003fed06 	br	8000554 <__alt_data_end+0xfc000554>
 80005a0:	90a5883a 	add	r18,r18,r2
 80005a4:	047feb0e 	bge	zero,r17,8000554 <__alt_data_end+0xfc000554>
 80005a8:	80800917 	ldw	r2,36(r16)
 80005ac:	81400717 	ldw	r5,28(r16)
 80005b0:	880f883a 	mov	r7,r17
 80005b4:	900d883a 	mov	r6,r18
 80005b8:	9809883a 	mov	r4,r19
 80005bc:	103ee83a 	callr	r2
 80005c0:	88a3c83a 	sub	r17,r17,r2
 80005c4:	00bff616 	blt	zero,r2,80005a0 <__alt_data_end+0xfc0005a0>
 80005c8:	80c0030b 	ldhu	r3,12(r16)
 80005cc:	00bfffc4 	movi	r2,-1
 80005d0:	18c01014 	ori	r3,r3,64
 80005d4:	80c0030d 	sth	r3,12(r16)
 80005d8:	003fdf06 	br	8000558 <__alt_data_end+0xfc000558>
 80005dc:	8000a200 	call	8000a20 <__sinit>
 80005e0:	003fab06 	br	8000490 <__alt_data_end+0xfc000490>
 80005e4:	80800517 	ldw	r2,20(r16)
 80005e8:	003fea06 	br	8000594 <__alt_data_end+0xfc000594>
 80005ec:	81400717 	ldw	r5,28(r16)
 80005f0:	000d883a 	mov	r6,zero
 80005f4:	9809883a 	mov	r4,r19
 80005f8:	01c00044 	movi	r7,1
 80005fc:	403ee83a 	callr	r8
 8000600:	100d883a 	mov	r6,r2
 8000604:	00bfffc4 	movi	r2,-1
 8000608:	30801326 	beq	r6,r2,8000658 <_fflush_r+0x1f4>
 800060c:	8080030b 	ldhu	r2,12(r16)
 8000610:	82000a17 	ldw	r8,40(r16)
 8000614:	003fb006 	br	80004d8 <__alt_data_end+0xfc0004d8>
 8000618:	80c00f17 	ldw	r3,60(r16)
 800061c:	00ffa716 	blt	zero,r3,80004bc <__alt_data_end+0xfc0004bc>
 8000620:	003fcc06 	br	8000554 <__alt_data_end+0xfc000554>
 8000624:	98c00017 	ldw	r3,0(r19)
 8000628:	183fb926 	beq	r3,zero,8000510 <__alt_data_end+0xfc000510>
 800062c:	01000744 	movi	r4,29
 8000630:	19000226 	beq	r3,r4,800063c <_fflush_r+0x1d8>
 8000634:	01000584 	movi	r4,22
 8000638:	1900101e 	bne	r3,r4,800067c <_fflush_r+0x218>
 800063c:	8080030b 	ldhu	r2,12(r16)
 8000640:	80c00417 	ldw	r3,16(r16)
 8000644:	80000115 	stw	zero,4(r16)
 8000648:	10bdffcc 	andi	r2,r2,63487
 800064c:	8080030d 	sth	r2,12(r16)
 8000650:	80c00015 	stw	r3,0(r16)
 8000654:	003fb706 	br	8000534 <__alt_data_end+0xfc000534>
 8000658:	98800017 	ldw	r2,0(r19)
 800065c:	103feb26 	beq	r2,zero,800060c <__alt_data_end+0xfc00060c>
 8000660:	00c00744 	movi	r3,29
 8000664:	10c00226 	beq	r2,r3,8000670 <_fflush_r+0x20c>
 8000668:	00c00584 	movi	r3,22
 800066c:	10ffd61e 	bne	r2,r3,80005c8 <__alt_data_end+0xfc0005c8>
 8000670:	9c400015 	stw	r17,0(r19)
 8000674:	0005883a 	mov	r2,zero
 8000678:	003fb706 	br	8000558 <__alt_data_end+0xfc000558>
 800067c:	80c0030b 	ldhu	r3,12(r16)
 8000680:	18c01014 	ori	r3,r3,64
 8000684:	80c0030d 	sth	r3,12(r16)
 8000688:	003fb306 	br	8000558 <__alt_data_end+0xfc000558>

0800068c <fflush>:
 800068c:	20000526 	beq	r4,zero,80006a4 <fflush+0x18>
 8000690:	00820074 	movhi	r2,2049
 8000694:	108baf04 	addi	r2,r2,11964
 8000698:	200b883a 	mov	r5,r4
 800069c:	11000017 	ldw	r4,0(r2)
 80006a0:	80004641 	jmpi	8000464 <_fflush_r>
 80006a4:	00820074 	movhi	r2,2049
 80006a8:	108bae04 	addi	r2,r2,11960
 80006ac:	11000017 	ldw	r4,0(r2)
 80006b0:	01420034 	movhi	r5,2048
 80006b4:	29411904 	addi	r5,r5,1124
 80006b8:	80017a81 	jmpi	80017a8 <_fwalk_reent>

080006bc <__fp_lock>:
 80006bc:	0005883a 	mov	r2,zero
 80006c0:	f800283a 	ret

080006c4 <__fp_unlock>:
 80006c4:	0005883a 	mov	r2,zero
 80006c8:	f800283a 	ret

080006cc <_cleanup_r>:
 80006cc:	01420034 	movhi	r5,2048
 80006d0:	29411404 	addi	r5,r5,1104
 80006d4:	80016f01 	jmpi	80016f0 <_fwalk>

080006d8 <__sinit.part.1>:
 80006d8:	defff604 	addi	sp,sp,-40
 80006dc:	00c20034 	movhi	r3,2048
 80006e0:	dfc00915 	stw	ra,36(sp)
 80006e4:	df000815 	stw	fp,32(sp)
 80006e8:	ddc00715 	stw	r23,28(sp)
 80006ec:	dd800615 	stw	r22,24(sp)
 80006f0:	dd400515 	stw	r21,20(sp)
 80006f4:	dd000415 	stw	r20,16(sp)
 80006f8:	dcc00315 	stw	r19,12(sp)
 80006fc:	dc800215 	stw	r18,8(sp)
 8000700:	dc400115 	stw	r17,4(sp)
 8000704:	dc000015 	stw	r16,0(sp)
 8000708:	18c1b304 	addi	r3,r3,1740
 800070c:	24000117 	ldw	r16,4(r4)
 8000710:	20c00f15 	stw	r3,60(r4)
 8000714:	07000044 	movi	fp,1
 8000718:	00c000c4 	movi	r3,3
 800071c:	2080bb04 	addi	r2,r4,748
 8000720:	20c0b915 	stw	r3,740(r4)
 8000724:	27000e15 	stw	fp,56(r4)
 8000728:	2080ba15 	stw	r2,744(r4)
 800072c:	2000b815 	stw	zero,736(r4)
 8000730:	05c00204 	movi	r23,8
 8000734:	00800104 	movi	r2,4
 8000738:	2025883a 	mov	r18,r4
 800073c:	b80d883a 	mov	r6,r23
 8000740:	81001704 	addi	r4,r16,92
 8000744:	000b883a 	mov	r5,zero
 8000748:	80000015 	stw	zero,0(r16)
 800074c:	80000115 	stw	zero,4(r16)
 8000750:	80000215 	stw	zero,8(r16)
 8000754:	8080030d 	sth	r2,12(r16)
 8000758:	80001915 	stw	zero,100(r16)
 800075c:	8000038d 	sth	zero,14(r16)
 8000760:	80000415 	stw	zero,16(r16)
 8000764:	80000515 	stw	zero,20(r16)
 8000768:	80000615 	stw	zero,24(r16)
 800076c:	80024140 	call	8002414 <memset>
 8000770:	05820034 	movhi	r22,2048
 8000774:	94400217 	ldw	r17,8(r18)
 8000778:	05420034 	movhi	r21,2048
 800077c:	05020034 	movhi	r20,2048
 8000780:	04c20034 	movhi	r19,2048
 8000784:	b58a3804 	addi	r22,r22,10464
 8000788:	ad4a4f04 	addi	r21,r21,10556
 800078c:	a50a6e04 	addi	r20,r20,10680
 8000790:	9cca8504 	addi	r19,r19,10772
 8000794:	85800815 	stw	r22,32(r16)
 8000798:	85400915 	stw	r21,36(r16)
 800079c:	85000a15 	stw	r20,40(r16)
 80007a0:	84c00b15 	stw	r19,44(r16)
 80007a4:	84000715 	stw	r16,28(r16)
 80007a8:	00800284 	movi	r2,10
 80007ac:	89001704 	addi	r4,r17,92
 80007b0:	b80d883a 	mov	r6,r23
 80007b4:	000b883a 	mov	r5,zero
 80007b8:	88000015 	stw	zero,0(r17)
 80007bc:	88000115 	stw	zero,4(r17)
 80007c0:	88000215 	stw	zero,8(r17)
 80007c4:	8880030d 	sth	r2,12(r17)
 80007c8:	88001915 	stw	zero,100(r17)
 80007cc:	8f00038d 	sth	fp,14(r17)
 80007d0:	88000415 	stw	zero,16(r17)
 80007d4:	88000515 	stw	zero,20(r17)
 80007d8:	88000615 	stw	zero,24(r17)
 80007dc:	80024140 	call	8002414 <memset>
 80007e0:	94000317 	ldw	r16,12(r18)
 80007e4:	00800484 	movi	r2,18
 80007e8:	8c400715 	stw	r17,28(r17)
 80007ec:	8d800815 	stw	r22,32(r17)
 80007f0:	8d400915 	stw	r21,36(r17)
 80007f4:	8d000a15 	stw	r20,40(r17)
 80007f8:	8cc00b15 	stw	r19,44(r17)
 80007fc:	8080030d 	sth	r2,12(r16)
 8000800:	00800084 	movi	r2,2
 8000804:	80000015 	stw	zero,0(r16)
 8000808:	80000115 	stw	zero,4(r16)
 800080c:	80000215 	stw	zero,8(r16)
 8000810:	80001915 	stw	zero,100(r16)
 8000814:	8080038d 	sth	r2,14(r16)
 8000818:	80000415 	stw	zero,16(r16)
 800081c:	80000515 	stw	zero,20(r16)
 8000820:	80000615 	stw	zero,24(r16)
 8000824:	81001704 	addi	r4,r16,92
 8000828:	000b883a 	mov	r5,zero
 800082c:	b80d883a 	mov	r6,r23
 8000830:	80024140 	call	8002414 <memset>
 8000834:	84000715 	stw	r16,28(r16)
 8000838:	85800815 	stw	r22,32(r16)
 800083c:	85400915 	stw	r21,36(r16)
 8000840:	85000a15 	stw	r20,40(r16)
 8000844:	84c00b15 	stw	r19,44(r16)
 8000848:	dfc00917 	ldw	ra,36(sp)
 800084c:	df000817 	ldw	fp,32(sp)
 8000850:	ddc00717 	ldw	r23,28(sp)
 8000854:	dd800617 	ldw	r22,24(sp)
 8000858:	dd400517 	ldw	r21,20(sp)
 800085c:	dd000417 	ldw	r20,16(sp)
 8000860:	dcc00317 	ldw	r19,12(sp)
 8000864:	dc800217 	ldw	r18,8(sp)
 8000868:	dc400117 	ldw	r17,4(sp)
 800086c:	dc000017 	ldw	r16,0(sp)
 8000870:	dec00a04 	addi	sp,sp,40
 8000874:	f800283a 	ret

08000878 <__sfmoreglue>:
 8000878:	defffc04 	addi	sp,sp,-16
 800087c:	dc800215 	stw	r18,8(sp)
 8000880:	2825883a 	mov	r18,r5
 8000884:	dc000015 	stw	r16,0(sp)
 8000888:	01401a04 	movi	r5,104
 800088c:	2021883a 	mov	r16,r4
 8000890:	9009883a 	mov	r4,r18
 8000894:	dfc00315 	stw	ra,12(sp)
 8000898:	dc400115 	stw	r17,4(sp)
 800089c:	800b0800 	call	800b080 <__mulsi3>
 80008a0:	8009883a 	mov	r4,r16
 80008a4:	11400304 	addi	r5,r2,12
 80008a8:	1023883a 	mov	r17,r2
 80008ac:	8001b340 	call	8001b34 <_malloc_r>
 80008b0:	1021883a 	mov	r16,r2
 80008b4:	10000726 	beq	r2,zero,80008d4 <__sfmoreglue+0x5c>
 80008b8:	11000304 	addi	r4,r2,12
 80008bc:	10000015 	stw	zero,0(r2)
 80008c0:	14800115 	stw	r18,4(r2)
 80008c4:	11000215 	stw	r4,8(r2)
 80008c8:	000b883a 	mov	r5,zero
 80008cc:	880d883a 	mov	r6,r17
 80008d0:	80024140 	call	8002414 <memset>
 80008d4:	8005883a 	mov	r2,r16
 80008d8:	dfc00317 	ldw	ra,12(sp)
 80008dc:	dc800217 	ldw	r18,8(sp)
 80008e0:	dc400117 	ldw	r17,4(sp)
 80008e4:	dc000017 	ldw	r16,0(sp)
 80008e8:	dec00404 	addi	sp,sp,16
 80008ec:	f800283a 	ret

080008f0 <__sfp>:
 80008f0:	00820074 	movhi	r2,2049
 80008f4:	defffb04 	addi	sp,sp,-20
 80008f8:	108bae04 	addi	r2,r2,11960
 80008fc:	dc800215 	stw	r18,8(sp)
 8000900:	14800017 	ldw	r18,0(r2)
 8000904:	dcc00315 	stw	r19,12(sp)
 8000908:	dfc00415 	stw	ra,16(sp)
 800090c:	90800e17 	ldw	r2,56(r18)
 8000910:	dc400115 	stw	r17,4(sp)
 8000914:	dc000015 	stw	r16,0(sp)
 8000918:	2027883a 	mov	r19,r4
 800091c:	1000021e 	bne	r2,zero,8000928 <__sfp+0x38>
 8000920:	9009883a 	mov	r4,r18
 8000924:	80006d80 	call	80006d8 <__sinit.part.1>
 8000928:	9480b804 	addi	r18,r18,736
 800092c:	047fffc4 	movi	r17,-1
 8000930:	91400117 	ldw	r5,4(r18)
 8000934:	94000217 	ldw	r16,8(r18)
 8000938:	297fffc4 	addi	r5,r5,-1
 800093c:	28000a16 	blt	r5,zero,8000968 <__sfp+0x78>
 8000940:	8080030f 	ldh	r2,12(r16)
 8000944:	10000c26 	beq	r2,zero,8000978 <__sfp+0x88>
 8000948:	80c01d04 	addi	r3,r16,116
 800094c:	00000206 	br	8000958 <__sfp+0x68>
 8000950:	18bfe60f 	ldh	r2,-104(r3)
 8000954:	10000826 	beq	r2,zero,8000978 <__sfp+0x88>
 8000958:	297fffc4 	addi	r5,r5,-1
 800095c:	1c3ffd04 	addi	r16,r3,-12
 8000960:	18c01a04 	addi	r3,r3,104
 8000964:	2c7ffa1e 	bne	r5,r17,8000950 <__alt_data_end+0xfc000950>
 8000968:	90800017 	ldw	r2,0(r18)
 800096c:	10001d26 	beq	r2,zero,80009e4 <__sfp+0xf4>
 8000970:	1025883a 	mov	r18,r2
 8000974:	003fee06 	br	8000930 <__alt_data_end+0xfc000930>
 8000978:	00bfffc4 	movi	r2,-1
 800097c:	8080038d 	sth	r2,14(r16)
 8000980:	00800044 	movi	r2,1
 8000984:	8080030d 	sth	r2,12(r16)
 8000988:	80001915 	stw	zero,100(r16)
 800098c:	80000015 	stw	zero,0(r16)
 8000990:	80000215 	stw	zero,8(r16)
 8000994:	80000115 	stw	zero,4(r16)
 8000998:	80000415 	stw	zero,16(r16)
 800099c:	80000515 	stw	zero,20(r16)
 80009a0:	80000615 	stw	zero,24(r16)
 80009a4:	81001704 	addi	r4,r16,92
 80009a8:	000b883a 	mov	r5,zero
 80009ac:	01800204 	movi	r6,8
 80009b0:	80024140 	call	8002414 <memset>
 80009b4:	8005883a 	mov	r2,r16
 80009b8:	80000c15 	stw	zero,48(r16)
 80009bc:	80000d15 	stw	zero,52(r16)
 80009c0:	80001115 	stw	zero,68(r16)
 80009c4:	80001215 	stw	zero,72(r16)
 80009c8:	dfc00417 	ldw	ra,16(sp)
 80009cc:	dcc00317 	ldw	r19,12(sp)
 80009d0:	dc800217 	ldw	r18,8(sp)
 80009d4:	dc400117 	ldw	r17,4(sp)
 80009d8:	dc000017 	ldw	r16,0(sp)
 80009dc:	dec00504 	addi	sp,sp,20
 80009e0:	f800283a 	ret
 80009e4:	9809883a 	mov	r4,r19
 80009e8:	01400104 	movi	r5,4
 80009ec:	80008780 	call	8000878 <__sfmoreglue>
 80009f0:	90800015 	stw	r2,0(r18)
 80009f4:	103fde1e 	bne	r2,zero,8000970 <__alt_data_end+0xfc000970>
 80009f8:	00800304 	movi	r2,12
 80009fc:	98800015 	stw	r2,0(r19)
 8000a00:	0005883a 	mov	r2,zero
 8000a04:	003ff006 	br	80009c8 <__alt_data_end+0xfc0009c8>

08000a08 <_cleanup>:
 8000a08:	00820074 	movhi	r2,2049
 8000a0c:	108bae04 	addi	r2,r2,11960
 8000a10:	11000017 	ldw	r4,0(r2)
 8000a14:	01420034 	movhi	r5,2048
 8000a18:	29411404 	addi	r5,r5,1104
 8000a1c:	80016f01 	jmpi	80016f0 <_fwalk>

08000a20 <__sinit>:
 8000a20:	20800e17 	ldw	r2,56(r4)
 8000a24:	10000126 	beq	r2,zero,8000a2c <__sinit+0xc>
 8000a28:	f800283a 	ret
 8000a2c:	80006d81 	jmpi	80006d8 <__sinit.part.1>

08000a30 <__sfp_lock_acquire>:
 8000a30:	f800283a 	ret

08000a34 <__sfp_lock_release>:
 8000a34:	f800283a 	ret

08000a38 <__sinit_lock_acquire>:
 8000a38:	f800283a 	ret

08000a3c <__sinit_lock_release>:
 8000a3c:	f800283a 	ret

08000a40 <__fp_lock_all>:
 8000a40:	00820074 	movhi	r2,2049
 8000a44:	108baf04 	addi	r2,r2,11964
 8000a48:	11000017 	ldw	r4,0(r2)
 8000a4c:	01420034 	movhi	r5,2048
 8000a50:	2941af04 	addi	r5,r5,1724
 8000a54:	80016f01 	jmpi	80016f0 <_fwalk>

08000a58 <__fp_unlock_all>:
 8000a58:	00820074 	movhi	r2,2049
 8000a5c:	108baf04 	addi	r2,r2,11964
 8000a60:	11000017 	ldw	r4,0(r2)
 8000a64:	01420034 	movhi	r5,2048
 8000a68:	2941b104 	addi	r5,r5,1732
 8000a6c:	80016f01 	jmpi	80016f0 <_fwalk>

08000a70 <_fopen_r>:
 8000a70:	defffa04 	addi	sp,sp,-24
 8000a74:	dcc00415 	stw	r19,16(sp)
 8000a78:	2827883a 	mov	r19,r5
 8000a7c:	300b883a 	mov	r5,r6
 8000a80:	d80d883a 	mov	r6,sp
 8000a84:	dc800315 	stw	r18,12(sp)
 8000a88:	dc400215 	stw	r17,8(sp)
 8000a8c:	dfc00515 	stw	ra,20(sp)
 8000a90:	dc000115 	stw	r16,4(sp)
 8000a94:	2025883a 	mov	r18,r4
 8000a98:	800670c0 	call	800670c <__sflags>
 8000a9c:	1023883a 	mov	r17,r2
 8000aa0:	10002626 	beq	r2,zero,8000b3c <_fopen_r+0xcc>
 8000aa4:	9009883a 	mov	r4,r18
 8000aa8:	80008f00 	call	80008f0 <__sfp>
 8000aac:	1021883a 	mov	r16,r2
 8000ab0:	10002226 	beq	r2,zero,8000b3c <_fopen_r+0xcc>
 8000ab4:	d9800017 	ldw	r6,0(sp)
 8000ab8:	9009883a 	mov	r4,r18
 8000abc:	980b883a 	mov	r5,r19
 8000ac0:	01c06d84 	movi	r7,438
 8000ac4:	80025380 	call	8002538 <_open_r>
 8000ac8:	10001916 	blt	r2,zero,8000b30 <_fopen_r+0xc0>
 8000acc:	8080038d 	sth	r2,14(r16)
 8000ad0:	00820034 	movhi	r2,2048
 8000ad4:	108a3804 	addi	r2,r2,10464
 8000ad8:	80800815 	stw	r2,32(r16)
 8000adc:	00820034 	movhi	r2,2048
 8000ae0:	108a4f04 	addi	r2,r2,10556
 8000ae4:	80800915 	stw	r2,36(r16)
 8000ae8:	00820034 	movhi	r2,2048
 8000aec:	108a6e04 	addi	r2,r2,10680
 8000af0:	80800a15 	stw	r2,40(r16)
 8000af4:	00820034 	movhi	r2,2048
 8000af8:	108a8504 	addi	r2,r2,10772
 8000afc:	8440030d 	sth	r17,12(r16)
 8000b00:	84000715 	stw	r16,28(r16)
 8000b04:	80800b15 	stw	r2,44(r16)
 8000b08:	8c40400c 	andi	r17,r17,256
 8000b0c:	88000d1e 	bne	r17,zero,8000b44 <_fopen_r+0xd4>
 8000b10:	8005883a 	mov	r2,r16
 8000b14:	dfc00517 	ldw	ra,20(sp)
 8000b18:	dcc00417 	ldw	r19,16(sp)
 8000b1c:	dc800317 	ldw	r18,12(sp)
 8000b20:	dc400217 	ldw	r17,8(sp)
 8000b24:	dc000117 	ldw	r16,4(sp)
 8000b28:	dec00604 	addi	sp,sp,24
 8000b2c:	f800283a 	ret
 8000b30:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8000b34:	8000030d 	sth	zero,12(r16)
 8000b38:	8000a340 	call	8000a34 <__sfp_lock_release>
 8000b3c:	0005883a 	mov	r2,zero
 8000b40:	003ff406 	br	8000b14 <__alt_data_end+0xfc000b14>
 8000b44:	9009883a 	mov	r4,r18
 8000b48:	800b883a 	mov	r5,r16
 8000b4c:	000d883a 	mov	r6,zero
 8000b50:	01c00084 	movi	r7,2
 8000b54:	80012200 	call	8001220 <_fseek_r>
 8000b58:	8005883a 	mov	r2,r16
 8000b5c:	003fed06 	br	8000b14 <__alt_data_end+0xfc000b14>

08000b60 <fopen>:
 8000b60:	00c20074 	movhi	r3,2049
 8000b64:	18cbaf04 	addi	r3,r3,11964
 8000b68:	2005883a 	mov	r2,r4
 8000b6c:	19000017 	ldw	r4,0(r3)
 8000b70:	280d883a 	mov	r6,r5
 8000b74:	100b883a 	mov	r5,r2
 8000b78:	8000a701 	jmpi	8000a70 <_fopen_r>

08000b7c <_fread_r>:
 8000b7c:	defff504 	addi	sp,sp,-44
 8000b80:	dd000515 	stw	r20,20(sp)
 8000b84:	dc800315 	stw	r18,12(sp)
 8000b88:	2029883a 	mov	r20,r4
 8000b8c:	2825883a 	mov	r18,r5
 8000b90:	3809883a 	mov	r4,r7
 8000b94:	300b883a 	mov	r5,r6
 8000b98:	ddc00815 	stw	r23,32(sp)
 8000b9c:	dd800715 	stw	r22,28(sp)
 8000ba0:	dd400615 	stw	r21,24(sp)
 8000ba4:	dc000115 	stw	r16,4(sp)
 8000ba8:	dfc00a15 	stw	ra,40(sp)
 8000bac:	df000915 	stw	fp,36(sp)
 8000bb0:	dcc00415 	stw	r19,16(sp)
 8000bb4:	dc400215 	stw	r17,8(sp)
 8000bb8:	302f883a 	mov	r23,r6
 8000bbc:	382b883a 	mov	r21,r7
 8000bc0:	800b0800 	call	800b080 <__mulsi3>
 8000bc4:	102d883a 	mov	r22,r2
 8000bc8:	dc000b17 	ldw	r16,44(sp)
 8000bcc:	10003926 	beq	r2,zero,8000cb4 <_fread_r+0x138>
 8000bd0:	a0000226 	beq	r20,zero,8000bdc <_fread_r+0x60>
 8000bd4:	a0800e17 	ldw	r2,56(r20)
 8000bd8:	10007326 	beq	r2,zero,8000da8 <_fread_r+0x22c>
 8000bdc:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8000be0:	80c0030b 	ldhu	r3,12(r16)
 8000be4:	1888000c 	andi	r2,r3,8192
 8000be8:	1000061e 	bne	r2,zero,8000c04 <_fread_r+0x88>
 8000bec:	81001917 	ldw	r4,100(r16)
 8000bf0:	00b7ffc4 	movi	r2,-8193
 8000bf4:	18c80014 	ori	r3,r3,8192
 8000bf8:	2084703a 	and	r2,r4,r2
 8000bfc:	80c0030d 	sth	r3,12(r16)
 8000c00:	80801915 	stw	r2,100(r16)
 8000c04:	84400117 	ldw	r17,4(r16)
 8000c08:	88003116 	blt	r17,zero,8000cd0 <_fread_r+0x154>
 8000c0c:	18c0008c 	andi	r3,r3,2
 8000c10:	8805883a 	mov	r2,r17
 8000c14:	1800331e 	bne	r3,zero,8000ce4 <_fread_r+0x168>
 8000c18:	b027883a 	mov	r19,r22
 8000c1c:	00000b06 	br	8000c4c <_fread_r+0xd0>
 8000c20:	80022dc0 	call	80022dc <memcpy>
 8000c24:	80800017 	ldw	r2,0(r16)
 8000c28:	9465883a 	add	r18,r18,r17
 8000c2c:	9c67c83a 	sub	r19,r19,r17
 8000c30:	1463883a 	add	r17,r2,r17
 8000c34:	a009883a 	mov	r4,r20
 8000c38:	800b883a 	mov	r5,r16
 8000c3c:	84400015 	stw	r17,0(r16)
 8000c40:	80026e40 	call	80026e4 <__srefill_r>
 8000c44:	10001d1e 	bne	r2,zero,8000cbc <_fread_r+0x140>
 8000c48:	84400117 	ldw	r17,4(r16)
 8000c4c:	9009883a 	mov	r4,r18
 8000c50:	880d883a 	mov	r6,r17
 8000c54:	81400017 	ldw	r5,0(r16)
 8000c58:	8cfff136 	bltu	r17,r19,8000c20 <__alt_data_end+0xfc000c20>
 8000c5c:	980d883a 	mov	r6,r19
 8000c60:	80022dc0 	call	80022dc <memcpy>
 8000c64:	80800117 	ldw	r2,4(r16)
 8000c68:	80c00017 	ldw	r3,0(r16)
 8000c6c:	14c5c83a 	sub	r2,r2,r19
 8000c70:	1ce7883a 	add	r19,r3,r19
 8000c74:	80800115 	stw	r2,4(r16)
 8000c78:	84c00015 	stw	r19,0(r16)
 8000c7c:	8000a340 	call	8000a34 <__sfp_lock_release>
 8000c80:	a805883a 	mov	r2,r21
 8000c84:	dfc00a17 	ldw	ra,40(sp)
 8000c88:	df000917 	ldw	fp,36(sp)
 8000c8c:	ddc00817 	ldw	r23,32(sp)
 8000c90:	dd800717 	ldw	r22,28(sp)
 8000c94:	dd400617 	ldw	r21,24(sp)
 8000c98:	dd000517 	ldw	r20,20(sp)
 8000c9c:	dcc00417 	ldw	r19,16(sp)
 8000ca0:	dc800317 	ldw	r18,12(sp)
 8000ca4:	dc400217 	ldw	r17,8(sp)
 8000ca8:	dc000117 	ldw	r16,4(sp)
 8000cac:	dec00b04 	addi	sp,sp,44
 8000cb0:	f800283a 	ret
 8000cb4:	0005883a 	mov	r2,zero
 8000cb8:	003ff206 	br	8000c84 <__alt_data_end+0xfc000c84>
 8000cbc:	8000a340 	call	8000a34 <__sfp_lock_release>
 8000cc0:	b4c9c83a 	sub	r4,r22,r19
 8000cc4:	b80b883a 	mov	r5,r23
 8000cc8:	800b0700 	call	800b070 <__udivsi3>
 8000ccc:	003fed06 	br	8000c84 <__alt_data_end+0xfc000c84>
 8000cd0:	80000115 	stw	zero,4(r16)
 8000cd4:	18c0008c 	andi	r3,r3,2
 8000cd8:	0005883a 	mov	r2,zero
 8000cdc:	0023883a 	mov	r17,zero
 8000ce0:	183fcd26 	beq	r3,zero,8000c18 <__alt_data_end+0xfc000c18>
 8000ce4:	1023883a 	mov	r17,r2
 8000ce8:	b080012e 	bgeu	r22,r2,8000cf0 <_fread_r+0x174>
 8000cec:	b023883a 	mov	r17,r22
 8000cf0:	81400017 	ldw	r5,0(r16)
 8000cf4:	9009883a 	mov	r4,r18
 8000cf8:	880d883a 	mov	r6,r17
 8000cfc:	80022dc0 	call	80022dc <memcpy>
 8000d00:	80800117 	ldw	r2,4(r16)
 8000d04:	84c00017 	ldw	r19,0(r16)
 8000d08:	81400c17 	ldw	r5,48(r16)
 8000d0c:	1445c83a 	sub	r2,r2,r17
 8000d10:	9c67883a 	add	r19,r19,r17
 8000d14:	84c00015 	stw	r19,0(r16)
 8000d18:	80800115 	stw	r2,4(r16)
 8000d1c:	9465883a 	add	r18,r18,r17
 8000d20:	b463c83a 	sub	r17,r22,r17
 8000d24:	28002726 	beq	r5,zero,8000dc4 <_fread_r+0x248>
 8000d28:	883fd426 	beq	r17,zero,8000c7c <__alt_data_end+0xfc000c7c>
 8000d2c:	80801004 	addi	r2,r16,64
 8000d30:	28800326 	beq	r5,r2,8000d40 <_fread_r+0x1c4>
 8000d34:	a009883a 	mov	r4,r20
 8000d38:	8000f300 	call	8000f30 <_free_r>
 8000d3c:	84c00017 	ldw	r19,0(r16)
 8000d40:	80000c15 	stw	zero,48(r16)
 8000d44:	80c00417 	ldw	r3,16(r16)
 8000d48:	87000517 	ldw	fp,20(r16)
 8000d4c:	d8c00015 	stw	r3,0(sp)
 8000d50:	00000106 	br	8000d58 <_fread_r+0x1dc>
 8000d54:	883fc926 	beq	r17,zero,8000c7c <__alt_data_end+0xfc000c7c>
 8000d58:	84800415 	stw	r18,16(r16)
 8000d5c:	84400515 	stw	r17,20(r16)
 8000d60:	84800015 	stw	r18,0(r16)
 8000d64:	a009883a 	mov	r4,r20
 8000d68:	800b883a 	mov	r5,r16
 8000d6c:	80026e40 	call	80026e4 <__srefill_r>
 8000d70:	d8c00017 	ldw	r3,0(sp)
 8000d74:	81000117 	ldw	r4,4(r16)
 8000d78:	87000515 	stw	fp,20(r16)
 8000d7c:	80c00415 	stw	r3,16(r16)
 8000d80:	84c00015 	stw	r19,0(r16)
 8000d84:	80000115 	stw	zero,4(r16)
 8000d88:	8923c83a 	sub	r17,r17,r4
 8000d8c:	9125883a 	add	r18,r18,r4
 8000d90:	103ff026 	beq	r2,zero,8000d54 <__alt_data_end+0xfc000d54>
 8000d94:	8000a340 	call	8000a34 <__sfp_lock_release>
 8000d98:	b449c83a 	sub	r4,r22,r17
 8000d9c:	b80b883a 	mov	r5,r23
 8000da0:	800b0700 	call	800b070 <__udivsi3>
 8000da4:	003fb706 	br	8000c84 <__alt_data_end+0xfc000c84>
 8000da8:	a009883a 	mov	r4,r20
 8000dac:	8000a200 	call	8000a20 <__sinit>
 8000db0:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8000db4:	80c0030b 	ldhu	r3,12(r16)
 8000db8:	1888000c 	andi	r2,r3,8192
 8000dbc:	103f911e 	bne	r2,zero,8000c04 <__alt_data_end+0xfc000c04>
 8000dc0:	003f8a06 	br	8000bec <__alt_data_end+0xfc000bec>
 8000dc4:	883fdf1e 	bne	r17,zero,8000d44 <__alt_data_end+0xfc000d44>
 8000dc8:	003fac06 	br	8000c7c <__alt_data_end+0xfc000c7c>

08000dcc <fread>:
 8000dcc:	00820074 	movhi	r2,2049
 8000dd0:	108baf04 	addi	r2,r2,11964
 8000dd4:	2011883a 	mov	r8,r4
 8000dd8:	11000017 	ldw	r4,0(r2)
 8000ddc:	defffe04 	addi	sp,sp,-8
 8000de0:	2807883a 	mov	r3,r5
 8000de4:	3005883a 	mov	r2,r6
 8000de8:	d9c00015 	stw	r7,0(sp)
 8000dec:	400b883a 	mov	r5,r8
 8000df0:	180d883a 	mov	r6,r3
 8000df4:	100f883a 	mov	r7,r2
 8000df8:	dfc00115 	stw	ra,4(sp)
 8000dfc:	8000b7c0 	call	8000b7c <_fread_r>
 8000e00:	dfc00117 	ldw	ra,4(sp)
 8000e04:	dec00204 	addi	sp,sp,8
 8000e08:	f800283a 	ret

08000e0c <_malloc_trim_r>:
 8000e0c:	defffb04 	addi	sp,sp,-20
 8000e10:	dcc00315 	stw	r19,12(sp)
 8000e14:	04c20074 	movhi	r19,2049
 8000e18:	dc800215 	stw	r18,8(sp)
 8000e1c:	dc400115 	stw	r17,4(sp)
 8000e20:	dc000015 	stw	r16,0(sp)
 8000e24:	dfc00415 	stw	ra,16(sp)
 8000e28:	2821883a 	mov	r16,r5
 8000e2c:	9cc5d004 	addi	r19,r19,5952
 8000e30:	2025883a 	mov	r18,r4
 8000e34:	800de840 	call	800de84 <__malloc_lock>
 8000e38:	98800217 	ldw	r2,8(r19)
 8000e3c:	14400117 	ldw	r17,4(r2)
 8000e40:	00bfff04 	movi	r2,-4
 8000e44:	88a2703a 	and	r17,r17,r2
 8000e48:	8c21c83a 	sub	r16,r17,r16
 8000e4c:	8403fbc4 	addi	r16,r16,4079
 8000e50:	8020d33a 	srli	r16,r16,12
 8000e54:	0083ffc4 	movi	r2,4095
 8000e58:	843fffc4 	addi	r16,r16,-1
 8000e5c:	8020933a 	slli	r16,r16,12
 8000e60:	1400060e 	bge	r2,r16,8000e7c <_malloc_trim_r+0x70>
 8000e64:	9009883a 	mov	r4,r18
 8000e68:	000b883a 	mov	r5,zero
 8000e6c:	800288c0 	call	800288c <_sbrk_r>
 8000e70:	98c00217 	ldw	r3,8(r19)
 8000e74:	1c47883a 	add	r3,r3,r17
 8000e78:	10c00a26 	beq	r2,r3,8000ea4 <_malloc_trim_r+0x98>
 8000e7c:	9009883a 	mov	r4,r18
 8000e80:	800dea40 	call	800dea4 <__malloc_unlock>
 8000e84:	0005883a 	mov	r2,zero
 8000e88:	dfc00417 	ldw	ra,16(sp)
 8000e8c:	dcc00317 	ldw	r19,12(sp)
 8000e90:	dc800217 	ldw	r18,8(sp)
 8000e94:	dc400117 	ldw	r17,4(sp)
 8000e98:	dc000017 	ldw	r16,0(sp)
 8000e9c:	dec00504 	addi	sp,sp,20
 8000ea0:	f800283a 	ret
 8000ea4:	9009883a 	mov	r4,r18
 8000ea8:	040bc83a 	sub	r5,zero,r16
 8000eac:	800288c0 	call	800288c <_sbrk_r>
 8000eb0:	00ffffc4 	movi	r3,-1
 8000eb4:	10c00d26 	beq	r2,r3,8000eec <_malloc_trim_r+0xe0>
 8000eb8:	00c20074 	movhi	r3,2049
 8000ebc:	18d2c204 	addi	r3,r3,19208
 8000ec0:	18800017 	ldw	r2,0(r3)
 8000ec4:	99000217 	ldw	r4,8(r19)
 8000ec8:	8c23c83a 	sub	r17,r17,r16
 8000ecc:	8c400054 	ori	r17,r17,1
 8000ed0:	1421c83a 	sub	r16,r2,r16
 8000ed4:	24400115 	stw	r17,4(r4)
 8000ed8:	9009883a 	mov	r4,r18
 8000edc:	1c000015 	stw	r16,0(r3)
 8000ee0:	800dea40 	call	800dea4 <__malloc_unlock>
 8000ee4:	00800044 	movi	r2,1
 8000ee8:	003fe706 	br	8000e88 <__alt_data_end+0xfc000e88>
 8000eec:	9009883a 	mov	r4,r18
 8000ef0:	000b883a 	mov	r5,zero
 8000ef4:	800288c0 	call	800288c <_sbrk_r>
 8000ef8:	99000217 	ldw	r4,8(r19)
 8000efc:	014003c4 	movi	r5,15
 8000f00:	1107c83a 	sub	r3,r2,r4
 8000f04:	28ffdd0e 	bge	r5,r3,8000e7c <__alt_data_end+0xfc000e7c>
 8000f08:	01420074 	movhi	r5,2049
 8000f0c:	294bb004 	addi	r5,r5,11968
 8000f10:	29400017 	ldw	r5,0(r5)
 8000f14:	18c00054 	ori	r3,r3,1
 8000f18:	20c00115 	stw	r3,4(r4)
 8000f1c:	00c20074 	movhi	r3,2049
 8000f20:	1145c83a 	sub	r2,r2,r5
 8000f24:	18d2c204 	addi	r3,r3,19208
 8000f28:	18800015 	stw	r2,0(r3)
 8000f2c:	003fd306 	br	8000e7c <__alt_data_end+0xfc000e7c>

08000f30 <_free_r>:
 8000f30:	28004c26 	beq	r5,zero,8001064 <_free_r+0x134>
 8000f34:	defffd04 	addi	sp,sp,-12
 8000f38:	dc400115 	stw	r17,4(sp)
 8000f3c:	dc000015 	stw	r16,0(sp)
 8000f40:	2023883a 	mov	r17,r4
 8000f44:	2821883a 	mov	r16,r5
 8000f48:	dfc00215 	stw	ra,8(sp)
 8000f4c:	800de840 	call	800de84 <__malloc_lock>
 8000f50:	813fff17 	ldw	r4,-4(r16)
 8000f54:	00bfff84 	movi	r2,-2
 8000f58:	02420074 	movhi	r9,2049
 8000f5c:	81bffe04 	addi	r6,r16,-8
 8000f60:	2084703a 	and	r2,r4,r2
 8000f64:	4a45d004 	addi	r9,r9,5952
 8000f68:	308b883a 	add	r5,r6,r2
 8000f6c:	2a000117 	ldw	r8,4(r5)
 8000f70:	49c00217 	ldw	r7,8(r9)
 8000f74:	00ffff04 	movi	r3,-4
 8000f78:	40c6703a 	and	r3,r8,r3
 8000f7c:	39405326 	beq	r7,r5,80010cc <_free_r+0x19c>
 8000f80:	28c00115 	stw	r3,4(r5)
 8000f84:	2100004c 	andi	r4,r4,1
 8000f88:	2000091e 	bne	r4,zero,8000fb0 <_free_r+0x80>
 8000f8c:	81fffe17 	ldw	r7,-8(r16)
 8000f90:	4a000204 	addi	r8,r9,8
 8000f94:	31cdc83a 	sub	r6,r6,r7
 8000f98:	31000217 	ldw	r4,8(r6)
 8000f9c:	11c5883a 	add	r2,r2,r7
 8000fa0:	22006126 	beq	r4,r8,8001128 <_free_r+0x1f8>
 8000fa4:	31c00317 	ldw	r7,12(r6)
 8000fa8:	21c00315 	stw	r7,12(r4)
 8000fac:	39000215 	stw	r4,8(r7)
 8000fb0:	28c9883a 	add	r4,r5,r3
 8000fb4:	21c00117 	ldw	r7,4(r4)
 8000fb8:	39c0004c 	andi	r7,r7,1
 8000fbc:	38000d1e 	bne	r7,zero,8000ff4 <_free_r+0xc4>
 8000fc0:	29000217 	ldw	r4,8(r5)
 8000fc4:	10c5883a 	add	r2,r2,r3
 8000fc8:	00c20074 	movhi	r3,2049
 8000fcc:	18c5d204 	addi	r3,r3,5960
 8000fd0:	20c07526 	beq	r4,r3,80011a8 <_free_r+0x278>
 8000fd4:	29c00317 	ldw	r7,12(r5)
 8000fd8:	11400054 	ori	r5,r2,1
 8000fdc:	3087883a 	add	r3,r6,r2
 8000fe0:	21c00315 	stw	r7,12(r4)
 8000fe4:	39000215 	stw	r4,8(r7)
 8000fe8:	31400115 	stw	r5,4(r6)
 8000fec:	18800015 	stw	r2,0(r3)
 8000ff0:	00000406 	br	8001004 <_free_r+0xd4>
 8000ff4:	10c00054 	ori	r3,r2,1
 8000ff8:	30c00115 	stw	r3,4(r6)
 8000ffc:	3087883a 	add	r3,r6,r2
 8001000:	18800015 	stw	r2,0(r3)
 8001004:	00c07fc4 	movi	r3,511
 8001008:	18801736 	bltu	r3,r2,8001068 <_free_r+0x138>
 800100c:	1004d0fa 	srli	r2,r2,3
 8001010:	01400044 	movi	r5,1
 8001014:	49000117 	ldw	r4,4(r9)
 8001018:	1087883a 	add	r3,r2,r2
 800101c:	18c7883a 	add	r3,r3,r3
 8001020:	1005d0ba 	srai	r2,r2,2
 8001024:	18c7883a 	add	r3,r3,r3
 8001028:	1a47883a 	add	r3,r3,r9
 800102c:	19c00217 	ldw	r7,8(r3)
 8001030:	2884983a 	sll	r2,r5,r2
 8001034:	30c00315 	stw	r3,12(r6)
 8001038:	31c00215 	stw	r7,8(r6)
 800103c:	1104b03a 	or	r2,r2,r4
 8001040:	19800215 	stw	r6,8(r3)
 8001044:	48800115 	stw	r2,4(r9)
 8001048:	39800315 	stw	r6,12(r7)
 800104c:	8809883a 	mov	r4,r17
 8001050:	dfc00217 	ldw	ra,8(sp)
 8001054:	dc400117 	ldw	r17,4(sp)
 8001058:	dc000017 	ldw	r16,0(sp)
 800105c:	dec00304 	addi	sp,sp,12
 8001060:	800dea41 	jmpi	800dea4 <__malloc_unlock>
 8001064:	f800283a 	ret
 8001068:	1006d27a 	srli	r3,r2,9
 800106c:	01000104 	movi	r4,4
 8001070:	20c04036 	bltu	r4,r3,8001174 <_free_r+0x244>
 8001074:	1006d1ba 	srli	r3,r2,6
 8001078:	19400e04 	addi	r5,r3,56
 800107c:	2947883a 	add	r3,r5,r5
 8001080:	18c7883a 	add	r3,r3,r3
 8001084:	18c7883a 	add	r3,r3,r3
 8001088:	1a49883a 	add	r4,r3,r9
 800108c:	20c00217 	ldw	r3,8(r4)
 8001090:	01c20074 	movhi	r7,2049
 8001094:	39c5d004 	addi	r7,r7,5952
 8001098:	19003b26 	beq	r3,r4,8001188 <_free_r+0x258>
 800109c:	01ffff04 	movi	r7,-4
 80010a0:	19400117 	ldw	r5,4(r3)
 80010a4:	29ca703a 	and	r5,r5,r7
 80010a8:	1140022e 	bgeu	r2,r5,80010b4 <_free_r+0x184>
 80010ac:	18c00217 	ldw	r3,8(r3)
 80010b0:	20fffb1e 	bne	r4,r3,80010a0 <__alt_data_end+0xfc0010a0>
 80010b4:	18800317 	ldw	r2,12(r3)
 80010b8:	30800315 	stw	r2,12(r6)
 80010bc:	30c00215 	stw	r3,8(r6)
 80010c0:	11800215 	stw	r6,8(r2)
 80010c4:	19800315 	stw	r6,12(r3)
 80010c8:	003fe006 	br	800104c <__alt_data_end+0xfc00104c>
 80010cc:	2100004c 	andi	r4,r4,1
 80010d0:	1885883a 	add	r2,r3,r2
 80010d4:	2000071e 	bne	r4,zero,80010f4 <_free_r+0x1c4>
 80010d8:	817ffe17 	ldw	r5,-8(r16)
 80010dc:	314dc83a 	sub	r6,r6,r5
 80010e0:	30c00317 	ldw	r3,12(r6)
 80010e4:	31000217 	ldw	r4,8(r6)
 80010e8:	1145883a 	add	r2,r2,r5
 80010ec:	20c00315 	stw	r3,12(r4)
 80010f0:	19000215 	stw	r4,8(r3)
 80010f4:	10c00054 	ori	r3,r2,1
 80010f8:	30c00115 	stw	r3,4(r6)
 80010fc:	00c20074 	movhi	r3,2049
 8001100:	18cbb104 	addi	r3,r3,11972
 8001104:	18c00017 	ldw	r3,0(r3)
 8001108:	49800215 	stw	r6,8(r9)
 800110c:	10ffcf36 	bltu	r2,r3,800104c <__alt_data_end+0xfc00104c>
 8001110:	00820074 	movhi	r2,2049
 8001114:	1092b804 	addi	r2,r2,19168
 8001118:	11400017 	ldw	r5,0(r2)
 800111c:	8809883a 	mov	r4,r17
 8001120:	8000e0c0 	call	8000e0c <_malloc_trim_r>
 8001124:	003fc906 	br	800104c <__alt_data_end+0xfc00104c>
 8001128:	28c9883a 	add	r4,r5,r3
 800112c:	21000117 	ldw	r4,4(r4)
 8001130:	2100004c 	andi	r4,r4,1
 8001134:	20000a1e 	bne	r4,zero,8001160 <_free_r+0x230>
 8001138:	29000317 	ldw	r4,12(r5)
 800113c:	29400217 	ldw	r5,8(r5)
 8001140:	10c5883a 	add	r2,r2,r3
 8001144:	10c00054 	ori	r3,r2,1
 8001148:	29000315 	stw	r4,12(r5)
 800114c:	21400215 	stw	r5,8(r4)
 8001150:	30c00115 	stw	r3,4(r6)
 8001154:	308d883a 	add	r6,r6,r2
 8001158:	30800015 	stw	r2,0(r6)
 800115c:	003fbb06 	br	800104c <__alt_data_end+0xfc00104c>
 8001160:	10c00054 	ori	r3,r2,1
 8001164:	30c00115 	stw	r3,4(r6)
 8001168:	308d883a 	add	r6,r6,r2
 800116c:	30800015 	stw	r2,0(r6)
 8001170:	003fb606 	br	800104c <__alt_data_end+0xfc00104c>
 8001174:	01000504 	movi	r4,20
 8001178:	20c01436 	bltu	r4,r3,80011cc <_free_r+0x29c>
 800117c:	194016c4 	addi	r5,r3,91
 8001180:	2947883a 	add	r3,r5,r5
 8001184:	003fbe06 	br	8001080 <__alt_data_end+0xfc001080>
 8001188:	280bd0ba 	srai	r5,r5,2
 800118c:	00800044 	movi	r2,1
 8001190:	39000117 	ldw	r4,4(r7)
 8001194:	114a983a 	sll	r5,r2,r5
 8001198:	1805883a 	mov	r2,r3
 800119c:	2908b03a 	or	r4,r5,r4
 80011a0:	39000115 	stw	r4,4(r7)
 80011a4:	003fc406 	br	80010b8 <__alt_data_end+0xfc0010b8>
 80011a8:	49800515 	stw	r6,20(r9)
 80011ac:	49800415 	stw	r6,16(r9)
 80011b0:	10c00054 	ori	r3,r2,1
 80011b4:	31000315 	stw	r4,12(r6)
 80011b8:	31000215 	stw	r4,8(r6)
 80011bc:	30c00115 	stw	r3,4(r6)
 80011c0:	308d883a 	add	r6,r6,r2
 80011c4:	30800015 	stw	r2,0(r6)
 80011c8:	003fa006 	br	800104c <__alt_data_end+0xfc00104c>
 80011cc:	01001504 	movi	r4,84
 80011d0:	20c00436 	bltu	r4,r3,80011e4 <_free_r+0x2b4>
 80011d4:	1006d33a 	srli	r3,r2,12
 80011d8:	19401b84 	addi	r5,r3,110
 80011dc:	2947883a 	add	r3,r5,r5
 80011e0:	003fa706 	br	8001080 <__alt_data_end+0xfc001080>
 80011e4:	01005504 	movi	r4,340
 80011e8:	20c00436 	bltu	r4,r3,80011fc <_free_r+0x2cc>
 80011ec:	1006d3fa 	srli	r3,r2,15
 80011f0:	19401dc4 	addi	r5,r3,119
 80011f4:	2947883a 	add	r3,r5,r5
 80011f8:	003fa106 	br	8001080 <__alt_data_end+0xfc001080>
 80011fc:	01015504 	movi	r4,1364
 8001200:	20c00436 	bltu	r4,r3,8001214 <_free_r+0x2e4>
 8001204:	1006d4ba 	srli	r3,r2,18
 8001208:	19401f04 	addi	r5,r3,124
 800120c:	2947883a 	add	r3,r5,r5
 8001210:	003f9b06 	br	8001080 <__alt_data_end+0xfc001080>
 8001214:	00c03f04 	movi	r3,252
 8001218:	01401f84 	movi	r5,126
 800121c:	003f9806 	br	8001080 <__alt_data_end+0xfc001080>

08001220 <_fseek_r>:
 8001220:	deffe804 	addi	sp,sp,-96
 8001224:	dd401415 	stw	r21,80(sp)
 8001228:	dc801115 	stw	r18,68(sp)
 800122c:	dc401015 	stw	r17,64(sp)
 8001230:	dc000f15 	stw	r16,60(sp)
 8001234:	dfc01715 	stw	ra,92(sp)
 8001238:	ddc01615 	stw	r23,88(sp)
 800123c:	dd801515 	stw	r22,84(sp)
 8001240:	dd001315 	stw	r20,76(sp)
 8001244:	dcc01215 	stw	r19,72(sp)
 8001248:	2023883a 	mov	r17,r4
 800124c:	2821883a 	mov	r16,r5
 8001250:	302b883a 	mov	r21,r6
 8001254:	3825883a 	mov	r18,r7
 8001258:	20000226 	beq	r4,zero,8001264 <_fseek_r+0x44>
 800125c:	20800e17 	ldw	r2,56(r4)
 8001260:	10005d26 	beq	r2,zero,80013d8 <_fseek_r+0x1b8>
 8001264:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8001268:	8080030b 	ldhu	r2,12(r16)
 800126c:	00c04204 	movi	r3,264
 8001270:	1080420c 	andi	r2,r2,264
 8001274:	10c0a026 	beq	r2,r3,80014f8 <_fseek_r+0x2d8>
 8001278:	85000a17 	ldw	r20,40(r16)
 800127c:	a000f826 	beq	r20,zero,8001660 <_fseek_r+0x440>
 8001280:	00800044 	movi	r2,1
 8001284:	90804026 	beq	r18,r2,8001388 <_fseek_r+0x168>
 8001288:	00800084 	movi	r2,2
 800128c:	90801126 	beq	r18,r2,80012d4 <_fseek_r+0xb4>
 8001290:	90001026 	beq	r18,zero,80012d4 <_fseek_r+0xb4>
 8001294:	00800584 	movi	r2,22
 8001298:	88800015 	stw	r2,0(r17)
 800129c:	8000a340 	call	8000a34 <__sfp_lock_release>
 80012a0:	04ffffc4 	movi	r19,-1
 80012a4:	9805883a 	mov	r2,r19
 80012a8:	dfc01717 	ldw	ra,92(sp)
 80012ac:	ddc01617 	ldw	r23,88(sp)
 80012b0:	dd801517 	ldw	r22,84(sp)
 80012b4:	dd401417 	ldw	r21,80(sp)
 80012b8:	dd001317 	ldw	r20,76(sp)
 80012bc:	dcc01217 	ldw	r19,72(sp)
 80012c0:	dc801117 	ldw	r18,68(sp)
 80012c4:	dc401017 	ldw	r17,64(sp)
 80012c8:	dc000f17 	ldw	r16,60(sp)
 80012cc:	dec01804 	addi	sp,sp,96
 80012d0:	f800283a 	ret
 80012d4:	80800417 	ldw	r2,16(r16)
 80012d8:	002f883a 	mov	r23,zero
 80012dc:	0027883a 	mov	r19,zero
 80012e0:	1000c026 	beq	r2,zero,80015e4 <_fseek_r+0x3c4>
 80012e4:	8080030b 	ldhu	r2,12(r16)
 80012e8:	10c2068c 	andi	r3,r2,2074
 80012ec:	1800071e 	bne	r3,zero,800130c <_fseek_r+0xec>
 80012f0:	10c1000c 	andi	r3,r2,1024
 80012f4:	18003f1e 	bne	r3,zero,80013f4 <_fseek_r+0x1d4>
 80012f8:	00c20034 	movhi	r3,2048
 80012fc:	18ca6e04 	addi	r3,r3,10680
 8001300:	a0c0bc26 	beq	r20,r3,80015f4 <_fseek_r+0x3d4>
 8001304:	10820014 	ori	r2,r2,2048
 8001308:	8080030d 	sth	r2,12(r16)
 800130c:	8809883a 	mov	r4,r17
 8001310:	800b883a 	mov	r5,r16
 8001314:	80004640 	call	8000464 <_fflush_r>
 8001318:	1027883a 	mov	r19,r2
 800131c:	103fdf1e 	bne	r2,zero,800129c <__alt_data_end+0xfc00129c>
 8001320:	81400717 	ldw	r5,28(r16)
 8001324:	8809883a 	mov	r4,r17
 8001328:	a80d883a 	mov	r6,r21
 800132c:	900f883a 	mov	r7,r18
 8001330:	a03ee83a 	callr	r20
 8001334:	00ffffc4 	movi	r3,-1
 8001338:	10ffd826 	beq	r2,r3,800129c <__alt_data_end+0xfc00129c>
 800133c:	81400c17 	ldw	r5,48(r16)
 8001340:	28000526 	beq	r5,zero,8001358 <_fseek_r+0x138>
 8001344:	80801004 	addi	r2,r16,64
 8001348:	28800226 	beq	r5,r2,8001354 <_fseek_r+0x134>
 800134c:	8809883a 	mov	r4,r17
 8001350:	8000f300 	call	8000f30 <_free_r>
 8001354:	80000c15 	stw	zero,48(r16)
 8001358:	8080030b 	ldhu	r2,12(r16)
 800135c:	80c00417 	ldw	r3,16(r16)
 8001360:	81001704 	addi	r4,r16,92
 8001364:	10bdf7cc 	andi	r2,r2,63455
 8001368:	000b883a 	mov	r5,zero
 800136c:	01800204 	movi	r6,8
 8001370:	80c00015 	stw	r3,0(r16)
 8001374:	80000115 	stw	zero,4(r16)
 8001378:	8080030d 	sth	r2,12(r16)
 800137c:	80024140 	call	8002414 <memset>
 8001380:	8000a340 	call	8000a34 <__sfp_lock_release>
 8001384:	003fc706 	br	80012a4 <__alt_data_end+0xfc0012a4>
 8001388:	8809883a 	mov	r4,r17
 800138c:	800b883a 	mov	r5,r16
 8001390:	80004640 	call	8000464 <_fflush_r>
 8001394:	8080030b 	ldhu	r2,12(r16)
 8001398:	10c4000c 	andi	r3,r2,4096
 800139c:	18008726 	beq	r3,zero,80015bc <_fseek_r+0x39c>
 80013a0:	84c01417 	ldw	r19,80(r16)
 80013a4:	10c0010c 	andi	r3,r2,4
 80013a8:	18003e1e 	bne	r3,zero,80014a4 <_fseek_r+0x284>
 80013ac:	1080020c 	andi	r2,r2,8
 80013b0:	10008026 	beq	r2,zero,80015b4 <_fseek_r+0x394>
 80013b4:	80c00017 	ldw	r3,0(r16)
 80013b8:	80800417 	ldw	r2,16(r16)
 80013bc:	18000226 	beq	r3,zero,80013c8 <_fseek_r+0x1a8>
 80013c0:	1887c83a 	sub	r3,r3,r2
 80013c4:	98e7883a 	add	r19,r19,r3
 80013c8:	aceb883a 	add	r21,r21,r19
 80013cc:	05c00044 	movi	r23,1
 80013d0:	0025883a 	mov	r18,zero
 80013d4:	003fc206 	br	80012e0 <__alt_data_end+0xfc0012e0>
 80013d8:	8000a200 	call	8000a20 <__sinit>
 80013dc:	003fa106 	br	8001264 <__alt_data_end+0xfc001264>
 80013e0:	8080030b 	ldhu	r2,12(r16)
 80013e4:	00c10004 	movi	r3,1024
 80013e8:	80c01315 	stw	r3,76(r16)
 80013ec:	10c4b03a 	or	r2,r2,r3
 80013f0:	8080030d 	sth	r2,12(r16)
 80013f4:	9000331e 	bne	r18,zero,80014c4 <_fseek_r+0x2a4>
 80013f8:	a82d883a 	mov	r22,r21
 80013fc:	b800391e 	bne	r23,zero,80014e4 <_fseek_r+0x2c4>
 8001400:	8080030b 	ldhu	r2,12(r16)
 8001404:	1084000c 	andi	r2,r2,4096
 8001408:	10008626 	beq	r2,zero,8001624 <_fseek_r+0x404>
 800140c:	80801417 	ldw	r2,80(r16)
 8001410:	81800117 	ldw	r6,4(r16)
 8001414:	81400c17 	ldw	r5,48(r16)
 8001418:	11a7c83a 	sub	r19,r2,r6
 800141c:	28008926 	beq	r5,zero,8001644 <_fseek_r+0x424>
 8001420:	80800f17 	ldw	r2,60(r16)
 8001424:	98a7c83a 	sub	r19,r19,r2
 8001428:	81000e17 	ldw	r4,56(r16)
 800142c:	80c00417 	ldw	r3,16(r16)
 8001430:	99a7883a 	add	r19,r19,r6
 8001434:	20c7c83a 	sub	r3,r4,r3
 8001438:	98e7c83a 	sub	r19,r19,r3
 800143c:	10c7883a 	add	r3,r2,r3
 8001440:	b4c03116 	blt	r22,r19,8001508 <_fseek_r+0x2e8>
 8001444:	98c5883a 	add	r2,r19,r3
 8001448:	b0802f2e 	bgeu	r22,r2,8001508 <_fseek_r+0x2e8>
 800144c:	80800417 	ldw	r2,16(r16)
 8001450:	b4e7c83a 	sub	r19,r22,r19
 8001454:	1cc7c83a 	sub	r3,r3,r19
 8001458:	14e7883a 	add	r19,r2,r19
 800145c:	84c00015 	stw	r19,0(r16)
 8001460:	80c00115 	stw	r3,4(r16)
 8001464:	28000526 	beq	r5,zero,800147c <_fseek_r+0x25c>
 8001468:	80801004 	addi	r2,r16,64
 800146c:	28800226 	beq	r5,r2,8001478 <_fseek_r+0x258>
 8001470:	8809883a 	mov	r4,r17
 8001474:	8000f300 	call	8000f30 <_free_r>
 8001478:	80000c15 	stw	zero,48(r16)
 800147c:	8080030b 	ldhu	r2,12(r16)
 8001480:	81001704 	addi	r4,r16,92
 8001484:	000b883a 	mov	r5,zero
 8001488:	10bff7cc 	andi	r2,r2,65503
 800148c:	01800204 	movi	r6,8
 8001490:	8080030d 	sth	r2,12(r16)
 8001494:	80024140 	call	8002414 <memset>
 8001498:	8000a340 	call	8000a34 <__sfp_lock_release>
 800149c:	0027883a 	mov	r19,zero
 80014a0:	003f8006 	br	80012a4 <__alt_data_end+0xfc0012a4>
 80014a4:	80c00117 	ldw	r3,4(r16)
 80014a8:	80800c17 	ldw	r2,48(r16)
 80014ac:	98e7c83a 	sub	r19,r19,r3
 80014b0:	10004026 	beq	r2,zero,80015b4 <_fseek_r+0x394>
 80014b4:	80c00f17 	ldw	r3,60(r16)
 80014b8:	80800417 	ldw	r2,16(r16)
 80014bc:	98e7c83a 	sub	r19,r19,r3
 80014c0:	003fc106 	br	80013c8 <__alt_data_end+0xfc0013c8>
 80014c4:	8140038f 	ldh	r5,14(r16)
 80014c8:	8809883a 	mov	r4,r17
 80014cc:	d80d883a 	mov	r6,sp
 80014d0:	80016980 	call	8001698 <_fstat_r>
 80014d4:	103f8d1e 	bne	r2,zero,800130c <__alt_data_end+0xfc00130c>
 80014d8:	dd800417 	ldw	r22,16(sp)
 80014dc:	adad883a 	add	r22,r21,r22
 80014e0:	b83fc726 	beq	r23,zero,8001400 <__alt_data_end+0xfc001400>
 80014e4:	81400c17 	ldw	r5,48(r16)
 80014e8:	81800117 	ldw	r6,4(r16)
 80014ec:	28005526 	beq	r5,zero,8001644 <_fseek_r+0x424>
 80014f0:	80800f17 	ldw	r2,60(r16)
 80014f4:	003fcc06 	br	8001428 <__alt_data_end+0xfc001428>
 80014f8:	8809883a 	mov	r4,r17
 80014fc:	800b883a 	mov	r5,r16
 8001500:	80004640 	call	8000464 <_fflush_r>
 8001504:	003f5c06 	br	8001278 <__alt_data_end+0xfc001278>
 8001508:	84c01317 	ldw	r19,76(r16)
 800150c:	81400717 	ldw	r5,28(r16)
 8001510:	8809883a 	mov	r4,r17
 8001514:	04e7c83a 	sub	r19,zero,r19
 8001518:	b4e6703a 	and	r19,r22,r19
 800151c:	980d883a 	mov	r6,r19
 8001520:	000f883a 	mov	r7,zero
 8001524:	a03ee83a 	callr	r20
 8001528:	00ffffc4 	movi	r3,-1
 800152c:	10ff7726 	beq	r2,r3,800130c <__alt_data_end+0xfc00130c>
 8001530:	80800417 	ldw	r2,16(r16)
 8001534:	81400c17 	ldw	r5,48(r16)
 8001538:	80000115 	stw	zero,4(r16)
 800153c:	80800015 	stw	r2,0(r16)
 8001540:	28000526 	beq	r5,zero,8001558 <_fseek_r+0x338>
 8001544:	80801004 	addi	r2,r16,64
 8001548:	28800226 	beq	r5,r2,8001554 <_fseek_r+0x334>
 800154c:	8809883a 	mov	r4,r17
 8001550:	8000f300 	call	8000f30 <_free_r>
 8001554:	80000c15 	stw	zero,48(r16)
 8001558:	8080030b 	ldhu	r2,12(r16)
 800155c:	b4e7c83a 	sub	r19,r22,r19
 8001560:	10bff7cc 	andi	r2,r2,65503
 8001564:	8080030d 	sth	r2,12(r16)
 8001568:	98000b26 	beq	r19,zero,8001598 <_fseek_r+0x378>
 800156c:	8809883a 	mov	r4,r17
 8001570:	800b883a 	mov	r5,r16
 8001574:	80026e40 	call	80026e4 <__srefill_r>
 8001578:	103f641e 	bne	r2,zero,800130c <__alt_data_end+0xfc00130c>
 800157c:	80800117 	ldw	r2,4(r16)
 8001580:	14ff6236 	bltu	r2,r19,800130c <__alt_data_end+0xfc00130c>
 8001584:	80c00017 	ldw	r3,0(r16)
 8001588:	14c5c83a 	sub	r2,r2,r19
 800158c:	80800115 	stw	r2,4(r16)
 8001590:	1ce7883a 	add	r19,r3,r19
 8001594:	84c00015 	stw	r19,0(r16)
 8001598:	81001704 	addi	r4,r16,92
 800159c:	000b883a 	mov	r5,zero
 80015a0:	01800204 	movi	r6,8
 80015a4:	80024140 	call	8002414 <memset>
 80015a8:	8000a340 	call	8000a34 <__sfp_lock_release>
 80015ac:	0027883a 	mov	r19,zero
 80015b0:	003f3c06 	br	80012a4 <__alt_data_end+0xfc0012a4>
 80015b4:	80800417 	ldw	r2,16(r16)
 80015b8:	003f8306 	br	80013c8 <__alt_data_end+0xfc0013c8>
 80015bc:	81400717 	ldw	r5,28(r16)
 80015c0:	8809883a 	mov	r4,r17
 80015c4:	000d883a 	mov	r6,zero
 80015c8:	900f883a 	mov	r7,r18
 80015cc:	a03ee83a 	callr	r20
 80015d0:	1027883a 	mov	r19,r2
 80015d4:	00bfffc4 	movi	r2,-1
 80015d8:	98bf3026 	beq	r19,r2,800129c <__alt_data_end+0xfc00129c>
 80015dc:	8080030b 	ldhu	r2,12(r16)
 80015e0:	003f7006 	br	80013a4 <__alt_data_end+0xfc0013a4>
 80015e4:	8809883a 	mov	r4,r17
 80015e8:	800b883a 	mov	r5,r16
 80015ec:	800197c0 	call	800197c <__smakebuf_r>
 80015f0:	003f3c06 	br	80012e4 <__alt_data_end+0xfc0012e4>
 80015f4:	8140038f 	ldh	r5,14(r16)
 80015f8:	283f4216 	blt	r5,zero,8001304 <__alt_data_end+0xfc001304>
 80015fc:	8809883a 	mov	r4,r17
 8001600:	d80d883a 	mov	r6,sp
 8001604:	80016980 	call	8001698 <_fstat_r>
 8001608:	1000041e 	bne	r2,zero,800161c <_fseek_r+0x3fc>
 800160c:	d8800117 	ldw	r2,4(sp)
 8001610:	00e00014 	movui	r3,32768
 8001614:	10bc000c 	andi	r2,r2,61440
 8001618:	10ff7126 	beq	r2,r3,80013e0 <__alt_data_end+0xfc0013e0>
 800161c:	8080030b 	ldhu	r2,12(r16)
 8001620:	003f3806 	br	8001304 <__alt_data_end+0xfc001304>
 8001624:	81400717 	ldw	r5,28(r16)
 8001628:	8809883a 	mov	r4,r17
 800162c:	000d883a 	mov	r6,zero
 8001630:	01c00044 	movi	r7,1
 8001634:	a03ee83a 	callr	r20
 8001638:	00ffffc4 	movi	r3,-1
 800163c:	10ff741e 	bne	r2,r3,8001410 <__alt_data_end+0xfc001410>
 8001640:	003f3206 	br	800130c <__alt_data_end+0xfc00130c>
 8001644:	81000017 	ldw	r4,0(r16)
 8001648:	80c00417 	ldw	r3,16(r16)
 800164c:	000b883a 	mov	r5,zero
 8001650:	20c7c83a 	sub	r3,r4,r3
 8001654:	98e7c83a 	sub	r19,r19,r3
 8001658:	30c7883a 	add	r3,r6,r3
 800165c:	003f7806 	br	8001440 <__alt_data_end+0xfc001440>
 8001660:	00800744 	movi	r2,29
 8001664:	88800015 	stw	r2,0(r17)
 8001668:	8000a340 	call	8000a34 <__sfp_lock_release>
 800166c:	04ffffc4 	movi	r19,-1
 8001670:	003f0c06 	br	80012a4 <__alt_data_end+0xfc0012a4>

08001674 <fseek>:
 8001674:	2007883a 	mov	r3,r4
 8001678:	01020074 	movhi	r4,2049
 800167c:	210baf04 	addi	r4,r4,11964
 8001680:	21000017 	ldw	r4,0(r4)
 8001684:	2805883a 	mov	r2,r5
 8001688:	300f883a 	mov	r7,r6
 800168c:	180b883a 	mov	r5,r3
 8001690:	100d883a 	mov	r6,r2
 8001694:	80012201 	jmpi	8001220 <_fseek_r>

08001698 <_fstat_r>:
 8001698:	defffd04 	addi	sp,sp,-12
 800169c:	dc000015 	stw	r16,0(sp)
 80016a0:	04020074 	movhi	r16,2049
 80016a4:	dc400115 	stw	r17,4(sp)
 80016a8:	8412b504 	addi	r16,r16,19156
 80016ac:	2023883a 	mov	r17,r4
 80016b0:	2809883a 	mov	r4,r5
 80016b4:	300b883a 	mov	r5,r6
 80016b8:	dfc00215 	stw	ra,8(sp)
 80016bc:	80000015 	stw	zero,0(r16)
 80016c0:	800da480 	call	800da48 <fstat>
 80016c4:	00ffffc4 	movi	r3,-1
 80016c8:	10c00526 	beq	r2,r3,80016e0 <_fstat_r+0x48>
 80016cc:	dfc00217 	ldw	ra,8(sp)
 80016d0:	dc400117 	ldw	r17,4(sp)
 80016d4:	dc000017 	ldw	r16,0(sp)
 80016d8:	dec00304 	addi	sp,sp,12
 80016dc:	f800283a 	ret
 80016e0:	80c00017 	ldw	r3,0(r16)
 80016e4:	183ff926 	beq	r3,zero,80016cc <__alt_data_end+0xfc0016cc>
 80016e8:	88c00015 	stw	r3,0(r17)
 80016ec:	003ff706 	br	80016cc <__alt_data_end+0xfc0016cc>

080016f0 <_fwalk>:
 80016f0:	defff804 	addi	sp,sp,-32
 80016f4:	dd400515 	stw	r21,20(sp)
 80016f8:	2540b804 	addi	r21,r4,736
 80016fc:	dd800615 	stw	r22,24(sp)
 8001700:	dd000415 	stw	r20,16(sp)
 8001704:	dfc00715 	stw	ra,28(sp)
 8001708:	dcc00315 	stw	r19,12(sp)
 800170c:	dc800215 	stw	r18,8(sp)
 8001710:	dc400115 	stw	r17,4(sp)
 8001714:	dc000015 	stw	r16,0(sp)
 8001718:	2829883a 	mov	r20,r5
 800171c:	002d883a 	mov	r22,zero
 8001720:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 8001724:	a8001426 	beq	r21,zero,8001778 <_fwalk+0x88>
 8001728:	04ffffc4 	movi	r19,-1
 800172c:	ac400117 	ldw	r17,4(r21)
 8001730:	ac800217 	ldw	r18,8(r21)
 8001734:	8c7fffc4 	addi	r17,r17,-1
 8001738:	88000d16 	blt	r17,zero,8001770 <_fwalk+0x80>
 800173c:	94000304 	addi	r16,r18,12
 8001740:	94800384 	addi	r18,r18,14
 8001744:	80c0000f 	ldh	r3,0(r16)
 8001748:	8c7fffc4 	addi	r17,r17,-1
 800174c:	813ffd04 	addi	r4,r16,-12
 8001750:	18000426 	beq	r3,zero,8001764 <_fwalk+0x74>
 8001754:	90c0000f 	ldh	r3,0(r18)
 8001758:	1cc00226 	beq	r3,r19,8001764 <_fwalk+0x74>
 800175c:	a03ee83a 	callr	r20
 8001760:	b0acb03a 	or	r22,r22,r2
 8001764:	84001a04 	addi	r16,r16,104
 8001768:	94801a04 	addi	r18,r18,104
 800176c:	8cfff51e 	bne	r17,r19,8001744 <__alt_data_end+0xfc001744>
 8001770:	ad400017 	ldw	r21,0(r21)
 8001774:	a83fed1e 	bne	r21,zero,800172c <__alt_data_end+0xfc00172c>
 8001778:	8000a340 	call	8000a34 <__sfp_lock_release>
 800177c:	b005883a 	mov	r2,r22
 8001780:	dfc00717 	ldw	ra,28(sp)
 8001784:	dd800617 	ldw	r22,24(sp)
 8001788:	dd400517 	ldw	r21,20(sp)
 800178c:	dd000417 	ldw	r20,16(sp)
 8001790:	dcc00317 	ldw	r19,12(sp)
 8001794:	dc800217 	ldw	r18,8(sp)
 8001798:	dc400117 	ldw	r17,4(sp)
 800179c:	dc000017 	ldw	r16,0(sp)
 80017a0:	dec00804 	addi	sp,sp,32
 80017a4:	f800283a 	ret

080017a8 <_fwalk_reent>:
 80017a8:	defff804 	addi	sp,sp,-32
 80017ac:	dd400515 	stw	r21,20(sp)
 80017b0:	2540b804 	addi	r21,r4,736
 80017b4:	dd800615 	stw	r22,24(sp)
 80017b8:	dd000415 	stw	r20,16(sp)
 80017bc:	dcc00315 	stw	r19,12(sp)
 80017c0:	dfc00715 	stw	ra,28(sp)
 80017c4:	dc800215 	stw	r18,8(sp)
 80017c8:	dc400115 	stw	r17,4(sp)
 80017cc:	dc000015 	stw	r16,0(sp)
 80017d0:	2027883a 	mov	r19,r4
 80017d4:	2829883a 	mov	r20,r5
 80017d8:	002d883a 	mov	r22,zero
 80017dc:	8000a300 	call	8000a30 <__sfp_lock_acquire>
 80017e0:	a8001326 	beq	r21,zero,8001830 <_fwalk_reent+0x88>
 80017e4:	04bfffc4 	movi	r18,-1
 80017e8:	ac400117 	ldw	r17,4(r21)
 80017ec:	ac000217 	ldw	r16,8(r21)
 80017f0:	8c7fffc4 	addi	r17,r17,-1
 80017f4:	88000c16 	blt	r17,zero,8001828 <_fwalk_reent+0x80>
 80017f8:	84000304 	addi	r16,r16,12
 80017fc:	80c0000f 	ldh	r3,0(r16)
 8001800:	8c7fffc4 	addi	r17,r17,-1
 8001804:	817ffd04 	addi	r5,r16,-12
 8001808:	18000526 	beq	r3,zero,8001820 <_fwalk_reent+0x78>
 800180c:	80c0008f 	ldh	r3,2(r16)
 8001810:	9809883a 	mov	r4,r19
 8001814:	1c800226 	beq	r3,r18,8001820 <_fwalk_reent+0x78>
 8001818:	a03ee83a 	callr	r20
 800181c:	b0acb03a 	or	r22,r22,r2
 8001820:	84001a04 	addi	r16,r16,104
 8001824:	8cbff51e 	bne	r17,r18,80017fc <__alt_data_end+0xfc0017fc>
 8001828:	ad400017 	ldw	r21,0(r21)
 800182c:	a83fee1e 	bne	r21,zero,80017e8 <__alt_data_end+0xfc0017e8>
 8001830:	8000a340 	call	8000a34 <__sfp_lock_release>
 8001834:	b005883a 	mov	r2,r22
 8001838:	dfc00717 	ldw	ra,28(sp)
 800183c:	dd800617 	ldw	r22,24(sp)
 8001840:	dd400517 	ldw	r21,20(sp)
 8001844:	dd000417 	ldw	r20,16(sp)
 8001848:	dcc00317 	ldw	r19,12(sp)
 800184c:	dc800217 	ldw	r18,8(sp)
 8001850:	dc400117 	ldw	r17,4(sp)
 8001854:	dc000017 	ldw	r16,0(sp)
 8001858:	dec00804 	addi	sp,sp,32
 800185c:	f800283a 	ret

08001860 <_fwrite_r>:
 8001860:	defff504 	addi	sp,sp,-44
 8001864:	dc800715 	stw	r18,28(sp)
 8001868:	d9400315 	stw	r5,12(sp)
 800186c:	2025883a 	mov	r18,r4
 8001870:	300b883a 	mov	r5,r6
 8001874:	3809883a 	mov	r4,r7
 8001878:	dd000915 	stw	r20,36(sp)
 800187c:	dcc00815 	stw	r19,32(sp)
 8001880:	dc400615 	stw	r17,24(sp)
 8001884:	dfc00a15 	stw	ra,40(sp)
 8001888:	3029883a 	mov	r20,r6
 800188c:	3823883a 	mov	r17,r7
 8001890:	800b0800 	call	800b080 <__mulsi3>
 8001894:	1027883a 	mov	r19,r2
 8001898:	d8800415 	stw	r2,16(sp)
 800189c:	d8800215 	stw	r2,8(sp)
 80018a0:	d8800304 	addi	r2,sp,12
 80018a4:	d8800015 	stw	r2,0(sp)
 80018a8:	00800044 	movi	r2,1
 80018ac:	d8800115 	stw	r2,4(sp)
 80018b0:	d9400b17 	ldw	r5,44(sp)
 80018b4:	90000226 	beq	r18,zero,80018c0 <_fwrite_r+0x60>
 80018b8:	90800e17 	ldw	r2,56(r18)
 80018bc:	10001a26 	beq	r2,zero,8001928 <_fwrite_r+0xc8>
 80018c0:	2880030b 	ldhu	r2,12(r5)
 80018c4:	10c8000c 	andi	r3,r2,8192
 80018c8:	1800061e 	bne	r3,zero,80018e4 <_fwrite_r+0x84>
 80018cc:	29001917 	ldw	r4,100(r5)
 80018d0:	00f7ffc4 	movi	r3,-8193
 80018d4:	10880014 	ori	r2,r2,8192
 80018d8:	20c6703a 	and	r3,r4,r3
 80018dc:	2880030d 	sth	r2,12(r5)
 80018e0:	28c01915 	stw	r3,100(r5)
 80018e4:	9009883a 	mov	r4,r18
 80018e8:	d80d883a 	mov	r6,sp
 80018ec:	80067a40 	call	80067a4 <__sfvwrite_r>
 80018f0:	10000b26 	beq	r2,zero,8001920 <_fwrite_r+0xc0>
 80018f4:	d9000217 	ldw	r4,8(sp)
 80018f8:	a00b883a 	mov	r5,r20
 80018fc:	9909c83a 	sub	r4,r19,r4
 8001900:	800b0700 	call	800b070 <__udivsi3>
 8001904:	dfc00a17 	ldw	ra,40(sp)
 8001908:	dd000917 	ldw	r20,36(sp)
 800190c:	dcc00817 	ldw	r19,32(sp)
 8001910:	dc800717 	ldw	r18,28(sp)
 8001914:	dc400617 	ldw	r17,24(sp)
 8001918:	dec00b04 	addi	sp,sp,44
 800191c:	f800283a 	ret
 8001920:	8805883a 	mov	r2,r17
 8001924:	003ff706 	br	8001904 <__alt_data_end+0xfc001904>
 8001928:	9009883a 	mov	r4,r18
 800192c:	d9400515 	stw	r5,20(sp)
 8001930:	8000a200 	call	8000a20 <__sinit>
 8001934:	d9400517 	ldw	r5,20(sp)
 8001938:	003fe106 	br	80018c0 <__alt_data_end+0xfc0018c0>

0800193c <fwrite>:
 800193c:	00820074 	movhi	r2,2049
 8001940:	108baf04 	addi	r2,r2,11964
 8001944:	2011883a 	mov	r8,r4
 8001948:	11000017 	ldw	r4,0(r2)
 800194c:	defffe04 	addi	sp,sp,-8
 8001950:	2807883a 	mov	r3,r5
 8001954:	3005883a 	mov	r2,r6
 8001958:	d9c00015 	stw	r7,0(sp)
 800195c:	400b883a 	mov	r5,r8
 8001960:	180d883a 	mov	r6,r3
 8001964:	100f883a 	mov	r7,r2
 8001968:	dfc00115 	stw	ra,4(sp)
 800196c:	80018600 	call	8001860 <_fwrite_r>
 8001970:	dfc00117 	ldw	ra,4(sp)
 8001974:	dec00204 	addi	sp,sp,8
 8001978:	f800283a 	ret

0800197c <__smakebuf_r>:
 800197c:	2880030b 	ldhu	r2,12(r5)
 8001980:	10c0008c 	andi	r3,r2,2
 8001984:	1800401e 	bne	r3,zero,8001a88 <__smakebuf_r+0x10c>
 8001988:	deffec04 	addi	sp,sp,-80
 800198c:	dc000f15 	stw	r16,60(sp)
 8001990:	2821883a 	mov	r16,r5
 8001994:	2940038f 	ldh	r5,14(r5)
 8001998:	dc401015 	stw	r17,64(sp)
 800199c:	dfc01315 	stw	ra,76(sp)
 80019a0:	dcc01215 	stw	r19,72(sp)
 80019a4:	dc801115 	stw	r18,68(sp)
 80019a8:	2023883a 	mov	r17,r4
 80019ac:	28001b16 	blt	r5,zero,8001a1c <__smakebuf_r+0xa0>
 80019b0:	d80d883a 	mov	r6,sp
 80019b4:	80016980 	call	8001698 <_fstat_r>
 80019b8:	10001716 	blt	r2,zero,8001a18 <__smakebuf_r+0x9c>
 80019bc:	d8800117 	ldw	r2,4(sp)
 80019c0:	00e00014 	movui	r3,32768
 80019c4:	10bc000c 	andi	r2,r2,61440
 80019c8:	10c03726 	beq	r2,r3,8001aa8 <__smakebuf_r+0x12c>
 80019cc:	80c0030b 	ldhu	r3,12(r16)
 80019d0:	18c20014 	ori	r3,r3,2048
 80019d4:	80c0030d 	sth	r3,12(r16)
 80019d8:	00c80004 	movi	r3,8192
 80019dc:	10c03c1e 	bne	r2,r3,8001ad0 <__smakebuf_r+0x154>
 80019e0:	8140038f 	ldh	r5,14(r16)
 80019e4:	8809883a 	mov	r4,r17
 80019e8:	8006c480 	call	8006c48 <_isatty_r>
 80019ec:	10004e26 	beq	r2,zero,8001b28 <__smakebuf_r+0x1ac>
 80019f0:	8080030b 	ldhu	r2,12(r16)
 80019f4:	04c00044 	movi	r19,1
 80019f8:	80c010c4 	addi	r3,r16,67
 80019fc:	14c4b03a 	or	r2,r2,r19
 8001a00:	8080030d 	sth	r2,12(r16)
 8001a04:	80c00015 	stw	r3,0(r16)
 8001a08:	80c00415 	stw	r3,16(r16)
 8001a0c:	84c00515 	stw	r19,20(r16)
 8001a10:	04810004 	movi	r18,1024
 8001a14:	00000706 	br	8001a34 <__smakebuf_r+0xb8>
 8001a18:	8080030b 	ldhu	r2,12(r16)
 8001a1c:	10c0200c 	andi	r3,r2,128
 8001a20:	18001f1e 	bne	r3,zero,8001aa0 <__smakebuf_r+0x124>
 8001a24:	04810004 	movi	r18,1024
 8001a28:	10820014 	ori	r2,r2,2048
 8001a2c:	8080030d 	sth	r2,12(r16)
 8001a30:	0027883a 	mov	r19,zero
 8001a34:	8809883a 	mov	r4,r17
 8001a38:	900b883a 	mov	r5,r18
 8001a3c:	8001b340 	call	8001b34 <_malloc_r>
 8001a40:	10002e26 	beq	r2,zero,8001afc <__smakebuf_r+0x180>
 8001a44:	80c0030b 	ldhu	r3,12(r16)
 8001a48:	01020034 	movhi	r4,2048
 8001a4c:	2101b304 	addi	r4,r4,1740
 8001a50:	89000f15 	stw	r4,60(r17)
 8001a54:	18c02014 	ori	r3,r3,128
 8001a58:	80c0030d 	sth	r3,12(r16)
 8001a5c:	80800015 	stw	r2,0(r16)
 8001a60:	80800415 	stw	r2,16(r16)
 8001a64:	84800515 	stw	r18,20(r16)
 8001a68:	98001c1e 	bne	r19,zero,8001adc <__smakebuf_r+0x160>
 8001a6c:	dfc01317 	ldw	ra,76(sp)
 8001a70:	dcc01217 	ldw	r19,72(sp)
 8001a74:	dc801117 	ldw	r18,68(sp)
 8001a78:	dc401017 	ldw	r17,64(sp)
 8001a7c:	dc000f17 	ldw	r16,60(sp)
 8001a80:	dec01404 	addi	sp,sp,80
 8001a84:	f800283a 	ret
 8001a88:	288010c4 	addi	r2,r5,67
 8001a8c:	28800015 	stw	r2,0(r5)
 8001a90:	28800415 	stw	r2,16(r5)
 8001a94:	00800044 	movi	r2,1
 8001a98:	28800515 	stw	r2,20(r5)
 8001a9c:	f800283a 	ret
 8001aa0:	04801004 	movi	r18,64
 8001aa4:	003fe006 	br	8001a28 <__alt_data_end+0xfc001a28>
 8001aa8:	81000a17 	ldw	r4,40(r16)
 8001aac:	00c20034 	movhi	r3,2048
 8001ab0:	18ca6e04 	addi	r3,r3,10680
 8001ab4:	20ffc51e 	bne	r4,r3,80019cc <__alt_data_end+0xfc0019cc>
 8001ab8:	80c0030b 	ldhu	r3,12(r16)
 8001abc:	01010004 	movi	r4,1024
 8001ac0:	81001315 	stw	r4,76(r16)
 8001ac4:	1906b03a 	or	r3,r3,r4
 8001ac8:	80c0030d 	sth	r3,12(r16)
 8001acc:	003fc206 	br	80019d8 <__alt_data_end+0xfc0019d8>
 8001ad0:	0027883a 	mov	r19,zero
 8001ad4:	04810004 	movi	r18,1024
 8001ad8:	003fd606 	br	8001a34 <__alt_data_end+0xfc001a34>
 8001adc:	8140038f 	ldh	r5,14(r16)
 8001ae0:	8809883a 	mov	r4,r17
 8001ae4:	8006c480 	call	8006c48 <_isatty_r>
 8001ae8:	103fe026 	beq	r2,zero,8001a6c <__alt_data_end+0xfc001a6c>
 8001aec:	8080030b 	ldhu	r2,12(r16)
 8001af0:	10800054 	ori	r2,r2,1
 8001af4:	8080030d 	sth	r2,12(r16)
 8001af8:	003fdc06 	br	8001a6c <__alt_data_end+0xfc001a6c>
 8001afc:	8080030b 	ldhu	r2,12(r16)
 8001b00:	10c0800c 	andi	r3,r2,512
 8001b04:	183fd91e 	bne	r3,zero,8001a6c <__alt_data_end+0xfc001a6c>
 8001b08:	10800094 	ori	r2,r2,2
 8001b0c:	80c010c4 	addi	r3,r16,67
 8001b10:	8080030d 	sth	r2,12(r16)
 8001b14:	00800044 	movi	r2,1
 8001b18:	80c00015 	stw	r3,0(r16)
 8001b1c:	80c00415 	stw	r3,16(r16)
 8001b20:	80800515 	stw	r2,20(r16)
 8001b24:	003fd106 	br	8001a6c <__alt_data_end+0xfc001a6c>
 8001b28:	04c00044 	movi	r19,1
 8001b2c:	04810004 	movi	r18,1024
 8001b30:	003fc006 	br	8001a34 <__alt_data_end+0xfc001a34>

08001b34 <_malloc_r>:
 8001b34:	defff504 	addi	sp,sp,-44
 8001b38:	dc800315 	stw	r18,12(sp)
 8001b3c:	dfc00a15 	stw	ra,40(sp)
 8001b40:	df000915 	stw	fp,36(sp)
 8001b44:	ddc00815 	stw	r23,32(sp)
 8001b48:	dd800715 	stw	r22,28(sp)
 8001b4c:	dd400615 	stw	r21,24(sp)
 8001b50:	dd000515 	stw	r20,20(sp)
 8001b54:	dcc00415 	stw	r19,16(sp)
 8001b58:	dc400215 	stw	r17,8(sp)
 8001b5c:	dc000115 	stw	r16,4(sp)
 8001b60:	288002c4 	addi	r2,r5,11
 8001b64:	00c00584 	movi	r3,22
 8001b68:	2025883a 	mov	r18,r4
 8001b6c:	18802a2e 	bgeu	r3,r2,8001c18 <_malloc_r+0xe4>
 8001b70:	047ffe04 	movi	r17,-8
 8001b74:	1462703a 	and	r17,r2,r17
 8001b78:	88009e16 	blt	r17,zero,8001df4 <_malloc_r+0x2c0>
 8001b7c:	89409d36 	bltu	r17,r5,8001df4 <_malloc_r+0x2c0>
 8001b80:	800de840 	call	800de84 <__malloc_lock>
 8001b84:	00807dc4 	movi	r2,503
 8001b88:	14402736 	bltu	r2,r17,8001c28 <_malloc_r+0xf4>
 8001b8c:	8806d0fa 	srli	r3,r17,3
 8001b90:	04c20074 	movhi	r19,2049
 8001b94:	9cc5d004 	addi	r19,r19,5952
 8001b98:	18c5883a 	add	r2,r3,r3
 8001b9c:	1085883a 	add	r2,r2,r2
 8001ba0:	1085883a 	add	r2,r2,r2
 8001ba4:	9885883a 	add	r2,r19,r2
 8001ba8:	14000317 	ldw	r16,12(r2)
 8001bac:	80814a26 	beq	r16,r2,80020d8 <_malloc_r+0x5a4>
 8001bb0:	80c00117 	ldw	r3,4(r16)
 8001bb4:	81000317 	ldw	r4,12(r16)
 8001bb8:	00bfff04 	movi	r2,-4
 8001bbc:	1884703a 	and	r2,r3,r2
 8001bc0:	81400217 	ldw	r5,8(r16)
 8001bc4:	8085883a 	add	r2,r16,r2
 8001bc8:	10c00117 	ldw	r3,4(r2)
 8001bcc:	29000315 	stw	r4,12(r5)
 8001bd0:	21400215 	stw	r5,8(r4)
 8001bd4:	18c00054 	ori	r3,r3,1
 8001bd8:	10c00115 	stw	r3,4(r2)
 8001bdc:	9009883a 	mov	r4,r18
 8001be0:	800dea40 	call	800dea4 <__malloc_unlock>
 8001be4:	80800204 	addi	r2,r16,8
 8001be8:	dfc00a17 	ldw	ra,40(sp)
 8001bec:	df000917 	ldw	fp,36(sp)
 8001bf0:	ddc00817 	ldw	r23,32(sp)
 8001bf4:	dd800717 	ldw	r22,28(sp)
 8001bf8:	dd400617 	ldw	r21,24(sp)
 8001bfc:	dd000517 	ldw	r20,20(sp)
 8001c00:	dcc00417 	ldw	r19,16(sp)
 8001c04:	dc800317 	ldw	r18,12(sp)
 8001c08:	dc400217 	ldw	r17,8(sp)
 8001c0c:	dc000117 	ldw	r16,4(sp)
 8001c10:	dec00b04 	addi	sp,sp,44
 8001c14:	f800283a 	ret
 8001c18:	04400404 	movi	r17,16
 8001c1c:	89407536 	bltu	r17,r5,8001df4 <_malloc_r+0x2c0>
 8001c20:	800de840 	call	800de84 <__malloc_lock>
 8001c24:	003fd906 	br	8001b8c <__alt_data_end+0xfc001b8c>
 8001c28:	8806d27a 	srli	r3,r17,9
 8001c2c:	18007526 	beq	r3,zero,8001e04 <_malloc_r+0x2d0>
 8001c30:	00800104 	movi	r2,4
 8001c34:	10c0ef36 	bltu	r2,r3,8001ff4 <_malloc_r+0x4c0>
 8001c38:	8806d1ba 	srli	r3,r17,6
 8001c3c:	19c00e04 	addi	r7,r3,56
 8001c40:	39cb883a 	add	r5,r7,r7
 8001c44:	04c20074 	movhi	r19,2049
 8001c48:	294b883a 	add	r5,r5,r5
 8001c4c:	9cc5d004 	addi	r19,r19,5952
 8001c50:	294b883a 	add	r5,r5,r5
 8001c54:	994b883a 	add	r5,r19,r5
 8001c58:	2c000317 	ldw	r16,12(r5)
 8001c5c:	2c000e26 	beq	r5,r16,8001c98 <_malloc_r+0x164>
 8001c60:	80800117 	ldw	r2,4(r16)
 8001c64:	01bfff04 	movi	r6,-4
 8001c68:	010003c4 	movi	r4,15
 8001c6c:	1184703a 	and	r2,r2,r6
 8001c70:	1447c83a 	sub	r3,r2,r17
 8001c74:	20c00716 	blt	r4,r3,8001c94 <_malloc_r+0x160>
 8001c78:	1800650e 	bge	r3,zero,8001e10 <_malloc_r+0x2dc>
 8001c7c:	84000317 	ldw	r16,12(r16)
 8001c80:	2c000526 	beq	r5,r16,8001c98 <_malloc_r+0x164>
 8001c84:	80800117 	ldw	r2,4(r16)
 8001c88:	1184703a 	and	r2,r2,r6
 8001c8c:	1447c83a 	sub	r3,r2,r17
 8001c90:	20fff90e 	bge	r4,r3,8001c78 <__alt_data_end+0xfc001c78>
 8001c94:	39ffffc4 	addi	r7,r7,-1
 8001c98:	38c00044 	addi	r3,r7,1
 8001c9c:	01820074 	movhi	r6,2049
 8001ca0:	9c000417 	ldw	r16,16(r19)
 8001ca4:	3185d004 	addi	r6,r6,5952
 8001ca8:	32400204 	addi	r9,r6,8
 8001cac:	82410326 	beq	r16,r9,80020bc <_malloc_r+0x588>
 8001cb0:	81000117 	ldw	r4,4(r16)
 8001cb4:	00bfff04 	movi	r2,-4
 8001cb8:	208e703a 	and	r7,r4,r2
 8001cbc:	3c45c83a 	sub	r2,r7,r17
 8001cc0:	010003c4 	movi	r4,15
 8001cc4:	2080ee16 	blt	r4,r2,8002080 <_malloc_r+0x54c>
 8001cc8:	32400515 	stw	r9,20(r6)
 8001ccc:	32400415 	stw	r9,16(r6)
 8001cd0:	1000510e 	bge	r2,zero,8001e18 <_malloc_r+0x2e4>
 8001cd4:	00807fc4 	movi	r2,511
 8001cd8:	11c0ce36 	bltu	r2,r7,8002014 <_malloc_r+0x4e0>
 8001cdc:	3808d0fa 	srli	r4,r7,3
 8001ce0:	01c00044 	movi	r7,1
 8001ce4:	30800117 	ldw	r2,4(r6)
 8001ce8:	210b883a 	add	r5,r4,r4
 8001cec:	294b883a 	add	r5,r5,r5
 8001cf0:	2009d0ba 	srai	r4,r4,2
 8001cf4:	294b883a 	add	r5,r5,r5
 8001cf8:	298b883a 	add	r5,r5,r6
 8001cfc:	2a000217 	ldw	r8,8(r5)
 8001d00:	3908983a 	sll	r4,r7,r4
 8001d04:	81400315 	stw	r5,12(r16)
 8001d08:	82000215 	stw	r8,8(r16)
 8001d0c:	2088b03a 	or	r4,r4,r2
 8001d10:	2c000215 	stw	r16,8(r5)
 8001d14:	31000115 	stw	r4,4(r6)
 8001d18:	44000315 	stw	r16,12(r8)
 8001d1c:	1805d0ba 	srai	r2,r3,2
 8001d20:	01400044 	movi	r5,1
 8001d24:	288a983a 	sll	r5,r5,r2
 8001d28:	21404336 	bltu	r4,r5,8001e38 <_malloc_r+0x304>
 8001d2c:	2144703a 	and	r2,r4,r5
 8001d30:	10000a1e 	bne	r2,zero,8001d5c <_malloc_r+0x228>
 8001d34:	00bfff04 	movi	r2,-4
 8001d38:	294b883a 	add	r5,r5,r5
 8001d3c:	1886703a 	and	r3,r3,r2
 8001d40:	2144703a 	and	r2,r4,r5
 8001d44:	18c00104 	addi	r3,r3,4
 8001d48:	1000041e 	bne	r2,zero,8001d5c <_malloc_r+0x228>
 8001d4c:	294b883a 	add	r5,r5,r5
 8001d50:	2144703a 	and	r2,r4,r5
 8001d54:	18c00104 	addi	r3,r3,4
 8001d58:	103ffc26 	beq	r2,zero,8001d4c <__alt_data_end+0xfc001d4c>
 8001d5c:	023fff04 	movi	r8,-4
 8001d60:	01c003c4 	movi	r7,15
 8001d64:	18c5883a 	add	r2,r3,r3
 8001d68:	1085883a 	add	r2,r2,r2
 8001d6c:	1085883a 	add	r2,r2,r2
 8001d70:	9895883a 	add	r10,r19,r2
 8001d74:	52c00304 	addi	r11,r10,12
 8001d78:	1819883a 	mov	r12,r3
 8001d7c:	5c000017 	ldw	r16,0(r11)
 8001d80:	59bffd04 	addi	r6,r11,-12
 8001d84:	8180041e 	bne	r16,r6,8001d98 <_malloc_r+0x264>
 8001d88:	0000ce06 	br	80020c4 <_malloc_r+0x590>
 8001d8c:	2000d70e 	bge	r4,zero,80020ec <_malloc_r+0x5b8>
 8001d90:	84000317 	ldw	r16,12(r16)
 8001d94:	8180cb26 	beq	r16,r6,80020c4 <_malloc_r+0x590>
 8001d98:	80800117 	ldw	r2,4(r16)
 8001d9c:	1204703a 	and	r2,r2,r8
 8001da0:	1449c83a 	sub	r4,r2,r17
 8001da4:	393ff90e 	bge	r7,r4,8001d8c <__alt_data_end+0xfc001d8c>
 8001da8:	80800317 	ldw	r2,12(r16)
 8001dac:	80c00217 	ldw	r3,8(r16)
 8001db0:	89400054 	ori	r5,r17,1
 8001db4:	81400115 	stw	r5,4(r16)
 8001db8:	18800315 	stw	r2,12(r3)
 8001dbc:	10c00215 	stw	r3,8(r2)
 8001dc0:	8463883a 	add	r17,r16,r17
 8001dc4:	9c400515 	stw	r17,20(r19)
 8001dc8:	9c400415 	stw	r17,16(r19)
 8001dcc:	20800054 	ori	r2,r4,1
 8001dd0:	88800115 	stw	r2,4(r17)
 8001dd4:	8a400315 	stw	r9,12(r17)
 8001dd8:	8a400215 	stw	r9,8(r17)
 8001ddc:	8923883a 	add	r17,r17,r4
 8001de0:	89000015 	stw	r4,0(r17)
 8001de4:	9009883a 	mov	r4,r18
 8001de8:	800dea40 	call	800dea4 <__malloc_unlock>
 8001dec:	80800204 	addi	r2,r16,8
 8001df0:	003f7d06 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001df4:	00800304 	movi	r2,12
 8001df8:	90800015 	stw	r2,0(r18)
 8001dfc:	0005883a 	mov	r2,zero
 8001e00:	003f7906 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001e04:	01401f84 	movi	r5,126
 8001e08:	01c00fc4 	movi	r7,63
 8001e0c:	003f8d06 	br	8001c44 <__alt_data_end+0xfc001c44>
 8001e10:	81000317 	ldw	r4,12(r16)
 8001e14:	003f6a06 	br	8001bc0 <__alt_data_end+0xfc001bc0>
 8001e18:	81c5883a 	add	r2,r16,r7
 8001e1c:	10c00117 	ldw	r3,4(r2)
 8001e20:	9009883a 	mov	r4,r18
 8001e24:	18c00054 	ori	r3,r3,1
 8001e28:	10c00115 	stw	r3,4(r2)
 8001e2c:	800dea40 	call	800dea4 <__malloc_unlock>
 8001e30:	80800204 	addi	r2,r16,8
 8001e34:	003f6c06 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001e38:	9c000217 	ldw	r16,8(r19)
 8001e3c:	00bfff04 	movi	r2,-4
 8001e40:	85800117 	ldw	r22,4(r16)
 8001e44:	b0ac703a 	and	r22,r22,r2
 8001e48:	b4400336 	bltu	r22,r17,8001e58 <_malloc_r+0x324>
 8001e4c:	b445c83a 	sub	r2,r22,r17
 8001e50:	00c003c4 	movi	r3,15
 8001e54:	18805d16 	blt	r3,r2,8001fcc <_malloc_r+0x498>
 8001e58:	05c20074 	movhi	r23,2049
 8001e5c:	00820074 	movhi	r2,2049
 8001e60:	bdcbb004 	addi	r23,r23,11968
 8001e64:	1092b804 	addi	r2,r2,19168
 8001e68:	15400017 	ldw	r21,0(r2)
 8001e6c:	b9000017 	ldw	r4,0(r23)
 8001e70:	00ffffc4 	movi	r3,-1
 8001e74:	858d883a 	add	r6,r16,r22
 8001e78:	8d6b883a 	add	r21,r17,r21
 8001e7c:	20c0e426 	beq	r4,r3,8002210 <_malloc_r+0x6dc>
 8001e80:	ad4403c4 	addi	r21,r21,4111
 8001e84:	00fc0004 	movi	r3,-4096
 8001e88:	a8ea703a 	and	r21,r21,r3
 8001e8c:	9009883a 	mov	r4,r18
 8001e90:	a80b883a 	mov	r5,r21
 8001e94:	d9800015 	stw	r6,0(sp)
 8001e98:	800288c0 	call	800288c <_sbrk_r>
 8001e9c:	00ffffc4 	movi	r3,-1
 8001ea0:	1029883a 	mov	r20,r2
 8001ea4:	d9800017 	ldw	r6,0(sp)
 8001ea8:	10c0a426 	beq	r2,r3,800213c <_malloc_r+0x608>
 8001eac:	1180a236 	bltu	r2,r6,8002138 <_malloc_r+0x604>
 8001eb0:	07020074 	movhi	fp,2049
 8001eb4:	e712c204 	addi	fp,fp,19208
 8001eb8:	e0c00017 	ldw	r3,0(fp)
 8001ebc:	a8c7883a 	add	r3,r21,r3
 8001ec0:	e0c00015 	stw	r3,0(fp)
 8001ec4:	3500da26 	beq	r6,r20,8002230 <_malloc_r+0x6fc>
 8001ec8:	b9000017 	ldw	r4,0(r23)
 8001ecc:	00bfffc4 	movi	r2,-1
 8001ed0:	2080e426 	beq	r4,r2,8002264 <_malloc_r+0x730>
 8001ed4:	a185c83a 	sub	r2,r20,r6
 8001ed8:	1885883a 	add	r2,r3,r2
 8001edc:	e0800015 	stw	r2,0(fp)
 8001ee0:	a0c001cc 	andi	r3,r20,7
 8001ee4:	1800b526 	beq	r3,zero,80021bc <_malloc_r+0x688>
 8001ee8:	a0e9c83a 	sub	r20,r20,r3
 8001eec:	00840204 	movi	r2,4104
 8001ef0:	a5000204 	addi	r20,r20,8
 8001ef4:	10c7c83a 	sub	r3,r2,r3
 8001ef8:	a545883a 	add	r2,r20,r21
 8001efc:	1083ffcc 	andi	r2,r2,4095
 8001f00:	18abc83a 	sub	r21,r3,r2
 8001f04:	9009883a 	mov	r4,r18
 8001f08:	a80b883a 	mov	r5,r21
 8001f0c:	800288c0 	call	800288c <_sbrk_r>
 8001f10:	00ffffc4 	movi	r3,-1
 8001f14:	10c0d026 	beq	r2,r3,8002258 <_malloc_r+0x724>
 8001f18:	1507c83a 	sub	r3,r2,r20
 8001f1c:	a8c7883a 	add	r3,r21,r3
 8001f20:	18c00054 	ori	r3,r3,1
 8001f24:	e0800017 	ldw	r2,0(fp)
 8001f28:	9d000215 	stw	r20,8(r19)
 8001f2c:	a0c00115 	stw	r3,4(r20)
 8001f30:	a887883a 	add	r3,r21,r2
 8001f34:	e0c00015 	stw	r3,0(fp)
 8001f38:	84c00e26 	beq	r16,r19,8001f74 <_malloc_r+0x440>
 8001f3c:	018003c4 	movi	r6,15
 8001f40:	3580a02e 	bgeu	r6,r22,80021c4 <_malloc_r+0x690>
 8001f44:	81400117 	ldw	r5,4(r16)
 8001f48:	013ffe04 	movi	r4,-8
 8001f4c:	b0bffd04 	addi	r2,r22,-12
 8001f50:	1104703a 	and	r2,r2,r4
 8001f54:	2900004c 	andi	r4,r5,1
 8001f58:	1108b03a 	or	r4,r2,r4
 8001f5c:	81000115 	stw	r4,4(r16)
 8001f60:	01400144 	movi	r5,5
 8001f64:	8089883a 	add	r4,r16,r2
 8001f68:	21400115 	stw	r5,4(r4)
 8001f6c:	21400215 	stw	r5,8(r4)
 8001f70:	3080c036 	bltu	r6,r2,8002274 <_malloc_r+0x740>
 8001f74:	00820074 	movhi	r2,2049
 8001f78:	1092b704 	addi	r2,r2,19164
 8001f7c:	11000017 	ldw	r4,0(r2)
 8001f80:	20c0012e 	bgeu	r4,r3,8001f88 <_malloc_r+0x454>
 8001f84:	10c00015 	stw	r3,0(r2)
 8001f88:	00820074 	movhi	r2,2049
 8001f8c:	1092b604 	addi	r2,r2,19160
 8001f90:	11000017 	ldw	r4,0(r2)
 8001f94:	9c000217 	ldw	r16,8(r19)
 8001f98:	20c0012e 	bgeu	r4,r3,8001fa0 <_malloc_r+0x46c>
 8001f9c:	10c00015 	stw	r3,0(r2)
 8001fa0:	80c00117 	ldw	r3,4(r16)
 8001fa4:	00bfff04 	movi	r2,-4
 8001fa8:	1886703a 	and	r3,r3,r2
 8001fac:	1c45c83a 	sub	r2,r3,r17
 8001fb0:	1c400236 	bltu	r3,r17,8001fbc <_malloc_r+0x488>
 8001fb4:	00c003c4 	movi	r3,15
 8001fb8:	18800416 	blt	r3,r2,8001fcc <_malloc_r+0x498>
 8001fbc:	9009883a 	mov	r4,r18
 8001fc0:	800dea40 	call	800dea4 <__malloc_unlock>
 8001fc4:	0005883a 	mov	r2,zero
 8001fc8:	003f0706 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001fcc:	88c00054 	ori	r3,r17,1
 8001fd0:	80c00115 	stw	r3,4(r16)
 8001fd4:	8463883a 	add	r17,r16,r17
 8001fd8:	10800054 	ori	r2,r2,1
 8001fdc:	9c400215 	stw	r17,8(r19)
 8001fe0:	88800115 	stw	r2,4(r17)
 8001fe4:	9009883a 	mov	r4,r18
 8001fe8:	800dea40 	call	800dea4 <__malloc_unlock>
 8001fec:	80800204 	addi	r2,r16,8
 8001ff0:	003efd06 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001ff4:	00800504 	movi	r2,20
 8001ff8:	10c0482e 	bgeu	r2,r3,800211c <_malloc_r+0x5e8>
 8001ffc:	00801504 	movi	r2,84
 8002000:	10c06836 	bltu	r2,r3,80021a4 <_malloc_r+0x670>
 8002004:	8806d33a 	srli	r3,r17,12
 8002008:	19c01b84 	addi	r7,r3,110
 800200c:	39cb883a 	add	r5,r7,r7
 8002010:	003f0c06 	br	8001c44 <__alt_data_end+0xfc001c44>
 8002014:	3804d27a 	srli	r2,r7,9
 8002018:	01000104 	movi	r4,4
 800201c:	2080422e 	bgeu	r4,r2,8002128 <_malloc_r+0x5f4>
 8002020:	01000504 	movi	r4,20
 8002024:	20807c36 	bltu	r4,r2,8002218 <_malloc_r+0x6e4>
 8002028:	110016c4 	addi	r4,r2,91
 800202c:	210b883a 	add	r5,r4,r4
 8002030:	294b883a 	add	r5,r5,r5
 8002034:	294b883a 	add	r5,r5,r5
 8002038:	994b883a 	add	r5,r19,r5
 800203c:	28800217 	ldw	r2,8(r5)
 8002040:	02020074 	movhi	r8,2049
 8002044:	4205d004 	addi	r8,r8,5952
 8002048:	11406326 	beq	r2,r5,80021d8 <_malloc_r+0x6a4>
 800204c:	01bfff04 	movi	r6,-4
 8002050:	11000117 	ldw	r4,4(r2)
 8002054:	2188703a 	and	r4,r4,r6
 8002058:	3900022e 	bgeu	r7,r4,8002064 <_malloc_r+0x530>
 800205c:	10800217 	ldw	r2,8(r2)
 8002060:	28bffb1e 	bne	r5,r2,8002050 <__alt_data_end+0xfc002050>
 8002064:	11800317 	ldw	r6,12(r2)
 8002068:	99000117 	ldw	r4,4(r19)
 800206c:	81800315 	stw	r6,12(r16)
 8002070:	80800215 	stw	r2,8(r16)
 8002074:	34000215 	stw	r16,8(r6)
 8002078:	14000315 	stw	r16,12(r2)
 800207c:	003f2706 	br	8001d1c <__alt_data_end+0xfc001d1c>
 8002080:	88c00054 	ori	r3,r17,1
 8002084:	80c00115 	stw	r3,4(r16)
 8002088:	8463883a 	add	r17,r16,r17
 800208c:	34400515 	stw	r17,20(r6)
 8002090:	34400415 	stw	r17,16(r6)
 8002094:	10c00054 	ori	r3,r2,1
 8002098:	8a400315 	stw	r9,12(r17)
 800209c:	8a400215 	stw	r9,8(r17)
 80020a0:	88c00115 	stw	r3,4(r17)
 80020a4:	88a3883a 	add	r17,r17,r2
 80020a8:	88800015 	stw	r2,0(r17)
 80020ac:	9009883a 	mov	r4,r18
 80020b0:	800dea40 	call	800dea4 <__malloc_unlock>
 80020b4:	80800204 	addi	r2,r16,8
 80020b8:	003ecb06 	br	8001be8 <__alt_data_end+0xfc001be8>
 80020bc:	31000117 	ldw	r4,4(r6)
 80020c0:	003f1606 	br	8001d1c <__alt_data_end+0xfc001d1c>
 80020c4:	63000044 	addi	r12,r12,1
 80020c8:	608000cc 	andi	r2,r12,3
 80020cc:	5ac00204 	addi	r11,r11,8
 80020d0:	103f2a1e 	bne	r2,zero,8001d7c <__alt_data_end+0xfc001d7c>
 80020d4:	00002106 	br	800215c <_malloc_r+0x628>
 80020d8:	80800204 	addi	r2,r16,8
 80020dc:	84000517 	ldw	r16,20(r16)
 80020e0:	143eb31e 	bne	r2,r16,8001bb0 <__alt_data_end+0xfc001bb0>
 80020e4:	18c00084 	addi	r3,r3,2
 80020e8:	003eec06 	br	8001c9c <__alt_data_end+0xfc001c9c>
 80020ec:	8085883a 	add	r2,r16,r2
 80020f0:	10c00117 	ldw	r3,4(r2)
 80020f4:	81000317 	ldw	r4,12(r16)
 80020f8:	81400217 	ldw	r5,8(r16)
 80020fc:	18c00054 	ori	r3,r3,1
 8002100:	10c00115 	stw	r3,4(r2)
 8002104:	29000315 	stw	r4,12(r5)
 8002108:	21400215 	stw	r5,8(r4)
 800210c:	9009883a 	mov	r4,r18
 8002110:	800dea40 	call	800dea4 <__malloc_unlock>
 8002114:	80800204 	addi	r2,r16,8
 8002118:	003eb306 	br	8001be8 <__alt_data_end+0xfc001be8>
 800211c:	19c016c4 	addi	r7,r3,91
 8002120:	39cb883a 	add	r5,r7,r7
 8002124:	003ec706 	br	8001c44 <__alt_data_end+0xfc001c44>
 8002128:	3804d1ba 	srli	r2,r7,6
 800212c:	11000e04 	addi	r4,r2,56
 8002130:	210b883a 	add	r5,r4,r4
 8002134:	003fbe06 	br	8002030 <__alt_data_end+0xfc002030>
 8002138:	84ff5d26 	beq	r16,r19,8001eb0 <__alt_data_end+0xfc001eb0>
 800213c:	9c000217 	ldw	r16,8(r19)
 8002140:	00bfff04 	movi	r2,-4
 8002144:	80c00117 	ldw	r3,4(r16)
 8002148:	1886703a 	and	r3,r3,r2
 800214c:	003f9706 	br	8001fac <__alt_data_end+0xfc001fac>
 8002150:	52800017 	ldw	r10,0(r10)
 8002154:	18ffffc4 	addi	r3,r3,-1
 8002158:	50805c1e 	bne	r10,r2,80022cc <_malloc_r+0x798>
 800215c:	190000cc 	andi	r4,r3,3
 8002160:	50bffe04 	addi	r2,r10,-8
 8002164:	203ffa1e 	bne	r4,zero,8002150 <__alt_data_end+0xfc002150>
 8002168:	98800117 	ldw	r2,4(r19)
 800216c:	0146303a 	nor	r3,zero,r5
 8002170:	1884703a 	and	r2,r3,r2
 8002174:	98800115 	stw	r2,4(r19)
 8002178:	294b883a 	add	r5,r5,r5
 800217c:	117f2e36 	bltu	r2,r5,8001e38 <__alt_data_end+0xfc001e38>
 8002180:	283f2d26 	beq	r5,zero,8001e38 <__alt_data_end+0xfc001e38>
 8002184:	1146703a 	and	r3,r2,r5
 8002188:	1800521e 	bne	r3,zero,80022d4 <_malloc_r+0x7a0>
 800218c:	6007883a 	mov	r3,r12
 8002190:	294b883a 	add	r5,r5,r5
 8002194:	1148703a 	and	r4,r2,r5
 8002198:	18c00104 	addi	r3,r3,4
 800219c:	203ffc26 	beq	r4,zero,8002190 <__alt_data_end+0xfc002190>
 80021a0:	003ef006 	br	8001d64 <__alt_data_end+0xfc001d64>
 80021a4:	00805504 	movi	r2,340
 80021a8:	10c01336 	bltu	r2,r3,80021f8 <_malloc_r+0x6c4>
 80021ac:	8806d3fa 	srli	r3,r17,15
 80021b0:	19c01dc4 	addi	r7,r3,119
 80021b4:	39cb883a 	add	r5,r7,r7
 80021b8:	003ea206 	br	8001c44 <__alt_data_end+0xfc001c44>
 80021bc:	00c40004 	movi	r3,4096
 80021c0:	003f4d06 	br	8001ef8 <__alt_data_end+0xfc001ef8>
 80021c4:	00800044 	movi	r2,1
 80021c8:	a0800115 	stw	r2,4(r20)
 80021cc:	a021883a 	mov	r16,r20
 80021d0:	0007883a 	mov	r3,zero
 80021d4:	003f7506 	br	8001fac <__alt_data_end+0xfc001fac>
 80021d8:	200bd0ba 	srai	r5,r4,2
 80021dc:	01800044 	movi	r6,1
 80021e0:	41000117 	ldw	r4,4(r8)
 80021e4:	314a983a 	sll	r5,r6,r5
 80021e8:	100d883a 	mov	r6,r2
 80021ec:	2908b03a 	or	r4,r5,r4
 80021f0:	41000115 	stw	r4,4(r8)
 80021f4:	003f9d06 	br	800206c <__alt_data_end+0xfc00206c>
 80021f8:	00815504 	movi	r2,1364
 80021fc:	10c01336 	bltu	r2,r3,800224c <_malloc_r+0x718>
 8002200:	8806d4ba 	srli	r3,r17,18
 8002204:	19c01f04 	addi	r7,r3,124
 8002208:	39cb883a 	add	r5,r7,r7
 800220c:	003e8d06 	br	8001c44 <__alt_data_end+0xfc001c44>
 8002210:	ad400404 	addi	r21,r21,16
 8002214:	003f1d06 	br	8001e8c <__alt_data_end+0xfc001e8c>
 8002218:	01001504 	movi	r4,84
 800221c:	20801c36 	bltu	r4,r2,8002290 <_malloc_r+0x75c>
 8002220:	3804d33a 	srli	r2,r7,12
 8002224:	11001b84 	addi	r4,r2,110
 8002228:	210b883a 	add	r5,r4,r4
 800222c:	003f8006 	br	8002030 <__alt_data_end+0xfc002030>
 8002230:	3083ffcc 	andi	r2,r6,4095
 8002234:	103f241e 	bne	r2,zero,8001ec8 <__alt_data_end+0xfc001ec8>
 8002238:	99000217 	ldw	r4,8(r19)
 800223c:	ad85883a 	add	r2,r21,r22
 8002240:	10800054 	ori	r2,r2,1
 8002244:	20800115 	stw	r2,4(r4)
 8002248:	003f4a06 	br	8001f74 <__alt_data_end+0xfc001f74>
 800224c:	01403f04 	movi	r5,252
 8002250:	01c01f84 	movi	r7,126
 8002254:	003e7b06 	br	8001c44 <__alt_data_end+0xfc001c44>
 8002258:	00c00044 	movi	r3,1
 800225c:	002b883a 	mov	r21,zero
 8002260:	003f3006 	br	8001f24 <__alt_data_end+0xfc001f24>
 8002264:	00820074 	movhi	r2,2049
 8002268:	108bb004 	addi	r2,r2,11968
 800226c:	15000015 	stw	r20,0(r2)
 8002270:	003f1b06 	br	8001ee0 <__alt_data_end+0xfc001ee0>
 8002274:	9009883a 	mov	r4,r18
 8002278:	81400204 	addi	r5,r16,8
 800227c:	8000f300 	call	8000f30 <_free_r>
 8002280:	00820074 	movhi	r2,2049
 8002284:	1092c204 	addi	r2,r2,19208
 8002288:	10c00017 	ldw	r3,0(r2)
 800228c:	003f3906 	br	8001f74 <__alt_data_end+0xfc001f74>
 8002290:	01005504 	movi	r4,340
 8002294:	20800436 	bltu	r4,r2,80022a8 <_malloc_r+0x774>
 8002298:	3804d3fa 	srli	r2,r7,15
 800229c:	11001dc4 	addi	r4,r2,119
 80022a0:	210b883a 	add	r5,r4,r4
 80022a4:	003f6206 	br	8002030 <__alt_data_end+0xfc002030>
 80022a8:	01015504 	movi	r4,1364
 80022ac:	20800436 	bltu	r4,r2,80022c0 <_malloc_r+0x78c>
 80022b0:	3804d4ba 	srli	r2,r7,18
 80022b4:	11001f04 	addi	r4,r2,124
 80022b8:	210b883a 	add	r5,r4,r4
 80022bc:	003f5c06 	br	8002030 <__alt_data_end+0xfc002030>
 80022c0:	01403f04 	movi	r5,252
 80022c4:	01001f84 	movi	r4,126
 80022c8:	003f5906 	br	8002030 <__alt_data_end+0xfc002030>
 80022cc:	98800117 	ldw	r2,4(r19)
 80022d0:	003fa906 	br	8002178 <__alt_data_end+0xfc002178>
 80022d4:	6007883a 	mov	r3,r12
 80022d8:	003ea206 	br	8001d64 <__alt_data_end+0xfc001d64>

080022dc <memcpy>:
 80022dc:	deffff04 	addi	sp,sp,-4
 80022e0:	dc000015 	stw	r16,0(sp)
 80022e4:	00c003c4 	movi	r3,15
 80022e8:	2005883a 	mov	r2,r4
 80022ec:	1980432e 	bgeu	r3,r6,80023fc <memcpy+0x120>
 80022f0:	2146b03a 	or	r3,r4,r5
 80022f4:	18c000cc 	andi	r3,r3,3
 80022f8:	1800421e 	bne	r3,zero,8002404 <memcpy+0x128>
 80022fc:	343ffc04 	addi	r16,r6,-16
 8002300:	8020d13a 	srli	r16,r16,4
 8002304:	28c00104 	addi	r3,r5,4
 8002308:	23400104 	addi	r13,r4,4
 800230c:	801e913a 	slli	r15,r16,4
 8002310:	2b000204 	addi	r12,r5,8
 8002314:	22c00204 	addi	r11,r4,8
 8002318:	7bc00504 	addi	r15,r15,20
 800231c:	2a800304 	addi	r10,r5,12
 8002320:	22400304 	addi	r9,r4,12
 8002324:	2bdf883a 	add	r15,r5,r15
 8002328:	2811883a 	mov	r8,r5
 800232c:	200f883a 	mov	r7,r4
 8002330:	41000017 	ldw	r4,0(r8)
 8002334:	39c00404 	addi	r7,r7,16
 8002338:	18c00404 	addi	r3,r3,16
 800233c:	393ffc15 	stw	r4,-16(r7)
 8002340:	1bbffc17 	ldw	r14,-16(r3)
 8002344:	6b400404 	addi	r13,r13,16
 8002348:	5ac00404 	addi	r11,r11,16
 800234c:	6bbffc15 	stw	r14,-16(r13)
 8002350:	63800017 	ldw	r14,0(r12)
 8002354:	4a400404 	addi	r9,r9,16
 8002358:	42000404 	addi	r8,r8,16
 800235c:	5bbffc15 	stw	r14,-16(r11)
 8002360:	53800017 	ldw	r14,0(r10)
 8002364:	63000404 	addi	r12,r12,16
 8002368:	52800404 	addi	r10,r10,16
 800236c:	4bbffc15 	stw	r14,-16(r9)
 8002370:	1bffef1e 	bne	r3,r15,8002330 <__alt_data_end+0xfc002330>
 8002374:	81c00044 	addi	r7,r16,1
 8002378:	380e913a 	slli	r7,r7,4
 800237c:	310003cc 	andi	r4,r6,15
 8002380:	02c000c4 	movi	r11,3
 8002384:	11c7883a 	add	r3,r2,r7
 8002388:	29cb883a 	add	r5,r5,r7
 800238c:	59001f2e 	bgeu	r11,r4,800240c <memcpy+0x130>
 8002390:	1813883a 	mov	r9,r3
 8002394:	2811883a 	mov	r8,r5
 8002398:	200f883a 	mov	r7,r4
 800239c:	42800017 	ldw	r10,0(r8)
 80023a0:	4a400104 	addi	r9,r9,4
 80023a4:	39ffff04 	addi	r7,r7,-4
 80023a8:	4abfff15 	stw	r10,-4(r9)
 80023ac:	42000104 	addi	r8,r8,4
 80023b0:	59fffa36 	bltu	r11,r7,800239c <__alt_data_end+0xfc00239c>
 80023b4:	213fff04 	addi	r4,r4,-4
 80023b8:	2008d0ba 	srli	r4,r4,2
 80023bc:	318000cc 	andi	r6,r6,3
 80023c0:	21000044 	addi	r4,r4,1
 80023c4:	2109883a 	add	r4,r4,r4
 80023c8:	2109883a 	add	r4,r4,r4
 80023cc:	1907883a 	add	r3,r3,r4
 80023d0:	290b883a 	add	r5,r5,r4
 80023d4:	30000626 	beq	r6,zero,80023f0 <memcpy+0x114>
 80023d8:	198d883a 	add	r6,r3,r6
 80023dc:	29c00003 	ldbu	r7,0(r5)
 80023e0:	18c00044 	addi	r3,r3,1
 80023e4:	29400044 	addi	r5,r5,1
 80023e8:	19ffffc5 	stb	r7,-1(r3)
 80023ec:	19bffb1e 	bne	r3,r6,80023dc <__alt_data_end+0xfc0023dc>
 80023f0:	dc000017 	ldw	r16,0(sp)
 80023f4:	dec00104 	addi	sp,sp,4
 80023f8:	f800283a 	ret
 80023fc:	2007883a 	mov	r3,r4
 8002400:	003ff406 	br	80023d4 <__alt_data_end+0xfc0023d4>
 8002404:	2007883a 	mov	r3,r4
 8002408:	003ff306 	br	80023d8 <__alt_data_end+0xfc0023d8>
 800240c:	200d883a 	mov	r6,r4
 8002410:	003ff006 	br	80023d4 <__alt_data_end+0xfc0023d4>

08002414 <memset>:
 8002414:	20c000cc 	andi	r3,r4,3
 8002418:	2005883a 	mov	r2,r4
 800241c:	18004326 	beq	r3,zero,800252c <memset+0x118>
 8002420:	31ffffc4 	addi	r7,r6,-1
 8002424:	30004026 	beq	r6,zero,8002528 <memset+0x114>
 8002428:	2813883a 	mov	r9,r5
 800242c:	200d883a 	mov	r6,r4
 8002430:	2007883a 	mov	r3,r4
 8002434:	00000406 	br	8002448 <memset+0x34>
 8002438:	3a3fffc4 	addi	r8,r7,-1
 800243c:	31800044 	addi	r6,r6,1
 8002440:	38003926 	beq	r7,zero,8002528 <memset+0x114>
 8002444:	400f883a 	mov	r7,r8
 8002448:	18c00044 	addi	r3,r3,1
 800244c:	32400005 	stb	r9,0(r6)
 8002450:	1a0000cc 	andi	r8,r3,3
 8002454:	403ff81e 	bne	r8,zero,8002438 <__alt_data_end+0xfc002438>
 8002458:	010000c4 	movi	r4,3
 800245c:	21c02d2e 	bgeu	r4,r7,8002514 <memset+0x100>
 8002460:	29803fcc 	andi	r6,r5,255
 8002464:	3008923a 	slli	r4,r6,8
 8002468:	218cb03a 	or	r6,r4,r6
 800246c:	3008943a 	slli	r4,r6,16
 8002470:	218cb03a 	or	r6,r4,r6
 8002474:	010003c4 	movi	r4,15
 8002478:	21c0182e 	bgeu	r4,r7,80024dc <memset+0xc8>
 800247c:	3b3ffc04 	addi	r12,r7,-16
 8002480:	6018d13a 	srli	r12,r12,4
 8002484:	1a000104 	addi	r8,r3,4
 8002488:	1ac00204 	addi	r11,r3,8
 800248c:	6008913a 	slli	r4,r12,4
 8002490:	1a800304 	addi	r10,r3,12
 8002494:	1813883a 	mov	r9,r3
 8002498:	21000504 	addi	r4,r4,20
 800249c:	1909883a 	add	r4,r3,r4
 80024a0:	49800015 	stw	r6,0(r9)
 80024a4:	41800015 	stw	r6,0(r8)
 80024a8:	59800015 	stw	r6,0(r11)
 80024ac:	51800015 	stw	r6,0(r10)
 80024b0:	42000404 	addi	r8,r8,16
 80024b4:	4a400404 	addi	r9,r9,16
 80024b8:	5ac00404 	addi	r11,r11,16
 80024bc:	52800404 	addi	r10,r10,16
 80024c0:	413ff71e 	bne	r8,r4,80024a0 <__alt_data_end+0xfc0024a0>
 80024c4:	63000044 	addi	r12,r12,1
 80024c8:	6018913a 	slli	r12,r12,4
 80024cc:	39c003cc 	andi	r7,r7,15
 80024d0:	010000c4 	movi	r4,3
 80024d4:	1b07883a 	add	r3,r3,r12
 80024d8:	21c00e2e 	bgeu	r4,r7,8002514 <memset+0x100>
 80024dc:	1813883a 	mov	r9,r3
 80024e0:	3811883a 	mov	r8,r7
 80024e4:	010000c4 	movi	r4,3
 80024e8:	49800015 	stw	r6,0(r9)
 80024ec:	423fff04 	addi	r8,r8,-4
 80024f0:	4a400104 	addi	r9,r9,4
 80024f4:	223ffc36 	bltu	r4,r8,80024e8 <__alt_data_end+0xfc0024e8>
 80024f8:	393fff04 	addi	r4,r7,-4
 80024fc:	2008d0ba 	srli	r4,r4,2
 8002500:	39c000cc 	andi	r7,r7,3
 8002504:	21000044 	addi	r4,r4,1
 8002508:	2109883a 	add	r4,r4,r4
 800250c:	2109883a 	add	r4,r4,r4
 8002510:	1907883a 	add	r3,r3,r4
 8002514:	38000426 	beq	r7,zero,8002528 <memset+0x114>
 8002518:	19cf883a 	add	r7,r3,r7
 800251c:	19400005 	stb	r5,0(r3)
 8002520:	18c00044 	addi	r3,r3,1
 8002524:	19fffd1e 	bne	r3,r7,800251c <__alt_data_end+0xfc00251c>
 8002528:	f800283a 	ret
 800252c:	2007883a 	mov	r3,r4
 8002530:	300f883a 	mov	r7,r6
 8002534:	003fc806 	br	8002458 <__alt_data_end+0xfc002458>

08002538 <_open_r>:
 8002538:	defffd04 	addi	sp,sp,-12
 800253c:	dc000015 	stw	r16,0(sp)
 8002540:	04020074 	movhi	r16,2049
 8002544:	dc400115 	stw	r17,4(sp)
 8002548:	8412b504 	addi	r16,r16,19156
 800254c:	2023883a 	mov	r17,r4
 8002550:	2809883a 	mov	r4,r5
 8002554:	300b883a 	mov	r5,r6
 8002558:	380d883a 	mov	r6,r7
 800255c:	dfc00215 	stw	ra,8(sp)
 8002560:	80000015 	stw	zero,0(r16)
 8002564:	800e0080 	call	800e008 <open>
 8002568:	00ffffc4 	movi	r3,-1
 800256c:	10c00526 	beq	r2,r3,8002584 <_open_r+0x4c>
 8002570:	dfc00217 	ldw	ra,8(sp)
 8002574:	dc400117 	ldw	r17,4(sp)
 8002578:	dc000017 	ldw	r16,0(sp)
 800257c:	dec00304 	addi	sp,sp,12
 8002580:	f800283a 	ret
 8002584:	80c00017 	ldw	r3,0(r16)
 8002588:	183ff926 	beq	r3,zero,8002570 <__alt_data_end+0xfc002570>
 800258c:	88c00015 	stw	r3,0(r17)
 8002590:	003ff706 	br	8002570 <__alt_data_end+0xfc002570>

08002594 <_printf_r>:
 8002594:	defffd04 	addi	sp,sp,-12
 8002598:	dfc00015 	stw	ra,0(sp)
 800259c:	d9800115 	stw	r6,4(sp)
 80025a0:	d9c00215 	stw	r7,8(sp)
 80025a4:	280d883a 	mov	r6,r5
 80025a8:	21400217 	ldw	r5,8(r4)
 80025ac:	d9c00104 	addi	r7,sp,4
 80025b0:	8002abc0 	call	8002abc <___vfprintf_internal_r>
 80025b4:	dfc00017 	ldw	ra,0(sp)
 80025b8:	dec00304 	addi	sp,sp,12
 80025bc:	f800283a 	ret

080025c0 <printf>:
 80025c0:	defffc04 	addi	sp,sp,-16
 80025c4:	dfc00015 	stw	ra,0(sp)
 80025c8:	d9400115 	stw	r5,4(sp)
 80025cc:	d9800215 	stw	r6,8(sp)
 80025d0:	d9c00315 	stw	r7,12(sp)
 80025d4:	00820074 	movhi	r2,2049
 80025d8:	108baf04 	addi	r2,r2,11964
 80025dc:	10800017 	ldw	r2,0(r2)
 80025e0:	200b883a 	mov	r5,r4
 80025e4:	d9800104 	addi	r6,sp,4
 80025e8:	11000217 	ldw	r4,8(r2)
 80025ec:	8004bb80 	call	8004bb8 <__vfprintf_internal>
 80025f0:	dfc00017 	ldw	ra,0(sp)
 80025f4:	dec00404 	addi	sp,sp,16
 80025f8:	f800283a 	ret

080025fc <_puts_r>:
 80025fc:	defff604 	addi	sp,sp,-40
 8002600:	dc000715 	stw	r16,28(sp)
 8002604:	2021883a 	mov	r16,r4
 8002608:	2809883a 	mov	r4,r5
 800260c:	dc400815 	stw	r17,32(sp)
 8002610:	dfc00915 	stw	ra,36(sp)
 8002614:	2823883a 	mov	r17,r5
 8002618:	8002a1c0 	call	8002a1c <strlen>
 800261c:	00c20074 	movhi	r3,2049
 8002620:	18cbaf04 	addi	r3,r3,11964
 8002624:	18c00017 	ldw	r3,0(r3)
 8002628:	11000044 	addi	r4,r2,1
 800262c:	d8800115 	stw	r2,4(sp)
 8002630:	18c00217 	ldw	r3,8(r3)
 8002634:	01420074 	movhi	r5,2049
 8002638:	2943ff04 	addi	r5,r5,4092
 800263c:	1880030b 	ldhu	r2,12(r3)
 8002640:	d9400215 	stw	r5,8(sp)
 8002644:	d9000615 	stw	r4,24(sp)
 8002648:	01400044 	movi	r5,1
 800264c:	01000084 	movi	r4,2
 8002650:	d9000515 	stw	r4,20(sp)
 8002654:	dc400015 	stw	r17,0(sp)
 8002658:	d9400315 	stw	r5,12(sp)
 800265c:	dec00415 	stw	sp,16(sp)
 8002660:	1108000c 	andi	r4,r2,8192
 8002664:	2000061e 	bne	r4,zero,8002680 <_puts_r+0x84>
 8002668:	19401917 	ldw	r5,100(r3)
 800266c:	0137ffc4 	movi	r4,-8193
 8002670:	10880014 	ori	r2,r2,8192
 8002674:	2908703a 	and	r4,r5,r4
 8002678:	1880030d 	sth	r2,12(r3)
 800267c:	19001915 	stw	r4,100(r3)
 8002680:	81400217 	ldw	r5,8(r16)
 8002684:	8009883a 	mov	r4,r16
 8002688:	d9800404 	addi	r6,sp,16
 800268c:	80067a40 	call	80067a4 <__sfvwrite_r>
 8002690:	1000061e 	bne	r2,zero,80026ac <_puts_r+0xb0>
 8002694:	00800284 	movi	r2,10
 8002698:	dfc00917 	ldw	ra,36(sp)
 800269c:	dc400817 	ldw	r17,32(sp)
 80026a0:	dc000717 	ldw	r16,28(sp)
 80026a4:	dec00a04 	addi	sp,sp,40
 80026a8:	f800283a 	ret
 80026ac:	00bfffc4 	movi	r2,-1
 80026b0:	003ff906 	br	8002698 <__alt_data_end+0xfc002698>

080026b4 <puts>:
 80026b4:	00820074 	movhi	r2,2049
 80026b8:	108baf04 	addi	r2,r2,11964
 80026bc:	200b883a 	mov	r5,r4
 80026c0:	11000017 	ldw	r4,0(r2)
 80026c4:	80025fc1 	jmpi	80025fc <_puts_r>

080026c8 <lflush>:
 80026c8:	2080030b 	ldhu	r2,12(r4)
 80026cc:	00c00244 	movi	r3,9
 80026d0:	1080024c 	andi	r2,r2,9
 80026d4:	10c00226 	beq	r2,r3,80026e0 <lflush+0x18>
 80026d8:	0005883a 	mov	r2,zero
 80026dc:	f800283a 	ret
 80026e0:	800068c1 	jmpi	800068c <fflush>

080026e4 <__srefill_r>:
 80026e4:	defffd04 	addi	sp,sp,-12
 80026e8:	dc400115 	stw	r17,4(sp)
 80026ec:	dc000015 	stw	r16,0(sp)
 80026f0:	dfc00215 	stw	ra,8(sp)
 80026f4:	2023883a 	mov	r17,r4
 80026f8:	2821883a 	mov	r16,r5
 80026fc:	20000226 	beq	r4,zero,8002708 <__srefill_r+0x24>
 8002700:	20800e17 	ldw	r2,56(r4)
 8002704:	10003b26 	beq	r2,zero,80027f4 <__srefill_r+0x110>
 8002708:	80c0030b 	ldhu	r3,12(r16)
 800270c:	1908000c 	andi	r4,r3,8192
 8002710:	1805883a 	mov	r2,r3
 8002714:	2000071e 	bne	r4,zero,8002734 <__srefill_r+0x50>
 8002718:	81001917 	ldw	r4,100(r16)
 800271c:	18880014 	ori	r2,r3,8192
 8002720:	00f7ffc4 	movi	r3,-8193
 8002724:	20c8703a 	and	r4,r4,r3
 8002728:	8080030d 	sth	r2,12(r16)
 800272c:	1007883a 	mov	r3,r2
 8002730:	81001915 	stw	r4,100(r16)
 8002734:	80000115 	stw	zero,4(r16)
 8002738:	1100080c 	andi	r4,r2,32
 800273c:	20004d1e 	bne	r4,zero,8002874 <__srefill_r+0x190>
 8002740:	1100010c 	andi	r4,r2,4
 8002744:	20001e26 	beq	r4,zero,80027c0 <__srefill_r+0xdc>
 8002748:	81400c17 	ldw	r5,48(r16)
 800274c:	28000826 	beq	r5,zero,8002770 <__srefill_r+0x8c>
 8002750:	80801004 	addi	r2,r16,64
 8002754:	28800226 	beq	r5,r2,8002760 <__srefill_r+0x7c>
 8002758:	8809883a 	mov	r4,r17
 800275c:	8000f300 	call	8000f30 <_free_r>
 8002760:	80800f17 	ldw	r2,60(r16)
 8002764:	80000c15 	stw	zero,48(r16)
 8002768:	80800115 	stw	r2,4(r16)
 800276c:	10002f1e 	bne	r2,zero,800282c <__srefill_r+0x148>
 8002770:	80800417 	ldw	r2,16(r16)
 8002774:	10004126 	beq	r2,zero,800287c <__srefill_r+0x198>
 8002778:	8080030b 	ldhu	r2,12(r16)
 800277c:	108000cc 	andi	r2,r2,3
 8002780:	10001e1e 	bne	r2,zero,80027fc <__srefill_r+0x118>
 8002784:	81800417 	ldw	r6,16(r16)
 8002788:	80800817 	ldw	r2,32(r16)
 800278c:	81400717 	ldw	r5,28(r16)
 8002790:	81c00517 	ldw	r7,20(r16)
 8002794:	81800015 	stw	r6,0(r16)
 8002798:	8809883a 	mov	r4,r17
 800279c:	103ee83a 	callr	r2
 80027a0:	80800115 	stw	r2,4(r16)
 80027a4:	00800d0e 	bge	zero,r2,80027dc <__srefill_r+0xf8>
 80027a8:	0005883a 	mov	r2,zero
 80027ac:	dfc00217 	ldw	ra,8(sp)
 80027b0:	dc400117 	ldw	r17,4(sp)
 80027b4:	dc000017 	ldw	r16,0(sp)
 80027b8:	dec00304 	addi	sp,sp,12
 80027bc:	f800283a 	ret
 80027c0:	1100040c 	andi	r4,r2,16
 80027c4:	20002726 	beq	r4,zero,8002864 <__srefill_r+0x180>
 80027c8:	1080020c 	andi	r2,r2,8
 80027cc:	10001b1e 	bne	r2,zero,800283c <__srefill_r+0x158>
 80027d0:	18c00114 	ori	r3,r3,4
 80027d4:	80c0030d 	sth	r3,12(r16)
 80027d8:	003fe506 	br	8002770 <__alt_data_end+0xfc002770>
 80027dc:	80c0030b 	ldhu	r3,12(r16)
 80027e0:	10000d1e 	bne	r2,zero,8002818 <__srefill_r+0x134>
 80027e4:	18c00814 	ori	r3,r3,32
 80027e8:	00bfffc4 	movi	r2,-1
 80027ec:	80c0030d 	sth	r3,12(r16)
 80027f0:	003fee06 	br	80027ac <__alt_data_end+0xfc0027ac>
 80027f4:	8000a200 	call	8000a20 <__sinit>
 80027f8:	003fc306 	br	8002708 <__alt_data_end+0xfc002708>
 80027fc:	00820074 	movhi	r2,2049
 8002800:	108bae04 	addi	r2,r2,11960
 8002804:	11000017 	ldw	r4,0(r2)
 8002808:	01420034 	movhi	r5,2048
 800280c:	2949b204 	addi	r5,r5,9928
 8002810:	80016f00 	call	80016f0 <_fwalk>
 8002814:	003fdb06 	br	8002784 <__alt_data_end+0xfc002784>
 8002818:	18c01014 	ori	r3,r3,64
 800281c:	80000115 	stw	zero,4(r16)
 8002820:	00bfffc4 	movi	r2,-1
 8002824:	80c0030d 	sth	r3,12(r16)
 8002828:	003fe006 	br	80027ac <__alt_data_end+0xfc0027ac>
 800282c:	80c00e17 	ldw	r3,56(r16)
 8002830:	0005883a 	mov	r2,zero
 8002834:	80c00015 	stw	r3,0(r16)
 8002838:	003fdc06 	br	80027ac <__alt_data_end+0xfc0027ac>
 800283c:	8809883a 	mov	r4,r17
 8002840:	800b883a 	mov	r5,r16
 8002844:	80004640 	call	8000464 <_fflush_r>
 8002848:	10000a1e 	bne	r2,zero,8002874 <__srefill_r+0x190>
 800284c:	8080030b 	ldhu	r2,12(r16)
 8002850:	00fffdc4 	movi	r3,-9
 8002854:	80000215 	stw	zero,8(r16)
 8002858:	1886703a 	and	r3,r3,r2
 800285c:	80000615 	stw	zero,24(r16)
 8002860:	003fdb06 	br	80027d0 <__alt_data_end+0xfc0027d0>
 8002864:	00800244 	movi	r2,9
 8002868:	88800015 	stw	r2,0(r17)
 800286c:	18c01014 	ori	r3,r3,64
 8002870:	80c0030d 	sth	r3,12(r16)
 8002874:	00bfffc4 	movi	r2,-1
 8002878:	003fcc06 	br	80027ac <__alt_data_end+0xfc0027ac>
 800287c:	8809883a 	mov	r4,r17
 8002880:	800b883a 	mov	r5,r16
 8002884:	800197c0 	call	800197c <__smakebuf_r>
 8002888:	003fbb06 	br	8002778 <__alt_data_end+0xfc002778>

0800288c <_sbrk_r>:
 800288c:	defffd04 	addi	sp,sp,-12
 8002890:	dc000015 	stw	r16,0(sp)
 8002894:	04020074 	movhi	r16,2049
 8002898:	dc400115 	stw	r17,4(sp)
 800289c:	8412b504 	addi	r16,r16,19156
 80028a0:	2023883a 	mov	r17,r4
 80028a4:	2809883a 	mov	r4,r5
 80028a8:	dfc00215 	stw	ra,8(sp)
 80028ac:	80000015 	stw	zero,0(r16)
 80028b0:	800e33c0 	call	800e33c <sbrk>
 80028b4:	00ffffc4 	movi	r3,-1
 80028b8:	10c00526 	beq	r2,r3,80028d0 <_sbrk_r+0x44>
 80028bc:	dfc00217 	ldw	ra,8(sp)
 80028c0:	dc400117 	ldw	r17,4(sp)
 80028c4:	dc000017 	ldw	r16,0(sp)
 80028c8:	dec00304 	addi	sp,sp,12
 80028cc:	f800283a 	ret
 80028d0:	80c00017 	ldw	r3,0(r16)
 80028d4:	183ff926 	beq	r3,zero,80028bc <__alt_data_end+0xfc0028bc>
 80028d8:	88c00015 	stw	r3,0(r17)
 80028dc:	003ff706 	br	80028bc <__alt_data_end+0xfc0028bc>

080028e0 <__sread>:
 80028e0:	defffe04 	addi	sp,sp,-8
 80028e4:	dc000015 	stw	r16,0(sp)
 80028e8:	2821883a 	mov	r16,r5
 80028ec:	2940038f 	ldh	r5,14(r5)
 80028f0:	dfc00115 	stw	ra,4(sp)
 80028f4:	80080640 	call	8008064 <_read_r>
 80028f8:	10000716 	blt	r2,zero,8002918 <__sread+0x38>
 80028fc:	80c01417 	ldw	r3,80(r16)
 8002900:	1887883a 	add	r3,r3,r2
 8002904:	80c01415 	stw	r3,80(r16)
 8002908:	dfc00117 	ldw	ra,4(sp)
 800290c:	dc000017 	ldw	r16,0(sp)
 8002910:	dec00204 	addi	sp,sp,8
 8002914:	f800283a 	ret
 8002918:	80c0030b 	ldhu	r3,12(r16)
 800291c:	18fbffcc 	andi	r3,r3,61439
 8002920:	80c0030d 	sth	r3,12(r16)
 8002924:	dfc00117 	ldw	ra,4(sp)
 8002928:	dc000017 	ldw	r16,0(sp)
 800292c:	dec00204 	addi	sp,sp,8
 8002930:	f800283a 	ret

08002934 <__seofread>:
 8002934:	0005883a 	mov	r2,zero
 8002938:	f800283a 	ret

0800293c <__swrite>:
 800293c:	2880030b 	ldhu	r2,12(r5)
 8002940:	defffb04 	addi	sp,sp,-20
 8002944:	dcc00315 	stw	r19,12(sp)
 8002948:	dc800215 	stw	r18,8(sp)
 800294c:	dc400115 	stw	r17,4(sp)
 8002950:	dc000015 	stw	r16,0(sp)
 8002954:	dfc00415 	stw	ra,16(sp)
 8002958:	10c0400c 	andi	r3,r2,256
 800295c:	2821883a 	mov	r16,r5
 8002960:	2027883a 	mov	r19,r4
 8002964:	3025883a 	mov	r18,r6
 8002968:	3823883a 	mov	r17,r7
 800296c:	18000526 	beq	r3,zero,8002984 <__swrite+0x48>
 8002970:	2940038f 	ldh	r5,14(r5)
 8002974:	000d883a 	mov	r6,zero
 8002978:	01c00084 	movi	r7,2
 800297c:	8006d7c0 	call	8006d7c <_lseek_r>
 8002980:	8080030b 	ldhu	r2,12(r16)
 8002984:	8140038f 	ldh	r5,14(r16)
 8002988:	10bbffcc 	andi	r2,r2,61439
 800298c:	9809883a 	mov	r4,r19
 8002990:	900d883a 	mov	r6,r18
 8002994:	880f883a 	mov	r7,r17
 8002998:	8080030d 	sth	r2,12(r16)
 800299c:	dfc00417 	ldw	ra,16(sp)
 80029a0:	dcc00317 	ldw	r19,12(sp)
 80029a4:	dc800217 	ldw	r18,8(sp)
 80029a8:	dc400117 	ldw	r17,4(sp)
 80029ac:	dc000017 	ldw	r16,0(sp)
 80029b0:	dec00504 	addi	sp,sp,20
 80029b4:	8004bdc1 	jmpi	8004bdc <_write_r>

080029b8 <__sseek>:
 80029b8:	defffe04 	addi	sp,sp,-8
 80029bc:	dc000015 	stw	r16,0(sp)
 80029c0:	2821883a 	mov	r16,r5
 80029c4:	2940038f 	ldh	r5,14(r5)
 80029c8:	dfc00115 	stw	ra,4(sp)
 80029cc:	8006d7c0 	call	8006d7c <_lseek_r>
 80029d0:	00ffffc4 	movi	r3,-1
 80029d4:	10c00826 	beq	r2,r3,80029f8 <__sseek+0x40>
 80029d8:	80c0030b 	ldhu	r3,12(r16)
 80029dc:	80801415 	stw	r2,80(r16)
 80029e0:	18c40014 	ori	r3,r3,4096
 80029e4:	80c0030d 	sth	r3,12(r16)
 80029e8:	dfc00117 	ldw	ra,4(sp)
 80029ec:	dc000017 	ldw	r16,0(sp)
 80029f0:	dec00204 	addi	sp,sp,8
 80029f4:	f800283a 	ret
 80029f8:	80c0030b 	ldhu	r3,12(r16)
 80029fc:	18fbffcc 	andi	r3,r3,61439
 8002a00:	80c0030d 	sth	r3,12(r16)
 8002a04:	dfc00117 	ldw	ra,4(sp)
 8002a08:	dc000017 	ldw	r16,0(sp)
 8002a0c:	dec00204 	addi	sp,sp,8
 8002a10:	f800283a 	ret

08002a14 <__sclose>:
 8002a14:	2940038f 	ldh	r5,14(r5)
 8002a18:	8004d681 	jmpi	8004d68 <_close_r>

08002a1c <strlen>:
 8002a1c:	208000cc 	andi	r2,r4,3
 8002a20:	10002026 	beq	r2,zero,8002aa4 <strlen+0x88>
 8002a24:	20800007 	ldb	r2,0(r4)
 8002a28:	10002026 	beq	r2,zero,8002aac <strlen+0x90>
 8002a2c:	2005883a 	mov	r2,r4
 8002a30:	00000206 	br	8002a3c <strlen+0x20>
 8002a34:	10c00007 	ldb	r3,0(r2)
 8002a38:	18001826 	beq	r3,zero,8002a9c <strlen+0x80>
 8002a3c:	10800044 	addi	r2,r2,1
 8002a40:	10c000cc 	andi	r3,r2,3
 8002a44:	183ffb1e 	bne	r3,zero,8002a34 <__alt_data_end+0xfc002a34>
 8002a48:	10c00017 	ldw	r3,0(r2)
 8002a4c:	01ffbff4 	movhi	r7,65279
 8002a50:	39ffbfc4 	addi	r7,r7,-257
 8002a54:	00ca303a 	nor	r5,zero,r3
 8002a58:	01a02074 	movhi	r6,32897
 8002a5c:	19c7883a 	add	r3,r3,r7
 8002a60:	31a02004 	addi	r6,r6,-32640
 8002a64:	1946703a 	and	r3,r3,r5
 8002a68:	1986703a 	and	r3,r3,r6
 8002a6c:	1800091e 	bne	r3,zero,8002a94 <strlen+0x78>
 8002a70:	10800104 	addi	r2,r2,4
 8002a74:	10c00017 	ldw	r3,0(r2)
 8002a78:	19cb883a 	add	r5,r3,r7
 8002a7c:	00c6303a 	nor	r3,zero,r3
 8002a80:	28c6703a 	and	r3,r5,r3
 8002a84:	1986703a 	and	r3,r3,r6
 8002a88:	183ff926 	beq	r3,zero,8002a70 <__alt_data_end+0xfc002a70>
 8002a8c:	00000106 	br	8002a94 <strlen+0x78>
 8002a90:	10800044 	addi	r2,r2,1
 8002a94:	10c00007 	ldb	r3,0(r2)
 8002a98:	183ffd1e 	bne	r3,zero,8002a90 <__alt_data_end+0xfc002a90>
 8002a9c:	1105c83a 	sub	r2,r2,r4
 8002aa0:	f800283a 	ret
 8002aa4:	2005883a 	mov	r2,r4
 8002aa8:	003fe706 	br	8002a48 <__alt_data_end+0xfc002a48>
 8002aac:	0005883a 	mov	r2,zero
 8002ab0:	f800283a 	ret

08002ab4 <_times_r>:
 8002ab4:	2809883a 	mov	r4,r5
 8002ab8:	800e43c1 	jmpi	800e43c <times>

08002abc <___vfprintf_internal_r>:
 8002abc:	defeb604 	addi	sp,sp,-1320
 8002ac0:	dfc14915 	stw	ra,1316(sp)
 8002ac4:	ddc14715 	stw	r23,1308(sp)
 8002ac8:	dd814615 	stw	r22,1304(sp)
 8002acc:	202f883a 	mov	r23,r4
 8002ad0:	282d883a 	mov	r22,r5
 8002ad4:	d9812a15 	stw	r6,1192(sp)
 8002ad8:	d9c12d15 	stw	r7,1204(sp)
 8002adc:	df014815 	stw	fp,1312(sp)
 8002ae0:	dd414515 	stw	r21,1300(sp)
 8002ae4:	dd014415 	stw	r20,1296(sp)
 8002ae8:	dcc14315 	stw	r19,1292(sp)
 8002aec:	dc814215 	stw	r18,1288(sp)
 8002af0:	dc414115 	stw	r17,1284(sp)
 8002af4:	dc014015 	stw	r16,1280(sp)
 8002af8:	8006d480 	call	8006d48 <_localeconv_r>
 8002afc:	10800017 	ldw	r2,0(r2)
 8002b00:	1009883a 	mov	r4,r2
 8002b04:	d8813515 	stw	r2,1236(sp)
 8002b08:	8002a1c0 	call	8002a1c <strlen>
 8002b0c:	d8813815 	stw	r2,1248(sp)
 8002b10:	b8000226 	beq	r23,zero,8002b1c <___vfprintf_internal_r+0x60>
 8002b14:	b8800e17 	ldw	r2,56(r23)
 8002b18:	10010526 	beq	r2,zero,8002f30 <___vfprintf_internal_r+0x474>
 8002b1c:	b0c0030b 	ldhu	r3,12(r22)
 8002b20:	1908000c 	andi	r4,r3,8192
 8002b24:	1805883a 	mov	r2,r3
 8002b28:	2000071e 	bne	r4,zero,8002b48 <___vfprintf_internal_r+0x8c>
 8002b2c:	b1001917 	ldw	r4,100(r22)
 8002b30:	18880014 	ori	r2,r3,8192
 8002b34:	00f7ffc4 	movi	r3,-8193
 8002b38:	20c8703a 	and	r4,r4,r3
 8002b3c:	b080030d 	sth	r2,12(r22)
 8002b40:	1007883a 	mov	r3,r2
 8002b44:	b1001915 	stw	r4,100(r22)
 8002b48:	1100020c 	andi	r4,r2,8
 8002b4c:	2000a826 	beq	r4,zero,8002df0 <___vfprintf_internal_r+0x334>
 8002b50:	b1000417 	ldw	r4,16(r22)
 8002b54:	2000a626 	beq	r4,zero,8002df0 <___vfprintf_internal_r+0x334>
 8002b58:	1080068c 	andi	r2,r2,26
 8002b5c:	01000284 	movi	r4,10
 8002b60:	1100ac26 	beq	r2,r4,8002e14 <___vfprintf_internal_r+0x358>
 8002b64:	d8c10e04 	addi	r3,sp,1080
 8002b68:	d9010dc4 	addi	r4,sp,1079
 8002b6c:	d9400404 	addi	r5,sp,16
 8002b70:	05020074 	movhi	r20,2049
 8002b74:	1905c83a 	sub	r2,r3,r4
 8002b78:	a5041084 	addi	r20,r20,4162
 8002b7c:	d8c12815 	stw	r3,1184(sp)
 8002b80:	d9012915 	stw	r4,1188(sp)
 8002b84:	d9411e15 	stw	r5,1144(sp)
 8002b88:	d8012015 	stw	zero,1152(sp)
 8002b8c:	d8011f15 	stw	zero,1148(sp)
 8002b90:	d8013315 	stw	zero,1228(sp)
 8002b94:	d8013715 	stw	zero,1244(sp)
 8002b98:	d8013915 	stw	zero,1252(sp)
 8002b9c:	d8013b15 	stw	zero,1260(sp)
 8002ba0:	d8013a15 	stw	zero,1256(sp)
 8002ba4:	d8012f15 	stw	zero,1212(sp)
 8002ba8:	2811883a 	mov	r8,r5
 8002bac:	d8813c15 	stw	r2,1264(sp)
 8002bb0:	d8c12a17 	ldw	r3,1192(sp)
 8002bb4:	18800007 	ldb	r2,0(r3)
 8002bb8:	10021326 	beq	r2,zero,8003408 <___vfprintf_internal_r+0x94c>
 8002bbc:	00c00944 	movi	r3,37
 8002bc0:	dc012a17 	ldw	r16,1192(sp)
 8002bc4:	10c0021e 	bne	r2,r3,8002bd0 <___vfprintf_internal_r+0x114>
 8002bc8:	00001606 	br	8002c24 <___vfprintf_internal_r+0x168>
 8002bcc:	10c08526 	beq	r2,r3,8002de4 <___vfprintf_internal_r+0x328>
 8002bd0:	84000044 	addi	r16,r16,1
 8002bd4:	80800007 	ldb	r2,0(r16)
 8002bd8:	103ffc1e 	bne	r2,zero,8002bcc <__alt_data_end+0xfc002bcc>
 8002bdc:	d9012a17 	ldw	r4,1192(sp)
 8002be0:	8123c83a 	sub	r17,r16,r4
 8002be4:	88000f26 	beq	r17,zero,8002c24 <___vfprintf_internal_r+0x168>
 8002be8:	d8812a17 	ldw	r2,1192(sp)
 8002bec:	d8c12017 	ldw	r3,1152(sp)
 8002bf0:	44400115 	stw	r17,4(r8)
 8002bf4:	40800015 	stw	r2,0(r8)
 8002bf8:	d8811f17 	ldw	r2,1148(sp)
 8002bfc:	1c47883a 	add	r3,r3,r17
 8002c00:	d8c12015 	stw	r3,1152(sp)
 8002c04:	10800044 	addi	r2,r2,1
 8002c08:	d8811f15 	stw	r2,1148(sp)
 8002c0c:	00c001c4 	movi	r3,7
 8002c10:	1880b516 	blt	r3,r2,8002ee8 <___vfprintf_internal_r+0x42c>
 8002c14:	42000204 	addi	r8,r8,8
 8002c18:	d8c12f17 	ldw	r3,1212(sp)
 8002c1c:	1c47883a 	add	r3,r3,r17
 8002c20:	d8c12f15 	stw	r3,1212(sp)
 8002c24:	80800007 	ldb	r2,0(r16)
 8002c28:	1000b626 	beq	r2,zero,8002f04 <___vfprintf_internal_r+0x448>
 8002c2c:	80800044 	addi	r2,r16,1
 8002c30:	84000047 	ldb	r16,1(r16)
 8002c34:	0027883a 	mov	r19,zero
 8002c38:	0039883a 	mov	fp,zero
 8002c3c:	dcc12b05 	stb	r19,1196(sp)
 8002c40:	d8012785 	stb	zero,1182(sp)
 8002c44:	027fffc4 	movi	r9,-1
 8002c48:	d8012e15 	stw	zero,1208(sp)
 8002c4c:	04401604 	movi	r17,88
 8002c50:	04800244 	movi	r18,9
 8002c54:	da012a15 	stw	r8,1192(sp)
 8002c58:	e027883a 	mov	r19,fp
 8002c5c:	17000044 	addi	fp,r2,1
 8002c60:	80bff804 	addi	r2,r16,-32
 8002c64:	88831236 	bltu	r17,r2,80038b0 <___vfprintf_internal_r+0xdf4>
 8002c68:	100490ba 	slli	r2,r2,2
 8002c6c:	01020034 	movhi	r4,2048
 8002c70:	210b2004 	addi	r4,r4,11392
 8002c74:	1105883a 	add	r2,r2,r4
 8002c78:	10800017 	ldw	r2,0(r2)
 8002c7c:	1000683a 	jmp	r2
 8002c80:	080037cc 	andi	zero,at,223
 8002c84:	080038b0 	cmpltui	zero,at,226
 8002c88:	080038b0 	cmpltui	zero,at,226
 8002c8c:	080037e8 	cmpgeui	zero,at,223
 8002c90:	080038b0 	cmpltui	zero,at,226
 8002c94:	080038b0 	cmpltui	zero,at,226
 8002c98:	080038b0 	cmpltui	zero,at,226
 8002c9c:	080038b0 	cmpltui	zero,at,226
 8002ca0:	080038b0 	cmpltui	zero,at,226
 8002ca4:	080038b0 	cmpltui	zero,at,226
 8002ca8:	080037f8 	rdprs	zero,at,223
 8002cac:	08003820 	cmpeqi	zero,at,224
 8002cb0:	080038b0 	cmpltui	zero,at,226
 8002cb4:	08002f3c 	xorhi	zero,at,188
 8002cb8:	08002f4c 	andi	zero,at,189
 8002cbc:	080038b0 	cmpltui	zero,at,226
 8002cc0:	08002f9c 	xori	zero,at,190
 8002cc4:	08002fac 	andhi	zero,at,190
 8002cc8:	08002fac 	andhi	zero,at,190
 8002ccc:	08002fac 	andhi	zero,at,190
 8002cd0:	08002fac 	andhi	zero,at,190
 8002cd4:	08002fac 	andhi	zero,at,190
 8002cd8:	08002fac 	andhi	zero,at,190
 8002cdc:	08002fac 	andhi	zero,at,190
 8002ce0:	08002fac 	andhi	zero,at,190
 8002ce4:	08002fac 	andhi	zero,at,190
 8002ce8:	080038b0 	cmpltui	zero,at,226
 8002cec:	080038b0 	cmpltui	zero,at,226
 8002cf0:	080038b0 	cmpltui	zero,at,226
 8002cf4:	080038b0 	cmpltui	zero,at,226
 8002cf8:	080038b0 	cmpltui	zero,at,226
 8002cfc:	080038b0 	cmpltui	zero,at,226
 8002d00:	080038b0 	cmpltui	zero,at,226
 8002d04:	080038b0 	cmpltui	zero,at,226
 8002d08:	080038b0 	cmpltui	zero,at,226
 8002d0c:	080038b0 	cmpltui	zero,at,226
 8002d10:	08002ff0 	cmpltui	zero,at,191
 8002d14:	08003410 	cmplti	zero,at,208
 8002d18:	080038b0 	cmpltui	zero,at,226
 8002d1c:	08003410 	cmplti	zero,at,208
 8002d20:	080038b0 	cmpltui	zero,at,226
 8002d24:	080038b0 	cmpltui	zero,at,226
 8002d28:	080038b0 	cmpltui	zero,at,226
 8002d2c:	080038b0 	cmpltui	zero,at,226
 8002d30:	080034b8 	rdprs	zero,at,210
 8002d34:	080038b0 	cmpltui	zero,at,226
 8002d38:	080038b0 	cmpltui	zero,at,226
 8002d3c:	080034c8 	cmpgei	zero,at,211
 8002d40:	080038b0 	cmpltui	zero,at,226
 8002d44:	080038b0 	cmpltui	zero,at,226
 8002d48:	080038b0 	cmpltui	zero,at,226
 8002d4c:	080038b0 	cmpltui	zero,at,226
 8002d50:	080038b0 	cmpltui	zero,at,226
 8002d54:	0800350c 	andi	zero,at,212
 8002d58:	080038b0 	cmpltui	zero,at,226
 8002d5c:	080038b0 	cmpltui	zero,at,226
 8002d60:	08003544 	addi	zero,at,213
 8002d64:	080038b0 	cmpltui	zero,at,226
 8002d68:	080038b0 	cmpltui	zero,at,226
 8002d6c:	080038b0 	cmpltui	zero,at,226
 8002d70:	080038b0 	cmpltui	zero,at,226
 8002d74:	080038b0 	cmpltui	zero,at,226
 8002d78:	080038b0 	cmpltui	zero,at,226
 8002d7c:	080038b0 	cmpltui	zero,at,226
 8002d80:	080038b0 	cmpltui	zero,at,226
 8002d84:	080038b0 	cmpltui	zero,at,226
 8002d88:	080038b0 	cmpltui	zero,at,226
 8002d8c:	08003780 	call	800378 <__alt_mem_sdram-0x77ffc88>
 8002d90:	0800372c 	andhi	zero,at,220
 8002d94:	08003410 	cmplti	zero,at,208
 8002d98:	08003410 	cmplti	zero,at,208
 8002d9c:	08003410 	cmplti	zero,at,208
 8002da0:	08003770 	cmpltui	zero,at,221
 8002da4:	0800372c 	andhi	zero,at,220
 8002da8:	080038b0 	cmpltui	zero,at,226
 8002dac:	080038b0 	cmpltui	zero,at,226
 8002db0:	08003648 	cmpgei	zero,at,217
 8002db4:	080038b0 	cmpltui	zero,at,226
 8002db8:	08003660 	cmpeqi	zero,at,217
 8002dbc:	080036a0 	cmpeqi	zero,at,218
 8002dc0:	080036e0 	cmpeqi	zero,at,219
 8002dc4:	080035ac 	andhi	zero,at,214
 8002dc8:	080038b0 	cmpltui	zero,at,226
 8002dcc:	08003834 	orhi	zero,at,224
 8002dd0:	080038b0 	cmpltui	zero,at,226
 8002dd4:	080035bc 	xorhi	zero,at,214
 8002dd8:	080038b0 	cmpltui	zero,at,226
 8002ddc:	080038b0 	cmpltui	zero,at,226
 8002de0:	080035fc 	xorhi	zero,at,215
 8002de4:	d9412a17 	ldw	r5,1192(sp)
 8002de8:	8163c83a 	sub	r17,r16,r5
 8002dec:	003f7d06 	br	8002be4 <__alt_data_end+0xfc002be4>
 8002df0:	b809883a 	mov	r4,r23
 8002df4:	b00b883a 	mov	r5,r22
 8002df8:	8004c380 	call	8004c38 <__swsetup_r>
 8002dfc:	10002d1e 	bne	r2,zero,8002eb4 <___vfprintf_internal_r+0x3f8>
 8002e00:	b0c0030b 	ldhu	r3,12(r22)
 8002e04:	01000284 	movi	r4,10
 8002e08:	1805883a 	mov	r2,r3
 8002e0c:	1080068c 	andi	r2,r2,26
 8002e10:	113f541e 	bne	r2,r4,8002b64 <__alt_data_end+0xfc002b64>
 8002e14:	b080038b 	ldhu	r2,14(r22)
 8002e18:	113fffcc 	andi	r4,r2,65535
 8002e1c:	2120001c 	xori	r4,r4,32768
 8002e20:	21200004 	addi	r4,r4,-32768
 8002e24:	203f4f16 	blt	r4,zero,8002b64 <__alt_data_end+0xfc002b64>
 8002e28:	b2c01917 	ldw	r11,100(r22)
 8002e2c:	b2800717 	ldw	r10,28(r22)
 8002e30:	b2400917 	ldw	r9,36(r22)
 8002e34:	d9812a17 	ldw	r6,1192(sp)
 8002e38:	d9c12d17 	ldw	r7,1204(sp)
 8002e3c:	02010004 	movi	r8,1024
 8002e40:	18ffff4c 	andi	r3,r3,65533
 8002e44:	d881078d 	sth	r2,1054(sp)
 8002e48:	b809883a 	mov	r4,r23
 8002e4c:	d8800404 	addi	r2,sp,16
 8002e50:	d9410404 	addi	r5,sp,1040
 8002e54:	d8c1070d 	sth	r3,1052(sp)
 8002e58:	dac11d15 	stw	r11,1140(sp)
 8002e5c:	da810b15 	stw	r10,1068(sp)
 8002e60:	da410d15 	stw	r9,1076(sp)
 8002e64:	d8810415 	stw	r2,1040(sp)
 8002e68:	d8810815 	stw	r2,1056(sp)
 8002e6c:	da010615 	stw	r8,1048(sp)
 8002e70:	da010915 	stw	r8,1060(sp)
 8002e74:	d8010a15 	stw	zero,1064(sp)
 8002e78:	8002abc0 	call	8002abc <___vfprintf_internal_r>
 8002e7c:	1021883a 	mov	r16,r2
 8002e80:	10000416 	blt	r2,zero,8002e94 <___vfprintf_internal_r+0x3d8>
 8002e84:	b809883a 	mov	r4,r23
 8002e88:	d9410404 	addi	r5,sp,1040
 8002e8c:	80004640 	call	8000464 <_fflush_r>
 8002e90:	1007301e 	bne	r2,zero,8004b54 <___vfprintf_internal_r+0x2098>
 8002e94:	d881070b 	ldhu	r2,1052(sp)
 8002e98:	1080100c 	andi	r2,r2,64
 8002e9c:	10000326 	beq	r2,zero,8002eac <___vfprintf_internal_r+0x3f0>
 8002ea0:	b080030b 	ldhu	r2,12(r22)
 8002ea4:	10801014 	ori	r2,r2,64
 8002ea8:	b080030d 	sth	r2,12(r22)
 8002eac:	8005883a 	mov	r2,r16
 8002eb0:	00000106 	br	8002eb8 <___vfprintf_internal_r+0x3fc>
 8002eb4:	00bfffc4 	movi	r2,-1
 8002eb8:	dfc14917 	ldw	ra,1316(sp)
 8002ebc:	df014817 	ldw	fp,1312(sp)
 8002ec0:	ddc14717 	ldw	r23,1308(sp)
 8002ec4:	dd814617 	ldw	r22,1304(sp)
 8002ec8:	dd414517 	ldw	r21,1300(sp)
 8002ecc:	dd014417 	ldw	r20,1296(sp)
 8002ed0:	dcc14317 	ldw	r19,1292(sp)
 8002ed4:	dc814217 	ldw	r18,1288(sp)
 8002ed8:	dc414117 	ldw	r17,1284(sp)
 8002edc:	dc014017 	ldw	r16,1280(sp)
 8002ee0:	dec14a04 	addi	sp,sp,1320
 8002ee4:	f800283a 	ret
 8002ee8:	b809883a 	mov	r4,r23
 8002eec:	b00b883a 	mov	r5,r22
 8002ef0:	d9811e04 	addi	r6,sp,1144
 8002ef4:	80088740 	call	8008874 <__sprint_r>
 8002ef8:	1000081e 	bne	r2,zero,8002f1c <___vfprintf_internal_r+0x460>
 8002efc:	da000404 	addi	r8,sp,16
 8002f00:	003f4506 	br	8002c18 <__alt_data_end+0xfc002c18>
 8002f04:	d8812017 	ldw	r2,1152(sp)
 8002f08:	10000426 	beq	r2,zero,8002f1c <___vfprintf_internal_r+0x460>
 8002f0c:	b809883a 	mov	r4,r23
 8002f10:	b00b883a 	mov	r5,r22
 8002f14:	d9811e04 	addi	r6,sp,1144
 8002f18:	80088740 	call	8008874 <__sprint_r>
 8002f1c:	b080030b 	ldhu	r2,12(r22)
 8002f20:	1080100c 	andi	r2,r2,64
 8002f24:	103fe31e 	bne	r2,zero,8002eb4 <__alt_data_end+0xfc002eb4>
 8002f28:	d8812f17 	ldw	r2,1212(sp)
 8002f2c:	003fe206 	br	8002eb8 <__alt_data_end+0xfc002eb8>
 8002f30:	b809883a 	mov	r4,r23
 8002f34:	8000a200 	call	8000a20 <__sinit>
 8002f38:	003ef806 	br	8002b1c <__alt_data_end+0xfc002b1c>
 8002f3c:	e005883a 	mov	r2,fp
 8002f40:	9cc00114 	ori	r19,r19,4
 8002f44:	e4000007 	ldb	r16,0(fp)
 8002f48:	003f4406 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8002f4c:	e4000007 	ldb	r16,0(fp)
 8002f50:	01000a84 	movi	r4,42
 8002f54:	e0800044 	addi	r2,fp,1
 8002f58:	8106f626 	beq	r16,r4,8004b34 <___vfprintf_internal_r+0x2078>
 8002f5c:	857ff404 	addi	r21,r16,-48
 8002f60:	1039883a 	mov	fp,r2
 8002f64:	0013883a 	mov	r9,zero
 8002f68:	957f3d36 	bltu	r18,r21,8002c60 <__alt_data_end+0xfc002c60>
 8002f6c:	0009883a 	mov	r4,zero
 8002f70:	01400284 	movi	r5,10
 8002f74:	800b0800 	call	800b080 <__mulsi3>
 8002f78:	e4000007 	ldb	r16,0(fp)
 8002f7c:	a889883a 	add	r4,r21,r2
 8002f80:	e7000044 	addi	fp,fp,1
 8002f84:	857ff404 	addi	r21,r16,-48
 8002f88:	957ff92e 	bgeu	r18,r21,8002f70 <__alt_data_end+0xfc002f70>
 8002f8c:	2013883a 	mov	r9,r4
 8002f90:	203f330e 	bge	r4,zero,8002c60 <__alt_data_end+0xfc002c60>
 8002f94:	027fffc4 	movi	r9,-1
 8002f98:	003f3106 	br	8002c60 <__alt_data_end+0xfc002c60>
 8002f9c:	9cc02014 	ori	r19,r19,128
 8002fa0:	e005883a 	mov	r2,fp
 8002fa4:	e4000007 	ldb	r16,0(fp)
 8002fa8:	003f2c06 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8002fac:	857ff404 	addi	r21,r16,-48
 8002fb0:	d8012e15 	stw	zero,1208(sp)
 8002fb4:	e021883a 	mov	r16,fp
 8002fb8:	0009883a 	mov	r4,zero
 8002fbc:	da412c15 	stw	r9,1200(sp)
 8002fc0:	01400284 	movi	r5,10
 8002fc4:	800b0800 	call	800b080 <__mulsi3>
 8002fc8:	81400007 	ldb	r5,0(r16)
 8002fcc:	1549883a 	add	r4,r2,r21
 8002fd0:	e7000044 	addi	fp,fp,1
 8002fd4:	2d7ff404 	addi	r21,r5,-48
 8002fd8:	e021883a 	mov	r16,fp
 8002fdc:	957ff82e 	bgeu	r18,r21,8002fc0 <__alt_data_end+0xfc002fc0>
 8002fe0:	2821883a 	mov	r16,r5
 8002fe4:	d9012e15 	stw	r4,1208(sp)
 8002fe8:	da412c17 	ldw	r9,1200(sp)
 8002fec:	003f1c06 	br	8002c60 <__alt_data_end+0xfc002c60>
 8002ff0:	da012a17 	ldw	r8,1192(sp)
 8002ff4:	df012a15 	stw	fp,1192(sp)
 8002ff8:	9839883a 	mov	fp,r19
 8002ffc:	dcc12b03 	ldbu	r19,1196(sp)
 8003000:	e7000414 	ori	fp,fp,16
 8003004:	e080080c 	andi	r2,fp,32
 8003008:	dcc12785 	stb	r19,1182(sp)
 800300c:	d8c12d17 	ldw	r3,1204(sp)
 8003010:	1001ce26 	beq	r2,zero,800374c <___vfprintf_internal_r+0xc90>
 8003014:	d9012d17 	ldw	r4,1204(sp)
 8003018:	18800117 	ldw	r2,4(r3)
 800301c:	1c800017 	ldw	r18,0(r3)
 8003020:	21000204 	addi	r4,r4,8
 8003024:	d9012d15 	stw	r4,1204(sp)
 8003028:	102b883a 	mov	r21,r2
 800302c:	10044916 	blt	r2,zero,8004154 <___vfprintf_internal_r+0x1698>
 8003030:	dcc12783 	ldbu	r19,1182(sp)
 8003034:	da413215 	stw	r9,1224(sp)
 8003038:	00800044 	movi	r2,1
 800303c:	9546b03a 	or	r3,r18,r21
 8003040:	48000216 	blt	r9,zero,800304c <___vfprintf_internal_r+0x590>
 8003044:	013fdfc4 	movi	r4,-129
 8003048:	e138703a 	and	fp,fp,r4
 800304c:	1802251e 	bne	r3,zero,80038e4 <___vfprintf_internal_r+0xe28>
 8003050:	48031726 	beq	r9,zero,8003cb0 <___vfprintf_internal_r+0x11f4>
 8003054:	10803fcc 	andi	r2,r2,255
 8003058:	00c00044 	movi	r3,1
 800305c:	10c24526 	beq	r2,r3,8003974 <___vfprintf_internal_r+0xeb8>
 8003060:	00c00084 	movi	r3,2
 8003064:	10c33426 	beq	r2,r3,8003d38 <___vfprintf_internal_r+0x127c>
 8003068:	d8c10e04 	addi	r3,sp,1080
 800306c:	9008d0fa 	srli	r4,r18,3
 8003070:	a80a977a 	slli	r5,r21,29
 8003074:	a82ad0fa 	srli	r21,r21,3
 8003078:	948001cc 	andi	r18,r18,7
 800307c:	90800c04 	addi	r2,r18,48
 8003080:	18ffffc4 	addi	r3,r3,-1
 8003084:	2924b03a 	or	r18,r5,r4
 8003088:	18800005 	stb	r2,0(r3)
 800308c:	9548b03a 	or	r4,r18,r21
 8003090:	203ff61e 	bne	r4,zero,800306c <__alt_data_end+0xfc00306c>
 8003094:	e100004c 	andi	r4,fp,1
 8003098:	d8c13115 	stw	r3,1220(sp)
 800309c:	20039a1e 	bne	r4,zero,8003f08 <___vfprintf_internal_r+0x144c>
 80030a0:	d8812817 	ldw	r2,1184(sp)
 80030a4:	10e3c83a 	sub	r17,r2,r3
 80030a8:	8805883a 	mov	r2,r17
 80030ac:	8a40010e 	bge	r17,r9,80030b4 <___vfprintf_internal_r+0x5f8>
 80030b0:	4805883a 	mov	r2,r9
 80030b4:	d8812b15 	stw	r2,1196(sp)
 80030b8:	d8013415 	stw	zero,1232(sp)
 80030bc:	98803fcc 	andi	r2,r19,255
 80030c0:	1080201c 	xori	r2,r2,128
 80030c4:	10bfe004 	addi	r2,r2,-128
 80030c8:	10000326 	beq	r2,zero,80030d8 <___vfprintf_internal_r+0x61c>
 80030cc:	d8c12b17 	ldw	r3,1196(sp)
 80030d0:	18c00044 	addi	r3,r3,1
 80030d4:	d8c12b15 	stw	r3,1196(sp)
 80030d8:	e0c0008c 	andi	r3,fp,2
 80030dc:	d8c12c15 	stw	r3,1200(sp)
 80030e0:	18000326 	beq	r3,zero,80030f0 <___vfprintf_internal_r+0x634>
 80030e4:	d8c12b17 	ldw	r3,1196(sp)
 80030e8:	18c00084 	addi	r3,r3,2
 80030ec:	d8c12b15 	stw	r3,1196(sp)
 80030f0:	e0c0210c 	andi	r3,fp,132
 80030f4:	d8c13015 	stw	r3,1216(sp)
 80030f8:	1801f81e 	bne	r3,zero,80038dc <___vfprintf_internal_r+0xe20>
 80030fc:	d9012e17 	ldw	r4,1208(sp)
 8003100:	d8c12b17 	ldw	r3,1196(sp)
 8003104:	20ebc83a 	sub	r21,r4,r3
 8003108:	0541f40e 	bge	zero,r21,80038dc <___vfprintf_internal_r+0xe20>
 800310c:	02400404 	movi	r9,16
 8003110:	d8c12017 	ldw	r3,1152(sp)
 8003114:	d8811f17 	ldw	r2,1148(sp)
 8003118:	4d45750e 	bge	r9,r21,80046f0 <___vfprintf_internal_r+0x1c34>
 800311c:	01420074 	movhi	r5,2049
 8003120:	29441484 	addi	r5,r5,4178
 8003124:	d9413615 	stw	r5,1240(sp)
 8003128:	4827883a 	mov	r19,r9
 800312c:	048001c4 	movi	r18,7
 8003130:	00000306 	br	8003140 <___vfprintf_internal_r+0x684>
 8003134:	ad7ffc04 	addi	r21,r21,-16
 8003138:	42000204 	addi	r8,r8,8
 800313c:	9d40130e 	bge	r19,r21,800318c <___vfprintf_internal_r+0x6d0>
 8003140:	01020074 	movhi	r4,2049
 8003144:	18c00404 	addi	r3,r3,16
 8003148:	10800044 	addi	r2,r2,1
 800314c:	21041484 	addi	r4,r4,4178
 8003150:	41000015 	stw	r4,0(r8)
 8003154:	44c00115 	stw	r19,4(r8)
 8003158:	d8c12015 	stw	r3,1152(sp)
 800315c:	d8811f15 	stw	r2,1148(sp)
 8003160:	90bff40e 	bge	r18,r2,8003134 <__alt_data_end+0xfc003134>
 8003164:	b809883a 	mov	r4,r23
 8003168:	b00b883a 	mov	r5,r22
 800316c:	d9811e04 	addi	r6,sp,1144
 8003170:	80088740 	call	8008874 <__sprint_r>
 8003174:	103f691e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003178:	ad7ffc04 	addi	r21,r21,-16
 800317c:	d8c12017 	ldw	r3,1152(sp)
 8003180:	d8811f17 	ldw	r2,1148(sp)
 8003184:	da000404 	addi	r8,sp,16
 8003188:	9d7fed16 	blt	r19,r21,8003140 <__alt_data_end+0xfc003140>
 800318c:	d9413617 	ldw	r5,1240(sp)
 8003190:	a8c7883a 	add	r3,r21,r3
 8003194:	10800044 	addi	r2,r2,1
 8003198:	41400015 	stw	r5,0(r8)
 800319c:	45400115 	stw	r21,4(r8)
 80031a0:	d8c12015 	stw	r3,1152(sp)
 80031a4:	d8811f15 	stw	r2,1148(sp)
 80031a8:	010001c4 	movi	r4,7
 80031ac:	20832b16 	blt	r4,r2,8003e5c <___vfprintf_internal_r+0x13a0>
 80031b0:	d8812787 	ldb	r2,1182(sp)
 80031b4:	42000204 	addi	r8,r8,8
 80031b8:	10000c26 	beq	r2,zero,80031ec <___vfprintf_internal_r+0x730>
 80031bc:	d8811f17 	ldw	r2,1148(sp)
 80031c0:	d9012784 	addi	r4,sp,1182
 80031c4:	18c00044 	addi	r3,r3,1
 80031c8:	10800044 	addi	r2,r2,1
 80031cc:	41000015 	stw	r4,0(r8)
 80031d0:	01000044 	movi	r4,1
 80031d4:	41000115 	stw	r4,4(r8)
 80031d8:	d8c12015 	stw	r3,1152(sp)
 80031dc:	d8811f15 	stw	r2,1148(sp)
 80031e0:	010001c4 	movi	r4,7
 80031e4:	2082c416 	blt	r4,r2,8003cf8 <___vfprintf_internal_r+0x123c>
 80031e8:	42000204 	addi	r8,r8,8
 80031ec:	d8812c17 	ldw	r2,1200(sp)
 80031f0:	10000c26 	beq	r2,zero,8003224 <___vfprintf_internal_r+0x768>
 80031f4:	d8811f17 	ldw	r2,1148(sp)
 80031f8:	d9012704 	addi	r4,sp,1180
 80031fc:	18c00084 	addi	r3,r3,2
 8003200:	10800044 	addi	r2,r2,1
 8003204:	41000015 	stw	r4,0(r8)
 8003208:	01000084 	movi	r4,2
 800320c:	41000115 	stw	r4,4(r8)
 8003210:	d8c12015 	stw	r3,1152(sp)
 8003214:	d8811f15 	stw	r2,1148(sp)
 8003218:	010001c4 	movi	r4,7
 800321c:	2082be16 	blt	r4,r2,8003d18 <___vfprintf_internal_r+0x125c>
 8003220:	42000204 	addi	r8,r8,8
 8003224:	d9013017 	ldw	r4,1216(sp)
 8003228:	00802004 	movi	r2,128
 800322c:	20822026 	beq	r4,r2,8003ab0 <___vfprintf_internal_r+0xff4>
 8003230:	d9413217 	ldw	r5,1224(sp)
 8003234:	2c67c83a 	sub	r19,r5,r17
 8003238:	04c0260e 	bge	zero,r19,80032d4 <___vfprintf_internal_r+0x818>
 800323c:	05400404 	movi	r21,16
 8003240:	d8811f17 	ldw	r2,1148(sp)
 8003244:	acc4720e 	bge	r21,r19,8004410 <___vfprintf_internal_r+0x1954>
 8003248:	01420074 	movhi	r5,2049
 800324c:	29441084 	addi	r5,r5,4162
 8003250:	d9412c15 	stw	r5,1200(sp)
 8003254:	048001c4 	movi	r18,7
 8003258:	00000306 	br	8003268 <___vfprintf_internal_r+0x7ac>
 800325c:	9cfffc04 	addi	r19,r19,-16
 8003260:	42000204 	addi	r8,r8,8
 8003264:	acc0110e 	bge	r21,r19,80032ac <___vfprintf_internal_r+0x7f0>
 8003268:	18c00404 	addi	r3,r3,16
 800326c:	10800044 	addi	r2,r2,1
 8003270:	45000015 	stw	r20,0(r8)
 8003274:	45400115 	stw	r21,4(r8)
 8003278:	d8c12015 	stw	r3,1152(sp)
 800327c:	d8811f15 	stw	r2,1148(sp)
 8003280:	90bff60e 	bge	r18,r2,800325c <__alt_data_end+0xfc00325c>
 8003284:	b809883a 	mov	r4,r23
 8003288:	b00b883a 	mov	r5,r22
 800328c:	d9811e04 	addi	r6,sp,1144
 8003290:	80088740 	call	8008874 <__sprint_r>
 8003294:	103f211e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003298:	9cfffc04 	addi	r19,r19,-16
 800329c:	d8c12017 	ldw	r3,1152(sp)
 80032a0:	d8811f17 	ldw	r2,1148(sp)
 80032a4:	da000404 	addi	r8,sp,16
 80032a8:	acffef16 	blt	r21,r19,8003268 <__alt_data_end+0xfc003268>
 80032ac:	d9012c17 	ldw	r4,1200(sp)
 80032b0:	1cc7883a 	add	r3,r3,r19
 80032b4:	10800044 	addi	r2,r2,1
 80032b8:	41000015 	stw	r4,0(r8)
 80032bc:	44c00115 	stw	r19,4(r8)
 80032c0:	d8c12015 	stw	r3,1152(sp)
 80032c4:	d8811f15 	stw	r2,1148(sp)
 80032c8:	010001c4 	movi	r4,7
 80032cc:	20828216 	blt	r4,r2,8003cd8 <___vfprintf_internal_r+0x121c>
 80032d0:	42000204 	addi	r8,r8,8
 80032d4:	e080400c 	andi	r2,fp,256
 80032d8:	1001ac1e 	bne	r2,zero,800398c <___vfprintf_internal_r+0xed0>
 80032dc:	d8811f17 	ldw	r2,1148(sp)
 80032e0:	d9413117 	ldw	r5,1220(sp)
 80032e4:	1c47883a 	add	r3,r3,r17
 80032e8:	10800044 	addi	r2,r2,1
 80032ec:	41400015 	stw	r5,0(r8)
 80032f0:	44400115 	stw	r17,4(r8)
 80032f4:	d8c12015 	stw	r3,1152(sp)
 80032f8:	d8811f15 	stw	r2,1148(sp)
 80032fc:	010001c4 	movi	r4,7
 8003300:	20825d16 	blt	r4,r2,8003c78 <___vfprintf_internal_r+0x11bc>
 8003304:	42000204 	addi	r8,r8,8
 8003308:	e080010c 	andi	r2,fp,4
 800330c:	10003126 	beq	r2,zero,80033d4 <___vfprintf_internal_r+0x918>
 8003310:	d8812e17 	ldw	r2,1208(sp)
 8003314:	d9012b17 	ldw	r4,1196(sp)
 8003318:	1121c83a 	sub	r16,r2,r4
 800331c:	04002d0e 	bge	zero,r16,80033d4 <___vfprintf_internal_r+0x918>
 8003320:	04400404 	movi	r17,16
 8003324:	d8811f17 	ldw	r2,1148(sp)
 8003328:	8c05340e 	bge	r17,r16,80047fc <___vfprintf_internal_r+0x1d40>
 800332c:	01020074 	movhi	r4,2049
 8003330:	21041484 	addi	r4,r4,4178
 8003334:	d9013615 	stw	r4,1240(sp)
 8003338:	048001c4 	movi	r18,7
 800333c:	00000306 	br	800334c <___vfprintf_internal_r+0x890>
 8003340:	843ffc04 	addi	r16,r16,-16
 8003344:	42000204 	addi	r8,r8,8
 8003348:	8c00130e 	bge	r17,r16,8003398 <___vfprintf_internal_r+0x8dc>
 800334c:	01420074 	movhi	r5,2049
 8003350:	18c00404 	addi	r3,r3,16
 8003354:	10800044 	addi	r2,r2,1
 8003358:	29441484 	addi	r5,r5,4178
 800335c:	41400015 	stw	r5,0(r8)
 8003360:	44400115 	stw	r17,4(r8)
 8003364:	d8c12015 	stw	r3,1152(sp)
 8003368:	d8811f15 	stw	r2,1148(sp)
 800336c:	90bff40e 	bge	r18,r2,8003340 <__alt_data_end+0xfc003340>
 8003370:	b809883a 	mov	r4,r23
 8003374:	b00b883a 	mov	r5,r22
 8003378:	d9811e04 	addi	r6,sp,1144
 800337c:	80088740 	call	8008874 <__sprint_r>
 8003380:	103ee61e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003384:	843ffc04 	addi	r16,r16,-16
 8003388:	d8c12017 	ldw	r3,1152(sp)
 800338c:	d8811f17 	ldw	r2,1148(sp)
 8003390:	da000404 	addi	r8,sp,16
 8003394:	8c3fed16 	blt	r17,r16,800334c <__alt_data_end+0xfc00334c>
 8003398:	d9013617 	ldw	r4,1240(sp)
 800339c:	1c07883a 	add	r3,r3,r16
 80033a0:	10800044 	addi	r2,r2,1
 80033a4:	41000015 	stw	r4,0(r8)
 80033a8:	44000115 	stw	r16,4(r8)
 80033ac:	d8c12015 	stw	r3,1152(sp)
 80033b0:	d8811f15 	stw	r2,1148(sp)
 80033b4:	010001c4 	movi	r4,7
 80033b8:	2080060e 	bge	r4,r2,80033d4 <___vfprintf_internal_r+0x918>
 80033bc:	b809883a 	mov	r4,r23
 80033c0:	b00b883a 	mov	r5,r22
 80033c4:	d9811e04 	addi	r6,sp,1144
 80033c8:	80088740 	call	8008874 <__sprint_r>
 80033cc:	103ed31e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 80033d0:	d8c12017 	ldw	r3,1152(sp)
 80033d4:	df012b17 	ldw	fp,1196(sp)
 80033d8:	d9412e17 	ldw	r5,1208(sp)
 80033dc:	e140010e 	bge	fp,r5,80033e4 <___vfprintf_internal_r+0x928>
 80033e0:	2839883a 	mov	fp,r5
 80033e4:	d8812f17 	ldw	r2,1212(sp)
 80033e8:	1705883a 	add	r2,r2,fp
 80033ec:	d8812f15 	stw	r2,1212(sp)
 80033f0:	1802291e 	bne	r3,zero,8003c98 <___vfprintf_internal_r+0x11dc>
 80033f4:	d8c12a17 	ldw	r3,1192(sp)
 80033f8:	d8011f15 	stw	zero,1148(sp)
 80033fc:	da000404 	addi	r8,sp,16
 8003400:	18800007 	ldb	r2,0(r3)
 8003404:	103ded1e 	bne	r2,zero,8002bbc <__alt_data_end+0xfc002bbc>
 8003408:	dc012a17 	ldw	r16,1192(sp)
 800340c:	003e0506 	br	8002c24 <__alt_data_end+0xfc002c24>
 8003410:	d9012d17 	ldw	r4,1204(sp)
 8003414:	d9412d17 	ldw	r5,1204(sp)
 8003418:	da012a17 	ldw	r8,1192(sp)
 800341c:	21000017 	ldw	r4,0(r4)
 8003420:	29400117 	ldw	r5,4(r5)
 8003424:	df012a15 	stw	fp,1192(sp)
 8003428:	9839883a 	mov	fp,r19
 800342c:	dcc12b03 	ldbu	r19,1196(sp)
 8003430:	d9013715 	stw	r4,1244(sp)
 8003434:	d9413915 	stw	r5,1252(sp)
 8003438:	da013f15 	stw	r8,1276(sp)
 800343c:	da413e15 	stw	r9,1272(sp)
 8003440:	dcc12785 	stb	r19,1182(sp)
 8003444:	80086600 	call	8008660 <__fpclassifyd>
 8003448:	d8c12d17 	ldw	r3,1204(sp)
 800344c:	04400044 	movi	r17,1
 8003450:	da013f17 	ldw	r8,1276(sp)
 8003454:	1c800204 	addi	r18,r3,8
 8003458:	da413e17 	ldw	r9,1272(sp)
 800345c:	d9013717 	ldw	r4,1244(sp)
 8003460:	d9413917 	ldw	r5,1252(sp)
 8003464:	1443451e 	bne	r2,r17,800417c <___vfprintf_internal_r+0x16c0>
 8003468:	000d883a 	mov	r6,zero
 800346c:	000f883a 	mov	r7,zero
 8003470:	800c4280 	call	800c428 <__ledf2>
 8003474:	da013f17 	ldw	r8,1276(sp)
 8003478:	1004fe16 	blt	r2,zero,8004874 <___vfprintf_internal_r+0x1db8>
 800347c:	dcc12783 	ldbu	r19,1182(sp)
 8003480:	008011c4 	movi	r2,71
 8003484:	14045d0e 	bge	r2,r16,80045fc <___vfprintf_internal_r+0x1b40>
 8003488:	01420074 	movhi	r5,2049
 800348c:	29440104 	addi	r5,r5,4100
 8003490:	d9413115 	stw	r5,1220(sp)
 8003494:	00c000c4 	movi	r3,3
 8003498:	00bfdfc4 	movi	r2,-129
 800349c:	d8c12b15 	stw	r3,1196(sp)
 80034a0:	e0b8703a 	and	fp,fp,r2
 80034a4:	dc812d15 	stw	r18,1204(sp)
 80034a8:	1823883a 	mov	r17,r3
 80034ac:	d8013215 	stw	zero,1224(sp)
 80034b0:	d8013415 	stw	zero,1232(sp)
 80034b4:	003f0106 	br	80030bc <__alt_data_end+0xfc0030bc>
 80034b8:	9cc00214 	ori	r19,r19,8
 80034bc:	e005883a 	mov	r2,fp
 80034c0:	e4000007 	ldb	r16,0(fp)
 80034c4:	003de506 	br	8002c5c <__alt_data_end+0xfc002c5c>
 80034c8:	da012a17 	ldw	r8,1192(sp)
 80034cc:	df012a15 	stw	fp,1192(sp)
 80034d0:	9f000414 	ori	fp,r19,16
 80034d4:	e0c0080c 	andi	r3,fp,32
 80034d8:	d8812d17 	ldw	r2,1204(sp)
 80034dc:	18007626 	beq	r3,zero,80036b8 <___vfprintf_internal_r+0xbfc>
 80034e0:	d9412d17 	ldw	r5,1204(sp)
 80034e4:	14800017 	ldw	r18,0(r2)
 80034e8:	15400117 	ldw	r21,4(r2)
 80034ec:	29400204 	addi	r5,r5,8
 80034f0:	d9412d15 	stw	r5,1204(sp)
 80034f4:	0005883a 	mov	r2,zero
 80034f8:	9546b03a 	or	r3,r18,r21
 80034fc:	d8012785 	stb	zero,1182(sp)
 8003500:	da413215 	stw	r9,1224(sp)
 8003504:	0027883a 	mov	r19,zero
 8003508:	003ecd06 	br	8003040 <__alt_data_end+0xfc003040>
 800350c:	da012a17 	ldw	r8,1192(sp)
 8003510:	df012a15 	stw	fp,1192(sp)
 8003514:	9f000414 	ori	fp,r19,16
 8003518:	e0c0080c 	andi	r3,fp,32
 800351c:	d8812d17 	ldw	r2,1204(sp)
 8003520:	18002c26 	beq	r3,zero,80035d4 <___vfprintf_internal_r+0xb18>
 8003524:	d9012d17 	ldw	r4,1204(sp)
 8003528:	14800017 	ldw	r18,0(r2)
 800352c:	15400117 	ldw	r21,4(r2)
 8003530:	21000204 	addi	r4,r4,8
 8003534:	d9012d15 	stw	r4,1204(sp)
 8003538:	00800044 	movi	r2,1
 800353c:	9546b03a 	or	r3,r18,r21
 8003540:	003fee06 	br	80034fc <__alt_data_end+0xfc0034fc>
 8003544:	da012a17 	ldw	r8,1192(sp)
 8003548:	df012a15 	stw	fp,1192(sp)
 800354c:	9839883a 	mov	fp,r19
 8003550:	dcc12b03 	ldbu	r19,1196(sp)
 8003554:	01420074 	movhi	r5,2049
 8003558:	29440404 	addi	r5,r5,4112
 800355c:	dcc12785 	stb	r19,1182(sp)
 8003560:	d9413b15 	stw	r5,1260(sp)
 8003564:	e0c0080c 	andi	r3,fp,32
 8003568:	d8812d17 	ldw	r2,1204(sp)
 800356c:	18002e26 	beq	r3,zero,8003628 <___vfprintf_internal_r+0xb6c>
 8003570:	d9412d17 	ldw	r5,1204(sp)
 8003574:	14800017 	ldw	r18,0(r2)
 8003578:	15400117 	ldw	r21,4(r2)
 800357c:	29400204 	addi	r5,r5,8
 8003580:	d9412d15 	stw	r5,1204(sp)
 8003584:	e080004c 	andi	r2,fp,1
 8003588:	10025c26 	beq	r2,zero,8003efc <___vfprintf_internal_r+0x1440>
 800358c:	9546b03a 	or	r3,r18,r21
 8003590:	18038f26 	beq	r3,zero,80043d0 <___vfprintf_internal_r+0x1914>
 8003594:	00800c04 	movi	r2,48
 8003598:	d8812705 	stb	r2,1180(sp)
 800359c:	dc012745 	stb	r16,1181(sp)
 80035a0:	e7000094 	ori	fp,fp,2
 80035a4:	00800084 	movi	r2,2
 80035a8:	003fd406 	br	80034fc <__alt_data_end+0xfc0034fc>
 80035ac:	9cc00814 	ori	r19,r19,32
 80035b0:	e005883a 	mov	r2,fp
 80035b4:	e4000007 	ldb	r16,0(fp)
 80035b8:	003da806 	br	8002c5c <__alt_data_end+0xfc002c5c>
 80035bc:	da012a17 	ldw	r8,1192(sp)
 80035c0:	df012a15 	stw	fp,1192(sp)
 80035c4:	9839883a 	mov	fp,r19
 80035c8:	e0c0080c 	andi	r3,fp,32
 80035cc:	d8812d17 	ldw	r2,1204(sp)
 80035d0:	183fd41e 	bne	r3,zero,8003524 <__alt_data_end+0xfc003524>
 80035d4:	e0c0040c 	andi	r3,fp,16
 80035d8:	18035f26 	beq	r3,zero,8004358 <___vfprintf_internal_r+0x189c>
 80035dc:	d9412d17 	ldw	r5,1204(sp)
 80035e0:	14800017 	ldw	r18,0(r2)
 80035e4:	002b883a 	mov	r21,zero
 80035e8:	29400104 	addi	r5,r5,4
 80035ec:	d9412d15 	stw	r5,1204(sp)
 80035f0:	00800044 	movi	r2,1
 80035f4:	9007883a 	mov	r3,r18
 80035f8:	003fc006 	br	80034fc <__alt_data_end+0xfc0034fc>
 80035fc:	da012a17 	ldw	r8,1192(sp)
 8003600:	df012a15 	stw	fp,1192(sp)
 8003604:	9839883a 	mov	fp,r19
 8003608:	dcc12b03 	ldbu	r19,1196(sp)
 800360c:	01020074 	movhi	r4,2049
 8003610:	21040904 	addi	r4,r4,4132
 8003614:	d9013b15 	stw	r4,1260(sp)
 8003618:	dcc12785 	stb	r19,1182(sp)
 800361c:	e0c0080c 	andi	r3,fp,32
 8003620:	d8812d17 	ldw	r2,1204(sp)
 8003624:	183fd21e 	bne	r3,zero,8003570 <__alt_data_end+0xfc003570>
 8003628:	e0c0040c 	andi	r3,fp,16
 800362c:	18035426 	beq	r3,zero,8004380 <___vfprintf_internal_r+0x18c4>
 8003630:	d8c12d17 	ldw	r3,1204(sp)
 8003634:	14800017 	ldw	r18,0(r2)
 8003638:	002b883a 	mov	r21,zero
 800363c:	18c00104 	addi	r3,r3,4
 8003640:	d8c12d15 	stw	r3,1204(sp)
 8003644:	003fcf06 	br	8003584 <__alt_data_end+0xfc003584>
 8003648:	e4000007 	ldb	r16,0(fp)
 800364c:	00801b04 	movi	r2,108
 8003650:	8083f726 	beq	r16,r2,8004630 <___vfprintf_internal_r+0x1b74>
 8003654:	9cc00414 	ori	r19,r19,16
 8003658:	e005883a 	mov	r2,fp
 800365c:	003d7f06 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8003660:	da012a17 	ldw	r8,1192(sp)
 8003664:	df012a15 	stw	fp,1192(sp)
 8003668:	9839883a 	mov	fp,r19
 800366c:	dcc12b03 	ldbu	r19,1196(sp)
 8003670:	e080080c 	andi	r2,fp,32
 8003674:	dcc12785 	stb	r19,1182(sp)
 8003678:	10032226 	beq	r2,zero,8004304 <___vfprintf_internal_r+0x1848>
 800367c:	d9412d17 	ldw	r5,1204(sp)
 8003680:	d9012f17 	ldw	r4,1212(sp)
 8003684:	28800017 	ldw	r2,0(r5)
 8003688:	2007d7fa 	srai	r3,r4,31
 800368c:	29400104 	addi	r5,r5,4
 8003690:	d9412d15 	stw	r5,1204(sp)
 8003694:	11000015 	stw	r4,0(r2)
 8003698:	10c00115 	stw	r3,4(r2)
 800369c:	003d4406 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 80036a0:	da012a17 	ldw	r8,1192(sp)
 80036a4:	df012a15 	stw	fp,1192(sp)
 80036a8:	9839883a 	mov	fp,r19
 80036ac:	e0c0080c 	andi	r3,fp,32
 80036b0:	d8812d17 	ldw	r2,1204(sp)
 80036b4:	183f8a1e 	bne	r3,zero,80034e0 <__alt_data_end+0xfc0034e0>
 80036b8:	e0c0040c 	andi	r3,fp,16
 80036bc:	18031c26 	beq	r3,zero,8004330 <___vfprintf_internal_r+0x1874>
 80036c0:	14800017 	ldw	r18,0(r2)
 80036c4:	d8812d17 	ldw	r2,1204(sp)
 80036c8:	002b883a 	mov	r21,zero
 80036cc:	9007883a 	mov	r3,r18
 80036d0:	10800104 	addi	r2,r2,4
 80036d4:	d8812d15 	stw	r2,1204(sp)
 80036d8:	0005883a 	mov	r2,zero
 80036dc:	003f8706 	br	80034fc <__alt_data_end+0xfc0034fc>
 80036e0:	d9412d17 	ldw	r5,1204(sp)
 80036e4:	00800c04 	movi	r2,48
 80036e8:	d8812705 	stb	r2,1180(sp)
 80036ec:	2c800017 	ldw	r18,0(r5)
 80036f0:	00801e04 	movi	r2,120
 80036f4:	d8812745 	stb	r2,1181(sp)
 80036f8:	00820074 	movhi	r2,2049
 80036fc:	10840904 	addi	r2,r2,4132
 8003700:	29400104 	addi	r5,r5,4
 8003704:	da012a17 	ldw	r8,1192(sp)
 8003708:	d8813b15 	stw	r2,1260(sp)
 800370c:	df012a15 	stw	fp,1192(sp)
 8003710:	002b883a 	mov	r21,zero
 8003714:	9f000094 	ori	fp,r19,2
 8003718:	d9412d15 	stw	r5,1204(sp)
 800371c:	00800084 	movi	r2,2
 8003720:	04001e04 	movi	r16,120
 8003724:	9007883a 	mov	r3,r18
 8003728:	003f7406 	br	80034fc <__alt_data_end+0xfc0034fc>
 800372c:	da012a17 	ldw	r8,1192(sp)
 8003730:	df012a15 	stw	fp,1192(sp)
 8003734:	9839883a 	mov	fp,r19
 8003738:	dcc12b03 	ldbu	r19,1196(sp)
 800373c:	e080080c 	andi	r2,fp,32
 8003740:	d8c12d17 	ldw	r3,1204(sp)
 8003744:	dcc12785 	stb	r19,1182(sp)
 8003748:	103e321e 	bne	r2,zero,8003014 <__alt_data_end+0xfc003014>
 800374c:	e080040c 	andi	r2,fp,16
 8003750:	10031326 	beq	r2,zero,80043a0 <___vfprintf_internal_r+0x18e4>
 8003754:	1c800017 	ldw	r18,0(r3)
 8003758:	d9412d17 	ldw	r5,1204(sp)
 800375c:	902bd7fa 	srai	r21,r18,31
 8003760:	29400104 	addi	r5,r5,4
 8003764:	d9412d15 	stw	r5,1204(sp)
 8003768:	a805883a 	mov	r2,r21
 800376c:	003e2f06 	br	800302c <__alt_data_end+0xfc00302c>
 8003770:	9cc01014 	ori	r19,r19,64
 8003774:	e005883a 	mov	r2,fp
 8003778:	e4000007 	ldb	r16,0(fp)
 800377c:	003d3706 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8003780:	d8c12d17 	ldw	r3,1204(sp)
 8003784:	d9012d17 	ldw	r4,1204(sp)
 8003788:	da012a17 	ldw	r8,1192(sp)
 800378c:	18800017 	ldw	r2,0(r3)
 8003790:	21000104 	addi	r4,r4,4
 8003794:	00c00044 	movi	r3,1
 8003798:	df012a15 	stw	fp,1192(sp)
 800379c:	d8c12b15 	stw	r3,1196(sp)
 80037a0:	9839883a 	mov	fp,r19
 80037a4:	d8012785 	stb	zero,1182(sp)
 80037a8:	d8810405 	stb	r2,1040(sp)
 80037ac:	d9012d15 	stw	r4,1204(sp)
 80037b0:	1823883a 	mov	r17,r3
 80037b4:	d8c10404 	addi	r3,sp,1040
 80037b8:	d8013215 	stw	zero,1224(sp)
 80037bc:	d8013415 	stw	zero,1232(sp)
 80037c0:	d8c13115 	stw	r3,1220(sp)
 80037c4:	0005883a 	mov	r2,zero
 80037c8:	003e4306 	br	80030d8 <__alt_data_end+0xfc0030d8>
 80037cc:	d8812b07 	ldb	r2,1196(sp)
 80037d0:	1002fc1e 	bne	r2,zero,80043c4 <___vfprintf_internal_r+0x1908>
 80037d4:	00c00804 	movi	r3,32
 80037d8:	d8c12b05 	stb	r3,1196(sp)
 80037dc:	e005883a 	mov	r2,fp
 80037e0:	e4000007 	ldb	r16,0(fp)
 80037e4:	003d1d06 	br	8002c5c <__alt_data_end+0xfc002c5c>
 80037e8:	9cc00054 	ori	r19,r19,1
 80037ec:	e005883a 	mov	r2,fp
 80037f0:	e4000007 	ldb	r16,0(fp)
 80037f4:	003d1906 	br	8002c5c <__alt_data_end+0xfc002c5c>
 80037f8:	d9012d17 	ldw	r4,1204(sp)
 80037fc:	d9412d17 	ldw	r5,1204(sp)
 8003800:	21000017 	ldw	r4,0(r4)
 8003804:	28c00104 	addi	r3,r5,4
 8003808:	d9012e15 	stw	r4,1208(sp)
 800380c:	20038c16 	blt	r4,zero,8004640 <___vfprintf_internal_r+0x1b84>
 8003810:	d8c12d15 	stw	r3,1204(sp)
 8003814:	e005883a 	mov	r2,fp
 8003818:	e4000007 	ldb	r16,0(fp)
 800381c:	003d0f06 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8003820:	00c00ac4 	movi	r3,43
 8003824:	d8c12b05 	stb	r3,1196(sp)
 8003828:	e005883a 	mov	r2,fp
 800382c:	e4000007 	ldb	r16,0(fp)
 8003830:	003d0a06 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8003834:	d8c12d17 	ldw	r3,1204(sp)
 8003838:	d9012d17 	ldw	r4,1204(sp)
 800383c:	da012a17 	ldw	r8,1192(sp)
 8003840:	18c00017 	ldw	r3,0(r3)
 8003844:	df012a15 	stw	fp,1192(sp)
 8003848:	d8012785 	stb	zero,1182(sp)
 800384c:	d8c13115 	stw	r3,1220(sp)
 8003850:	9839883a 	mov	fp,r19
 8003854:	24800104 	addi	r18,r4,4
 8003858:	1803f726 	beq	r3,zero,8004838 <___vfprintf_internal_r+0x1d7c>
 800385c:	d9013117 	ldw	r4,1220(sp)
 8003860:	48038916 	blt	r9,zero,8004688 <___vfprintf_internal_r+0x1bcc>
 8003864:	480d883a 	mov	r6,r9
 8003868:	000b883a 	mov	r5,zero
 800386c:	da013f15 	stw	r8,1276(sp)
 8003870:	da413e15 	stw	r9,1272(sp)
 8003874:	8006dd80 	call	8006dd8 <memchr>
 8003878:	da013f17 	ldw	r8,1276(sp)
 800387c:	da413e17 	ldw	r9,1272(sp)
 8003880:	10045926 	beq	r2,zero,80049e8 <___vfprintf_internal_r+0x1f2c>
 8003884:	d8c13117 	ldw	r3,1220(sp)
 8003888:	10e3c83a 	sub	r17,r2,r3
 800388c:	4c433516 	blt	r9,r17,8004564 <___vfprintf_internal_r+0x1aa8>
 8003890:	8805883a 	mov	r2,r17
 8003894:	88038116 	blt	r17,zero,800469c <___vfprintf_internal_r+0x1be0>
 8003898:	dcc12783 	ldbu	r19,1182(sp)
 800389c:	d8812b15 	stw	r2,1196(sp)
 80038a0:	dc812d15 	stw	r18,1204(sp)
 80038a4:	d8013215 	stw	zero,1224(sp)
 80038a8:	d8013415 	stw	zero,1232(sp)
 80038ac:	003e0306 	br	80030bc <__alt_data_end+0xfc0030bc>
 80038b0:	da012a17 	ldw	r8,1192(sp)
 80038b4:	df012a15 	stw	fp,1192(sp)
 80038b8:	9839883a 	mov	fp,r19
 80038bc:	dcc12b03 	ldbu	r19,1196(sp)
 80038c0:	dcc12785 	stb	r19,1182(sp)
 80038c4:	803d8f26 	beq	r16,zero,8002f04 <__alt_data_end+0xfc002f04>
 80038c8:	00c00044 	movi	r3,1
 80038cc:	d8c12b15 	stw	r3,1196(sp)
 80038d0:	dc010405 	stb	r16,1040(sp)
 80038d4:	d8012785 	stb	zero,1182(sp)
 80038d8:	003fb506 	br	80037b0 <__alt_data_end+0xfc0037b0>
 80038dc:	d8c12017 	ldw	r3,1152(sp)
 80038e0:	003e3506 	br	80031b8 <__alt_data_end+0xfc0031b8>
 80038e4:	10803fcc 	andi	r2,r2,255
 80038e8:	00c00044 	movi	r3,1
 80038ec:	10fddc1e 	bne	r2,r3,8003060 <__alt_data_end+0xfc003060>
 80038f0:	a800021e 	bne	r21,zero,80038fc <___vfprintf_internal_r+0xe40>
 80038f4:	00800244 	movi	r2,9
 80038f8:	14801e2e 	bgeu	r2,r18,8003974 <___vfprintf_internal_r+0xeb8>
 80038fc:	dc012b15 	stw	r16,1196(sp)
 8003900:	dc410e04 	addi	r17,sp,1080
 8003904:	9021883a 	mov	r16,r18
 8003908:	da012c15 	stw	r8,1200(sp)
 800390c:	a825883a 	mov	r18,r21
 8003910:	482b883a 	mov	r21,r9
 8003914:	8009883a 	mov	r4,r16
 8003918:	900b883a 	mov	r5,r18
 800391c:	01800284 	movi	r6,10
 8003920:	000f883a 	mov	r7,zero
 8003924:	800a9380 	call	800a938 <__umoddi3>
 8003928:	10800c04 	addi	r2,r2,48
 800392c:	8c7fffc4 	addi	r17,r17,-1
 8003930:	8009883a 	mov	r4,r16
 8003934:	900b883a 	mov	r5,r18
 8003938:	01800284 	movi	r6,10
 800393c:	000f883a 	mov	r7,zero
 8003940:	88800005 	stb	r2,0(r17)
 8003944:	800a2f80 	call	800a2f8 <__udivdi3>
 8003948:	1021883a 	mov	r16,r2
 800394c:	10c4b03a 	or	r2,r2,r3
 8003950:	1825883a 	mov	r18,r3
 8003954:	103fef1e 	bne	r2,zero,8003914 <__alt_data_end+0xfc003914>
 8003958:	d9012817 	ldw	r4,1184(sp)
 800395c:	dc413115 	stw	r17,1220(sp)
 8003960:	dc012b17 	ldw	r16,1196(sp)
 8003964:	da012c17 	ldw	r8,1200(sp)
 8003968:	a813883a 	mov	r9,r21
 800396c:	2463c83a 	sub	r17,r4,r17
 8003970:	003dcd06 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003974:	94800c04 	addi	r18,r18,48
 8003978:	d8c10dc4 	addi	r3,sp,1079
 800397c:	dc810dc5 	stb	r18,1079(sp)
 8003980:	dc413c17 	ldw	r17,1264(sp)
 8003984:	d8c13115 	stw	r3,1220(sp)
 8003988:	003dc706 	br	80030a8 <__alt_data_end+0xfc0030a8>
 800398c:	00801944 	movi	r2,101
 8003990:	1400720e 	bge	r2,r16,8003b5c <___vfprintf_internal_r+0x10a0>
 8003994:	d9013717 	ldw	r4,1244(sp)
 8003998:	d9413917 	ldw	r5,1252(sp)
 800399c:	000d883a 	mov	r6,zero
 80039a0:	000f883a 	mov	r7,zero
 80039a4:	d8c13d15 	stw	r3,1268(sp)
 80039a8:	da013f15 	stw	r8,1276(sp)
 80039ac:	800c2c40 	call	800c2c4 <__eqdf2>
 80039b0:	d8c13d17 	ldw	r3,1268(sp)
 80039b4:	da013f17 	ldw	r8,1276(sp)
 80039b8:	1000f41e 	bne	r2,zero,8003d8c <___vfprintf_internal_r+0x12d0>
 80039bc:	d8811f17 	ldw	r2,1148(sp)
 80039c0:	01020074 	movhi	r4,2049
 80039c4:	21041004 	addi	r4,r4,4160
 80039c8:	18c00044 	addi	r3,r3,1
 80039cc:	10800044 	addi	r2,r2,1
 80039d0:	41000015 	stw	r4,0(r8)
 80039d4:	01000044 	movi	r4,1
 80039d8:	41000115 	stw	r4,4(r8)
 80039dc:	d8c12015 	stw	r3,1152(sp)
 80039e0:	d8811f15 	stw	r2,1148(sp)
 80039e4:	010001c4 	movi	r4,7
 80039e8:	20828d16 	blt	r4,r2,8004420 <___vfprintf_internal_r+0x1964>
 80039ec:	42000204 	addi	r8,r8,8
 80039f0:	d8812617 	ldw	r2,1176(sp)
 80039f4:	d9413317 	ldw	r5,1228(sp)
 80039f8:	11400216 	blt	r2,r5,8003a04 <___vfprintf_internal_r+0xf48>
 80039fc:	e080004c 	andi	r2,fp,1
 8003a00:	103e4126 	beq	r2,zero,8003308 <__alt_data_end+0xfc003308>
 8003a04:	d8813817 	ldw	r2,1248(sp)
 8003a08:	d9013517 	ldw	r4,1236(sp)
 8003a0c:	d9413817 	ldw	r5,1248(sp)
 8003a10:	1887883a 	add	r3,r3,r2
 8003a14:	d8811f17 	ldw	r2,1148(sp)
 8003a18:	41000015 	stw	r4,0(r8)
 8003a1c:	41400115 	stw	r5,4(r8)
 8003a20:	10800044 	addi	r2,r2,1
 8003a24:	d8c12015 	stw	r3,1152(sp)
 8003a28:	d8811f15 	stw	r2,1148(sp)
 8003a2c:	010001c4 	movi	r4,7
 8003a30:	20830916 	blt	r4,r2,8004658 <___vfprintf_internal_r+0x1b9c>
 8003a34:	42000204 	addi	r8,r8,8
 8003a38:	d8813317 	ldw	r2,1228(sp)
 8003a3c:	143fffc4 	addi	r16,r2,-1
 8003a40:	043e310e 	bge	zero,r16,8003308 <__alt_data_end+0xfc003308>
 8003a44:	04400404 	movi	r17,16
 8003a48:	d8811f17 	ldw	r2,1148(sp)
 8003a4c:	8c007e0e 	bge	r17,r16,8003c48 <___vfprintf_internal_r+0x118c>
 8003a50:	01420074 	movhi	r5,2049
 8003a54:	29441084 	addi	r5,r5,4162
 8003a58:	d9412c15 	stw	r5,1200(sp)
 8003a5c:	04c001c4 	movi	r19,7
 8003a60:	00000306 	br	8003a70 <___vfprintf_internal_r+0xfb4>
 8003a64:	42000204 	addi	r8,r8,8
 8003a68:	843ffc04 	addi	r16,r16,-16
 8003a6c:	8c00790e 	bge	r17,r16,8003c54 <___vfprintf_internal_r+0x1198>
 8003a70:	18c00404 	addi	r3,r3,16
 8003a74:	10800044 	addi	r2,r2,1
 8003a78:	45000015 	stw	r20,0(r8)
 8003a7c:	44400115 	stw	r17,4(r8)
 8003a80:	d8c12015 	stw	r3,1152(sp)
 8003a84:	d8811f15 	stw	r2,1148(sp)
 8003a88:	98bff60e 	bge	r19,r2,8003a64 <__alt_data_end+0xfc003a64>
 8003a8c:	b809883a 	mov	r4,r23
 8003a90:	b00b883a 	mov	r5,r22
 8003a94:	d9811e04 	addi	r6,sp,1144
 8003a98:	80088740 	call	8008874 <__sprint_r>
 8003a9c:	103d1f1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003aa0:	d8c12017 	ldw	r3,1152(sp)
 8003aa4:	d8811f17 	ldw	r2,1148(sp)
 8003aa8:	da000404 	addi	r8,sp,16
 8003aac:	003fee06 	br	8003a68 <__alt_data_end+0xfc003a68>
 8003ab0:	d9412e17 	ldw	r5,1208(sp)
 8003ab4:	d8812b17 	ldw	r2,1196(sp)
 8003ab8:	28a7c83a 	sub	r19,r5,r2
 8003abc:	04fddc0e 	bge	zero,r19,8003230 <__alt_data_end+0xfc003230>
 8003ac0:	05400404 	movi	r21,16
 8003ac4:	d8811f17 	ldw	r2,1148(sp)
 8003ac8:	acc3870e 	bge	r21,r19,80048e8 <___vfprintf_internal_r+0x1e2c>
 8003acc:	01420074 	movhi	r5,2049
 8003ad0:	29441084 	addi	r5,r5,4162
 8003ad4:	d9412c15 	stw	r5,1200(sp)
 8003ad8:	048001c4 	movi	r18,7
 8003adc:	00000306 	br	8003aec <___vfprintf_internal_r+0x1030>
 8003ae0:	9cfffc04 	addi	r19,r19,-16
 8003ae4:	42000204 	addi	r8,r8,8
 8003ae8:	acc0110e 	bge	r21,r19,8003b30 <___vfprintf_internal_r+0x1074>
 8003aec:	18c00404 	addi	r3,r3,16
 8003af0:	10800044 	addi	r2,r2,1
 8003af4:	45000015 	stw	r20,0(r8)
 8003af8:	45400115 	stw	r21,4(r8)
 8003afc:	d8c12015 	stw	r3,1152(sp)
 8003b00:	d8811f15 	stw	r2,1148(sp)
 8003b04:	90bff60e 	bge	r18,r2,8003ae0 <__alt_data_end+0xfc003ae0>
 8003b08:	b809883a 	mov	r4,r23
 8003b0c:	b00b883a 	mov	r5,r22
 8003b10:	d9811e04 	addi	r6,sp,1144
 8003b14:	80088740 	call	8008874 <__sprint_r>
 8003b18:	103d001e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003b1c:	9cfffc04 	addi	r19,r19,-16
 8003b20:	d8c12017 	ldw	r3,1152(sp)
 8003b24:	d8811f17 	ldw	r2,1148(sp)
 8003b28:	da000404 	addi	r8,sp,16
 8003b2c:	acffef16 	blt	r21,r19,8003aec <__alt_data_end+0xfc003aec>
 8003b30:	d9012c17 	ldw	r4,1200(sp)
 8003b34:	1cc7883a 	add	r3,r3,r19
 8003b38:	10800044 	addi	r2,r2,1
 8003b3c:	41000015 	stw	r4,0(r8)
 8003b40:	44c00115 	stw	r19,4(r8)
 8003b44:	d8c12015 	stw	r3,1152(sp)
 8003b48:	d8811f15 	stw	r2,1148(sp)
 8003b4c:	010001c4 	movi	r4,7
 8003b50:	20817816 	blt	r4,r2,8004134 <___vfprintf_internal_r+0x1678>
 8003b54:	42000204 	addi	r8,r8,8
 8003b58:	003db506 	br	8003230 <__alt_data_end+0xfc003230>
 8003b5c:	d9413317 	ldw	r5,1228(sp)
 8003b60:	00800044 	movi	r2,1
 8003b64:	18c00044 	addi	r3,r3,1
 8003b68:	11413e0e 	bge	r2,r5,8004064 <___vfprintf_internal_r+0x15a8>
 8003b6c:	dc011f17 	ldw	r16,1148(sp)
 8003b70:	d8813117 	ldw	r2,1220(sp)
 8003b74:	d8c12015 	stw	r3,1152(sp)
 8003b78:	84000044 	addi	r16,r16,1
 8003b7c:	40800015 	stw	r2,0(r8)
 8003b80:	00800044 	movi	r2,1
 8003b84:	40800115 	stw	r2,4(r8)
 8003b88:	dc011f15 	stw	r16,1148(sp)
 8003b8c:	008001c4 	movi	r2,7
 8003b90:	14015616 	blt	r2,r16,80040ec <___vfprintf_internal_r+0x1630>
 8003b94:	42000204 	addi	r8,r8,8
 8003b98:	d9013817 	ldw	r4,1248(sp)
 8003b9c:	d9413517 	ldw	r5,1236(sp)
 8003ba0:	84000044 	addi	r16,r16,1
 8003ba4:	1907883a 	add	r3,r3,r4
 8003ba8:	41400015 	stw	r5,0(r8)
 8003bac:	41000115 	stw	r4,4(r8)
 8003bb0:	d8c12015 	stw	r3,1152(sp)
 8003bb4:	dc011f15 	stw	r16,1148(sp)
 8003bb8:	008001c4 	movi	r2,7
 8003bbc:	14015416 	blt	r2,r16,8004110 <___vfprintf_internal_r+0x1654>
 8003bc0:	44400204 	addi	r17,r8,8
 8003bc4:	d9013717 	ldw	r4,1244(sp)
 8003bc8:	d9413917 	ldw	r5,1252(sp)
 8003bcc:	000d883a 	mov	r6,zero
 8003bd0:	000f883a 	mov	r7,zero
 8003bd4:	d8c13d15 	stw	r3,1268(sp)
 8003bd8:	800c2c40 	call	800c2c4 <__eqdf2>
 8003bdc:	d8c13d17 	ldw	r3,1268(sp)
 8003be0:	1000a726 	beq	r2,zero,8003e80 <___vfprintf_internal_r+0x13c4>
 8003be4:	d9013317 	ldw	r4,1228(sp)
 8003be8:	d9413117 	ldw	r5,1220(sp)
 8003bec:	84000044 	addi	r16,r16,1
 8003bf0:	20bfffc4 	addi	r2,r4,-1
 8003bf4:	1887883a 	add	r3,r3,r2
 8003bf8:	29000044 	addi	r4,r5,1
 8003bfc:	88800115 	stw	r2,4(r17)
 8003c00:	89000015 	stw	r4,0(r17)
 8003c04:	d8c12015 	stw	r3,1152(sp)
 8003c08:	dc011f15 	stw	r16,1148(sp)
 8003c0c:	008001c4 	movi	r2,7
 8003c10:	14012d16 	blt	r2,r16,80040c8 <___vfprintf_internal_r+0x160c>
 8003c14:	8c400204 	addi	r17,r17,8
 8003c18:	d9413a17 	ldw	r5,1256(sp)
 8003c1c:	dcc122c4 	addi	r19,sp,1163
 8003c20:	84000044 	addi	r16,r16,1
 8003c24:	28c7883a 	add	r3,r5,r3
 8003c28:	8cc00015 	stw	r19,0(r17)
 8003c2c:	89400115 	stw	r5,4(r17)
 8003c30:	d8c12015 	stw	r3,1152(sp)
 8003c34:	dc011f15 	stw	r16,1148(sp)
 8003c38:	008001c4 	movi	r2,7
 8003c3c:	14000e16 	blt	r2,r16,8003c78 <___vfprintf_internal_r+0x11bc>
 8003c40:	8a000204 	addi	r8,r17,8
 8003c44:	003db006 	br	8003308 <__alt_data_end+0xfc003308>
 8003c48:	01020074 	movhi	r4,2049
 8003c4c:	21041084 	addi	r4,r4,4162
 8003c50:	d9012c15 	stw	r4,1200(sp)
 8003c54:	d9012c17 	ldw	r4,1200(sp)
 8003c58:	1c07883a 	add	r3,r3,r16
 8003c5c:	44000115 	stw	r16,4(r8)
 8003c60:	41000015 	stw	r4,0(r8)
 8003c64:	10800044 	addi	r2,r2,1
 8003c68:	d8c12015 	stw	r3,1152(sp)
 8003c6c:	d8811f15 	stw	r2,1148(sp)
 8003c70:	010001c4 	movi	r4,7
 8003c74:	20bda30e 	bge	r4,r2,8003304 <__alt_data_end+0xfc003304>
 8003c78:	b809883a 	mov	r4,r23
 8003c7c:	b00b883a 	mov	r5,r22
 8003c80:	d9811e04 	addi	r6,sp,1144
 8003c84:	80088740 	call	8008874 <__sprint_r>
 8003c88:	103ca41e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003c8c:	d8c12017 	ldw	r3,1152(sp)
 8003c90:	da000404 	addi	r8,sp,16
 8003c94:	003d9c06 	br	8003308 <__alt_data_end+0xfc003308>
 8003c98:	b809883a 	mov	r4,r23
 8003c9c:	b00b883a 	mov	r5,r22
 8003ca0:	d9811e04 	addi	r6,sp,1144
 8003ca4:	80088740 	call	8008874 <__sprint_r>
 8003ca8:	103dd226 	beq	r2,zero,80033f4 <__alt_data_end+0xfc0033f4>
 8003cac:	003c9b06 	br	8002f1c <__alt_data_end+0xfc002f1c>
 8003cb0:	10803fcc 	andi	r2,r2,255
 8003cb4:	1000311e 	bne	r2,zero,8003d7c <___vfprintf_internal_r+0x12c0>
 8003cb8:	e080004c 	andi	r2,fp,1
 8003cbc:	10002f26 	beq	r2,zero,8003d7c <___vfprintf_internal_r+0x12c0>
 8003cc0:	00800c04 	movi	r2,48
 8003cc4:	d8c10dc4 	addi	r3,sp,1079
 8003cc8:	d8810dc5 	stb	r2,1079(sp)
 8003ccc:	dc413c17 	ldw	r17,1264(sp)
 8003cd0:	d8c13115 	stw	r3,1220(sp)
 8003cd4:	003cf406 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003cd8:	b809883a 	mov	r4,r23
 8003cdc:	b00b883a 	mov	r5,r22
 8003ce0:	d9811e04 	addi	r6,sp,1144
 8003ce4:	80088740 	call	8008874 <__sprint_r>
 8003ce8:	103c8c1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003cec:	d8c12017 	ldw	r3,1152(sp)
 8003cf0:	da000404 	addi	r8,sp,16
 8003cf4:	003d7706 	br	80032d4 <__alt_data_end+0xfc0032d4>
 8003cf8:	b809883a 	mov	r4,r23
 8003cfc:	b00b883a 	mov	r5,r22
 8003d00:	d9811e04 	addi	r6,sp,1144
 8003d04:	80088740 	call	8008874 <__sprint_r>
 8003d08:	103c841e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003d0c:	d8c12017 	ldw	r3,1152(sp)
 8003d10:	da000404 	addi	r8,sp,16
 8003d14:	003d3506 	br	80031ec <__alt_data_end+0xfc0031ec>
 8003d18:	b809883a 	mov	r4,r23
 8003d1c:	b00b883a 	mov	r5,r22
 8003d20:	d9811e04 	addi	r6,sp,1144
 8003d24:	80088740 	call	8008874 <__sprint_r>
 8003d28:	103c7c1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003d2c:	d8c12017 	ldw	r3,1152(sp)
 8003d30:	da000404 	addi	r8,sp,16
 8003d34:	003d3b06 	br	8003224 <__alt_data_end+0xfc003224>
 8003d38:	d9413b17 	ldw	r5,1260(sp)
 8003d3c:	d8c10e04 	addi	r3,sp,1080
 8003d40:	908003cc 	andi	r2,r18,15
 8003d44:	a808973a 	slli	r4,r21,28
 8003d48:	2885883a 	add	r2,r5,r2
 8003d4c:	9024d13a 	srli	r18,r18,4
 8003d50:	10800003 	ldbu	r2,0(r2)
 8003d54:	a82ad13a 	srli	r21,r21,4
 8003d58:	18ffffc4 	addi	r3,r3,-1
 8003d5c:	24a4b03a 	or	r18,r4,r18
 8003d60:	18800005 	stb	r2,0(r3)
 8003d64:	9544b03a 	or	r2,r18,r21
 8003d68:	103ff51e 	bne	r2,zero,8003d40 <__alt_data_end+0xfc003d40>
 8003d6c:	d9412817 	ldw	r5,1184(sp)
 8003d70:	d8c13115 	stw	r3,1220(sp)
 8003d74:	28e3c83a 	sub	r17,r5,r3
 8003d78:	003ccb06 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003d7c:	d8c10e04 	addi	r3,sp,1080
 8003d80:	0023883a 	mov	r17,zero
 8003d84:	d8c13115 	stw	r3,1220(sp)
 8003d88:	003cc706 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003d8c:	dc012617 	ldw	r16,1176(sp)
 8003d90:	0401ab0e 	bge	zero,r16,8004440 <___vfprintf_internal_r+0x1984>
 8003d94:	d8813317 	ldw	r2,1228(sp)
 8003d98:	d9413117 	ldw	r5,1220(sp)
 8003d9c:	d9013417 	ldw	r4,1232(sp)
 8003da0:	1023883a 	mov	r17,r2
 8003da4:	28a1883a 	add	r16,r5,r2
 8003da8:	2080010e 	bge	r4,r2,8003db0 <___vfprintf_internal_r+0x12f4>
 8003dac:	2023883a 	mov	r17,r4
 8003db0:	04400b0e 	bge	zero,r17,8003de0 <___vfprintf_internal_r+0x1324>
 8003db4:	d8811f17 	ldw	r2,1148(sp)
 8003db8:	d9413117 	ldw	r5,1220(sp)
 8003dbc:	1c47883a 	add	r3,r3,r17
 8003dc0:	10800044 	addi	r2,r2,1
 8003dc4:	41400015 	stw	r5,0(r8)
 8003dc8:	44400115 	stw	r17,4(r8)
 8003dcc:	d8c12015 	stw	r3,1152(sp)
 8003dd0:	d8811f15 	stw	r2,1148(sp)
 8003dd4:	010001c4 	movi	r4,7
 8003dd8:	20826716 	blt	r4,r2,8004778 <___vfprintf_internal_r+0x1cbc>
 8003ddc:	42000204 	addi	r8,r8,8
 8003de0:	88026316 	blt	r17,zero,8004770 <___vfprintf_internal_r+0x1cb4>
 8003de4:	d8813417 	ldw	r2,1232(sp)
 8003de8:	1463c83a 	sub	r17,r2,r17
 8003dec:	0440590e 	bge	zero,r17,8003f54 <___vfprintf_internal_r+0x1498>
 8003df0:	04c00404 	movi	r19,16
 8003df4:	d8811f17 	ldw	r2,1148(sp)
 8003df8:	9c41770e 	bge	r19,r17,80043d8 <___vfprintf_internal_r+0x191c>
 8003dfc:	01420074 	movhi	r5,2049
 8003e00:	29441084 	addi	r5,r5,4162
 8003e04:	d9412c15 	stw	r5,1200(sp)
 8003e08:	054001c4 	movi	r21,7
 8003e0c:	00000306 	br	8003e1c <___vfprintf_internal_r+0x1360>
 8003e10:	42000204 	addi	r8,r8,8
 8003e14:	8c7ffc04 	addi	r17,r17,-16
 8003e18:	9c41720e 	bge	r19,r17,80043e4 <___vfprintf_internal_r+0x1928>
 8003e1c:	18c00404 	addi	r3,r3,16
 8003e20:	10800044 	addi	r2,r2,1
 8003e24:	45000015 	stw	r20,0(r8)
 8003e28:	44c00115 	stw	r19,4(r8)
 8003e2c:	d8c12015 	stw	r3,1152(sp)
 8003e30:	d8811f15 	stw	r2,1148(sp)
 8003e34:	a8bff60e 	bge	r21,r2,8003e10 <__alt_data_end+0xfc003e10>
 8003e38:	b809883a 	mov	r4,r23
 8003e3c:	b00b883a 	mov	r5,r22
 8003e40:	d9811e04 	addi	r6,sp,1144
 8003e44:	80088740 	call	8008874 <__sprint_r>
 8003e48:	103c341e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003e4c:	d8c12017 	ldw	r3,1152(sp)
 8003e50:	d8811f17 	ldw	r2,1148(sp)
 8003e54:	da000404 	addi	r8,sp,16
 8003e58:	003fee06 	br	8003e14 <__alt_data_end+0xfc003e14>
 8003e5c:	b809883a 	mov	r4,r23
 8003e60:	b00b883a 	mov	r5,r22
 8003e64:	d9811e04 	addi	r6,sp,1144
 8003e68:	80088740 	call	8008874 <__sprint_r>
 8003e6c:	103c2b1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003e70:	d8c12017 	ldw	r3,1152(sp)
 8003e74:	d8812787 	ldb	r2,1182(sp)
 8003e78:	da000404 	addi	r8,sp,16
 8003e7c:	003cce06 	br	80031b8 <__alt_data_end+0xfc0031b8>
 8003e80:	d8813317 	ldw	r2,1228(sp)
 8003e84:	14ffffc4 	addi	r19,r2,-1
 8003e88:	04ff630e 	bge	zero,r19,8003c18 <__alt_data_end+0xfc003c18>
 8003e8c:	05400404 	movi	r21,16
 8003e90:	acc0810e 	bge	r21,r19,8004098 <___vfprintf_internal_r+0x15dc>
 8003e94:	01420074 	movhi	r5,2049
 8003e98:	29441084 	addi	r5,r5,4162
 8003e9c:	d9412c15 	stw	r5,1200(sp)
 8003ea0:	01c001c4 	movi	r7,7
 8003ea4:	00000306 	br	8003eb4 <___vfprintf_internal_r+0x13f8>
 8003ea8:	8c400204 	addi	r17,r17,8
 8003eac:	9cfffc04 	addi	r19,r19,-16
 8003eb0:	acc07c0e 	bge	r21,r19,80040a4 <___vfprintf_internal_r+0x15e8>
 8003eb4:	18c00404 	addi	r3,r3,16
 8003eb8:	84000044 	addi	r16,r16,1
 8003ebc:	8d000015 	stw	r20,0(r17)
 8003ec0:	8d400115 	stw	r21,4(r17)
 8003ec4:	d8c12015 	stw	r3,1152(sp)
 8003ec8:	dc011f15 	stw	r16,1148(sp)
 8003ecc:	3c3ff60e 	bge	r7,r16,8003ea8 <__alt_data_end+0xfc003ea8>
 8003ed0:	b809883a 	mov	r4,r23
 8003ed4:	b00b883a 	mov	r5,r22
 8003ed8:	d9811e04 	addi	r6,sp,1144
 8003edc:	d9c13d15 	stw	r7,1268(sp)
 8003ee0:	80088740 	call	8008874 <__sprint_r>
 8003ee4:	d9c13d17 	ldw	r7,1268(sp)
 8003ee8:	103c0c1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003eec:	d8c12017 	ldw	r3,1152(sp)
 8003ef0:	dc011f17 	ldw	r16,1148(sp)
 8003ef4:	dc400404 	addi	r17,sp,16
 8003ef8:	003fec06 	br	8003eac <__alt_data_end+0xfc003eac>
 8003efc:	00800084 	movi	r2,2
 8003f00:	9546b03a 	or	r3,r18,r21
 8003f04:	003d7d06 	br	80034fc <__alt_data_end+0xfc0034fc>
 8003f08:	10803fcc 	andi	r2,r2,255
 8003f0c:	1080201c 	xori	r2,r2,128
 8003f10:	10bfe004 	addi	r2,r2,-128
 8003f14:	01000c04 	movi	r4,48
 8003f18:	1101d726 	beq	r2,r4,8004678 <___vfprintf_internal_r+0x1bbc>
 8003f1c:	d9413117 	ldw	r5,1220(sp)
 8003f20:	d8812817 	ldw	r2,1184(sp)
 8003f24:	193fffc5 	stb	r4,-1(r3)
 8003f28:	297fffc4 	addi	r5,r5,-1
 8003f2c:	d9413115 	stw	r5,1220(sp)
 8003f30:	1163c83a 	sub	r17,r2,r5
 8003f34:	003c5c06 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003f38:	b809883a 	mov	r4,r23
 8003f3c:	b00b883a 	mov	r5,r22
 8003f40:	d9811e04 	addi	r6,sp,1144
 8003f44:	80088740 	call	8008874 <__sprint_r>
 8003f48:	103bf41e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8003f4c:	d8c12017 	ldw	r3,1152(sp)
 8003f50:	da000404 	addi	r8,sp,16
 8003f54:	d9413117 	ldw	r5,1220(sp)
 8003f58:	d9013417 	ldw	r4,1232(sp)
 8003f5c:	d8812617 	ldw	r2,1176(sp)
 8003f60:	2923883a 	add	r17,r5,r4
 8003f64:	d9413317 	ldw	r5,1228(sp)
 8003f68:	11400216 	blt	r2,r5,8003f74 <___vfprintf_internal_r+0x14b8>
 8003f6c:	e100004c 	andi	r4,fp,1
 8003f70:	20000d26 	beq	r4,zero,8003fa8 <___vfprintf_internal_r+0x14ec>
 8003f74:	d9013817 	ldw	r4,1248(sp)
 8003f78:	d9413517 	ldw	r5,1236(sp)
 8003f7c:	1907883a 	add	r3,r3,r4
 8003f80:	d9011f17 	ldw	r4,1148(sp)
 8003f84:	41400015 	stw	r5,0(r8)
 8003f88:	d9413817 	ldw	r5,1248(sp)
 8003f8c:	21000044 	addi	r4,r4,1
 8003f90:	d8c12015 	stw	r3,1152(sp)
 8003f94:	41400115 	stw	r5,4(r8)
 8003f98:	d9011f15 	stw	r4,1148(sp)
 8003f9c:	014001c4 	movi	r5,7
 8003fa0:	2901fd16 	blt	r5,r4,8004798 <___vfprintf_internal_r+0x1cdc>
 8003fa4:	42000204 	addi	r8,r8,8
 8003fa8:	d9013317 	ldw	r4,1228(sp)
 8003fac:	2085c83a 	sub	r2,r4,r2
 8003fb0:	8449c83a 	sub	r4,r16,r17
 8003fb4:	1021883a 	mov	r16,r2
 8003fb8:	2080010e 	bge	r4,r2,8003fc0 <___vfprintf_internal_r+0x1504>
 8003fbc:	2021883a 	mov	r16,r4
 8003fc0:	04000a0e 	bge	zero,r16,8003fec <___vfprintf_internal_r+0x1530>
 8003fc4:	d9011f17 	ldw	r4,1148(sp)
 8003fc8:	1c07883a 	add	r3,r3,r16
 8003fcc:	44400015 	stw	r17,0(r8)
 8003fd0:	21000044 	addi	r4,r4,1
 8003fd4:	44000115 	stw	r16,4(r8)
 8003fd8:	d8c12015 	stw	r3,1152(sp)
 8003fdc:	d9011f15 	stw	r4,1148(sp)
 8003fe0:	014001c4 	movi	r5,7
 8003fe4:	29020916 	blt	r5,r4,800480c <___vfprintf_internal_r+0x1d50>
 8003fe8:	42000204 	addi	r8,r8,8
 8003fec:	80020116 	blt	r16,zero,80047f4 <___vfprintf_internal_r+0x1d38>
 8003ff0:	1421c83a 	sub	r16,r2,r16
 8003ff4:	043cc40e 	bge	zero,r16,8003308 <__alt_data_end+0xfc003308>
 8003ff8:	04400404 	movi	r17,16
 8003ffc:	d8811f17 	ldw	r2,1148(sp)
 8004000:	8c3f110e 	bge	r17,r16,8003c48 <__alt_data_end+0xfc003c48>
 8004004:	01420074 	movhi	r5,2049
 8004008:	29441084 	addi	r5,r5,4162
 800400c:	d9412c15 	stw	r5,1200(sp)
 8004010:	04c001c4 	movi	r19,7
 8004014:	00000306 	br	8004024 <___vfprintf_internal_r+0x1568>
 8004018:	42000204 	addi	r8,r8,8
 800401c:	843ffc04 	addi	r16,r16,-16
 8004020:	8c3f0c0e 	bge	r17,r16,8003c54 <__alt_data_end+0xfc003c54>
 8004024:	18c00404 	addi	r3,r3,16
 8004028:	10800044 	addi	r2,r2,1
 800402c:	45000015 	stw	r20,0(r8)
 8004030:	44400115 	stw	r17,4(r8)
 8004034:	d8c12015 	stw	r3,1152(sp)
 8004038:	d8811f15 	stw	r2,1148(sp)
 800403c:	98bff60e 	bge	r19,r2,8004018 <__alt_data_end+0xfc004018>
 8004040:	b809883a 	mov	r4,r23
 8004044:	b00b883a 	mov	r5,r22
 8004048:	d9811e04 	addi	r6,sp,1144
 800404c:	80088740 	call	8008874 <__sprint_r>
 8004050:	103bb21e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004054:	d8c12017 	ldw	r3,1152(sp)
 8004058:	d8811f17 	ldw	r2,1148(sp)
 800405c:	da000404 	addi	r8,sp,16
 8004060:	003fee06 	br	800401c <__alt_data_end+0xfc00401c>
 8004064:	e088703a 	and	r4,fp,r2
 8004068:	203ec01e 	bne	r4,zero,8003b6c <__alt_data_end+0xfc003b6c>
 800406c:	dc011f17 	ldw	r16,1148(sp)
 8004070:	d9013117 	ldw	r4,1220(sp)
 8004074:	40800115 	stw	r2,4(r8)
 8004078:	84000044 	addi	r16,r16,1
 800407c:	41000015 	stw	r4,0(r8)
 8004080:	d8c12015 	stw	r3,1152(sp)
 8004084:	dc011f15 	stw	r16,1148(sp)
 8004088:	008001c4 	movi	r2,7
 800408c:	14000e16 	blt	r2,r16,80040c8 <___vfprintf_internal_r+0x160c>
 8004090:	44400204 	addi	r17,r8,8
 8004094:	003ee006 	br	8003c18 <__alt_data_end+0xfc003c18>
 8004098:	01020074 	movhi	r4,2049
 800409c:	21041084 	addi	r4,r4,4162
 80040a0:	d9012c15 	stw	r4,1200(sp)
 80040a4:	d8812c17 	ldw	r2,1200(sp)
 80040a8:	1cc7883a 	add	r3,r3,r19
 80040ac:	84000044 	addi	r16,r16,1
 80040b0:	88800015 	stw	r2,0(r17)
 80040b4:	8cc00115 	stw	r19,4(r17)
 80040b8:	d8c12015 	stw	r3,1152(sp)
 80040bc:	dc011f15 	stw	r16,1148(sp)
 80040c0:	008001c4 	movi	r2,7
 80040c4:	143ed30e 	bge	r2,r16,8003c14 <__alt_data_end+0xfc003c14>
 80040c8:	b809883a 	mov	r4,r23
 80040cc:	b00b883a 	mov	r5,r22
 80040d0:	d9811e04 	addi	r6,sp,1144
 80040d4:	80088740 	call	8008874 <__sprint_r>
 80040d8:	103b901e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 80040dc:	d8c12017 	ldw	r3,1152(sp)
 80040e0:	dc011f17 	ldw	r16,1148(sp)
 80040e4:	dc400404 	addi	r17,sp,16
 80040e8:	003ecb06 	br	8003c18 <__alt_data_end+0xfc003c18>
 80040ec:	b809883a 	mov	r4,r23
 80040f0:	b00b883a 	mov	r5,r22
 80040f4:	d9811e04 	addi	r6,sp,1144
 80040f8:	80088740 	call	8008874 <__sprint_r>
 80040fc:	103b871e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004100:	d8c12017 	ldw	r3,1152(sp)
 8004104:	dc011f17 	ldw	r16,1148(sp)
 8004108:	da000404 	addi	r8,sp,16
 800410c:	003ea206 	br	8003b98 <__alt_data_end+0xfc003b98>
 8004110:	b809883a 	mov	r4,r23
 8004114:	b00b883a 	mov	r5,r22
 8004118:	d9811e04 	addi	r6,sp,1144
 800411c:	80088740 	call	8008874 <__sprint_r>
 8004120:	103b7e1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004124:	d8c12017 	ldw	r3,1152(sp)
 8004128:	dc011f17 	ldw	r16,1148(sp)
 800412c:	dc400404 	addi	r17,sp,16
 8004130:	003ea406 	br	8003bc4 <__alt_data_end+0xfc003bc4>
 8004134:	b809883a 	mov	r4,r23
 8004138:	b00b883a 	mov	r5,r22
 800413c:	d9811e04 	addi	r6,sp,1144
 8004140:	80088740 	call	8008874 <__sprint_r>
 8004144:	103b751e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004148:	d8c12017 	ldw	r3,1152(sp)
 800414c:	da000404 	addi	r8,sp,16
 8004150:	003c3706 	br	8003230 <__alt_data_end+0xfc003230>
 8004154:	04a5c83a 	sub	r18,zero,r18
 8004158:	9004c03a 	cmpne	r2,r18,zero
 800415c:	056bc83a 	sub	r21,zero,r21
 8004160:	a8abc83a 	sub	r21,r21,r2
 8004164:	04c00b44 	movi	r19,45
 8004168:	dcc12785 	stb	r19,1182(sp)
 800416c:	da413215 	stw	r9,1224(sp)
 8004170:	00800044 	movi	r2,1
 8004174:	9546b03a 	or	r3,r18,r21
 8004178:	003bb106 	br	8003040 <__alt_data_end+0xfc003040>
 800417c:	da013f15 	stw	r8,1276(sp)
 8004180:	da413e15 	stw	r9,1272(sp)
 8004184:	80086600 	call	8008660 <__fpclassifyd>
 8004188:	da013f17 	ldw	r8,1276(sp)
 800418c:	da413e17 	ldw	r9,1272(sp)
 8004190:	1000e526 	beq	r2,zero,8004528 <___vfprintf_internal_r+0x1a6c>
 8004194:	04fff7c4 	movi	r19,-33
 8004198:	00bfffc4 	movi	r2,-1
 800419c:	84e6703a 	and	r19,r16,r19
 80041a0:	48822926 	beq	r9,r2,8004a48 <___vfprintf_internal_r+0x1f8c>
 80041a4:	008011c4 	movi	r2,71
 80041a8:	98821626 	beq	r19,r2,8004a04 <___vfprintf_internal_r+0x1f48>
 80041ac:	d9013917 	ldw	r4,1252(sp)
 80041b0:	e0c04014 	ori	r3,fp,256
 80041b4:	d8c12d15 	stw	r3,1204(sp)
 80041b8:	20021f16 	blt	r4,zero,8004a38 <___vfprintf_internal_r+0x1f7c>
 80041bc:	dc413917 	ldw	r17,1252(sp)
 80041c0:	d8012b05 	stb	zero,1196(sp)
 80041c4:	00801984 	movi	r2,102
 80041c8:	80814d26 	beq	r16,r2,8004700 <___vfprintf_internal_r+0x1c44>
 80041cc:	00801184 	movi	r2,70
 80041d0:	80814b26 	beq	r16,r2,8004700 <___vfprintf_internal_r+0x1c44>
 80041d4:	00801144 	movi	r2,69
 80041d8:	98821d26 	beq	r19,r2,8004a50 <___vfprintf_internal_r+0x1f94>
 80041dc:	482b883a 	mov	r21,r9
 80041e0:	d8812604 	addi	r2,sp,1176
 80041e4:	d8800115 	stw	r2,4(sp)
 80041e8:	d9413717 	ldw	r5,1244(sp)
 80041ec:	d8812504 	addi	r2,sp,1172
 80041f0:	d8800215 	stw	r2,8(sp)
 80041f4:	d8812104 	addi	r2,sp,1156
 80041f8:	dd400015 	stw	r21,0(sp)
 80041fc:	d8800315 	stw	r2,12(sp)
 8004200:	b809883a 	mov	r4,r23
 8004204:	880d883a 	mov	r6,r17
 8004208:	01c00084 	movi	r7,2
 800420c:	da013f15 	stw	r8,1276(sp)
 8004210:	da413e15 	stw	r9,1272(sp)
 8004214:	8004fe40 	call	8004fe4 <_dtoa_r>
 8004218:	d8813115 	stw	r2,1220(sp)
 800421c:	008019c4 	movi	r2,103
 8004220:	da013f17 	ldw	r8,1276(sp)
 8004224:	da413e17 	ldw	r9,1272(sp)
 8004228:	80800226 	beq	r16,r2,8004234 <___vfprintf_internal_r+0x1778>
 800422c:	008011c4 	movi	r2,71
 8004230:	8081451e 	bne	r16,r2,8004748 <___vfprintf_internal_r+0x1c8c>
 8004234:	e080004c 	andi	r2,fp,1
 8004238:	10021e26 	beq	r2,zero,8004ab4 <___vfprintf_internal_r+0x1ff8>
 800423c:	d8c13117 	ldw	r3,1220(sp)
 8004240:	1d55883a 	add	r10,r3,r21
 8004244:	d9013717 	ldw	r4,1244(sp)
 8004248:	880b883a 	mov	r5,r17
 800424c:	000d883a 	mov	r6,zero
 8004250:	000f883a 	mov	r7,zero
 8004254:	da013f15 	stw	r8,1276(sp)
 8004258:	da413e15 	stw	r9,1272(sp)
 800425c:	da813d15 	stw	r10,1268(sp)
 8004260:	800c2c40 	call	800c2c4 <__eqdf2>
 8004264:	da013f17 	ldw	r8,1276(sp)
 8004268:	da413e17 	ldw	r9,1272(sp)
 800426c:	da813d17 	ldw	r10,1268(sp)
 8004270:	1001a126 	beq	r2,zero,80048f8 <___vfprintf_internal_r+0x1e3c>
 8004274:	d8812117 	ldw	r2,1156(sp)
 8004278:	1280062e 	bgeu	r2,r10,8004294 <___vfprintf_internal_r+0x17d8>
 800427c:	01000c04 	movi	r4,48
 8004280:	10c00044 	addi	r3,r2,1
 8004284:	d8c12115 	stw	r3,1156(sp)
 8004288:	11000005 	stb	r4,0(r2)
 800428c:	d8812117 	ldw	r2,1156(sp)
 8004290:	12bffb36 	bltu	r2,r10,8004280 <__alt_data_end+0xfc004280>
 8004294:	d8c13117 	ldw	r3,1220(sp)
 8004298:	10c5c83a 	sub	r2,r2,r3
 800429c:	d8813315 	stw	r2,1228(sp)
 80042a0:	008011c4 	movi	r2,71
 80042a4:	98818926 	beq	r19,r2,80048cc <___vfprintf_internal_r+0x1e10>
 80042a8:	00801944 	movi	r2,101
 80042ac:	14023c0e 	bge	r2,r16,8004ba0 <___vfprintf_internal_r+0x20e4>
 80042b0:	d8c12617 	ldw	r3,1176(sp)
 80042b4:	00801984 	movi	r2,102
 80042b8:	d8c13415 	stw	r3,1232(sp)
 80042bc:	8081ef26 	beq	r16,r2,8004a7c <___vfprintf_internal_r+0x1fc0>
 80042c0:	d8c13417 	ldw	r3,1232(sp)
 80042c4:	d9013317 	ldw	r4,1228(sp)
 80042c8:	1901e316 	blt	r3,r4,8004a58 <___vfprintf_internal_r+0x1f9c>
 80042cc:	e080004c 	andi	r2,fp,1
 80042d0:	1001f426 	beq	r2,zero,8004aa4 <___vfprintf_internal_r+0x1fe8>
 80042d4:	d8c13417 	ldw	r3,1232(sp)
 80042d8:	1c400044 	addi	r17,r3,1
 80042dc:	8839883a 	mov	fp,r17
 80042e0:	8801e416 	blt	r17,zero,8004a74 <___vfprintf_internal_r+0x1fb8>
 80042e4:	dd412b07 	ldb	r21,1196(sp)
 80042e8:	a801701e 	bne	r21,zero,80048ac <___vfprintf_internal_r+0x1df0>
 80042ec:	df012b15 	stw	fp,1196(sp)
 80042f0:	dcc12783 	ldbu	r19,1182(sp)
 80042f4:	df012d17 	ldw	fp,1204(sp)
 80042f8:	d8013215 	stw	zero,1224(sp)
 80042fc:	dc812d15 	stw	r18,1204(sp)
 8004300:	003b6e06 	br	80030bc <__alt_data_end+0xfc0030bc>
 8004304:	e080040c 	andi	r2,fp,16
 8004308:	1000b51e 	bne	r2,zero,80045e0 <___vfprintf_internal_r+0x1b24>
 800430c:	e080100c 	andi	r2,fp,64
 8004310:	10015b26 	beq	r2,zero,8004880 <___vfprintf_internal_r+0x1dc4>
 8004314:	d9012d17 	ldw	r4,1204(sp)
 8004318:	d9412f17 	ldw	r5,1212(sp)
 800431c:	20800017 	ldw	r2,0(r4)
 8004320:	21000104 	addi	r4,r4,4
 8004324:	d9012d15 	stw	r4,1204(sp)
 8004328:	1140000d 	sth	r5,0(r2)
 800432c:	003a2006 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8004330:	e0c0100c 	andi	r3,fp,64
 8004334:	1800a226 	beq	r3,zero,80045c0 <___vfprintf_internal_r+0x1b04>
 8004338:	d8c12d17 	ldw	r3,1204(sp)
 800433c:	1480000b 	ldhu	r18,0(r2)
 8004340:	002b883a 	mov	r21,zero
 8004344:	18c00104 	addi	r3,r3,4
 8004348:	d8c12d15 	stw	r3,1204(sp)
 800434c:	0005883a 	mov	r2,zero
 8004350:	9007883a 	mov	r3,r18
 8004354:	003c6906 	br	80034fc <__alt_data_end+0xfc0034fc>
 8004358:	e0c0100c 	andi	r3,fp,64
 800435c:	18009026 	beq	r3,zero,80045a0 <___vfprintf_internal_r+0x1ae4>
 8004360:	1480000b 	ldhu	r18,0(r2)
 8004364:	d8812d17 	ldw	r2,1204(sp)
 8004368:	002b883a 	mov	r21,zero
 800436c:	9007883a 	mov	r3,r18
 8004370:	10800104 	addi	r2,r2,4
 8004374:	d8812d15 	stw	r2,1204(sp)
 8004378:	00800044 	movi	r2,1
 800437c:	003c5f06 	br	80034fc <__alt_data_end+0xfc0034fc>
 8004380:	e0c0100c 	andi	r3,fp,64
 8004384:	18008026 	beq	r3,zero,8004588 <___vfprintf_internal_r+0x1acc>
 8004388:	d9012d17 	ldw	r4,1204(sp)
 800438c:	1480000b 	ldhu	r18,0(r2)
 8004390:	002b883a 	mov	r21,zero
 8004394:	21000104 	addi	r4,r4,4
 8004398:	d9012d15 	stw	r4,1204(sp)
 800439c:	003c7906 	br	8003584 <__alt_data_end+0xfc003584>
 80043a0:	e080100c 	andi	r2,fp,64
 80043a4:	10007126 	beq	r2,zero,800456c <___vfprintf_internal_r+0x1ab0>
 80043a8:	1c80000f 	ldh	r18,0(r3)
 80043ac:	d8812d17 	ldw	r2,1204(sp)
 80043b0:	902bd7fa 	srai	r21,r18,31
 80043b4:	10800104 	addi	r2,r2,4
 80043b8:	d8812d15 	stw	r2,1204(sp)
 80043bc:	a805883a 	mov	r2,r21
 80043c0:	003b1a06 	br	800302c <__alt_data_end+0xfc00302c>
 80043c4:	e4000007 	ldb	r16,0(fp)
 80043c8:	e005883a 	mov	r2,fp
 80043cc:	003a2306 	br	8002c5c <__alt_data_end+0xfc002c5c>
 80043d0:	00800084 	movi	r2,2
 80043d4:	003c4906 	br	80034fc <__alt_data_end+0xfc0034fc>
 80043d8:	01020074 	movhi	r4,2049
 80043dc:	21041084 	addi	r4,r4,4162
 80043e0:	d9012c15 	stw	r4,1200(sp)
 80043e4:	d9012c17 	ldw	r4,1200(sp)
 80043e8:	1c47883a 	add	r3,r3,r17
 80043ec:	10800044 	addi	r2,r2,1
 80043f0:	41000015 	stw	r4,0(r8)
 80043f4:	44400115 	stw	r17,4(r8)
 80043f8:	d8c12015 	stw	r3,1152(sp)
 80043fc:	d8811f15 	stw	r2,1148(sp)
 8004400:	010001c4 	movi	r4,7
 8004404:	20becc16 	blt	r4,r2,8003f38 <__alt_data_end+0xfc003f38>
 8004408:	42000204 	addi	r8,r8,8
 800440c:	003ed106 	br	8003f54 <__alt_data_end+0xfc003f54>
 8004410:	01020074 	movhi	r4,2049
 8004414:	21041084 	addi	r4,r4,4162
 8004418:	d9012c15 	stw	r4,1200(sp)
 800441c:	003ba306 	br	80032ac <__alt_data_end+0xfc0032ac>
 8004420:	b809883a 	mov	r4,r23
 8004424:	b00b883a 	mov	r5,r22
 8004428:	d9811e04 	addi	r6,sp,1144
 800442c:	80088740 	call	8008874 <__sprint_r>
 8004430:	103aba1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004434:	d8c12017 	ldw	r3,1152(sp)
 8004438:	da000404 	addi	r8,sp,16
 800443c:	003d6c06 	br	80039f0 <__alt_data_end+0xfc0039f0>
 8004440:	d8811f17 	ldw	r2,1148(sp)
 8004444:	01420074 	movhi	r5,2049
 8004448:	01000044 	movi	r4,1
 800444c:	18c00044 	addi	r3,r3,1
 8004450:	10800044 	addi	r2,r2,1
 8004454:	29441004 	addi	r5,r5,4160
 8004458:	41000115 	stw	r4,4(r8)
 800445c:	41400015 	stw	r5,0(r8)
 8004460:	d8c12015 	stw	r3,1152(sp)
 8004464:	d8811f15 	stw	r2,1148(sp)
 8004468:	010001c4 	movi	r4,7
 800446c:	20806716 	blt	r4,r2,800460c <___vfprintf_internal_r+0x1b50>
 8004470:	42000204 	addi	r8,r8,8
 8004474:	8000041e 	bne	r16,zero,8004488 <___vfprintf_internal_r+0x19cc>
 8004478:	d8813317 	ldw	r2,1228(sp)
 800447c:	1000021e 	bne	r2,zero,8004488 <___vfprintf_internal_r+0x19cc>
 8004480:	e080004c 	andi	r2,fp,1
 8004484:	103ba026 	beq	r2,zero,8003308 <__alt_data_end+0xfc003308>
 8004488:	d9013817 	ldw	r4,1248(sp)
 800448c:	d8811f17 	ldw	r2,1148(sp)
 8004490:	d9413517 	ldw	r5,1236(sp)
 8004494:	1907883a 	add	r3,r3,r4
 8004498:	10800044 	addi	r2,r2,1
 800449c:	41000115 	stw	r4,4(r8)
 80044a0:	41400015 	stw	r5,0(r8)
 80044a4:	d8c12015 	stw	r3,1152(sp)
 80044a8:	d8811f15 	stw	r2,1148(sp)
 80044ac:	010001c4 	movi	r4,7
 80044b0:	20815716 	blt	r4,r2,8004a10 <___vfprintf_internal_r+0x1f54>
 80044b4:	42000204 	addi	r8,r8,8
 80044b8:	0421c83a 	sub	r16,zero,r16
 80044bc:	0400810e 	bge	zero,r16,80046c4 <___vfprintf_internal_r+0x1c08>
 80044c0:	04400404 	movi	r17,16
 80044c4:	8c00bd0e 	bge	r17,r16,80047bc <___vfprintf_internal_r+0x1d00>
 80044c8:	01420074 	movhi	r5,2049
 80044cc:	29441084 	addi	r5,r5,4162
 80044d0:	d9412c15 	stw	r5,1200(sp)
 80044d4:	04c001c4 	movi	r19,7
 80044d8:	00000306 	br	80044e8 <___vfprintf_internal_r+0x1a2c>
 80044dc:	42000204 	addi	r8,r8,8
 80044e0:	843ffc04 	addi	r16,r16,-16
 80044e4:	8c00b80e 	bge	r17,r16,80047c8 <___vfprintf_internal_r+0x1d0c>
 80044e8:	18c00404 	addi	r3,r3,16
 80044ec:	10800044 	addi	r2,r2,1
 80044f0:	45000015 	stw	r20,0(r8)
 80044f4:	44400115 	stw	r17,4(r8)
 80044f8:	d8c12015 	stw	r3,1152(sp)
 80044fc:	d8811f15 	stw	r2,1148(sp)
 8004500:	98bff60e 	bge	r19,r2,80044dc <__alt_data_end+0xfc0044dc>
 8004504:	b809883a 	mov	r4,r23
 8004508:	b00b883a 	mov	r5,r22
 800450c:	d9811e04 	addi	r6,sp,1144
 8004510:	80088740 	call	8008874 <__sprint_r>
 8004514:	103a811e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004518:	d8c12017 	ldw	r3,1152(sp)
 800451c:	d8811f17 	ldw	r2,1148(sp)
 8004520:	da000404 	addi	r8,sp,16
 8004524:	003fee06 	br	80044e0 <__alt_data_end+0xfc0044e0>
 8004528:	008011c4 	movi	r2,71
 800452c:	1400db16 	blt	r2,r16,800489c <___vfprintf_internal_r+0x1de0>
 8004530:	01020074 	movhi	r4,2049
 8004534:	21040204 	addi	r4,r4,4104
 8004538:	d9013115 	stw	r4,1220(sp)
 800453c:	00c000c4 	movi	r3,3
 8004540:	00bfdfc4 	movi	r2,-129
 8004544:	d8c12b15 	stw	r3,1196(sp)
 8004548:	e0b8703a 	and	fp,fp,r2
 800454c:	dcc12783 	ldbu	r19,1182(sp)
 8004550:	dc812d15 	stw	r18,1204(sp)
 8004554:	1823883a 	mov	r17,r3
 8004558:	d8013215 	stw	zero,1224(sp)
 800455c:	d8013415 	stw	zero,1232(sp)
 8004560:	003ad606 	br	80030bc <__alt_data_end+0xfc0030bc>
 8004564:	4823883a 	mov	r17,r9
 8004568:	003cc906 	br	8003890 <__alt_data_end+0xfc003890>
 800456c:	1c800017 	ldw	r18,0(r3)
 8004570:	d8c12d17 	ldw	r3,1204(sp)
 8004574:	902bd7fa 	srai	r21,r18,31
 8004578:	18c00104 	addi	r3,r3,4
 800457c:	d8c12d15 	stw	r3,1204(sp)
 8004580:	a805883a 	mov	r2,r21
 8004584:	003aa906 	br	800302c <__alt_data_end+0xfc00302c>
 8004588:	d9412d17 	ldw	r5,1204(sp)
 800458c:	14800017 	ldw	r18,0(r2)
 8004590:	002b883a 	mov	r21,zero
 8004594:	29400104 	addi	r5,r5,4
 8004598:	d9412d15 	stw	r5,1204(sp)
 800459c:	003bf906 	br	8003584 <__alt_data_end+0xfc003584>
 80045a0:	d8c12d17 	ldw	r3,1204(sp)
 80045a4:	14800017 	ldw	r18,0(r2)
 80045a8:	002b883a 	mov	r21,zero
 80045ac:	18c00104 	addi	r3,r3,4
 80045b0:	d8c12d15 	stw	r3,1204(sp)
 80045b4:	00800044 	movi	r2,1
 80045b8:	9007883a 	mov	r3,r18
 80045bc:	003bcf06 	br	80034fc <__alt_data_end+0xfc0034fc>
 80045c0:	d9012d17 	ldw	r4,1204(sp)
 80045c4:	14800017 	ldw	r18,0(r2)
 80045c8:	002b883a 	mov	r21,zero
 80045cc:	21000104 	addi	r4,r4,4
 80045d0:	d9012d15 	stw	r4,1204(sp)
 80045d4:	0005883a 	mov	r2,zero
 80045d8:	9007883a 	mov	r3,r18
 80045dc:	003bc706 	br	80034fc <__alt_data_end+0xfc0034fc>
 80045e0:	d9412d17 	ldw	r5,1204(sp)
 80045e4:	d8c12f17 	ldw	r3,1212(sp)
 80045e8:	28800017 	ldw	r2,0(r5)
 80045ec:	29400104 	addi	r5,r5,4
 80045f0:	d9412d15 	stw	r5,1204(sp)
 80045f4:	10c00015 	stw	r3,0(r2)
 80045f8:	00396d06 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 80045fc:	01020074 	movhi	r4,2049
 8004600:	21040004 	addi	r4,r4,4096
 8004604:	d9013115 	stw	r4,1220(sp)
 8004608:	003ba206 	br	8003494 <__alt_data_end+0xfc003494>
 800460c:	b809883a 	mov	r4,r23
 8004610:	b00b883a 	mov	r5,r22
 8004614:	d9811e04 	addi	r6,sp,1144
 8004618:	80088740 	call	8008874 <__sprint_r>
 800461c:	103a3f1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004620:	dc012617 	ldw	r16,1176(sp)
 8004624:	d8c12017 	ldw	r3,1152(sp)
 8004628:	da000404 	addi	r8,sp,16
 800462c:	003f9106 	br	8004474 <__alt_data_end+0xfc004474>
 8004630:	e0800044 	addi	r2,fp,1
 8004634:	9cc00814 	ori	r19,r19,32
 8004638:	e4000047 	ldb	r16,1(fp)
 800463c:	00398706 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8004640:	d8812e17 	ldw	r2,1208(sp)
 8004644:	d8c12d15 	stw	r3,1204(sp)
 8004648:	0085c83a 	sub	r2,zero,r2
 800464c:	d8812e15 	stw	r2,1208(sp)
 8004650:	e005883a 	mov	r2,fp
 8004654:	003a3a06 	br	8002f40 <__alt_data_end+0xfc002f40>
 8004658:	b809883a 	mov	r4,r23
 800465c:	b00b883a 	mov	r5,r22
 8004660:	d9811e04 	addi	r6,sp,1144
 8004664:	80088740 	call	8008874 <__sprint_r>
 8004668:	103a2c1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 800466c:	d8c12017 	ldw	r3,1152(sp)
 8004670:	da000404 	addi	r8,sp,16
 8004674:	003cf006 	br	8003a38 <__alt_data_end+0xfc003a38>
 8004678:	d8c12817 	ldw	r3,1184(sp)
 800467c:	d9013117 	ldw	r4,1220(sp)
 8004680:	1923c83a 	sub	r17,r3,r4
 8004684:	003a8806 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8004688:	da013f15 	stw	r8,1276(sp)
 800468c:	8002a1c0 	call	8002a1c <strlen>
 8004690:	1023883a 	mov	r17,r2
 8004694:	da013f17 	ldw	r8,1276(sp)
 8004698:	883c7f0e 	bge	r17,zero,8003898 <__alt_data_end+0xfc003898>
 800469c:	0005883a 	mov	r2,zero
 80046a0:	003c7d06 	br	8003898 <__alt_data_end+0xfc003898>
 80046a4:	b809883a 	mov	r4,r23
 80046a8:	b00b883a 	mov	r5,r22
 80046ac:	d9811e04 	addi	r6,sp,1144
 80046b0:	80088740 	call	8008874 <__sprint_r>
 80046b4:	103a191e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 80046b8:	d8c12017 	ldw	r3,1152(sp)
 80046bc:	d8811f17 	ldw	r2,1148(sp)
 80046c0:	da000404 	addi	r8,sp,16
 80046c4:	d9413317 	ldw	r5,1228(sp)
 80046c8:	d9013117 	ldw	r4,1220(sp)
 80046cc:	10800044 	addi	r2,r2,1
 80046d0:	28c7883a 	add	r3,r5,r3
 80046d4:	41000015 	stw	r4,0(r8)
 80046d8:	41400115 	stw	r5,4(r8)
 80046dc:	d8c12015 	stw	r3,1152(sp)
 80046e0:	d8811f15 	stw	r2,1148(sp)
 80046e4:	010001c4 	movi	r4,7
 80046e8:	20bb060e 	bge	r4,r2,8003304 <__alt_data_end+0xfc003304>
 80046ec:	003d6206 	br	8003c78 <__alt_data_end+0xfc003c78>
 80046f0:	01020074 	movhi	r4,2049
 80046f4:	21041484 	addi	r4,r4,4178
 80046f8:	d9013615 	stw	r4,1240(sp)
 80046fc:	003aa306 	br	800318c <__alt_data_end+0xfc00318c>
 8004700:	d8812604 	addi	r2,sp,1176
 8004704:	d8800115 	stw	r2,4(sp)
 8004708:	d9413717 	ldw	r5,1244(sp)
 800470c:	d8812504 	addi	r2,sp,1172
 8004710:	d8800215 	stw	r2,8(sp)
 8004714:	d8812104 	addi	r2,sp,1156
 8004718:	da400015 	stw	r9,0(sp)
 800471c:	d8800315 	stw	r2,12(sp)
 8004720:	b809883a 	mov	r4,r23
 8004724:	880d883a 	mov	r6,r17
 8004728:	01c000c4 	movi	r7,3
 800472c:	da013f15 	stw	r8,1276(sp)
 8004730:	da413e15 	stw	r9,1272(sp)
 8004734:	8004fe40 	call	8004fe4 <_dtoa_r>
 8004738:	da413e17 	ldw	r9,1272(sp)
 800473c:	da013f17 	ldw	r8,1276(sp)
 8004740:	d8813115 	stw	r2,1220(sp)
 8004744:	482b883a 	mov	r21,r9
 8004748:	d8c13117 	ldw	r3,1220(sp)
 800474c:	00801184 	movi	r2,70
 8004750:	1d55883a 	add	r10,r3,r21
 8004754:	98bebb1e 	bne	r19,r2,8004244 <__alt_data_end+0xfc004244>
 8004758:	19000007 	ldb	r4,0(r3)
 800475c:	00800c04 	movi	r2,48
 8004760:	2080dd26 	beq	r4,r2,8004ad8 <___vfprintf_internal_r+0x201c>
 8004764:	d8c12617 	ldw	r3,1176(sp)
 8004768:	50d5883a 	add	r10,r10,r3
 800476c:	003eb506 	br	8004244 <__alt_data_end+0xfc004244>
 8004770:	0023883a 	mov	r17,zero
 8004774:	003d9b06 	br	8003de4 <__alt_data_end+0xfc003de4>
 8004778:	b809883a 	mov	r4,r23
 800477c:	b00b883a 	mov	r5,r22
 8004780:	d9811e04 	addi	r6,sp,1144
 8004784:	80088740 	call	8008874 <__sprint_r>
 8004788:	1039e41e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 800478c:	d8c12017 	ldw	r3,1152(sp)
 8004790:	da000404 	addi	r8,sp,16
 8004794:	003d9206 	br	8003de0 <__alt_data_end+0xfc003de0>
 8004798:	b809883a 	mov	r4,r23
 800479c:	b00b883a 	mov	r5,r22
 80047a0:	d9811e04 	addi	r6,sp,1144
 80047a4:	80088740 	call	8008874 <__sprint_r>
 80047a8:	1039dc1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 80047ac:	d8812617 	ldw	r2,1176(sp)
 80047b0:	d8c12017 	ldw	r3,1152(sp)
 80047b4:	da000404 	addi	r8,sp,16
 80047b8:	003dfb06 	br	8003fa8 <__alt_data_end+0xfc003fa8>
 80047bc:	01020074 	movhi	r4,2049
 80047c0:	21041084 	addi	r4,r4,4162
 80047c4:	d9012c15 	stw	r4,1200(sp)
 80047c8:	d9012c17 	ldw	r4,1200(sp)
 80047cc:	1c07883a 	add	r3,r3,r16
 80047d0:	10800044 	addi	r2,r2,1
 80047d4:	41000015 	stw	r4,0(r8)
 80047d8:	44000115 	stw	r16,4(r8)
 80047dc:	d8c12015 	stw	r3,1152(sp)
 80047e0:	d8811f15 	stw	r2,1148(sp)
 80047e4:	010001c4 	movi	r4,7
 80047e8:	20bfae16 	blt	r4,r2,80046a4 <__alt_data_end+0xfc0046a4>
 80047ec:	42000204 	addi	r8,r8,8
 80047f0:	003fb406 	br	80046c4 <__alt_data_end+0xfc0046c4>
 80047f4:	0021883a 	mov	r16,zero
 80047f8:	003dfd06 	br	8003ff0 <__alt_data_end+0xfc003ff0>
 80047fc:	01420074 	movhi	r5,2049
 8004800:	29441484 	addi	r5,r5,4178
 8004804:	d9413615 	stw	r5,1240(sp)
 8004808:	003ae306 	br	8003398 <__alt_data_end+0xfc003398>
 800480c:	b809883a 	mov	r4,r23
 8004810:	b00b883a 	mov	r5,r22
 8004814:	d9811e04 	addi	r6,sp,1144
 8004818:	80088740 	call	8008874 <__sprint_r>
 800481c:	1039bf1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004820:	d8812617 	ldw	r2,1176(sp)
 8004824:	d9413317 	ldw	r5,1228(sp)
 8004828:	d8c12017 	ldw	r3,1152(sp)
 800482c:	da000404 	addi	r8,sp,16
 8004830:	2885c83a 	sub	r2,r5,r2
 8004834:	003ded06 	br	8003fec <__alt_data_end+0xfc003fec>
 8004838:	00800184 	movi	r2,6
 800483c:	1240012e 	bgeu	r2,r9,8004844 <___vfprintf_internal_r+0x1d88>
 8004840:	1013883a 	mov	r9,r2
 8004844:	4823883a 	mov	r17,r9
 8004848:	4805883a 	mov	r2,r9
 800484c:	4800b216 	blt	r9,zero,8004b18 <___vfprintf_internal_r+0x205c>
 8004850:	01420074 	movhi	r5,2049
 8004854:	29440e04 	addi	r5,r5,4152
 8004858:	d8812b15 	stw	r2,1196(sp)
 800485c:	dc812d15 	stw	r18,1204(sp)
 8004860:	d8013215 	stw	zero,1224(sp)
 8004864:	d8013415 	stw	zero,1232(sp)
 8004868:	d9413115 	stw	r5,1220(sp)
 800486c:	0005883a 	mov	r2,zero
 8004870:	003a1906 	br	80030d8 <__alt_data_end+0xfc0030d8>
 8004874:	04c00b44 	movi	r19,45
 8004878:	dcc12785 	stb	r19,1182(sp)
 800487c:	003b0006 	br	8003480 <__alt_data_end+0xfc003480>
 8004880:	d8c12d17 	ldw	r3,1204(sp)
 8004884:	d9012f17 	ldw	r4,1212(sp)
 8004888:	18800017 	ldw	r2,0(r3)
 800488c:	18c00104 	addi	r3,r3,4
 8004890:	d8c12d15 	stw	r3,1204(sp)
 8004894:	11000015 	stw	r4,0(r2)
 8004898:	0038c506 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 800489c:	01420074 	movhi	r5,2049
 80048a0:	29440304 	addi	r5,r5,4108
 80048a4:	d9413115 	stw	r5,1220(sp)
 80048a8:	003f2406 	br	800453c <__alt_data_end+0xfc00453c>
 80048ac:	00800b44 	movi	r2,45
 80048b0:	d8812785 	stb	r2,1182(sp)
 80048b4:	df012b15 	stw	fp,1196(sp)
 80048b8:	d8013215 	stw	zero,1224(sp)
 80048bc:	df012d17 	ldw	fp,1204(sp)
 80048c0:	00800b44 	movi	r2,45
 80048c4:	dc812d15 	stw	r18,1204(sp)
 80048c8:	003a0006 	br	80030cc <__alt_data_end+0xfc0030cc>
 80048cc:	d8c12617 	ldw	r3,1176(sp)
 80048d0:	00bfff44 	movi	r2,-3
 80048d4:	18800a16 	blt	r3,r2,8004900 <___vfprintf_internal_r+0x1e44>
 80048d8:	48c00916 	blt	r9,r3,8004900 <___vfprintf_internal_r+0x1e44>
 80048dc:	d8c13415 	stw	r3,1232(sp)
 80048e0:	040019c4 	movi	r16,103
 80048e4:	003e7606 	br	80042c0 <__alt_data_end+0xfc0042c0>
 80048e8:	01020074 	movhi	r4,2049
 80048ec:	21041084 	addi	r4,r4,4162
 80048f0:	d9012c15 	stw	r4,1200(sp)
 80048f4:	003c8e06 	br	8003b30 <__alt_data_end+0xfc003b30>
 80048f8:	5005883a 	mov	r2,r10
 80048fc:	003e6506 	br	8004294 <__alt_data_end+0xfc004294>
 8004900:	843fff84 	addi	r16,r16,-2
 8004904:	1d7fffc4 	addi	r21,r3,-1
 8004908:	dd412615 	stw	r21,1176(sp)
 800490c:	dc0122c5 	stb	r16,1163(sp)
 8004910:	a8009216 	blt	r21,zero,8004b5c <___vfprintf_internal_r+0x20a0>
 8004914:	00800ac4 	movi	r2,43
 8004918:	d8812305 	stb	r2,1164(sp)
 800491c:	00800244 	movi	r2,9
 8004920:	1540660e 	bge	r2,r21,8004abc <___vfprintf_internal_r+0x2000>
 8004924:	dcc122c4 	addi	r19,sp,1163
 8004928:	dc012c15 	stw	r16,1200(sp)
 800492c:	4023883a 	mov	r17,r8
 8004930:	9821883a 	mov	r16,r19
 8004934:	a809883a 	mov	r4,r21
 8004938:	01400284 	movi	r5,10
 800493c:	800b0140 	call	800b014 <__modsi3>
 8004940:	10800c04 	addi	r2,r2,48
 8004944:	843fffc4 	addi	r16,r16,-1
 8004948:	a809883a 	mov	r4,r21
 800494c:	01400284 	movi	r5,10
 8004950:	80800005 	stb	r2,0(r16)
 8004954:	800afc00 	call	800afc0 <__divsi3>
 8004958:	01000244 	movi	r4,9
 800495c:	102b883a 	mov	r21,r2
 8004960:	20bff416 	blt	r4,r2,8004934 <__alt_data_end+0xfc004934>
 8004964:	8811883a 	mov	r8,r17
 8004968:	10800c04 	addi	r2,r2,48
 800496c:	8023883a 	mov	r17,r16
 8004970:	897fffc4 	addi	r5,r17,-1
 8004974:	88bfffc5 	stb	r2,-1(r17)
 8004978:	dc012c17 	ldw	r16,1200(sp)
 800497c:	2cc08a2e 	bgeu	r5,r19,8004ba8 <___vfprintf_internal_r+0x20ec>
 8004980:	d9812384 	addi	r6,sp,1166
 8004984:	344dc83a 	sub	r6,r6,r17
 8004988:	d9012344 	addi	r4,sp,1165
 800498c:	998d883a 	add	r6,r19,r6
 8004990:	00000106 	br	8004998 <___vfprintf_internal_r+0x1edc>
 8004994:	28800003 	ldbu	r2,0(r5)
 8004998:	20800005 	stb	r2,0(r4)
 800499c:	21000044 	addi	r4,r4,1
 80049a0:	29400044 	addi	r5,r5,1
 80049a4:	21bffb1e 	bne	r4,r6,8004994 <__alt_data_end+0xfc004994>
 80049a8:	d8812304 	addi	r2,sp,1164
 80049ac:	1445c83a 	sub	r2,r2,r17
 80049b0:	d9412344 	addi	r5,sp,1165
 80049b4:	2885883a 	add	r2,r5,r2
 80049b8:	14e7c83a 	sub	r19,r2,r19
 80049bc:	d8813317 	ldw	r2,1228(sp)
 80049c0:	d8c13317 	ldw	r3,1228(sp)
 80049c4:	dcc13a15 	stw	r19,1256(sp)
 80049c8:	14e3883a 	add	r17,r2,r19
 80049cc:	00800044 	movi	r2,1
 80049d0:	10c0550e 	bge	r2,r3,8004b28 <___vfprintf_internal_r+0x206c>
 80049d4:	8c400044 	addi	r17,r17,1
 80049d8:	8839883a 	mov	fp,r17
 80049dc:	88005016 	blt	r17,zero,8004b20 <___vfprintf_internal_r+0x2064>
 80049e0:	d8013415 	stw	zero,1232(sp)
 80049e4:	003e3f06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80049e8:	da412b15 	stw	r9,1196(sp)
 80049ec:	dcc12783 	ldbu	r19,1182(sp)
 80049f0:	4823883a 	mov	r17,r9
 80049f4:	dc812d15 	stw	r18,1204(sp)
 80049f8:	d8013215 	stw	zero,1224(sp)
 80049fc:	d8013415 	stw	zero,1232(sp)
 8004a00:	0039ae06 	br	80030bc <__alt_data_end+0xfc0030bc>
 8004a04:	483de91e 	bne	r9,zero,80041ac <__alt_data_end+0xfc0041ac>
 8004a08:	8813883a 	mov	r9,r17
 8004a0c:	003de706 	br	80041ac <__alt_data_end+0xfc0041ac>
 8004a10:	b809883a 	mov	r4,r23
 8004a14:	b00b883a 	mov	r5,r22
 8004a18:	d9811e04 	addi	r6,sp,1144
 8004a1c:	80088740 	call	8008874 <__sprint_r>
 8004a20:	10393e1e 	bne	r2,zero,8002f1c <__alt_data_end+0xfc002f1c>
 8004a24:	dc012617 	ldw	r16,1176(sp)
 8004a28:	d8c12017 	ldw	r3,1152(sp)
 8004a2c:	d8811f17 	ldw	r2,1148(sp)
 8004a30:	da000404 	addi	r8,sp,16
 8004a34:	003ea006 	br	80044b8 <__alt_data_end+0xfc0044b8>
 8004a38:	00c00b44 	movi	r3,45
 8004a3c:	2460003c 	xorhi	r17,r4,32768
 8004a40:	d8c12b05 	stb	r3,1196(sp)
 8004a44:	003ddf06 	br	80041c4 <__alt_data_end+0xfc0041c4>
 8004a48:	02400184 	movi	r9,6
 8004a4c:	003dd706 	br	80041ac <__alt_data_end+0xfc0041ac>
 8004a50:	4d400044 	addi	r21,r9,1
 8004a54:	003de206 	br	80041e0 <__alt_data_end+0xfc0041e0>
 8004a58:	d8c13417 	ldw	r3,1232(sp)
 8004a5c:	00c0490e 	bge	zero,r3,8004b84 <___vfprintf_internal_r+0x20c8>
 8004a60:	04400044 	movi	r17,1
 8004a64:	d9013317 	ldw	r4,1228(sp)
 8004a68:	8923883a 	add	r17,r17,r4
 8004a6c:	8839883a 	mov	fp,r17
 8004a70:	883e1c0e 	bge	r17,zero,80042e4 <__alt_data_end+0xfc0042e4>
 8004a74:	0039883a 	mov	fp,zero
 8004a78:	003e1a06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004a7c:	00c03b0e 	bge	zero,r3,8004b6c <___vfprintf_internal_r+0x20b0>
 8004a80:	4800021e 	bne	r9,zero,8004a8c <___vfprintf_internal_r+0x1fd0>
 8004a84:	e080004c 	andi	r2,fp,1
 8004a88:	10000626 	beq	r2,zero,8004aa4 <___vfprintf_internal_r+0x1fe8>
 8004a8c:	d8c13417 	ldw	r3,1232(sp)
 8004a90:	4a400044 	addi	r9,r9,1
 8004a94:	1a63883a 	add	r17,r3,r9
 8004a98:	8839883a 	mov	fp,r17
 8004a9c:	883e110e 	bge	r17,zero,80042e4 <__alt_data_end+0xfc0042e4>
 8004aa0:	003ff406 	br	8004a74 <__alt_data_end+0xfc004a74>
 8004aa4:	1839883a 	mov	fp,r3
 8004aa8:	18004116 	blt	r3,zero,8004bb0 <___vfprintf_internal_r+0x20f4>
 8004aac:	dc413417 	ldw	r17,1232(sp)
 8004ab0:	003e0c06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004ab4:	d8812117 	ldw	r2,1156(sp)
 8004ab8:	003df606 	br	8004294 <__alt_data_end+0xfc004294>
 8004abc:	00800c04 	movi	r2,48
 8004ac0:	a8c00c04 	addi	r3,r21,48
 8004ac4:	d8812345 	stb	r2,1165(sp)
 8004ac8:	d8c12385 	stb	r3,1166(sp)
 8004acc:	d88123c4 	addi	r2,sp,1167
 8004ad0:	dcc122c4 	addi	r19,sp,1163
 8004ad4:	003fb806 	br	80049b8 <__alt_data_end+0xfc0049b8>
 8004ad8:	d9013717 	ldw	r4,1244(sp)
 8004adc:	880b883a 	mov	r5,r17
 8004ae0:	000d883a 	mov	r6,zero
 8004ae4:	000f883a 	mov	r7,zero
 8004ae8:	da013f15 	stw	r8,1276(sp)
 8004aec:	da413e15 	stw	r9,1272(sp)
 8004af0:	da813d15 	stw	r10,1268(sp)
 8004af4:	800c2c40 	call	800c2c4 <__eqdf2>
 8004af8:	da013f17 	ldw	r8,1276(sp)
 8004afc:	da413e17 	ldw	r9,1272(sp)
 8004b00:	da813d17 	ldw	r10,1268(sp)
 8004b04:	103f1726 	beq	r2,zero,8004764 <__alt_data_end+0xfc004764>
 8004b08:	00800044 	movi	r2,1
 8004b0c:	1547c83a 	sub	r3,r2,r21
 8004b10:	d8c12615 	stw	r3,1176(sp)
 8004b14:	003f1406 	br	8004768 <__alt_data_end+0xfc004768>
 8004b18:	0005883a 	mov	r2,zero
 8004b1c:	003f4c06 	br	8004850 <__alt_data_end+0xfc004850>
 8004b20:	0039883a 	mov	fp,zero
 8004b24:	003fae06 	br	80049e0 <__alt_data_end+0xfc0049e0>
 8004b28:	e084703a 	and	r2,fp,r2
 8004b2c:	103faa26 	beq	r2,zero,80049d8 <__alt_data_end+0xfc0049d8>
 8004b30:	003fa806 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004b34:	d9412d17 	ldw	r5,1204(sp)
 8004b38:	2a400017 	ldw	r9,0(r5)
 8004b3c:	28c00104 	addi	r3,r5,4
 8004b40:	d8c12d15 	stw	r3,1204(sp)
 8004b44:	483ebc0e 	bge	r9,zero,8004638 <__alt_data_end+0xfc004638>
 8004b48:	027fffc4 	movi	r9,-1
 8004b4c:	e4000047 	ldb	r16,1(fp)
 8004b50:	00384206 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8004b54:	043fffc4 	movi	r16,-1
 8004b58:	0038ce06 	br	8002e94 <__alt_data_end+0xfc002e94>
 8004b5c:	00800b44 	movi	r2,45
 8004b60:	056bc83a 	sub	r21,zero,r21
 8004b64:	d8812305 	stb	r2,1164(sp)
 8004b68:	003f6c06 	br	800491c <__alt_data_end+0xfc00491c>
 8004b6c:	4800081e 	bne	r9,zero,8004b90 <___vfprintf_internal_r+0x20d4>
 8004b70:	e080004c 	andi	r2,fp,1
 8004b74:	1000061e 	bne	r2,zero,8004b90 <___vfprintf_internal_r+0x20d4>
 8004b78:	07000044 	movi	fp,1
 8004b7c:	e023883a 	mov	r17,fp
 8004b80:	003dd806 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004b84:	04400084 	movi	r17,2
 8004b88:	88e3c83a 	sub	r17,r17,r3
 8004b8c:	003fb506 	br	8004a64 <__alt_data_end+0xfc004a64>
 8004b90:	4c400084 	addi	r17,r9,2
 8004b94:	8839883a 	mov	fp,r17
 8004b98:	883dd20e 	bge	r17,zero,80042e4 <__alt_data_end+0xfc0042e4>
 8004b9c:	003fb506 	br	8004a74 <__alt_data_end+0xfc004a74>
 8004ba0:	d8c12617 	ldw	r3,1176(sp)
 8004ba4:	003f5706 	br	8004904 <__alt_data_end+0xfc004904>
 8004ba8:	d8812344 	addi	r2,sp,1165
 8004bac:	003f8206 	br	80049b8 <__alt_data_end+0xfc0049b8>
 8004bb0:	0039883a 	mov	fp,zero
 8004bb4:	003fbd06 	br	8004aac <__alt_data_end+0xfc004aac>

08004bb8 <__vfprintf_internal>:
 8004bb8:	2007883a 	mov	r3,r4
 8004bbc:	01020074 	movhi	r4,2049
 8004bc0:	210baf04 	addi	r4,r4,11964
 8004bc4:	21000017 	ldw	r4,0(r4)
 8004bc8:	2805883a 	mov	r2,r5
 8004bcc:	300f883a 	mov	r7,r6
 8004bd0:	180b883a 	mov	r5,r3
 8004bd4:	100d883a 	mov	r6,r2
 8004bd8:	8002abc1 	jmpi	8002abc <___vfprintf_internal_r>

08004bdc <_write_r>:
 8004bdc:	defffd04 	addi	sp,sp,-12
 8004be0:	dc000015 	stw	r16,0(sp)
 8004be4:	04020074 	movhi	r16,2049
 8004be8:	dc400115 	stw	r17,4(sp)
 8004bec:	8412b504 	addi	r16,r16,19156
 8004bf0:	2023883a 	mov	r17,r4
 8004bf4:	2809883a 	mov	r4,r5
 8004bf8:	300b883a 	mov	r5,r6
 8004bfc:	380d883a 	mov	r6,r7
 8004c00:	dfc00215 	stw	ra,8(sp)
 8004c04:	80000015 	stw	zero,0(r16)
 8004c08:	800e5140 	call	800e514 <write>
 8004c0c:	00ffffc4 	movi	r3,-1
 8004c10:	10c00526 	beq	r2,r3,8004c28 <_write_r+0x4c>
 8004c14:	dfc00217 	ldw	ra,8(sp)
 8004c18:	dc400117 	ldw	r17,4(sp)
 8004c1c:	dc000017 	ldw	r16,0(sp)
 8004c20:	dec00304 	addi	sp,sp,12
 8004c24:	f800283a 	ret
 8004c28:	80c00017 	ldw	r3,0(r16)
 8004c2c:	183ff926 	beq	r3,zero,8004c14 <__alt_data_end+0xfc004c14>
 8004c30:	88c00015 	stw	r3,0(r17)
 8004c34:	003ff706 	br	8004c14 <__alt_data_end+0xfc004c14>

08004c38 <__swsetup_r>:
 8004c38:	00820074 	movhi	r2,2049
 8004c3c:	defffd04 	addi	sp,sp,-12
 8004c40:	108baf04 	addi	r2,r2,11964
 8004c44:	dc400115 	stw	r17,4(sp)
 8004c48:	2023883a 	mov	r17,r4
 8004c4c:	11000017 	ldw	r4,0(r2)
 8004c50:	dc000015 	stw	r16,0(sp)
 8004c54:	dfc00215 	stw	ra,8(sp)
 8004c58:	2821883a 	mov	r16,r5
 8004c5c:	20000226 	beq	r4,zero,8004c68 <__swsetup_r+0x30>
 8004c60:	20c00e17 	ldw	r3,56(r4)
 8004c64:	18002e26 	beq	r3,zero,8004d20 <__swsetup_r+0xe8>
 8004c68:	8080030b 	ldhu	r2,12(r16)
 8004c6c:	10c0020c 	andi	r3,r2,8
 8004c70:	100d883a 	mov	r6,r2
 8004c74:	18000f26 	beq	r3,zero,8004cb4 <__swsetup_r+0x7c>
 8004c78:	80c00417 	ldw	r3,16(r16)
 8004c7c:	18001526 	beq	r3,zero,8004cd4 <__swsetup_r+0x9c>
 8004c80:	1100004c 	andi	r4,r2,1
 8004c84:	20001c1e 	bne	r4,zero,8004cf8 <__swsetup_r+0xc0>
 8004c88:	1080008c 	andi	r2,r2,2
 8004c8c:	1000261e 	bne	r2,zero,8004d28 <__swsetup_r+0xf0>
 8004c90:	80800517 	ldw	r2,20(r16)
 8004c94:	80800215 	stw	r2,8(r16)
 8004c98:	18001c26 	beq	r3,zero,8004d0c <__swsetup_r+0xd4>
 8004c9c:	0005883a 	mov	r2,zero
 8004ca0:	dfc00217 	ldw	ra,8(sp)
 8004ca4:	dc400117 	ldw	r17,4(sp)
 8004ca8:	dc000017 	ldw	r16,0(sp)
 8004cac:	dec00304 	addi	sp,sp,12
 8004cb0:	f800283a 	ret
 8004cb4:	3080040c 	andi	r2,r6,16
 8004cb8:	10001726 	beq	r2,zero,8004d18 <__swsetup_r+0xe0>
 8004cbc:	3080010c 	andi	r2,r6,4
 8004cc0:	10001b1e 	bne	r2,zero,8004d30 <__swsetup_r+0xf8>
 8004cc4:	80c00417 	ldw	r3,16(r16)
 8004cc8:	30800214 	ori	r2,r6,8
 8004ccc:	8080030d 	sth	r2,12(r16)
 8004cd0:	183feb1e 	bne	r3,zero,8004c80 <__alt_data_end+0xfc004c80>
 8004cd4:	1140a00c 	andi	r5,r2,640
 8004cd8:	01008004 	movi	r4,512
 8004cdc:	293fe826 	beq	r5,r4,8004c80 <__alt_data_end+0xfc004c80>
 8004ce0:	8809883a 	mov	r4,r17
 8004ce4:	800b883a 	mov	r5,r16
 8004ce8:	800197c0 	call	800197c <__smakebuf_r>
 8004cec:	8080030b 	ldhu	r2,12(r16)
 8004cf0:	80c00417 	ldw	r3,16(r16)
 8004cf4:	003fe206 	br	8004c80 <__alt_data_end+0xfc004c80>
 8004cf8:	80800517 	ldw	r2,20(r16)
 8004cfc:	80000215 	stw	zero,8(r16)
 8004d00:	0085c83a 	sub	r2,zero,r2
 8004d04:	80800615 	stw	r2,24(r16)
 8004d08:	183fe41e 	bne	r3,zero,8004c9c <__alt_data_end+0xfc004c9c>
 8004d0c:	8080030b 	ldhu	r2,12(r16)
 8004d10:	1080200c 	andi	r2,r2,128
 8004d14:	103fe226 	beq	r2,zero,8004ca0 <__alt_data_end+0xfc004ca0>
 8004d18:	00bfffc4 	movi	r2,-1
 8004d1c:	003fe006 	br	8004ca0 <__alt_data_end+0xfc004ca0>
 8004d20:	8000a200 	call	8000a20 <__sinit>
 8004d24:	003fd006 	br	8004c68 <__alt_data_end+0xfc004c68>
 8004d28:	0005883a 	mov	r2,zero
 8004d2c:	003fd906 	br	8004c94 <__alt_data_end+0xfc004c94>
 8004d30:	81400c17 	ldw	r5,48(r16)
 8004d34:	28000626 	beq	r5,zero,8004d50 <__swsetup_r+0x118>
 8004d38:	80801004 	addi	r2,r16,64
 8004d3c:	28800326 	beq	r5,r2,8004d4c <__swsetup_r+0x114>
 8004d40:	8809883a 	mov	r4,r17
 8004d44:	8000f300 	call	8000f30 <_free_r>
 8004d48:	8180030b 	ldhu	r6,12(r16)
 8004d4c:	80000c15 	stw	zero,48(r16)
 8004d50:	80c00417 	ldw	r3,16(r16)
 8004d54:	00bff6c4 	movi	r2,-37
 8004d58:	118c703a 	and	r6,r2,r6
 8004d5c:	80000115 	stw	zero,4(r16)
 8004d60:	80c00015 	stw	r3,0(r16)
 8004d64:	003fd806 	br	8004cc8 <__alt_data_end+0xfc004cc8>

08004d68 <_close_r>:
 8004d68:	defffd04 	addi	sp,sp,-12
 8004d6c:	dc000015 	stw	r16,0(sp)
 8004d70:	04020074 	movhi	r16,2049
 8004d74:	dc400115 	stw	r17,4(sp)
 8004d78:	8412b504 	addi	r16,r16,19156
 8004d7c:	2023883a 	mov	r17,r4
 8004d80:	2809883a 	mov	r4,r5
 8004d84:	dfc00215 	stw	ra,8(sp)
 8004d88:	80000015 	stw	zero,0(r16)
 8004d8c:	800d8f40 	call	800d8f4 <close>
 8004d90:	00ffffc4 	movi	r3,-1
 8004d94:	10c00526 	beq	r2,r3,8004dac <_close_r+0x44>
 8004d98:	dfc00217 	ldw	ra,8(sp)
 8004d9c:	dc400117 	ldw	r17,4(sp)
 8004da0:	dc000017 	ldw	r16,0(sp)
 8004da4:	dec00304 	addi	sp,sp,12
 8004da8:	f800283a 	ret
 8004dac:	80c00017 	ldw	r3,0(r16)
 8004db0:	183ff926 	beq	r3,zero,8004d98 <__alt_data_end+0xfc004d98>
 8004db4:	88c00015 	stw	r3,0(r17)
 8004db8:	003ff706 	br	8004d98 <__alt_data_end+0xfc004d98>

08004dbc <quorem>:
 8004dbc:	defff204 	addi	sp,sp,-56
 8004dc0:	ddc00b15 	stw	r23,44(sp)
 8004dc4:	20800417 	ldw	r2,16(r4)
 8004dc8:	2dc00417 	ldw	r23,16(r5)
 8004dcc:	dfc00d15 	stw	ra,52(sp)
 8004dd0:	df000c15 	stw	fp,48(sp)
 8004dd4:	dd800a15 	stw	r22,40(sp)
 8004dd8:	dd400915 	stw	r21,36(sp)
 8004ddc:	dd000815 	stw	r20,32(sp)
 8004de0:	dcc00715 	stw	r19,28(sp)
 8004de4:	dc800615 	stw	r18,24(sp)
 8004de8:	dc400515 	stw	r17,20(sp)
 8004dec:	dc000415 	stw	r16,16(sp)
 8004df0:	15c07a16 	blt	r2,r23,8004fdc <quorem+0x220>
 8004df4:	bdffffc4 	addi	r23,r23,-1
 8004df8:	bde9883a 	add	r20,r23,r23
 8004dfc:	28c00504 	addi	r3,r5,20
 8004e00:	a529883a 	add	r20,r20,r20
 8004e04:	1d39883a 	add	fp,r3,r20
 8004e08:	24c00504 	addi	r19,r4,20
 8004e0c:	d9400215 	stw	r5,8(sp)
 8004e10:	9d29883a 	add	r20,r19,r20
 8004e14:	e1400017 	ldw	r5,0(fp)
 8004e18:	d9000015 	stw	r4,0(sp)
 8004e1c:	a1000017 	ldw	r4,0(r20)
 8004e20:	29400044 	addi	r5,r5,1
 8004e24:	d8c00115 	stw	r3,4(sp)
 8004e28:	dd000315 	stw	r20,12(sp)
 8004e2c:	800b0700 	call	800b070 <__udivsi3>
 8004e30:	1025883a 	mov	r18,r2
 8004e34:	10003026 	beq	r2,zero,8004ef8 <quorem+0x13c>
 8004e38:	dc400117 	ldw	r17,4(sp)
 8004e3c:	9829883a 	mov	r20,r19
 8004e40:	002d883a 	mov	r22,zero
 8004e44:	0021883a 	mov	r16,zero
 8004e48:	8d400017 	ldw	r21,0(r17)
 8004e4c:	900b883a 	mov	r5,r18
 8004e50:	8c400104 	addi	r17,r17,4
 8004e54:	a93fffcc 	andi	r4,r21,65535
 8004e58:	800b0800 	call	800b080 <__mulsi3>
 8004e5c:	a808d43a 	srli	r4,r21,16
 8004e60:	900b883a 	mov	r5,r18
 8004e64:	b0ad883a 	add	r22,r22,r2
 8004e68:	800b0800 	call	800b080 <__mulsi3>
 8004e6c:	a1000017 	ldw	r4,0(r20)
 8004e70:	b00cd43a 	srli	r6,r22,16
 8004e74:	b0ffffcc 	andi	r3,r22,65535
 8004e78:	217fffcc 	andi	r5,r4,65535
 8004e7c:	2c21883a 	add	r16,r5,r16
 8004e80:	80c7c83a 	sub	r3,r16,r3
 8004e84:	2008d43a 	srli	r4,r4,16
 8004e88:	3085883a 	add	r2,r6,r2
 8004e8c:	1821d43a 	srai	r16,r3,16
 8004e90:	117fffcc 	andi	r5,r2,65535
 8004e94:	2149c83a 	sub	r4,r4,r5
 8004e98:	2421883a 	add	r16,r4,r16
 8004e9c:	8008943a 	slli	r4,r16,16
 8004ea0:	18ffffcc 	andi	r3,r3,65535
 8004ea4:	102cd43a 	srli	r22,r2,16
 8004ea8:	20c8b03a 	or	r4,r4,r3
 8004eac:	a1000015 	stw	r4,0(r20)
 8004eb0:	8021d43a 	srai	r16,r16,16
 8004eb4:	a5000104 	addi	r20,r20,4
 8004eb8:	e47fe32e 	bgeu	fp,r17,8004e48 <__alt_data_end+0xfc004e48>
 8004ebc:	d8c00317 	ldw	r3,12(sp)
 8004ec0:	18800017 	ldw	r2,0(r3)
 8004ec4:	10000c1e 	bne	r2,zero,8004ef8 <quorem+0x13c>
 8004ec8:	18bfff04 	addi	r2,r3,-4
 8004ecc:	9880082e 	bgeu	r19,r2,8004ef0 <quorem+0x134>
 8004ed0:	18ffff17 	ldw	r3,-4(r3)
 8004ed4:	18000326 	beq	r3,zero,8004ee4 <quorem+0x128>
 8004ed8:	00000506 	br	8004ef0 <quorem+0x134>
 8004edc:	10c00017 	ldw	r3,0(r2)
 8004ee0:	1800031e 	bne	r3,zero,8004ef0 <quorem+0x134>
 8004ee4:	10bfff04 	addi	r2,r2,-4
 8004ee8:	bdffffc4 	addi	r23,r23,-1
 8004eec:	98bffb36 	bltu	r19,r2,8004edc <__alt_data_end+0xfc004edc>
 8004ef0:	d8c00017 	ldw	r3,0(sp)
 8004ef4:	1dc00415 	stw	r23,16(r3)
 8004ef8:	d9000017 	ldw	r4,0(sp)
 8004efc:	d9400217 	ldw	r5,8(sp)
 8004f00:	80079980 	call	8007998 <__mcmp>
 8004f04:	10002816 	blt	r2,zero,8004fa8 <quorem+0x1ec>
 8004f08:	dc400117 	ldw	r17,4(sp)
 8004f0c:	94800044 	addi	r18,r18,1
 8004f10:	980d883a 	mov	r6,r19
 8004f14:	0007883a 	mov	r3,zero
 8004f18:	31000017 	ldw	r4,0(r6)
 8004f1c:	89400017 	ldw	r5,0(r17)
 8004f20:	31800104 	addi	r6,r6,4
 8004f24:	20bfffcc 	andi	r2,r4,65535
 8004f28:	10c7883a 	add	r3,r2,r3
 8004f2c:	28bfffcc 	andi	r2,r5,65535
 8004f30:	1885c83a 	sub	r2,r3,r2
 8004f34:	280ad43a 	srli	r5,r5,16
 8004f38:	2008d43a 	srli	r4,r4,16
 8004f3c:	1007d43a 	srai	r3,r2,16
 8004f40:	10bfffcc 	andi	r2,r2,65535
 8004f44:	2149c83a 	sub	r4,r4,r5
 8004f48:	20c9883a 	add	r4,r4,r3
 8004f4c:	200a943a 	slli	r5,r4,16
 8004f50:	8c400104 	addi	r17,r17,4
 8004f54:	2007d43a 	srai	r3,r4,16
 8004f58:	2884b03a 	or	r2,r5,r2
 8004f5c:	30bfff15 	stw	r2,-4(r6)
 8004f60:	e47fed2e 	bgeu	fp,r17,8004f18 <__alt_data_end+0xfc004f18>
 8004f64:	bdc5883a 	add	r2,r23,r23
 8004f68:	1085883a 	add	r2,r2,r2
 8004f6c:	9887883a 	add	r3,r19,r2
 8004f70:	18800017 	ldw	r2,0(r3)
 8004f74:	10000c1e 	bne	r2,zero,8004fa8 <quorem+0x1ec>
 8004f78:	18bfff04 	addi	r2,r3,-4
 8004f7c:	9880082e 	bgeu	r19,r2,8004fa0 <quorem+0x1e4>
 8004f80:	18ffff17 	ldw	r3,-4(r3)
 8004f84:	18000326 	beq	r3,zero,8004f94 <quorem+0x1d8>
 8004f88:	00000506 	br	8004fa0 <quorem+0x1e4>
 8004f8c:	10c00017 	ldw	r3,0(r2)
 8004f90:	1800031e 	bne	r3,zero,8004fa0 <quorem+0x1e4>
 8004f94:	10bfff04 	addi	r2,r2,-4
 8004f98:	bdffffc4 	addi	r23,r23,-1
 8004f9c:	98bffb36 	bltu	r19,r2,8004f8c <__alt_data_end+0xfc004f8c>
 8004fa0:	d8c00017 	ldw	r3,0(sp)
 8004fa4:	1dc00415 	stw	r23,16(r3)
 8004fa8:	9005883a 	mov	r2,r18
 8004fac:	dfc00d17 	ldw	ra,52(sp)
 8004fb0:	df000c17 	ldw	fp,48(sp)
 8004fb4:	ddc00b17 	ldw	r23,44(sp)
 8004fb8:	dd800a17 	ldw	r22,40(sp)
 8004fbc:	dd400917 	ldw	r21,36(sp)
 8004fc0:	dd000817 	ldw	r20,32(sp)
 8004fc4:	dcc00717 	ldw	r19,28(sp)
 8004fc8:	dc800617 	ldw	r18,24(sp)
 8004fcc:	dc400517 	ldw	r17,20(sp)
 8004fd0:	dc000417 	ldw	r16,16(sp)
 8004fd4:	dec00e04 	addi	sp,sp,56
 8004fd8:	f800283a 	ret
 8004fdc:	0005883a 	mov	r2,zero
 8004fe0:	003ff206 	br	8004fac <__alt_data_end+0xfc004fac>

08004fe4 <_dtoa_r>:
 8004fe4:	20801017 	ldw	r2,64(r4)
 8004fe8:	deffde04 	addi	sp,sp,-136
 8004fec:	dd401d15 	stw	r21,116(sp)
 8004ff0:	dcc01b15 	stw	r19,108(sp)
 8004ff4:	dc801a15 	stw	r18,104(sp)
 8004ff8:	dc401915 	stw	r17,100(sp)
 8004ffc:	dc001815 	stw	r16,96(sp)
 8005000:	dfc02115 	stw	ra,132(sp)
 8005004:	df002015 	stw	fp,128(sp)
 8005008:	ddc01f15 	stw	r23,124(sp)
 800500c:	dd801e15 	stw	r22,120(sp)
 8005010:	dd001c15 	stw	r20,112(sp)
 8005014:	d9c00315 	stw	r7,12(sp)
 8005018:	2021883a 	mov	r16,r4
 800501c:	302b883a 	mov	r21,r6
 8005020:	2825883a 	mov	r18,r5
 8005024:	dc402417 	ldw	r17,144(sp)
 8005028:	3027883a 	mov	r19,r6
 800502c:	10000826 	beq	r2,zero,8005050 <_dtoa_r+0x6c>
 8005030:	21801117 	ldw	r6,68(r4)
 8005034:	00c00044 	movi	r3,1
 8005038:	100b883a 	mov	r5,r2
 800503c:	1986983a 	sll	r3,r3,r6
 8005040:	11800115 	stw	r6,4(r2)
 8005044:	10c00215 	stw	r3,8(r2)
 8005048:	80070c40 	call	80070c4 <_Bfree>
 800504c:	80001015 	stw	zero,64(r16)
 8005050:	a8002d16 	blt	r21,zero,8005108 <_dtoa_r+0x124>
 8005054:	88000015 	stw	zero,0(r17)
 8005058:	a8dffc2c 	andhi	r3,r21,32752
 800505c:	009ffc34 	movhi	r2,32752
 8005060:	18801b26 	beq	r3,r2,80050d0 <_dtoa_r+0xec>
 8005064:	9009883a 	mov	r4,r18
 8005068:	980b883a 	mov	r5,r19
 800506c:	000d883a 	mov	r6,zero
 8005070:	000f883a 	mov	r7,zero
 8005074:	800c2c40 	call	800c2c4 <__eqdf2>
 8005078:	10002a1e 	bne	r2,zero,8005124 <_dtoa_r+0x140>
 800507c:	d8c02317 	ldw	r3,140(sp)
 8005080:	d9002517 	ldw	r4,148(sp)
 8005084:	00800044 	movi	r2,1
 8005088:	18800015 	stw	r2,0(r3)
 800508c:	2001a226 	beq	r4,zero,8005718 <_dtoa_r+0x734>
 8005090:	00820074 	movhi	r2,2049
 8005094:	10841044 	addi	r2,r2,4161
 8005098:	20800015 	stw	r2,0(r4)
 800509c:	10bfffc4 	addi	r2,r2,-1
 80050a0:	dfc02117 	ldw	ra,132(sp)
 80050a4:	df002017 	ldw	fp,128(sp)
 80050a8:	ddc01f17 	ldw	r23,124(sp)
 80050ac:	dd801e17 	ldw	r22,120(sp)
 80050b0:	dd401d17 	ldw	r21,116(sp)
 80050b4:	dd001c17 	ldw	r20,112(sp)
 80050b8:	dcc01b17 	ldw	r19,108(sp)
 80050bc:	dc801a17 	ldw	r18,104(sp)
 80050c0:	dc401917 	ldw	r17,100(sp)
 80050c4:	dc001817 	ldw	r16,96(sp)
 80050c8:	dec02204 	addi	sp,sp,136
 80050cc:	f800283a 	ret
 80050d0:	d8c02317 	ldw	r3,140(sp)
 80050d4:	0089c3c4 	movi	r2,9999
 80050d8:	18800015 	stw	r2,0(r3)
 80050dc:	90017c26 	beq	r18,zero,80056d0 <_dtoa_r+0x6ec>
 80050e0:	00820074 	movhi	r2,2049
 80050e4:	10841c04 	addi	r2,r2,4208
 80050e8:	d9002517 	ldw	r4,148(sp)
 80050ec:	203fec26 	beq	r4,zero,80050a0 <__alt_data_end+0xfc0050a0>
 80050f0:	10c000c7 	ldb	r3,3(r2)
 80050f4:	18017d1e 	bne	r3,zero,80056ec <_dtoa_r+0x708>
 80050f8:	10c000c4 	addi	r3,r2,3
 80050fc:	d9802517 	ldw	r6,148(sp)
 8005100:	30c00015 	stw	r3,0(r6)
 8005104:	003fe606 	br	80050a0 <__alt_data_end+0xfc0050a0>
 8005108:	04e00034 	movhi	r19,32768
 800510c:	9cffffc4 	addi	r19,r19,-1
 8005110:	00800044 	movi	r2,1
 8005114:	ace6703a 	and	r19,r21,r19
 8005118:	88800015 	stw	r2,0(r17)
 800511c:	982b883a 	mov	r21,r19
 8005120:	003fcd06 	br	8005058 <__alt_data_end+0xfc005058>
 8005124:	d8800204 	addi	r2,sp,8
 8005128:	a822d53a 	srli	r17,r21,20
 800512c:	d8800015 	stw	r2,0(sp)
 8005130:	8009883a 	mov	r4,r16
 8005134:	900b883a 	mov	r5,r18
 8005138:	980d883a 	mov	r6,r19
 800513c:	d9c00104 	addi	r7,sp,4
 8005140:	8007d0c0 	call	8007d0c <__d2b>
 8005144:	1039883a 	mov	fp,r2
 8005148:	88016a1e 	bne	r17,zero,80056f4 <_dtoa_r+0x710>
 800514c:	dd000217 	ldw	r20,8(sp)
 8005150:	dc400117 	ldw	r17,4(sp)
 8005154:	00befbc4 	movi	r2,-1041
 8005158:	a463883a 	add	r17,r20,r17
 800515c:	8882ea16 	blt	r17,r2,8005d08 <_dtoa_r+0xd24>
 8005160:	00bf0384 	movi	r2,-1010
 8005164:	1445c83a 	sub	r2,r2,r17
 8005168:	89010484 	addi	r4,r17,1042
 800516c:	a8aa983a 	sll	r21,r21,r2
 8005170:	9108d83a 	srl	r4,r18,r4
 8005174:	a908b03a 	or	r4,r21,r4
 8005178:	800d79c0 	call	800d79c <__floatunsidf>
 800517c:	017f8434 	movhi	r5,65040
 8005180:	01800044 	movi	r6,1
 8005184:	1009883a 	mov	r4,r2
 8005188:	194b883a 	add	r5,r3,r5
 800518c:	8c7fffc4 	addi	r17,r17,-1
 8005190:	d9800f15 	stw	r6,60(sp)
 8005194:	000d883a 	mov	r6,zero
 8005198:	01cffe34 	movhi	r7,16376
 800519c:	800cd740 	call	800cd74 <__subdf3>
 80051a0:	0198dbf4 	movhi	r6,25455
 80051a4:	01cff4f4 	movhi	r7,16339
 80051a8:	1009883a 	mov	r4,r2
 80051ac:	180b883a 	mov	r5,r3
 80051b0:	3190d844 	addi	r6,r6,17249
 80051b4:	39e1e9c4 	addi	r7,r7,-30809
 80051b8:	800c5080 	call	800c508 <__muldf3>
 80051bc:	01a2d874 	movhi	r6,35681
 80051c0:	01cff1f4 	movhi	r7,16327
 80051c4:	180b883a 	mov	r5,r3
 80051c8:	31b22cc4 	addi	r6,r6,-14157
 80051cc:	39e28a04 	addi	r7,r7,-30168
 80051d0:	1009883a 	mov	r4,r2
 80051d4:	800b0a80 	call	800b0a8 <__adddf3>
 80051d8:	8809883a 	mov	r4,r17
 80051dc:	102d883a 	mov	r22,r2
 80051e0:	182b883a 	mov	r21,r3
 80051e4:	800d6cc0 	call	800d6cc <__floatsidf>
 80051e8:	019427f4 	movhi	r6,20639
 80051ec:	01cff4f4 	movhi	r7,16339
 80051f0:	1009883a 	mov	r4,r2
 80051f4:	180b883a 	mov	r5,r3
 80051f8:	319e7ec4 	addi	r6,r6,31227
 80051fc:	39d104c4 	addi	r7,r7,17427
 8005200:	800c5080 	call	800c508 <__muldf3>
 8005204:	b009883a 	mov	r4,r22
 8005208:	a80b883a 	mov	r5,r21
 800520c:	100d883a 	mov	r6,r2
 8005210:	180f883a 	mov	r7,r3
 8005214:	800b0a80 	call	800b0a8 <__adddf3>
 8005218:	1009883a 	mov	r4,r2
 800521c:	180b883a 	mov	r5,r3
 8005220:	102d883a 	mov	r22,r2
 8005224:	182b883a 	mov	r21,r3
 8005228:	800d6440 	call	800d644 <__fixdfsi>
 800522c:	b009883a 	mov	r4,r22
 8005230:	a80b883a 	mov	r5,r21
 8005234:	000d883a 	mov	r6,zero
 8005238:	000f883a 	mov	r7,zero
 800523c:	d8800515 	stw	r2,20(sp)
 8005240:	800c4280 	call	800c428 <__ledf2>
 8005244:	10023116 	blt	r2,zero,8005b0c <_dtoa_r+0xb28>
 8005248:	d8c00517 	ldw	r3,20(sp)
 800524c:	00800584 	movi	r2,22
 8005250:	10c21f36 	bltu	r2,r3,8005ad0 <_dtoa_r+0xaec>
 8005254:	180490fa 	slli	r2,r3,3
 8005258:	00c20074 	movhi	r3,2049
 800525c:	18c43704 	addi	r3,r3,4316
 8005260:	1885883a 	add	r2,r3,r2
 8005264:	11000017 	ldw	r4,0(r2)
 8005268:	11400117 	ldw	r5,4(r2)
 800526c:	900d883a 	mov	r6,r18
 8005270:	980f883a 	mov	r7,r19
 8005274:	800c3480 	call	800c348 <__gedf2>
 8005278:	0082a70e 	bge	zero,r2,8005d18 <_dtoa_r+0xd34>
 800527c:	d9000517 	ldw	r4,20(sp)
 8005280:	d8000c15 	stw	zero,48(sp)
 8005284:	213fffc4 	addi	r4,r4,-1
 8005288:	d9000515 	stw	r4,20(sp)
 800528c:	a463c83a 	sub	r17,r20,r17
 8005290:	8dbfffc4 	addi	r22,r17,-1
 8005294:	b0021916 	blt	r22,zero,8005afc <_dtoa_r+0xb18>
 8005298:	d8000815 	stw	zero,32(sp)
 800529c:	d8800517 	ldw	r2,20(sp)
 80052a0:	10020e16 	blt	r2,zero,8005adc <_dtoa_r+0xaf8>
 80052a4:	b0ad883a 	add	r22,r22,r2
 80052a8:	d8800a15 	stw	r2,40(sp)
 80052ac:	d8000915 	stw	zero,36(sp)
 80052b0:	d8c00317 	ldw	r3,12(sp)
 80052b4:	00800244 	movi	r2,9
 80052b8:	10c11a36 	bltu	r2,r3,8005724 <_dtoa_r+0x740>
 80052bc:	00800144 	movi	r2,5
 80052c0:	10c4fc0e 	bge	r2,r3,80066b4 <_dtoa_r+0x16d0>
 80052c4:	18ffff04 	addi	r3,r3,-4
 80052c8:	d8c00315 	stw	r3,12(sp)
 80052cc:	0029883a 	mov	r20,zero
 80052d0:	d9800317 	ldw	r6,12(sp)
 80052d4:	008000c4 	movi	r2,3
 80052d8:	3083bd26 	beq	r6,r2,80061d0 <_dtoa_r+0x11ec>
 80052dc:	1183670e 	bge	r2,r6,800607c <_dtoa_r+0x1098>
 80052e0:	d8c00317 	ldw	r3,12(sp)
 80052e4:	00800104 	movi	r2,4
 80052e8:	1882e726 	beq	r3,r2,8005e88 <_dtoa_r+0xea4>
 80052ec:	00800144 	movi	r2,5
 80052f0:	1884f21e 	bne	r3,r2,80066bc <_dtoa_r+0x16d8>
 80052f4:	00800044 	movi	r2,1
 80052f8:	d8800b15 	stw	r2,44(sp)
 80052fc:	d8c02217 	ldw	r3,136(sp)
 8005300:	d9000517 	ldw	r4,20(sp)
 8005304:	1907883a 	add	r3,r3,r4
 8005308:	19800044 	addi	r6,r3,1
 800530c:	d8c00d15 	stw	r3,52(sp)
 8005310:	d9800615 	stw	r6,24(sp)
 8005314:	0183c30e 	bge	zero,r6,8006224 <_dtoa_r+0x1240>
 8005318:	d9800617 	ldw	r6,24(sp)
 800531c:	3023883a 	mov	r17,r6
 8005320:	80001115 	stw	zero,68(r16)
 8005324:	008005c4 	movi	r2,23
 8005328:	1184f62e 	bgeu	r2,r6,8006704 <_dtoa_r+0x1720>
 800532c:	00c00044 	movi	r3,1
 8005330:	00800104 	movi	r2,4
 8005334:	1085883a 	add	r2,r2,r2
 8005338:	11000504 	addi	r4,r2,20
 800533c:	180b883a 	mov	r5,r3
 8005340:	18c00044 	addi	r3,r3,1
 8005344:	313ffb2e 	bgeu	r6,r4,8005334 <__alt_data_end+0xfc005334>
 8005348:	81401115 	stw	r5,68(r16)
 800534c:	8009883a 	mov	r4,r16
 8005350:	800701c0 	call	800701c <_Balloc>
 8005354:	d8800715 	stw	r2,28(sp)
 8005358:	80801015 	stw	r2,64(r16)
 800535c:	00800384 	movi	r2,14
 8005360:	1440fd36 	bltu	r2,r17,8005758 <_dtoa_r+0x774>
 8005364:	a000fc26 	beq	r20,zero,8005758 <_dtoa_r+0x774>
 8005368:	d8800517 	ldw	r2,20(sp)
 800536c:	0083b90e 	bge	zero,r2,8006254 <_dtoa_r+0x1270>
 8005370:	d8c00517 	ldw	r3,20(sp)
 8005374:	108003cc 	andi	r2,r2,15
 8005378:	100490fa 	slli	r2,r2,3
 800537c:	182fd13a 	srai	r23,r3,4
 8005380:	00c20074 	movhi	r3,2049
 8005384:	18c43704 	addi	r3,r3,4316
 8005388:	1885883a 	add	r2,r3,r2
 800538c:	b8c0040c 	andi	r3,r23,16
 8005390:	12c00017 	ldw	r11,0(r2)
 8005394:	12800117 	ldw	r10,4(r2)
 8005398:	18039726 	beq	r3,zero,80061f8 <_dtoa_r+0x1214>
 800539c:	00820074 	movhi	r2,2049
 80053a0:	10842d04 	addi	r2,r2,4276
 80053a4:	11800817 	ldw	r6,32(r2)
 80053a8:	11c00917 	ldw	r7,36(r2)
 80053ac:	9009883a 	mov	r4,r18
 80053b0:	980b883a 	mov	r5,r19
 80053b4:	da801615 	stw	r10,88(sp)
 80053b8:	dac01515 	stw	r11,84(sp)
 80053bc:	800b9440 	call	800b944 <__divdf3>
 80053c0:	da801617 	ldw	r10,88(sp)
 80053c4:	dac01517 	ldw	r11,84(sp)
 80053c8:	bdc003cc 	andi	r23,r23,15
 80053cc:	044000c4 	movi	r17,3
 80053d0:	d8800e15 	stw	r2,56(sp)
 80053d4:	182b883a 	mov	r21,r3
 80053d8:	b8001126 	beq	r23,zero,8005420 <_dtoa_r+0x43c>
 80053dc:	05020074 	movhi	r20,2049
 80053e0:	a5042d04 	addi	r20,r20,4276
 80053e4:	5805883a 	mov	r2,r11
 80053e8:	5007883a 	mov	r3,r10
 80053ec:	b980004c 	andi	r6,r23,1
 80053f0:	1009883a 	mov	r4,r2
 80053f4:	b82fd07a 	srai	r23,r23,1
 80053f8:	180b883a 	mov	r5,r3
 80053fc:	30000426 	beq	r6,zero,8005410 <_dtoa_r+0x42c>
 8005400:	a1800017 	ldw	r6,0(r20)
 8005404:	a1c00117 	ldw	r7,4(r20)
 8005408:	8c400044 	addi	r17,r17,1
 800540c:	800c5080 	call	800c508 <__muldf3>
 8005410:	a5000204 	addi	r20,r20,8
 8005414:	b83ff51e 	bne	r23,zero,80053ec <__alt_data_end+0xfc0053ec>
 8005418:	1017883a 	mov	r11,r2
 800541c:	1815883a 	mov	r10,r3
 8005420:	d9000e17 	ldw	r4,56(sp)
 8005424:	a80b883a 	mov	r5,r21
 8005428:	580d883a 	mov	r6,r11
 800542c:	500f883a 	mov	r7,r10
 8005430:	800b9440 	call	800b944 <__divdf3>
 8005434:	1029883a 	mov	r20,r2
 8005438:	182b883a 	mov	r21,r3
 800543c:	d9800c17 	ldw	r6,48(sp)
 8005440:	30000626 	beq	r6,zero,800545c <_dtoa_r+0x478>
 8005444:	a009883a 	mov	r4,r20
 8005448:	a80b883a 	mov	r5,r21
 800544c:	000d883a 	mov	r6,zero
 8005450:	01cffc34 	movhi	r7,16368
 8005454:	800c4280 	call	800c428 <__ledf2>
 8005458:	10043216 	blt	r2,zero,8006524 <_dtoa_r+0x1540>
 800545c:	8809883a 	mov	r4,r17
 8005460:	800d6cc0 	call	800d6cc <__floatsidf>
 8005464:	1009883a 	mov	r4,r2
 8005468:	180b883a 	mov	r5,r3
 800546c:	a00d883a 	mov	r6,r20
 8005470:	a80f883a 	mov	r7,r21
 8005474:	800c5080 	call	800c508 <__muldf3>
 8005478:	000d883a 	mov	r6,zero
 800547c:	1009883a 	mov	r4,r2
 8005480:	180b883a 	mov	r5,r3
 8005484:	01d00734 	movhi	r7,16412
 8005488:	800b0a80 	call	800b0a8 <__adddf3>
 800548c:	1023883a 	mov	r17,r2
 8005490:	d9800617 	ldw	r6,24(sp)
 8005494:	00bf3034 	movhi	r2,64704
 8005498:	1885883a 	add	r2,r3,r2
 800549c:	d8800e15 	stw	r2,56(sp)
 80054a0:	30032e26 	beq	r6,zero,800615c <_dtoa_r+0x1178>
 80054a4:	d8c00517 	ldw	r3,20(sp)
 80054a8:	da800617 	ldw	r10,24(sp)
 80054ac:	d8c01215 	stw	r3,72(sp)
 80054b0:	d9000b17 	ldw	r4,44(sp)
 80054b4:	2003b026 	beq	r4,zero,8006378 <_dtoa_r+0x1394>
 80054b8:	50bfffc4 	addi	r2,r10,-1
 80054bc:	100490fa 	slli	r2,r2,3
 80054c0:	00c20074 	movhi	r3,2049
 80054c4:	18c43704 	addi	r3,r3,4316
 80054c8:	1885883a 	add	r2,r3,r2
 80054cc:	11800017 	ldw	r6,0(r2)
 80054d0:	11c00117 	ldw	r7,4(r2)
 80054d4:	d8800717 	ldw	r2,28(sp)
 80054d8:	0009883a 	mov	r4,zero
 80054dc:	014ff834 	movhi	r5,16352
 80054e0:	da801615 	stw	r10,88(sp)
 80054e4:	15c00044 	addi	r23,r2,1
 80054e8:	800b9440 	call	800b944 <__divdf3>
 80054ec:	d9c00e17 	ldw	r7,56(sp)
 80054f0:	880d883a 	mov	r6,r17
 80054f4:	1009883a 	mov	r4,r2
 80054f8:	180b883a 	mov	r5,r3
 80054fc:	800cd740 	call	800cd74 <__subdf3>
 8005500:	a80b883a 	mov	r5,r21
 8005504:	a009883a 	mov	r4,r20
 8005508:	d8c01015 	stw	r3,64(sp)
 800550c:	d8800e15 	stw	r2,56(sp)
 8005510:	800d6440 	call	800d644 <__fixdfsi>
 8005514:	1009883a 	mov	r4,r2
 8005518:	d8801715 	stw	r2,92(sp)
 800551c:	800d6cc0 	call	800d6cc <__floatsidf>
 8005520:	a009883a 	mov	r4,r20
 8005524:	a80b883a 	mov	r5,r21
 8005528:	100d883a 	mov	r6,r2
 800552c:	180f883a 	mov	r7,r3
 8005530:	800cd740 	call	800cd74 <__subdf3>
 8005534:	da001717 	ldw	r8,92(sp)
 8005538:	1829883a 	mov	r20,r3
 800553c:	d8c00717 	ldw	r3,28(sp)
 8005540:	d9000e17 	ldw	r4,56(sp)
 8005544:	d9401017 	ldw	r5,64(sp)
 8005548:	42000c04 	addi	r8,r8,48
 800554c:	1023883a 	mov	r17,r2
 8005550:	1a000005 	stb	r8,0(r3)
 8005554:	880d883a 	mov	r6,r17
 8005558:	a00f883a 	mov	r7,r20
 800555c:	402b883a 	mov	r21,r8
 8005560:	800c3480 	call	800c348 <__gedf2>
 8005564:	00844516 	blt	zero,r2,800667c <_dtoa_r+0x1698>
 8005568:	0009883a 	mov	r4,zero
 800556c:	014ffc34 	movhi	r5,16368
 8005570:	880d883a 	mov	r6,r17
 8005574:	a00f883a 	mov	r7,r20
 8005578:	800cd740 	call	800cd74 <__subdf3>
 800557c:	d9000e17 	ldw	r4,56(sp)
 8005580:	d9401017 	ldw	r5,64(sp)
 8005584:	100d883a 	mov	r6,r2
 8005588:	180f883a 	mov	r7,r3
 800558c:	800c3480 	call	800c348 <__gedf2>
 8005590:	da801617 	ldw	r10,88(sp)
 8005594:	00843616 	blt	zero,r2,8006670 <_dtoa_r+0x168c>
 8005598:	00800044 	movi	r2,1
 800559c:	12806e0e 	bge	r2,r10,8005758 <_dtoa_r+0x774>
 80055a0:	d9000717 	ldw	r4,28(sp)
 80055a4:	dd801315 	stw	r22,76(sp)
 80055a8:	dc001115 	stw	r16,68(sp)
 80055ac:	2295883a 	add	r10,r4,r10
 80055b0:	dcc01415 	stw	r19,80(sp)
 80055b4:	502d883a 	mov	r22,r10
 80055b8:	dcc01017 	ldw	r19,64(sp)
 80055bc:	b821883a 	mov	r16,r23
 80055c0:	dc801015 	stw	r18,64(sp)
 80055c4:	dc800e17 	ldw	r18,56(sp)
 80055c8:	00000906 	br	80055f0 <_dtoa_r+0x60c>
 80055cc:	800cd740 	call	800cd74 <__subdf3>
 80055d0:	1009883a 	mov	r4,r2
 80055d4:	180b883a 	mov	r5,r3
 80055d8:	900d883a 	mov	r6,r18
 80055dc:	980f883a 	mov	r7,r19
 80055e0:	800c4280 	call	800c428 <__ledf2>
 80055e4:	10040e16 	blt	r2,zero,8006620 <_dtoa_r+0x163c>
 80055e8:	b821883a 	mov	r16,r23
 80055ec:	bd841026 	beq	r23,r22,8006630 <_dtoa_r+0x164c>
 80055f0:	9009883a 	mov	r4,r18
 80055f4:	980b883a 	mov	r5,r19
 80055f8:	000d883a 	mov	r6,zero
 80055fc:	01d00934 	movhi	r7,16420
 8005600:	800c5080 	call	800c508 <__muldf3>
 8005604:	000d883a 	mov	r6,zero
 8005608:	01d00934 	movhi	r7,16420
 800560c:	8809883a 	mov	r4,r17
 8005610:	a00b883a 	mov	r5,r20
 8005614:	1025883a 	mov	r18,r2
 8005618:	1827883a 	mov	r19,r3
 800561c:	800c5080 	call	800c508 <__muldf3>
 8005620:	180b883a 	mov	r5,r3
 8005624:	1009883a 	mov	r4,r2
 8005628:	1823883a 	mov	r17,r3
 800562c:	1029883a 	mov	r20,r2
 8005630:	800d6440 	call	800d644 <__fixdfsi>
 8005634:	1009883a 	mov	r4,r2
 8005638:	102b883a 	mov	r21,r2
 800563c:	800d6cc0 	call	800d6cc <__floatsidf>
 8005640:	a009883a 	mov	r4,r20
 8005644:	880b883a 	mov	r5,r17
 8005648:	100d883a 	mov	r6,r2
 800564c:	180f883a 	mov	r7,r3
 8005650:	800cd740 	call	800cd74 <__subdf3>
 8005654:	ad400c04 	addi	r21,r21,48
 8005658:	1009883a 	mov	r4,r2
 800565c:	180b883a 	mov	r5,r3
 8005660:	900d883a 	mov	r6,r18
 8005664:	980f883a 	mov	r7,r19
 8005668:	85400005 	stb	r21,0(r16)
 800566c:	1023883a 	mov	r17,r2
 8005670:	1829883a 	mov	r20,r3
 8005674:	800c4280 	call	800c428 <__ledf2>
 8005678:	bdc00044 	addi	r23,r23,1
 800567c:	0009883a 	mov	r4,zero
 8005680:	014ffc34 	movhi	r5,16368
 8005684:	880d883a 	mov	r6,r17
 8005688:	a00f883a 	mov	r7,r20
 800568c:	103fcf0e 	bge	r2,zero,80055cc <__alt_data_end+0xfc0055cc>
 8005690:	d9801217 	ldw	r6,72(sp)
 8005694:	dc001117 	ldw	r16,68(sp)
 8005698:	d9800515 	stw	r6,20(sp)
 800569c:	8009883a 	mov	r4,r16
 80056a0:	e00b883a 	mov	r5,fp
 80056a4:	80070c40 	call	80070c4 <_Bfree>
 80056a8:	d8c00517 	ldw	r3,20(sp)
 80056ac:	d9002317 	ldw	r4,140(sp)
 80056b0:	d9802517 	ldw	r6,148(sp)
 80056b4:	b8000005 	stb	zero,0(r23)
 80056b8:	18800044 	addi	r2,r3,1
 80056bc:	20800015 	stw	r2,0(r4)
 80056c0:	30027226 	beq	r6,zero,800608c <_dtoa_r+0x10a8>
 80056c4:	35c00015 	stw	r23,0(r6)
 80056c8:	d8800717 	ldw	r2,28(sp)
 80056cc:	003e7406 	br	80050a0 <__alt_data_end+0xfc0050a0>
 80056d0:	00800434 	movhi	r2,16
 80056d4:	10bfffc4 	addi	r2,r2,-1
 80056d8:	a8aa703a 	and	r21,r21,r2
 80056dc:	a83e801e 	bne	r21,zero,80050e0 <__alt_data_end+0xfc0050e0>
 80056e0:	00820074 	movhi	r2,2049
 80056e4:	10841904 	addi	r2,r2,4196
 80056e8:	003e7f06 	br	80050e8 <__alt_data_end+0xfc0050e8>
 80056ec:	10c00204 	addi	r3,r2,8
 80056f0:	003e8206 	br	80050fc <__alt_data_end+0xfc0050fc>
 80056f4:	01400434 	movhi	r5,16
 80056f8:	297fffc4 	addi	r5,r5,-1
 80056fc:	994a703a 	and	r5,r19,r5
 8005700:	9009883a 	mov	r4,r18
 8005704:	8c7f0044 	addi	r17,r17,-1023
 8005708:	294ffc34 	orhi	r5,r5,16368
 800570c:	dd000217 	ldw	r20,8(sp)
 8005710:	d8000f15 	stw	zero,60(sp)
 8005714:	003e9f06 	br	8005194 <__alt_data_end+0xfc005194>
 8005718:	00820074 	movhi	r2,2049
 800571c:	10841004 	addi	r2,r2,4160
 8005720:	003e5f06 	br	80050a0 <__alt_data_end+0xfc0050a0>
 8005724:	80001115 	stw	zero,68(r16)
 8005728:	8009883a 	mov	r4,r16
 800572c:	000b883a 	mov	r5,zero
 8005730:	800701c0 	call	800701c <_Balloc>
 8005734:	01bfffc4 	movi	r6,-1
 8005738:	d8800715 	stw	r2,28(sp)
 800573c:	80801015 	stw	r2,64(r16)
 8005740:	00800044 	movi	r2,1
 8005744:	d9800615 	stw	r6,24(sp)
 8005748:	d8800b15 	stw	r2,44(sp)
 800574c:	d8002215 	stw	zero,136(sp)
 8005750:	d9800d15 	stw	r6,52(sp)
 8005754:	d8000315 	stw	zero,12(sp)
 8005758:	d8800117 	ldw	r2,4(sp)
 800575c:	10008e16 	blt	r2,zero,8005998 <_dtoa_r+0x9b4>
 8005760:	d9000517 	ldw	r4,20(sp)
 8005764:	00c00384 	movi	r3,14
 8005768:	19008b16 	blt	r3,r4,8005998 <_dtoa_r+0x9b4>
 800576c:	200490fa 	slli	r2,r4,3
 8005770:	00c20074 	movhi	r3,2049
 8005774:	d9802217 	ldw	r6,136(sp)
 8005778:	18c43704 	addi	r3,r3,4316
 800577c:	1885883a 	add	r2,r3,r2
 8005780:	14400017 	ldw	r17,0(r2)
 8005784:	15000117 	ldw	r20,4(r2)
 8005788:	3001c716 	blt	r6,zero,8005ea8 <_dtoa_r+0xec4>
 800578c:	880d883a 	mov	r6,r17
 8005790:	a00f883a 	mov	r7,r20
 8005794:	9009883a 	mov	r4,r18
 8005798:	980b883a 	mov	r5,r19
 800579c:	800b9440 	call	800b944 <__divdf3>
 80057a0:	180b883a 	mov	r5,r3
 80057a4:	1009883a 	mov	r4,r2
 80057a8:	800d6440 	call	800d644 <__fixdfsi>
 80057ac:	1009883a 	mov	r4,r2
 80057b0:	102d883a 	mov	r22,r2
 80057b4:	800d6cc0 	call	800d6cc <__floatsidf>
 80057b8:	1009883a 	mov	r4,r2
 80057bc:	180b883a 	mov	r5,r3
 80057c0:	880d883a 	mov	r6,r17
 80057c4:	a00f883a 	mov	r7,r20
 80057c8:	800c5080 	call	800c508 <__muldf3>
 80057cc:	9009883a 	mov	r4,r18
 80057d0:	980b883a 	mov	r5,r19
 80057d4:	100d883a 	mov	r6,r2
 80057d8:	180f883a 	mov	r7,r3
 80057dc:	800cd740 	call	800cd74 <__subdf3>
 80057e0:	d9000717 	ldw	r4,28(sp)
 80057e4:	d9800617 	ldw	r6,24(sp)
 80057e8:	180b883a 	mov	r5,r3
 80057ec:	b0c00c04 	addi	r3,r22,48
 80057f0:	20c00005 	stb	r3,0(r4)
 80057f4:	25c00044 	addi	r23,r4,1
 80057f8:	01000044 	movi	r4,1
 80057fc:	1011883a 	mov	r8,r2
 8005800:	2807883a 	mov	r3,r5
 8005804:	31003d26 	beq	r6,r4,80058fc <_dtoa_r+0x918>
 8005808:	000d883a 	mov	r6,zero
 800580c:	01d00934 	movhi	r7,16420
 8005810:	1009883a 	mov	r4,r2
 8005814:	800c5080 	call	800c508 <__muldf3>
 8005818:	1009883a 	mov	r4,r2
 800581c:	180b883a 	mov	r5,r3
 8005820:	000d883a 	mov	r6,zero
 8005824:	000f883a 	mov	r7,zero
 8005828:	1027883a 	mov	r19,r2
 800582c:	182b883a 	mov	r21,r3
 8005830:	800c2c40 	call	800c2c4 <__eqdf2>
 8005834:	103f9926 	beq	r2,zero,800569c <__alt_data_end+0xfc00569c>
 8005838:	d8c00617 	ldw	r3,24(sp)
 800583c:	d9000717 	ldw	r4,28(sp)
 8005840:	b825883a 	mov	r18,r23
 8005844:	18bfffc4 	addi	r2,r3,-1
 8005848:	20ad883a 	add	r22,r4,r2
 800584c:	dc000315 	stw	r16,12(sp)
 8005850:	00000a06 	br	800587c <_dtoa_r+0x898>
 8005854:	800c5080 	call	800c508 <__muldf3>
 8005858:	1009883a 	mov	r4,r2
 800585c:	180b883a 	mov	r5,r3
 8005860:	000d883a 	mov	r6,zero
 8005864:	000f883a 	mov	r7,zero
 8005868:	1027883a 	mov	r19,r2
 800586c:	182b883a 	mov	r21,r3
 8005870:	b825883a 	mov	r18,r23
 8005874:	800c2c40 	call	800c2c4 <__eqdf2>
 8005878:	10022626 	beq	r2,zero,8006114 <_dtoa_r+0x1130>
 800587c:	880d883a 	mov	r6,r17
 8005880:	a00f883a 	mov	r7,r20
 8005884:	9809883a 	mov	r4,r19
 8005888:	a80b883a 	mov	r5,r21
 800588c:	800b9440 	call	800b944 <__divdf3>
 8005890:	180b883a 	mov	r5,r3
 8005894:	1009883a 	mov	r4,r2
 8005898:	800d6440 	call	800d644 <__fixdfsi>
 800589c:	1009883a 	mov	r4,r2
 80058a0:	1021883a 	mov	r16,r2
 80058a4:	800d6cc0 	call	800d6cc <__floatsidf>
 80058a8:	1009883a 	mov	r4,r2
 80058ac:	180b883a 	mov	r5,r3
 80058b0:	880d883a 	mov	r6,r17
 80058b4:	a00f883a 	mov	r7,r20
 80058b8:	800c5080 	call	800c508 <__muldf3>
 80058bc:	9809883a 	mov	r4,r19
 80058c0:	a80b883a 	mov	r5,r21
 80058c4:	100d883a 	mov	r6,r2
 80058c8:	180f883a 	mov	r7,r3
 80058cc:	800cd740 	call	800cd74 <__subdf3>
 80058d0:	82000c04 	addi	r8,r16,48
 80058d4:	92000005 	stb	r8,0(r18)
 80058d8:	1009883a 	mov	r4,r2
 80058dc:	180b883a 	mov	r5,r3
 80058e0:	000d883a 	mov	r6,zero
 80058e4:	01d00934 	movhi	r7,16420
 80058e8:	1011883a 	mov	r8,r2
 80058ec:	bdc00044 	addi	r23,r23,1
 80058f0:	95bfd81e 	bne	r18,r22,8005854 <__alt_data_end+0xfc005854>
 80058f4:	802d883a 	mov	r22,r16
 80058f8:	dc000317 	ldw	r16,12(sp)
 80058fc:	4009883a 	mov	r4,r8
 8005900:	180b883a 	mov	r5,r3
 8005904:	400d883a 	mov	r6,r8
 8005908:	180f883a 	mov	r7,r3
 800590c:	800b0a80 	call	800b0a8 <__adddf3>
 8005910:	8809883a 	mov	r4,r17
 8005914:	a00b883a 	mov	r5,r20
 8005918:	100d883a 	mov	r6,r2
 800591c:	180f883a 	mov	r7,r3
 8005920:	1027883a 	mov	r19,r2
 8005924:	1825883a 	mov	r18,r3
 8005928:	800c4280 	call	800c428 <__ledf2>
 800592c:	10000816 	blt	r2,zero,8005950 <_dtoa_r+0x96c>
 8005930:	8809883a 	mov	r4,r17
 8005934:	a00b883a 	mov	r5,r20
 8005938:	980d883a 	mov	r6,r19
 800593c:	900f883a 	mov	r7,r18
 8005940:	800c2c40 	call	800c2c4 <__eqdf2>
 8005944:	103f551e 	bne	r2,zero,800569c <__alt_data_end+0xfc00569c>
 8005948:	b580004c 	andi	r22,r22,1
 800594c:	b03f5326 	beq	r22,zero,800569c <__alt_data_end+0xfc00569c>
 8005950:	bd7fffc3 	ldbu	r21,-1(r23)
 8005954:	b8bfffc4 	addi	r2,r23,-1
 8005958:	1007883a 	mov	r3,r2
 800595c:	01400e44 	movi	r5,57
 8005960:	d9800717 	ldw	r6,28(sp)
 8005964:	00000506 	br	800597c <_dtoa_r+0x998>
 8005968:	18ffffc4 	addi	r3,r3,-1
 800596c:	30825e26 	beq	r6,r2,80062e8 <_dtoa_r+0x1304>
 8005970:	1d400003 	ldbu	r21,0(r3)
 8005974:	102f883a 	mov	r23,r2
 8005978:	10bfffc4 	addi	r2,r2,-1
 800597c:	a9003fcc 	andi	r4,r21,255
 8005980:	2100201c 	xori	r4,r4,128
 8005984:	213fe004 	addi	r4,r4,-128
 8005988:	217ff726 	beq	r4,r5,8005968 <__alt_data_end+0xfc005968>
 800598c:	aa000044 	addi	r8,r21,1
 8005990:	12000005 	stb	r8,0(r2)
 8005994:	003f4106 	br	800569c <__alt_data_end+0xfc00569c>
 8005998:	d8c00b17 	ldw	r3,44(sp)
 800599c:	18006726 	beq	r3,zero,8005b3c <_dtoa_r+0xb58>
 80059a0:	d9000317 	ldw	r4,12(sp)
 80059a4:	00c00044 	movi	r3,1
 80059a8:	19016a0e 	bge	r3,r4,8005f54 <_dtoa_r+0xf70>
 80059ac:	d8800617 	ldw	r2,24(sp)
 80059b0:	d8c00917 	ldw	r3,36(sp)
 80059b4:	157fffc4 	addi	r21,r2,-1
 80059b8:	1d420716 	blt	r3,r21,80061d8 <_dtoa_r+0x11f4>
 80059bc:	1d6bc83a 	sub	r21,r3,r21
 80059c0:	d8800617 	ldw	r2,24(sp)
 80059c4:	1002c716 	blt	r2,zero,80064e4 <_dtoa_r+0x1500>
 80059c8:	dd000817 	ldw	r20,32(sp)
 80059cc:	d8800617 	ldw	r2,24(sp)
 80059d0:	d9800817 	ldw	r6,32(sp)
 80059d4:	8009883a 	mov	r4,r16
 80059d8:	01400044 	movi	r5,1
 80059dc:	308d883a 	add	r6,r6,r2
 80059e0:	d9800815 	stw	r6,32(sp)
 80059e4:	b0ad883a 	add	r22,r22,r2
 80059e8:	80074440 	call	8007444 <__i2b>
 80059ec:	1023883a 	mov	r17,r2
 80059f0:	a0000826 	beq	r20,zero,8005a14 <_dtoa_r+0xa30>
 80059f4:	0580070e 	bge	zero,r22,8005a14 <_dtoa_r+0xa30>
 80059f8:	b005883a 	mov	r2,r22
 80059fc:	a5812016 	blt	r20,r22,8005e80 <_dtoa_r+0xe9c>
 8005a00:	d8c00817 	ldw	r3,32(sp)
 8005a04:	a0a9c83a 	sub	r20,r20,r2
 8005a08:	b0adc83a 	sub	r22,r22,r2
 8005a0c:	1887c83a 	sub	r3,r3,r2
 8005a10:	d8c00815 	stw	r3,32(sp)
 8005a14:	d9000917 	ldw	r4,36(sp)
 8005a18:	0100140e 	bge	zero,r4,8005a6c <_dtoa_r+0xa88>
 8005a1c:	d9800b17 	ldw	r6,44(sp)
 8005a20:	3001e526 	beq	r6,zero,80061b8 <_dtoa_r+0x11d4>
 8005a24:	05400e0e 	bge	zero,r21,8005a60 <_dtoa_r+0xa7c>
 8005a28:	880b883a 	mov	r5,r17
 8005a2c:	8009883a 	mov	r4,r16
 8005a30:	a80d883a 	mov	r6,r21
 8005a34:	80077100 	call	8007710 <__pow5mult>
 8005a38:	e00d883a 	mov	r6,fp
 8005a3c:	8009883a 	mov	r4,r16
 8005a40:	100b883a 	mov	r5,r2
 8005a44:	1023883a 	mov	r17,r2
 8005a48:	80074800 	call	8007480 <__multiply>
 8005a4c:	102f883a 	mov	r23,r2
 8005a50:	e00b883a 	mov	r5,fp
 8005a54:	8009883a 	mov	r4,r16
 8005a58:	80070c40 	call	80070c4 <_Bfree>
 8005a5c:	b839883a 	mov	fp,r23
 8005a60:	d8800917 	ldw	r2,36(sp)
 8005a64:	154dc83a 	sub	r6,r2,r21
 8005a68:	3001281e 	bne	r6,zero,8005f0c <_dtoa_r+0xf28>
 8005a6c:	05c00044 	movi	r23,1
 8005a70:	8009883a 	mov	r4,r16
 8005a74:	b80b883a 	mov	r5,r23
 8005a78:	80074440 	call	8007444 <__i2b>
 8005a7c:	d8c00a17 	ldw	r3,40(sp)
 8005a80:	102b883a 	mov	r21,r2
 8005a84:	00c0310e 	bge	zero,r3,8005b4c <_dtoa_r+0xb68>
 8005a88:	8009883a 	mov	r4,r16
 8005a8c:	100b883a 	mov	r5,r2
 8005a90:	180d883a 	mov	r6,r3
 8005a94:	80077100 	call	8007710 <__pow5mult>
 8005a98:	d9000317 	ldw	r4,12(sp)
 8005a9c:	102b883a 	mov	r21,r2
 8005aa0:	b9011f0e 	bge	r23,r4,8005f20 <_dtoa_r+0xf3c>
 8005aa4:	0027883a 	mov	r19,zero
 8005aa8:	a8800417 	ldw	r2,16(r21)
 8005aac:	10800104 	addi	r2,r2,4
 8005ab0:	1085883a 	add	r2,r2,r2
 8005ab4:	1085883a 	add	r2,r2,r2
 8005ab8:	a885883a 	add	r2,r21,r2
 8005abc:	11000017 	ldw	r4,0(r2)
 8005ac0:	800732c0 	call	800732c <__hi0bits>
 8005ac4:	00c00804 	movi	r3,32
 8005ac8:	1885c83a 	sub	r2,r3,r2
 8005acc:	00002506 	br	8005b64 <_dtoa_r+0xb80>
 8005ad0:	01800044 	movi	r6,1
 8005ad4:	d9800c15 	stw	r6,48(sp)
 8005ad8:	003dec06 	br	800528c <__alt_data_end+0xfc00528c>
 8005adc:	d8c00817 	ldw	r3,32(sp)
 8005ae0:	d9000517 	ldw	r4,20(sp)
 8005ae4:	d8000a15 	stw	zero,40(sp)
 8005ae8:	1907c83a 	sub	r3,r3,r4
 8005aec:	010dc83a 	sub	r6,zero,r4
 8005af0:	d8c00815 	stw	r3,32(sp)
 8005af4:	d9800915 	stw	r6,36(sp)
 8005af8:	003ded06 	br	80052b0 <__alt_data_end+0xfc0052b0>
 8005afc:	05adc83a 	sub	r22,zero,r22
 8005b00:	dd800815 	stw	r22,32(sp)
 8005b04:	002d883a 	mov	r22,zero
 8005b08:	003de406 	br	800529c <__alt_data_end+0xfc00529c>
 8005b0c:	d9000517 	ldw	r4,20(sp)
 8005b10:	800d6cc0 	call	800d6cc <__floatsidf>
 8005b14:	1009883a 	mov	r4,r2
 8005b18:	180b883a 	mov	r5,r3
 8005b1c:	b00d883a 	mov	r6,r22
 8005b20:	a80f883a 	mov	r7,r21
 8005b24:	800c2c40 	call	800c2c4 <__eqdf2>
 8005b28:	103dc726 	beq	r2,zero,8005248 <__alt_data_end+0xfc005248>
 8005b2c:	d8800517 	ldw	r2,20(sp)
 8005b30:	10bfffc4 	addi	r2,r2,-1
 8005b34:	d8800515 	stw	r2,20(sp)
 8005b38:	003dc306 	br	8005248 <__alt_data_end+0xfc005248>
 8005b3c:	dd400917 	ldw	r21,36(sp)
 8005b40:	dd000817 	ldw	r20,32(sp)
 8005b44:	0023883a 	mov	r17,zero
 8005b48:	003fa906 	br	80059f0 <__alt_data_end+0xfc0059f0>
 8005b4c:	d9800317 	ldw	r6,12(sp)
 8005b50:	b981670e 	bge	r23,r6,80060f0 <_dtoa_r+0x110c>
 8005b54:	0027883a 	mov	r19,zero
 8005b58:	d8c00a17 	ldw	r3,40(sp)
 8005b5c:	183fd21e 	bne	r3,zero,8005aa8 <__alt_data_end+0xfc005aa8>
 8005b60:	00800044 	movi	r2,1
 8005b64:	1585883a 	add	r2,r2,r22
 8005b68:	108007cc 	andi	r2,r2,31
 8005b6c:	10005f26 	beq	r2,zero,8005cec <_dtoa_r+0xd08>
 8005b70:	00c00804 	movi	r3,32
 8005b74:	1887c83a 	sub	r3,r3,r2
 8005b78:	01000104 	movi	r4,4
 8005b7c:	20c2dd0e 	bge	r4,r3,80066f4 <_dtoa_r+0x1710>
 8005b80:	d9000817 	ldw	r4,32(sp)
 8005b84:	00c00704 	movi	r3,28
 8005b88:	1885c83a 	sub	r2,r3,r2
 8005b8c:	2089883a 	add	r4,r4,r2
 8005b90:	d9000815 	stw	r4,32(sp)
 8005b94:	a0a9883a 	add	r20,r20,r2
 8005b98:	b0ad883a 	add	r22,r22,r2
 8005b9c:	d8800817 	ldw	r2,32(sp)
 8005ba0:	0080050e 	bge	zero,r2,8005bb8 <_dtoa_r+0xbd4>
 8005ba4:	e00b883a 	mov	r5,fp
 8005ba8:	8009883a 	mov	r4,r16
 8005bac:	100d883a 	mov	r6,r2
 8005bb0:	80078500 	call	8007850 <__lshift>
 8005bb4:	1039883a 	mov	fp,r2
 8005bb8:	0580050e 	bge	zero,r22,8005bd0 <_dtoa_r+0xbec>
 8005bbc:	a80b883a 	mov	r5,r21
 8005bc0:	8009883a 	mov	r4,r16
 8005bc4:	b00d883a 	mov	r6,r22
 8005bc8:	80078500 	call	8007850 <__lshift>
 8005bcc:	102b883a 	mov	r21,r2
 8005bd0:	d8c00c17 	ldw	r3,48(sp)
 8005bd4:	1801161e 	bne	r3,zero,8006030 <_dtoa_r+0x104c>
 8005bd8:	d8c00617 	ldw	r3,24(sp)
 8005bdc:	00c12d0e 	bge	zero,r3,8006094 <_dtoa_r+0x10b0>
 8005be0:	d8c00b17 	ldw	r3,44(sp)
 8005be4:	1800571e 	bne	r3,zero,8005d44 <_dtoa_r+0xd60>
 8005be8:	dc800717 	ldw	r18,28(sp)
 8005bec:	dcc00617 	ldw	r19,24(sp)
 8005bf0:	9029883a 	mov	r20,r18
 8005bf4:	00000206 	br	8005c00 <_dtoa_r+0xc1c>
 8005bf8:	80070ec0 	call	80070ec <__multadd>
 8005bfc:	1039883a 	mov	fp,r2
 8005c00:	e009883a 	mov	r4,fp
 8005c04:	a80b883a 	mov	r5,r21
 8005c08:	8004dbc0 	call	8004dbc <quorem>
 8005c0c:	10800c04 	addi	r2,r2,48
 8005c10:	90800005 	stb	r2,0(r18)
 8005c14:	94800044 	addi	r18,r18,1
 8005c18:	9507c83a 	sub	r3,r18,r20
 8005c1c:	8009883a 	mov	r4,r16
 8005c20:	e00b883a 	mov	r5,fp
 8005c24:	01800284 	movi	r6,10
 8005c28:	000f883a 	mov	r7,zero
 8005c2c:	1cfff216 	blt	r3,r19,8005bf8 <__alt_data_end+0xfc005bf8>
 8005c30:	1011883a 	mov	r8,r2
 8005c34:	d8800617 	ldw	r2,24(sp)
 8005c38:	00822e0e 	bge	zero,r2,80064f4 <_dtoa_r+0x1510>
 8005c3c:	d9000717 	ldw	r4,28(sp)
 8005c40:	0025883a 	mov	r18,zero
 8005c44:	20af883a 	add	r23,r4,r2
 8005c48:	e00b883a 	mov	r5,fp
 8005c4c:	01800044 	movi	r6,1
 8005c50:	8009883a 	mov	r4,r16
 8005c54:	da001715 	stw	r8,92(sp)
 8005c58:	80078500 	call	8007850 <__lshift>
 8005c5c:	1009883a 	mov	r4,r2
 8005c60:	a80b883a 	mov	r5,r21
 8005c64:	1039883a 	mov	fp,r2
 8005c68:	80079980 	call	8007998 <__mcmp>
 8005c6c:	da001717 	ldw	r8,92(sp)
 8005c70:	00816e0e 	bge	zero,r2,800622c <_dtoa_r+0x1248>
 8005c74:	b93fffc3 	ldbu	r4,-1(r23)
 8005c78:	b8bfffc4 	addi	r2,r23,-1
 8005c7c:	1007883a 	mov	r3,r2
 8005c80:	01800e44 	movi	r6,57
 8005c84:	d9c00717 	ldw	r7,28(sp)
 8005c88:	00000506 	br	8005ca0 <_dtoa_r+0xcbc>
 8005c8c:	18ffffc4 	addi	r3,r3,-1
 8005c90:	38811926 	beq	r7,r2,80060f8 <_dtoa_r+0x1114>
 8005c94:	19000003 	ldbu	r4,0(r3)
 8005c98:	102f883a 	mov	r23,r2
 8005c9c:	10bfffc4 	addi	r2,r2,-1
 8005ca0:	21403fcc 	andi	r5,r4,255
 8005ca4:	2940201c 	xori	r5,r5,128
 8005ca8:	297fe004 	addi	r5,r5,-128
 8005cac:	29bff726 	beq	r5,r6,8005c8c <__alt_data_end+0xfc005c8c>
 8005cb0:	21000044 	addi	r4,r4,1
 8005cb4:	11000005 	stb	r4,0(r2)
 8005cb8:	8009883a 	mov	r4,r16
 8005cbc:	a80b883a 	mov	r5,r21
 8005cc0:	80070c40 	call	80070c4 <_Bfree>
 8005cc4:	883e7526 	beq	r17,zero,800569c <__alt_data_end+0xfc00569c>
 8005cc8:	90000426 	beq	r18,zero,8005cdc <_dtoa_r+0xcf8>
 8005ccc:	94400326 	beq	r18,r17,8005cdc <_dtoa_r+0xcf8>
 8005cd0:	8009883a 	mov	r4,r16
 8005cd4:	900b883a 	mov	r5,r18
 8005cd8:	80070c40 	call	80070c4 <_Bfree>
 8005cdc:	8009883a 	mov	r4,r16
 8005ce0:	880b883a 	mov	r5,r17
 8005ce4:	80070c40 	call	80070c4 <_Bfree>
 8005ce8:	003e6c06 	br	800569c <__alt_data_end+0xfc00569c>
 8005cec:	00800704 	movi	r2,28
 8005cf0:	d9800817 	ldw	r6,32(sp)
 8005cf4:	a0a9883a 	add	r20,r20,r2
 8005cf8:	b0ad883a 	add	r22,r22,r2
 8005cfc:	308d883a 	add	r6,r6,r2
 8005d00:	d9800815 	stw	r6,32(sp)
 8005d04:	003fa506 	br	8005b9c <__alt_data_end+0xfc005b9c>
 8005d08:	013efb84 	movi	r4,-1042
 8005d0c:	246bc83a 	sub	r21,r4,r17
 8005d10:	9548983a 	sll	r4,r18,r21
 8005d14:	003d1806 	br	8005178 <__alt_data_end+0xfc005178>
 8005d18:	d8000c15 	stw	zero,48(sp)
 8005d1c:	003d5b06 	br	800528c <__alt_data_end+0xfc00528c>
 8005d20:	880b883a 	mov	r5,r17
 8005d24:	8009883a 	mov	r4,r16
 8005d28:	01800284 	movi	r6,10
 8005d2c:	000f883a 	mov	r7,zero
 8005d30:	80070ec0 	call	80070ec <__multadd>
 8005d34:	1023883a 	mov	r17,r2
 8005d38:	d8800d17 	ldw	r2,52(sp)
 8005d3c:	0082550e 	bge	zero,r2,8006694 <_dtoa_r+0x16b0>
 8005d40:	d8800615 	stw	r2,24(sp)
 8005d44:	0500050e 	bge	zero,r20,8005d5c <_dtoa_r+0xd78>
 8005d48:	880b883a 	mov	r5,r17
 8005d4c:	8009883a 	mov	r4,r16
 8005d50:	a00d883a 	mov	r6,r20
 8005d54:	80078500 	call	8007850 <__lshift>
 8005d58:	1023883a 	mov	r17,r2
 8005d5c:	98016a1e 	bne	r19,zero,8006308 <_dtoa_r+0x1324>
 8005d60:	8829883a 	mov	r20,r17
 8005d64:	d9000617 	ldw	r4,24(sp)
 8005d68:	dcc00717 	ldw	r19,28(sp)
 8005d6c:	9480004c 	andi	r18,r18,1
 8005d70:	20bfffc4 	addi	r2,r4,-1
 8005d74:	9885883a 	add	r2,r19,r2
 8005d78:	d8800415 	stw	r2,16(sp)
 8005d7c:	dc800615 	stw	r18,24(sp)
 8005d80:	e009883a 	mov	r4,fp
 8005d84:	a80b883a 	mov	r5,r21
 8005d88:	8004dbc0 	call	8004dbc <quorem>
 8005d8c:	e009883a 	mov	r4,fp
 8005d90:	880b883a 	mov	r5,r17
 8005d94:	102f883a 	mov	r23,r2
 8005d98:	80079980 	call	8007998 <__mcmp>
 8005d9c:	8009883a 	mov	r4,r16
 8005da0:	a80b883a 	mov	r5,r21
 8005da4:	a00d883a 	mov	r6,r20
 8005da8:	102d883a 	mov	r22,r2
 8005dac:	80079f80 	call	80079f8 <__mdiff>
 8005db0:	1007883a 	mov	r3,r2
 8005db4:	10800317 	ldw	r2,12(r2)
 8005db8:	bc800c04 	addi	r18,r23,48
 8005dbc:	1000971e 	bne	r2,zero,800601c <_dtoa_r+0x1038>
 8005dc0:	180b883a 	mov	r5,r3
 8005dc4:	e009883a 	mov	r4,fp
 8005dc8:	d8c01515 	stw	r3,84(sp)
 8005dcc:	80079980 	call	8007998 <__mcmp>
 8005dd0:	d8c01517 	ldw	r3,84(sp)
 8005dd4:	8009883a 	mov	r4,r16
 8005dd8:	d8801515 	stw	r2,84(sp)
 8005ddc:	180b883a 	mov	r5,r3
 8005de0:	80070c40 	call	80070c4 <_Bfree>
 8005de4:	d8801517 	ldw	r2,84(sp)
 8005de8:	1000041e 	bne	r2,zero,8005dfc <_dtoa_r+0xe18>
 8005dec:	d9800317 	ldw	r6,12(sp)
 8005df0:	3000021e 	bne	r6,zero,8005dfc <_dtoa_r+0xe18>
 8005df4:	d8c00617 	ldw	r3,24(sp)
 8005df8:	18007626 	beq	r3,zero,8005fd4 <_dtoa_r+0xff0>
 8005dfc:	b0005b16 	blt	r22,zero,8005f6c <_dtoa_r+0xf88>
 8005e00:	b000041e 	bne	r22,zero,8005e14 <_dtoa_r+0xe30>
 8005e04:	d9000317 	ldw	r4,12(sp)
 8005e08:	2000021e 	bne	r4,zero,8005e14 <_dtoa_r+0xe30>
 8005e0c:	d8c00617 	ldw	r3,24(sp)
 8005e10:	18005626 	beq	r3,zero,8005f6c <_dtoa_r+0xf88>
 8005e14:	00814d16 	blt	zero,r2,800634c <_dtoa_r+0x1368>
 8005e18:	d8c00417 	ldw	r3,16(sp)
 8005e1c:	9d800044 	addi	r22,r19,1
 8005e20:	9c800005 	stb	r18,0(r19)
 8005e24:	b02f883a 	mov	r23,r22
 8005e28:	98c14c26 	beq	r19,r3,800635c <_dtoa_r+0x1378>
 8005e2c:	e00b883a 	mov	r5,fp
 8005e30:	8009883a 	mov	r4,r16
 8005e34:	01800284 	movi	r6,10
 8005e38:	000f883a 	mov	r7,zero
 8005e3c:	80070ec0 	call	80070ec <__multadd>
 8005e40:	1039883a 	mov	fp,r2
 8005e44:	8d006d26 	beq	r17,r20,8005ffc <_dtoa_r+0x1018>
 8005e48:	880b883a 	mov	r5,r17
 8005e4c:	01800284 	movi	r6,10
 8005e50:	000f883a 	mov	r7,zero
 8005e54:	8009883a 	mov	r4,r16
 8005e58:	80070ec0 	call	80070ec <__multadd>
 8005e5c:	a00b883a 	mov	r5,r20
 8005e60:	8009883a 	mov	r4,r16
 8005e64:	01800284 	movi	r6,10
 8005e68:	000f883a 	mov	r7,zero
 8005e6c:	1023883a 	mov	r17,r2
 8005e70:	80070ec0 	call	80070ec <__multadd>
 8005e74:	1029883a 	mov	r20,r2
 8005e78:	b027883a 	mov	r19,r22
 8005e7c:	003fc006 	br	8005d80 <__alt_data_end+0xfc005d80>
 8005e80:	a005883a 	mov	r2,r20
 8005e84:	003ede06 	br	8005a00 <__alt_data_end+0xfc005a00>
 8005e88:	01000044 	movi	r4,1
 8005e8c:	d9000b15 	stw	r4,44(sp)
 8005e90:	d9802217 	ldw	r6,136(sp)
 8005e94:	0180dc0e 	bge	zero,r6,8006208 <_dtoa_r+0x1224>
 8005e98:	3023883a 	mov	r17,r6
 8005e9c:	d9800d15 	stw	r6,52(sp)
 8005ea0:	d9800615 	stw	r6,24(sp)
 8005ea4:	003d1e06 	br	8005320 <__alt_data_end+0xfc005320>
 8005ea8:	d8800617 	ldw	r2,24(sp)
 8005eac:	00be3716 	blt	zero,r2,800578c <__alt_data_end+0xfc00578c>
 8005eb0:	1000be1e 	bne	r2,zero,80061ac <_dtoa_r+0x11c8>
 8005eb4:	8809883a 	mov	r4,r17
 8005eb8:	a00b883a 	mov	r5,r20
 8005ebc:	000d883a 	mov	r6,zero
 8005ec0:	01d00534 	movhi	r7,16404
 8005ec4:	800c5080 	call	800c508 <__muldf3>
 8005ec8:	1009883a 	mov	r4,r2
 8005ecc:	180b883a 	mov	r5,r3
 8005ed0:	900d883a 	mov	r6,r18
 8005ed4:	980f883a 	mov	r7,r19
 8005ed8:	800c3480 	call	800c348 <__gedf2>
 8005edc:	002b883a 	mov	r21,zero
 8005ee0:	0023883a 	mov	r17,zero
 8005ee4:	10007a16 	blt	r2,zero,80060d0 <_dtoa_r+0x10ec>
 8005ee8:	d9002217 	ldw	r4,136(sp)
 8005eec:	ddc00717 	ldw	r23,28(sp)
 8005ef0:	0108303a 	nor	r4,zero,r4
 8005ef4:	d9000515 	stw	r4,20(sp)
 8005ef8:	8009883a 	mov	r4,r16
 8005efc:	a80b883a 	mov	r5,r21
 8005f00:	80070c40 	call	80070c4 <_Bfree>
 8005f04:	883f751e 	bne	r17,zero,8005cdc <__alt_data_end+0xfc005cdc>
 8005f08:	003de406 	br	800569c <__alt_data_end+0xfc00569c>
 8005f0c:	e00b883a 	mov	r5,fp
 8005f10:	8009883a 	mov	r4,r16
 8005f14:	80077100 	call	8007710 <__pow5mult>
 8005f18:	1039883a 	mov	fp,r2
 8005f1c:	003ed306 	br	8005a6c <__alt_data_end+0xfc005a6c>
 8005f20:	903ee01e 	bne	r18,zero,8005aa4 <__alt_data_end+0xfc005aa4>
 8005f24:	00800434 	movhi	r2,16
 8005f28:	10bfffc4 	addi	r2,r2,-1
 8005f2c:	9884703a 	and	r2,r19,r2
 8005f30:	103f081e 	bne	r2,zero,8005b54 <__alt_data_end+0xfc005b54>
 8005f34:	9cdffc2c 	andhi	r19,r19,32752
 8005f38:	983f0626 	beq	r19,zero,8005b54 <__alt_data_end+0xfc005b54>
 8005f3c:	d8800817 	ldw	r2,32(sp)
 8005f40:	b5800044 	addi	r22,r22,1
 8005f44:	04c00044 	movi	r19,1
 8005f48:	10800044 	addi	r2,r2,1
 8005f4c:	d8800815 	stw	r2,32(sp)
 8005f50:	003f0106 	br	8005b58 <__alt_data_end+0xfc005b58>
 8005f54:	d9800f17 	ldw	r6,60(sp)
 8005f58:	30016826 	beq	r6,zero,80064fc <_dtoa_r+0x1518>
 8005f5c:	10810cc4 	addi	r2,r2,1075
 8005f60:	dd400917 	ldw	r21,36(sp)
 8005f64:	dd000817 	ldw	r20,32(sp)
 8005f68:	003e9906 	br	80059d0 <__alt_data_end+0xfc0059d0>
 8005f6c:	9011883a 	mov	r8,r18
 8005f70:	4007883a 	mov	r3,r8
 8005f74:	e02d883a 	mov	r22,fp
 8005f78:	0080100e 	bge	zero,r2,8005fbc <_dtoa_r+0xfd8>
 8005f7c:	01800044 	movi	r6,1
 8005f80:	8009883a 	mov	r4,r16
 8005f84:	e00b883a 	mov	r5,fp
 8005f88:	da001515 	stw	r8,84(sp)
 8005f8c:	da001715 	stw	r8,92(sp)
 8005f90:	80078500 	call	8007850 <__lshift>
 8005f94:	1009883a 	mov	r4,r2
 8005f98:	a80b883a 	mov	r5,r21
 8005f9c:	102d883a 	mov	r22,r2
 8005fa0:	80079980 	call	8007998 <__mcmp>
 8005fa4:	d8c01517 	ldw	r3,84(sp)
 8005fa8:	da001717 	ldw	r8,92(sp)
 8005fac:	0081a50e 	bge	zero,r2,8006644 <_dtoa_r+0x1660>
 8005fb0:	00800e44 	movi	r2,57
 8005fb4:	40817b26 	beq	r8,r2,80065a4 <_dtoa_r+0x15c0>
 8005fb8:	40c00044 	addi	r3,r8,1
 8005fbc:	8825883a 	mov	r18,r17
 8005fc0:	9dc00044 	addi	r23,r19,1
 8005fc4:	98c00005 	stb	r3,0(r19)
 8005fc8:	a023883a 	mov	r17,r20
 8005fcc:	b039883a 	mov	fp,r22
 8005fd0:	003f3906 	br	8005cb8 <__alt_data_end+0xfc005cb8>
 8005fd4:	00800e44 	movi	r2,57
 8005fd8:	9011883a 	mov	r8,r18
 8005fdc:	90817226 	beq	r18,r2,80065a8 <_dtoa_r+0x15c4>
 8005fe0:	0580010e 	bge	zero,r22,8005fe8 <_dtoa_r+0x1004>
 8005fe4:	ba000c44 	addi	r8,r23,49
 8005fe8:	8825883a 	mov	r18,r17
 8005fec:	9dc00044 	addi	r23,r19,1
 8005ff0:	9a000005 	stb	r8,0(r19)
 8005ff4:	a023883a 	mov	r17,r20
 8005ff8:	003f2f06 	br	8005cb8 <__alt_data_end+0xfc005cb8>
 8005ffc:	880b883a 	mov	r5,r17
 8006000:	8009883a 	mov	r4,r16
 8006004:	01800284 	movi	r6,10
 8006008:	000f883a 	mov	r7,zero
 800600c:	80070ec0 	call	80070ec <__multadd>
 8006010:	1023883a 	mov	r17,r2
 8006014:	1029883a 	mov	r20,r2
 8006018:	003f9706 	br	8005e78 <__alt_data_end+0xfc005e78>
 800601c:	8009883a 	mov	r4,r16
 8006020:	180b883a 	mov	r5,r3
 8006024:	80070c40 	call	80070c4 <_Bfree>
 8006028:	00800044 	movi	r2,1
 800602c:	003f7306 	br	8005dfc <__alt_data_end+0xfc005dfc>
 8006030:	e009883a 	mov	r4,fp
 8006034:	a80b883a 	mov	r5,r21
 8006038:	80079980 	call	8007998 <__mcmp>
 800603c:	103ee60e 	bge	r2,zero,8005bd8 <__alt_data_end+0xfc005bd8>
 8006040:	8009883a 	mov	r4,r16
 8006044:	e00b883a 	mov	r5,fp
 8006048:	01800284 	movi	r6,10
 800604c:	000f883a 	mov	r7,zero
 8006050:	80070ec0 	call	80070ec <__multadd>
 8006054:	d9000517 	ldw	r4,20(sp)
 8006058:	d9800b17 	ldw	r6,44(sp)
 800605c:	1039883a 	mov	fp,r2
 8006060:	213fffc4 	addi	r4,r4,-1
 8006064:	d9000515 	stw	r4,20(sp)
 8006068:	303f2d1e 	bne	r6,zero,8005d20 <__alt_data_end+0xfc005d20>
 800606c:	d9000d17 	ldw	r4,52(sp)
 8006070:	0101780e 	bge	zero,r4,8006654 <_dtoa_r+0x1670>
 8006074:	d9000615 	stw	r4,24(sp)
 8006078:	003edb06 	br	8005be8 <__alt_data_end+0xfc005be8>
 800607c:	00800084 	movi	r2,2
 8006080:	30818e1e 	bne	r6,r2,80066bc <_dtoa_r+0x16d8>
 8006084:	d8000b15 	stw	zero,44(sp)
 8006088:	003f8106 	br	8005e90 <__alt_data_end+0xfc005e90>
 800608c:	d8800717 	ldw	r2,28(sp)
 8006090:	003c0306 	br	80050a0 <__alt_data_end+0xfc0050a0>
 8006094:	d9000317 	ldw	r4,12(sp)
 8006098:	00800084 	movi	r2,2
 800609c:	113ed00e 	bge	r2,r4,8005be0 <__alt_data_end+0xfc005be0>
 80060a0:	d8c00617 	ldw	r3,24(sp)
 80060a4:	183f901e 	bne	r3,zero,8005ee8 <__alt_data_end+0xfc005ee8>
 80060a8:	a80b883a 	mov	r5,r21
 80060ac:	8009883a 	mov	r4,r16
 80060b0:	01800144 	movi	r6,5
 80060b4:	000f883a 	mov	r7,zero
 80060b8:	80070ec0 	call	80070ec <__multadd>
 80060bc:	e009883a 	mov	r4,fp
 80060c0:	100b883a 	mov	r5,r2
 80060c4:	102b883a 	mov	r21,r2
 80060c8:	80079980 	call	8007998 <__mcmp>
 80060cc:	00bf860e 	bge	zero,r2,8005ee8 <__alt_data_end+0xfc005ee8>
 80060d0:	d9800717 	ldw	r6,28(sp)
 80060d4:	00800c44 	movi	r2,49
 80060d8:	30800005 	stb	r2,0(r6)
 80060dc:	d8800517 	ldw	r2,20(sp)
 80060e0:	35c00044 	addi	r23,r6,1
 80060e4:	10800044 	addi	r2,r2,1
 80060e8:	d8800515 	stw	r2,20(sp)
 80060ec:	003f8206 	br	8005ef8 <__alt_data_end+0xfc005ef8>
 80060f0:	903e981e 	bne	r18,zero,8005b54 <__alt_data_end+0xfc005b54>
 80060f4:	003f8b06 	br	8005f24 <__alt_data_end+0xfc005f24>
 80060f8:	d9800517 	ldw	r6,20(sp)
 80060fc:	d8c00717 	ldw	r3,28(sp)
 8006100:	00800c44 	movi	r2,49
 8006104:	31800044 	addi	r6,r6,1
 8006108:	d9800515 	stw	r6,20(sp)
 800610c:	18800005 	stb	r2,0(r3)
 8006110:	003ee906 	br	8005cb8 <__alt_data_end+0xfc005cb8>
 8006114:	dc000317 	ldw	r16,12(sp)
 8006118:	003d6006 	br	800569c <__alt_data_end+0xfc00569c>
 800611c:	8809883a 	mov	r4,r17
 8006120:	800d6cc0 	call	800d6cc <__floatsidf>
 8006124:	a009883a 	mov	r4,r20
 8006128:	a80b883a 	mov	r5,r21
 800612c:	100d883a 	mov	r6,r2
 8006130:	180f883a 	mov	r7,r3
 8006134:	800c5080 	call	800c508 <__muldf3>
 8006138:	1009883a 	mov	r4,r2
 800613c:	180b883a 	mov	r5,r3
 8006140:	000d883a 	mov	r6,zero
 8006144:	01d00734 	movhi	r7,16412
 8006148:	800b0a80 	call	800b0a8 <__adddf3>
 800614c:	1023883a 	mov	r17,r2
 8006150:	00bf3034 	movhi	r2,64704
 8006154:	1885883a 	add	r2,r3,r2
 8006158:	d8800e15 	stw	r2,56(sp)
 800615c:	a009883a 	mov	r4,r20
 8006160:	a80b883a 	mov	r5,r21
 8006164:	000d883a 	mov	r6,zero
 8006168:	01d00534 	movhi	r7,16404
 800616c:	800cd740 	call	800cd74 <__subdf3>
 8006170:	d9c00e17 	ldw	r7,56(sp)
 8006174:	1009883a 	mov	r4,r2
 8006178:	180b883a 	mov	r5,r3
 800617c:	880d883a 	mov	r6,r17
 8006180:	102b883a 	mov	r21,r2
 8006184:	1829883a 	mov	r20,r3
 8006188:	800c3480 	call	800c348 <__gedf2>
 800618c:	00807716 	blt	zero,r2,800636c <_dtoa_r+0x1388>
 8006190:	d8800e17 	ldw	r2,56(sp)
 8006194:	a809883a 	mov	r4,r21
 8006198:	a00b883a 	mov	r5,r20
 800619c:	11e0003c 	xorhi	r7,r2,32768
 80061a0:	880d883a 	mov	r6,r17
 80061a4:	800c4280 	call	800c428 <__ledf2>
 80061a8:	103d6b0e 	bge	r2,zero,8005758 <__alt_data_end+0xfc005758>
 80061ac:	002b883a 	mov	r21,zero
 80061b0:	0023883a 	mov	r17,zero
 80061b4:	003f4c06 	br	8005ee8 <__alt_data_end+0xfc005ee8>
 80061b8:	d9800917 	ldw	r6,36(sp)
 80061bc:	e00b883a 	mov	r5,fp
 80061c0:	8009883a 	mov	r4,r16
 80061c4:	80077100 	call	8007710 <__pow5mult>
 80061c8:	1039883a 	mov	fp,r2
 80061cc:	003e2706 	br	8005a6c <__alt_data_end+0xfc005a6c>
 80061d0:	d8000b15 	stw	zero,44(sp)
 80061d4:	003c4906 	br	80052fc <__alt_data_end+0xfc0052fc>
 80061d8:	d9000917 	ldw	r4,36(sp)
 80061dc:	d9800a17 	ldw	r6,40(sp)
 80061e0:	dd400915 	stw	r21,36(sp)
 80061e4:	a905c83a 	sub	r2,r21,r4
 80061e8:	308d883a 	add	r6,r6,r2
 80061ec:	d9800a15 	stw	r6,40(sp)
 80061f0:	002b883a 	mov	r21,zero
 80061f4:	003df206 	br	80059c0 <__alt_data_end+0xfc0059c0>
 80061f8:	dc800e15 	stw	r18,56(sp)
 80061fc:	982b883a 	mov	r21,r19
 8006200:	04400084 	movi	r17,2
 8006204:	003c7406 	br	80053d8 <__alt_data_end+0xfc0053d8>
 8006208:	04400044 	movi	r17,1
 800620c:	dc400d15 	stw	r17,52(sp)
 8006210:	dc400615 	stw	r17,24(sp)
 8006214:	dc402215 	stw	r17,136(sp)
 8006218:	80001115 	stw	zero,68(r16)
 800621c:	000b883a 	mov	r5,zero
 8006220:	003c4a06 	br	800534c <__alt_data_end+0xfc00534c>
 8006224:	3023883a 	mov	r17,r6
 8006228:	003ffb06 	br	8006218 <__alt_data_end+0xfc006218>
 800622c:	1000021e 	bne	r2,zero,8006238 <_dtoa_r+0x1254>
 8006230:	4200004c 	andi	r8,r8,1
 8006234:	403e8f1e 	bne	r8,zero,8005c74 <__alt_data_end+0xfc005c74>
 8006238:	01000c04 	movi	r4,48
 800623c:	00000106 	br	8006244 <_dtoa_r+0x1260>
 8006240:	102f883a 	mov	r23,r2
 8006244:	b8bfffc4 	addi	r2,r23,-1
 8006248:	10c00007 	ldb	r3,0(r2)
 800624c:	193ffc26 	beq	r3,r4,8006240 <__alt_data_end+0xfc006240>
 8006250:	003e9906 	br	8005cb8 <__alt_data_end+0xfc005cb8>
 8006254:	d9000517 	ldw	r4,20(sp)
 8006258:	012fc83a 	sub	r23,zero,r4
 800625c:	b800ad26 	beq	r23,zero,8006514 <_dtoa_r+0x1530>
 8006260:	b88003cc 	andi	r2,r23,15
 8006264:	100490fa 	slli	r2,r2,3
 8006268:	00c20074 	movhi	r3,2049
 800626c:	18c43704 	addi	r3,r3,4316
 8006270:	1885883a 	add	r2,r3,r2
 8006274:	11800017 	ldw	r6,0(r2)
 8006278:	11c00117 	ldw	r7,4(r2)
 800627c:	b82fd13a 	srai	r23,r23,4
 8006280:	9009883a 	mov	r4,r18
 8006284:	980b883a 	mov	r5,r19
 8006288:	800c5080 	call	800c508 <__muldf3>
 800628c:	1029883a 	mov	r20,r2
 8006290:	182b883a 	mov	r21,r3
 8006294:	b800f426 	beq	r23,zero,8006668 <_dtoa_r+0x1684>
 8006298:	02020074 	movhi	r8,2049
 800629c:	42042d04 	addi	r8,r8,4276
 80062a0:	8029883a 	mov	r20,r16
 80062a4:	04400084 	movi	r17,2
 80062a8:	4021883a 	mov	r16,r8
 80062ac:	b980004c 	andi	r6,r23,1
 80062b0:	1009883a 	mov	r4,r2
 80062b4:	b82fd07a 	srai	r23,r23,1
 80062b8:	180b883a 	mov	r5,r3
 80062bc:	30000426 	beq	r6,zero,80062d0 <_dtoa_r+0x12ec>
 80062c0:	81800017 	ldw	r6,0(r16)
 80062c4:	81c00117 	ldw	r7,4(r16)
 80062c8:	8c400044 	addi	r17,r17,1
 80062cc:	800c5080 	call	800c508 <__muldf3>
 80062d0:	84000204 	addi	r16,r16,8
 80062d4:	b83ff51e 	bne	r23,zero,80062ac <__alt_data_end+0xfc0062ac>
 80062d8:	a021883a 	mov	r16,r20
 80062dc:	182b883a 	mov	r21,r3
 80062e0:	1029883a 	mov	r20,r2
 80062e4:	003c5506 	br	800543c <__alt_data_end+0xfc00543c>
 80062e8:	d9800517 	ldw	r6,20(sp)
 80062ec:	d9000717 	ldw	r4,28(sp)
 80062f0:	00c00c04 	movi	r3,48
 80062f4:	31800044 	addi	r6,r6,1
 80062f8:	d9800515 	stw	r6,20(sp)
 80062fc:	20c00005 	stb	r3,0(r4)
 8006300:	02000c44 	movi	r8,49
 8006304:	003da206 	br	8005990 <__alt_data_end+0xfc005990>
 8006308:	89400117 	ldw	r5,4(r17)
 800630c:	8009883a 	mov	r4,r16
 8006310:	800701c0 	call	800701c <_Balloc>
 8006314:	89800417 	ldw	r6,16(r17)
 8006318:	11000304 	addi	r4,r2,12
 800631c:	89400304 	addi	r5,r17,12
 8006320:	31800084 	addi	r6,r6,2
 8006324:	318d883a 	add	r6,r6,r6
 8006328:	318d883a 	add	r6,r6,r6
 800632c:	1027883a 	mov	r19,r2
 8006330:	80022dc0 	call	80022dc <memcpy>
 8006334:	8009883a 	mov	r4,r16
 8006338:	980b883a 	mov	r5,r19
 800633c:	01800044 	movi	r6,1
 8006340:	80078500 	call	8007850 <__lshift>
 8006344:	1029883a 	mov	r20,r2
 8006348:	003e8606 	br	8005d64 <__alt_data_end+0xfc005d64>
 800634c:	00800e44 	movi	r2,57
 8006350:	90809526 	beq	r18,r2,80065a8 <_dtoa_r+0x15c4>
 8006354:	92000044 	addi	r8,r18,1
 8006358:	003f2306 	br	8005fe8 <__alt_data_end+0xfc005fe8>
 800635c:	9011883a 	mov	r8,r18
 8006360:	8825883a 	mov	r18,r17
 8006364:	a023883a 	mov	r17,r20
 8006368:	003e3706 	br	8005c48 <__alt_data_end+0xfc005c48>
 800636c:	002b883a 	mov	r21,zero
 8006370:	0023883a 	mov	r17,zero
 8006374:	003f5606 	br	80060d0 <__alt_data_end+0xfc0060d0>
 8006378:	51bfffc4 	addi	r6,r10,-1
 800637c:	300490fa 	slli	r2,r6,3
 8006380:	00c20074 	movhi	r3,2049
 8006384:	18c43704 	addi	r3,r3,4316
 8006388:	1885883a 	add	r2,r3,r2
 800638c:	d9c00e17 	ldw	r7,56(sp)
 8006390:	11000017 	ldw	r4,0(r2)
 8006394:	11400117 	ldw	r5,4(r2)
 8006398:	d8800717 	ldw	r2,28(sp)
 800639c:	d9801015 	stw	r6,64(sp)
 80063a0:	880d883a 	mov	r6,r17
 80063a4:	da801615 	stw	r10,88(sp)
 80063a8:	15c00044 	addi	r23,r2,1
 80063ac:	800c5080 	call	800c508 <__muldf3>
 80063b0:	a80b883a 	mov	r5,r21
 80063b4:	a009883a 	mov	r4,r20
 80063b8:	d8c01115 	stw	r3,68(sp)
 80063bc:	d8800e15 	stw	r2,56(sp)
 80063c0:	800d6440 	call	800d644 <__fixdfsi>
 80063c4:	1009883a 	mov	r4,r2
 80063c8:	1023883a 	mov	r17,r2
 80063cc:	800d6cc0 	call	800d6cc <__floatsidf>
 80063d0:	a009883a 	mov	r4,r20
 80063d4:	a80b883a 	mov	r5,r21
 80063d8:	100d883a 	mov	r6,r2
 80063dc:	180f883a 	mov	r7,r3
 80063e0:	800cd740 	call	800cd74 <__subdf3>
 80063e4:	1813883a 	mov	r9,r3
 80063e8:	d8c00717 	ldw	r3,28(sp)
 80063ec:	8c400c04 	addi	r17,r17,48
 80063f0:	1011883a 	mov	r8,r2
 80063f4:	1c400005 	stb	r17,0(r3)
 80063f8:	da801617 	ldw	r10,88(sp)
 80063fc:	00800044 	movi	r2,1
 8006400:	50802326 	beq	r10,r2,8006490 <_dtoa_r+0x14ac>
 8006404:	d8800717 	ldw	r2,28(sp)
 8006408:	b82b883a 	mov	r21,r23
 800640c:	dc001315 	stw	r16,76(sp)
 8006410:	12a9883a 	add	r20,r2,r10
 8006414:	4807883a 	mov	r3,r9
 8006418:	4005883a 	mov	r2,r8
 800641c:	dc801415 	stw	r18,80(sp)
 8006420:	000d883a 	mov	r6,zero
 8006424:	01d00934 	movhi	r7,16420
 8006428:	1009883a 	mov	r4,r2
 800642c:	180b883a 	mov	r5,r3
 8006430:	800c5080 	call	800c508 <__muldf3>
 8006434:	180b883a 	mov	r5,r3
 8006438:	1009883a 	mov	r4,r2
 800643c:	1821883a 	mov	r16,r3
 8006440:	1025883a 	mov	r18,r2
 8006444:	800d6440 	call	800d644 <__fixdfsi>
 8006448:	1009883a 	mov	r4,r2
 800644c:	1023883a 	mov	r17,r2
 8006450:	800d6cc0 	call	800d6cc <__floatsidf>
 8006454:	9009883a 	mov	r4,r18
 8006458:	800b883a 	mov	r5,r16
 800645c:	100d883a 	mov	r6,r2
 8006460:	180f883a 	mov	r7,r3
 8006464:	8c400c04 	addi	r17,r17,48
 8006468:	800cd740 	call	800cd74 <__subdf3>
 800646c:	ad400044 	addi	r21,r21,1
 8006470:	ac7fffc5 	stb	r17,-1(r21)
 8006474:	ad3fea1e 	bne	r21,r20,8006420 <__alt_data_end+0xfc006420>
 8006478:	1813883a 	mov	r9,r3
 800647c:	d8c01017 	ldw	r3,64(sp)
 8006480:	dc001317 	ldw	r16,76(sp)
 8006484:	dc801417 	ldw	r18,80(sp)
 8006488:	1011883a 	mov	r8,r2
 800648c:	b8ef883a 	add	r23,r23,r3
 8006490:	d9000e17 	ldw	r4,56(sp)
 8006494:	d9401117 	ldw	r5,68(sp)
 8006498:	000d883a 	mov	r6,zero
 800649c:	01cff834 	movhi	r7,16352
 80064a0:	da001715 	stw	r8,92(sp)
 80064a4:	da401515 	stw	r9,84(sp)
 80064a8:	800b0a80 	call	800b0a8 <__adddf3>
 80064ac:	da001717 	ldw	r8,92(sp)
 80064b0:	da401517 	ldw	r9,84(sp)
 80064b4:	1009883a 	mov	r4,r2
 80064b8:	400d883a 	mov	r6,r8
 80064bc:	480f883a 	mov	r7,r9
 80064c0:	180b883a 	mov	r5,r3
 80064c4:	800c4280 	call	800c428 <__ledf2>
 80064c8:	da001717 	ldw	r8,92(sp)
 80064cc:	da401517 	ldw	r9,84(sp)
 80064d0:	10003b0e 	bge	r2,zero,80065c0 <_dtoa_r+0x15dc>
 80064d4:	d9001217 	ldw	r4,72(sp)
 80064d8:	bd7fffc3 	ldbu	r21,-1(r23)
 80064dc:	d9000515 	stw	r4,20(sp)
 80064e0:	003d1c06 	br	8005954 <__alt_data_end+0xfc005954>
 80064e4:	d8c00817 	ldw	r3,32(sp)
 80064e8:	18a9c83a 	sub	r20,r3,r2
 80064ec:	0005883a 	mov	r2,zero
 80064f0:	003d3706 	br	80059d0 <__alt_data_end+0xfc0059d0>
 80064f4:	00800044 	movi	r2,1
 80064f8:	003dd006 	br	8005c3c <__alt_data_end+0xfc005c3c>
 80064fc:	d8c00217 	ldw	r3,8(sp)
 8006500:	00800d84 	movi	r2,54
 8006504:	dd400917 	ldw	r21,36(sp)
 8006508:	10c5c83a 	sub	r2,r2,r3
 800650c:	dd000817 	ldw	r20,32(sp)
 8006510:	003d2f06 	br	80059d0 <__alt_data_end+0xfc0059d0>
 8006514:	9029883a 	mov	r20,r18
 8006518:	982b883a 	mov	r21,r19
 800651c:	04400084 	movi	r17,2
 8006520:	003bc606 	br	800543c <__alt_data_end+0xfc00543c>
 8006524:	d8800617 	ldw	r2,24(sp)
 8006528:	103efc26 	beq	r2,zero,800611c <__alt_data_end+0xfc00611c>
 800652c:	d8c00d17 	ldw	r3,52(sp)
 8006530:	00fc890e 	bge	zero,r3,8005758 <__alt_data_end+0xfc005758>
 8006534:	a80b883a 	mov	r5,r21
 8006538:	a009883a 	mov	r4,r20
 800653c:	000d883a 	mov	r6,zero
 8006540:	01d00934 	movhi	r7,16420
 8006544:	800c5080 	call	800c508 <__muldf3>
 8006548:	89000044 	addi	r4,r17,1
 800654c:	1029883a 	mov	r20,r2
 8006550:	182b883a 	mov	r21,r3
 8006554:	800d6cc0 	call	800d6cc <__floatsidf>
 8006558:	a009883a 	mov	r4,r20
 800655c:	a80b883a 	mov	r5,r21
 8006560:	100d883a 	mov	r6,r2
 8006564:	180f883a 	mov	r7,r3
 8006568:	800c5080 	call	800c508 <__muldf3>
 800656c:	1009883a 	mov	r4,r2
 8006570:	180b883a 	mov	r5,r3
 8006574:	000d883a 	mov	r6,zero
 8006578:	01d00734 	movhi	r7,16412
 800657c:	800b0a80 	call	800b0a8 <__adddf3>
 8006580:	d9000517 	ldw	r4,20(sp)
 8006584:	1023883a 	mov	r17,r2
 8006588:	00bf3034 	movhi	r2,64704
 800658c:	213fffc4 	addi	r4,r4,-1
 8006590:	1885883a 	add	r2,r3,r2
 8006594:	d9001215 	stw	r4,72(sp)
 8006598:	d8800e15 	stw	r2,56(sp)
 800659c:	da800d17 	ldw	r10,52(sp)
 80065a0:	003bc306 	br	80054b0 <__alt_data_end+0xfc0054b0>
 80065a4:	b039883a 	mov	fp,r22
 80065a8:	01000e44 	movi	r4,57
 80065ac:	8825883a 	mov	r18,r17
 80065b0:	9dc00044 	addi	r23,r19,1
 80065b4:	99000005 	stb	r4,0(r19)
 80065b8:	a023883a 	mov	r17,r20
 80065bc:	003dae06 	br	8005c78 <__alt_data_end+0xfc005c78>
 80065c0:	d9800e17 	ldw	r6,56(sp)
 80065c4:	d9c01117 	ldw	r7,68(sp)
 80065c8:	0009883a 	mov	r4,zero
 80065cc:	014ff834 	movhi	r5,16352
 80065d0:	da001715 	stw	r8,92(sp)
 80065d4:	da401515 	stw	r9,84(sp)
 80065d8:	800cd740 	call	800cd74 <__subdf3>
 80065dc:	da001717 	ldw	r8,92(sp)
 80065e0:	da401517 	ldw	r9,84(sp)
 80065e4:	1009883a 	mov	r4,r2
 80065e8:	180b883a 	mov	r5,r3
 80065ec:	400d883a 	mov	r6,r8
 80065f0:	480f883a 	mov	r7,r9
 80065f4:	800c3480 	call	800c348 <__gedf2>
 80065f8:	00bc570e 	bge	zero,r2,8005758 <__alt_data_end+0xfc005758>
 80065fc:	01000c04 	movi	r4,48
 8006600:	00000106 	br	8006608 <_dtoa_r+0x1624>
 8006604:	102f883a 	mov	r23,r2
 8006608:	b8bfffc4 	addi	r2,r23,-1
 800660c:	10c00007 	ldb	r3,0(r2)
 8006610:	193ffc26 	beq	r3,r4,8006604 <__alt_data_end+0xfc006604>
 8006614:	d9801217 	ldw	r6,72(sp)
 8006618:	d9800515 	stw	r6,20(sp)
 800661c:	003c1f06 	br	800569c <__alt_data_end+0xfc00569c>
 8006620:	d8801217 	ldw	r2,72(sp)
 8006624:	dc001117 	ldw	r16,68(sp)
 8006628:	d8800515 	stw	r2,20(sp)
 800662c:	003cc906 	br	8005954 <__alt_data_end+0xfc005954>
 8006630:	dd801317 	ldw	r22,76(sp)
 8006634:	dc001117 	ldw	r16,68(sp)
 8006638:	dcc01417 	ldw	r19,80(sp)
 800663c:	dc801017 	ldw	r18,64(sp)
 8006640:	003c4506 	br	8005758 <__alt_data_end+0xfc005758>
 8006644:	103e5d1e 	bne	r2,zero,8005fbc <__alt_data_end+0xfc005fbc>
 8006648:	4080004c 	andi	r2,r8,1
 800664c:	103e5b26 	beq	r2,zero,8005fbc <__alt_data_end+0xfc005fbc>
 8006650:	003e5706 	br	8005fb0 <__alt_data_end+0xfc005fb0>
 8006654:	d8c00317 	ldw	r3,12(sp)
 8006658:	00800084 	movi	r2,2
 800665c:	10c00a16 	blt	r2,r3,8006688 <_dtoa_r+0x16a4>
 8006660:	d9000d17 	ldw	r4,52(sp)
 8006664:	003e8306 	br	8006074 <__alt_data_end+0xfc006074>
 8006668:	04400084 	movi	r17,2
 800666c:	003b7306 	br	800543c <__alt_data_end+0xfc00543c>
 8006670:	d9801217 	ldw	r6,72(sp)
 8006674:	d9800515 	stw	r6,20(sp)
 8006678:	003cb606 	br	8005954 <__alt_data_end+0xfc005954>
 800667c:	d9001217 	ldw	r4,72(sp)
 8006680:	d9000515 	stw	r4,20(sp)
 8006684:	003c0506 	br	800569c <__alt_data_end+0xfc00569c>
 8006688:	d9800d17 	ldw	r6,52(sp)
 800668c:	d9800615 	stw	r6,24(sp)
 8006690:	003e8306 	br	80060a0 <__alt_data_end+0xfc0060a0>
 8006694:	d9800317 	ldw	r6,12(sp)
 8006698:	00800084 	movi	r2,2
 800669c:	11800216 	blt	r2,r6,80066a8 <_dtoa_r+0x16c4>
 80066a0:	d8800d17 	ldw	r2,52(sp)
 80066a4:	003da606 	br	8005d40 <__alt_data_end+0xfc005d40>
 80066a8:	d8800d17 	ldw	r2,52(sp)
 80066ac:	d8800615 	stw	r2,24(sp)
 80066b0:	003e7b06 	br	80060a0 <__alt_data_end+0xfc0060a0>
 80066b4:	05000044 	movi	r20,1
 80066b8:	003b0506 	br	80052d0 <__alt_data_end+0xfc0052d0>
 80066bc:	8009883a 	mov	r4,r16
 80066c0:	80001115 	stw	zero,68(r16)
 80066c4:	000b883a 	mov	r5,zero
 80066c8:	800701c0 	call	800701c <_Balloc>
 80066cc:	d8800715 	stw	r2,28(sp)
 80066d0:	d8c00717 	ldw	r3,28(sp)
 80066d4:	00bfffc4 	movi	r2,-1
 80066d8:	01000044 	movi	r4,1
 80066dc:	d8800615 	stw	r2,24(sp)
 80066e0:	80c01015 	stw	r3,64(r16)
 80066e4:	d9000b15 	stw	r4,44(sp)
 80066e8:	d8002215 	stw	zero,136(sp)
 80066ec:	d8800d15 	stw	r2,52(sp)
 80066f0:	003c1906 	br	8005758 <__alt_data_end+0xfc005758>
 80066f4:	193d2926 	beq	r3,r4,8005b9c <__alt_data_end+0xfc005b9c>
 80066f8:	00c00f04 	movi	r3,60
 80066fc:	1885c83a 	sub	r2,r3,r2
 8006700:	003d7b06 	br	8005cf0 <__alt_data_end+0xfc005cf0>
 8006704:	000b883a 	mov	r5,zero
 8006708:	003b1006 	br	800534c <__alt_data_end+0xfc00534c>

0800670c <__sflags>:
 800670c:	28800007 	ldb	r2,0(r5)
 8006710:	00c01c84 	movi	r3,114
 8006714:	10c01826 	beq	r2,r3,8006778 <__sflags+0x6c>
 8006718:	00c01dc4 	movi	r3,119
 800671c:	10c01226 	beq	r2,r3,8006768 <__sflags+0x5c>
 8006720:	00c01844 	movi	r3,97
 8006724:	10c00426 	beq	r2,r3,8006738 <__sflags+0x2c>
 8006728:	00800584 	movi	r2,22
 800672c:	20800015 	stw	r2,0(r4)
 8006730:	0005883a 	mov	r2,zero
 8006734:	f800283a 	ret
 8006738:	00c08204 	movi	r3,520
 800673c:	01c00044 	movi	r7,1
 8006740:	00804204 	movi	r2,264
 8006744:	29000047 	ldb	r4,1(r5)
 8006748:	20000426 	beq	r4,zero,800675c <__sflags+0x50>
 800674c:	02000ac4 	movi	r8,43
 8006750:	22000d26 	beq	r4,r8,8006788 <__sflags+0x7c>
 8006754:	29000087 	ldb	r4,2(r5)
 8006758:	22000b26 	beq	r4,r8,8006788 <__sflags+0x7c>
 800675c:	38c6b03a 	or	r3,r7,r3
 8006760:	30c00015 	stw	r3,0(r6)
 8006764:	f800283a 	ret
 8006768:	00c18004 	movi	r3,1536
 800676c:	01c00044 	movi	r7,1
 8006770:	00800204 	movi	r2,8
 8006774:	003ff306 	br	8006744 <__alt_data_end+0xfc006744>
 8006778:	0007883a 	mov	r3,zero
 800677c:	000f883a 	mov	r7,zero
 8006780:	00800104 	movi	r2,4
 8006784:	003fef06 	br	8006744 <__alt_data_end+0xfc006744>
 8006788:	013ff8c4 	movi	r4,-29
 800678c:	01c00084 	movi	r7,2
 8006790:	1104703a 	and	r2,r2,r4
 8006794:	38c6b03a 	or	r3,r7,r3
 8006798:	10800414 	ori	r2,r2,16
 800679c:	30c00015 	stw	r3,0(r6)
 80067a0:	f800283a 	ret

080067a4 <__sfvwrite_r>:
 80067a4:	30800217 	ldw	r2,8(r6)
 80067a8:	10004526 	beq	r2,zero,80068c0 <__sfvwrite_r+0x11c>
 80067ac:	28c0030b 	ldhu	r3,12(r5)
 80067b0:	defff404 	addi	sp,sp,-48
 80067b4:	dd400715 	stw	r21,28(sp)
 80067b8:	dcc00515 	stw	r19,20(sp)
 80067bc:	dc000215 	stw	r16,8(sp)
 80067c0:	dfc00b15 	stw	ra,44(sp)
 80067c4:	df000a15 	stw	fp,40(sp)
 80067c8:	ddc00915 	stw	r23,36(sp)
 80067cc:	dd800815 	stw	r22,32(sp)
 80067d0:	dd000615 	stw	r20,24(sp)
 80067d4:	dc800415 	stw	r18,16(sp)
 80067d8:	dc400315 	stw	r17,12(sp)
 80067dc:	1880020c 	andi	r2,r3,8
 80067e0:	2821883a 	mov	r16,r5
 80067e4:	202b883a 	mov	r21,r4
 80067e8:	3027883a 	mov	r19,r6
 80067ec:	10002526 	beq	r2,zero,8006884 <__sfvwrite_r+0xe0>
 80067f0:	28800417 	ldw	r2,16(r5)
 80067f4:	10002326 	beq	r2,zero,8006884 <__sfvwrite_r+0xe0>
 80067f8:	1880008c 	andi	r2,r3,2
 80067fc:	9c400017 	ldw	r17,0(r19)
 8006800:	10003126 	beq	r2,zero,80068c8 <__sfvwrite_r+0x124>
 8006804:	0029883a 	mov	r20,zero
 8006808:	0025883a 	mov	r18,zero
 800680c:	05810004 	movi	r22,1024
 8006810:	a00d883a 	mov	r6,r20
 8006814:	a809883a 	mov	r4,r21
 8006818:	90002526 	beq	r18,zero,80068b0 <__sfvwrite_r+0x10c>
 800681c:	900f883a 	mov	r7,r18
 8006820:	81400717 	ldw	r5,28(r16)
 8006824:	b480012e 	bgeu	r22,r18,800682c <__sfvwrite_r+0x88>
 8006828:	01c10004 	movi	r7,1024
 800682c:	80800917 	ldw	r2,36(r16)
 8006830:	103ee83a 	callr	r2
 8006834:	0080510e 	bge	zero,r2,800697c <__sfvwrite_r+0x1d8>
 8006838:	98c00217 	ldw	r3,8(r19)
 800683c:	a0a9883a 	add	r20,r20,r2
 8006840:	90a5c83a 	sub	r18,r18,r2
 8006844:	1885c83a 	sub	r2,r3,r2
 8006848:	98800215 	stw	r2,8(r19)
 800684c:	103ff01e 	bne	r2,zero,8006810 <__alt_data_end+0xfc006810>
 8006850:	0005883a 	mov	r2,zero
 8006854:	dfc00b17 	ldw	ra,44(sp)
 8006858:	df000a17 	ldw	fp,40(sp)
 800685c:	ddc00917 	ldw	r23,36(sp)
 8006860:	dd800817 	ldw	r22,32(sp)
 8006864:	dd400717 	ldw	r21,28(sp)
 8006868:	dd000617 	ldw	r20,24(sp)
 800686c:	dcc00517 	ldw	r19,20(sp)
 8006870:	dc800417 	ldw	r18,16(sp)
 8006874:	dc400317 	ldw	r17,12(sp)
 8006878:	dc000217 	ldw	r16,8(sp)
 800687c:	dec00c04 	addi	sp,sp,48
 8006880:	f800283a 	ret
 8006884:	a809883a 	mov	r4,r21
 8006888:	800b883a 	mov	r5,r16
 800688c:	8004c380 	call	8004c38 <__swsetup_r>
 8006890:	80c0030b 	ldhu	r3,12(r16)
 8006894:	103fd826 	beq	r2,zero,80067f8 <__alt_data_end+0xfc0067f8>
 8006898:	18c01014 	ori	r3,r3,64
 800689c:	80c0030d 	sth	r3,12(r16)
 80068a0:	00c00244 	movi	r3,9
 80068a4:	00bfffc4 	movi	r2,-1
 80068a8:	a8c00015 	stw	r3,0(r21)
 80068ac:	003fe906 	br	8006854 <__alt_data_end+0xfc006854>
 80068b0:	8d000017 	ldw	r20,0(r17)
 80068b4:	8c800117 	ldw	r18,4(r17)
 80068b8:	8c400204 	addi	r17,r17,8
 80068bc:	003fd406 	br	8006810 <__alt_data_end+0xfc006810>
 80068c0:	0005883a 	mov	r2,zero
 80068c4:	f800283a 	ret
 80068c8:	1880004c 	andi	r2,r3,1
 80068cc:	1000301e 	bne	r2,zero,8006990 <__sfvwrite_r+0x1ec>
 80068d0:	002f883a 	mov	r23,zero
 80068d4:	0025883a 	mov	r18,zero
 80068d8:	90001c26 	beq	r18,zero,800694c <__sfvwrite_r+0x1a8>
 80068dc:	1880800c 	andi	r2,r3,512
 80068e0:	85000217 	ldw	r20,8(r16)
 80068e4:	10006c26 	beq	r2,zero,8006a98 <__sfvwrite_r+0x2f4>
 80068e8:	a02d883a 	mov	r22,r20
 80068ec:	95008536 	bltu	r18,r20,8006b04 <__sfvwrite_r+0x360>
 80068f0:	1881200c 	andi	r2,r3,1152
 80068f4:	10009d1e 	bne	r2,zero,8006b6c <__sfvwrite_r+0x3c8>
 80068f8:	81000017 	ldw	r4,0(r16)
 80068fc:	a039883a 	mov	fp,r20
 8006900:	9029883a 	mov	r20,r18
 8006904:	b80b883a 	mov	r5,r23
 8006908:	b00d883a 	mov	r6,r22
 800690c:	8006ec00 	call	8006ec0 <memmove>
 8006910:	80c00217 	ldw	r3,8(r16)
 8006914:	81000017 	ldw	r4,0(r16)
 8006918:	9005883a 	mov	r2,r18
 800691c:	1f39c83a 	sub	fp,r3,fp
 8006920:	258f883a 	add	r7,r4,r22
 8006924:	87000215 	stw	fp,8(r16)
 8006928:	81c00015 	stw	r7,0(r16)
 800692c:	98c00217 	ldw	r3,8(r19)
 8006930:	b8af883a 	add	r23,r23,r2
 8006934:	90a5c83a 	sub	r18,r18,r2
 8006938:	1d05c83a 	sub	r2,r3,r20
 800693c:	98800215 	stw	r2,8(r19)
 8006940:	103fc326 	beq	r2,zero,8006850 <__alt_data_end+0xfc006850>
 8006944:	80c0030b 	ldhu	r3,12(r16)
 8006948:	903fe41e 	bne	r18,zero,80068dc <__alt_data_end+0xfc0068dc>
 800694c:	8dc00017 	ldw	r23,0(r17)
 8006950:	8c800117 	ldw	r18,4(r17)
 8006954:	8c400204 	addi	r17,r17,8
 8006958:	003fdf06 	br	80068d8 <__alt_data_end+0xfc0068d8>
 800695c:	80080c00 	call	80080c0 <_realloc_r>
 8006960:	102d883a 	mov	r22,r2
 8006964:	1000a01e 	bne	r2,zero,8006be8 <__sfvwrite_r+0x444>
 8006968:	81400417 	ldw	r5,16(r16)
 800696c:	a809883a 	mov	r4,r21
 8006970:	8000f300 	call	8000f30 <_free_r>
 8006974:	00800304 	movi	r2,12
 8006978:	a8800015 	stw	r2,0(r21)
 800697c:	80c0030b 	ldhu	r3,12(r16)
 8006980:	00bfffc4 	movi	r2,-1
 8006984:	18c01014 	ori	r3,r3,64
 8006988:	80c0030d 	sth	r3,12(r16)
 800698c:	003fb106 	br	8006854 <__alt_data_end+0xfc006854>
 8006990:	0029883a 	mov	r20,zero
 8006994:	0011883a 	mov	r8,zero
 8006998:	0039883a 	mov	fp,zero
 800699c:	0025883a 	mov	r18,zero
 80069a0:	90001f26 	beq	r18,zero,8006a20 <__sfvwrite_r+0x27c>
 80069a4:	40006826 	beq	r8,zero,8006b48 <__sfvwrite_r+0x3a4>
 80069a8:	a02f883a 	mov	r23,r20
 80069ac:	9500012e 	bgeu	r18,r20,80069b4 <__sfvwrite_r+0x210>
 80069b0:	902f883a 	mov	r23,r18
 80069b4:	81000017 	ldw	r4,0(r16)
 80069b8:	80800417 	ldw	r2,16(r16)
 80069bc:	b82d883a 	mov	r22,r23
 80069c0:	81800217 	ldw	r6,8(r16)
 80069c4:	81c00517 	ldw	r7,20(r16)
 80069c8:	1100022e 	bgeu	r2,r4,80069d4 <__sfvwrite_r+0x230>
 80069cc:	31c7883a 	add	r3,r6,r7
 80069d0:	1dc01816 	blt	r3,r23,8006a34 <__sfvwrite_r+0x290>
 80069d4:	b9c03f16 	blt	r23,r7,8006ad4 <__sfvwrite_r+0x330>
 80069d8:	80800917 	ldw	r2,36(r16)
 80069dc:	81400717 	ldw	r5,28(r16)
 80069e0:	a809883a 	mov	r4,r21
 80069e4:	da000115 	stw	r8,4(sp)
 80069e8:	e00d883a 	mov	r6,fp
 80069ec:	103ee83a 	callr	r2
 80069f0:	102d883a 	mov	r22,r2
 80069f4:	da000117 	ldw	r8,4(sp)
 80069f8:	00bfe00e 	bge	zero,r2,800697c <__alt_data_end+0xfc00697c>
 80069fc:	a5a9c83a 	sub	r20,r20,r22
 8006a00:	a0001f26 	beq	r20,zero,8006a80 <__sfvwrite_r+0x2dc>
 8006a04:	98800217 	ldw	r2,8(r19)
 8006a08:	e5b9883a 	add	fp,fp,r22
 8006a0c:	95a5c83a 	sub	r18,r18,r22
 8006a10:	15adc83a 	sub	r22,r2,r22
 8006a14:	9d800215 	stw	r22,8(r19)
 8006a18:	b03f8d26 	beq	r22,zero,8006850 <__alt_data_end+0xfc006850>
 8006a1c:	903fe11e 	bne	r18,zero,80069a4 <__alt_data_end+0xfc0069a4>
 8006a20:	8f000017 	ldw	fp,0(r17)
 8006a24:	8c800117 	ldw	r18,4(r17)
 8006a28:	0011883a 	mov	r8,zero
 8006a2c:	8c400204 	addi	r17,r17,8
 8006a30:	003fdb06 	br	80069a0 <__alt_data_end+0xfc0069a0>
 8006a34:	180d883a 	mov	r6,r3
 8006a38:	e00b883a 	mov	r5,fp
 8006a3c:	da000115 	stw	r8,4(sp)
 8006a40:	d8c00015 	stw	r3,0(sp)
 8006a44:	8006ec00 	call	8006ec0 <memmove>
 8006a48:	d8c00017 	ldw	r3,0(sp)
 8006a4c:	80800017 	ldw	r2,0(r16)
 8006a50:	a809883a 	mov	r4,r21
 8006a54:	800b883a 	mov	r5,r16
 8006a58:	10c5883a 	add	r2,r2,r3
 8006a5c:	80800015 	stw	r2,0(r16)
 8006a60:	d8c00015 	stw	r3,0(sp)
 8006a64:	80004640 	call	8000464 <_fflush_r>
 8006a68:	d8c00017 	ldw	r3,0(sp)
 8006a6c:	da000117 	ldw	r8,4(sp)
 8006a70:	103fc21e 	bne	r2,zero,800697c <__alt_data_end+0xfc00697c>
 8006a74:	182d883a 	mov	r22,r3
 8006a78:	a5a9c83a 	sub	r20,r20,r22
 8006a7c:	a03fe11e 	bne	r20,zero,8006a04 <__alt_data_end+0xfc006a04>
 8006a80:	a809883a 	mov	r4,r21
 8006a84:	800b883a 	mov	r5,r16
 8006a88:	80004640 	call	8000464 <_fflush_r>
 8006a8c:	103fbb1e 	bne	r2,zero,800697c <__alt_data_end+0xfc00697c>
 8006a90:	0011883a 	mov	r8,zero
 8006a94:	003fdb06 	br	8006a04 <__alt_data_end+0xfc006a04>
 8006a98:	81000017 	ldw	r4,0(r16)
 8006a9c:	80800417 	ldw	r2,16(r16)
 8006aa0:	1100012e 	bgeu	r2,r4,8006aa8 <__sfvwrite_r+0x304>
 8006aa4:	a4805a36 	bltu	r20,r18,8006c10 <__sfvwrite_r+0x46c>
 8006aa8:	81c00517 	ldw	r7,20(r16)
 8006aac:	91c01a36 	bltu	r18,r7,8006b18 <__sfvwrite_r+0x374>
 8006ab0:	80800917 	ldw	r2,36(r16)
 8006ab4:	81400717 	ldw	r5,28(r16)
 8006ab8:	a809883a 	mov	r4,r21
 8006abc:	b80d883a 	mov	r6,r23
 8006ac0:	103ee83a 	callr	r2
 8006ac4:	1029883a 	mov	r20,r2
 8006ac8:	00bfac0e 	bge	zero,r2,800697c <__alt_data_end+0xfc00697c>
 8006acc:	a005883a 	mov	r2,r20
 8006ad0:	003f9606 	br	800692c <__alt_data_end+0xfc00692c>
 8006ad4:	b80d883a 	mov	r6,r23
 8006ad8:	e00b883a 	mov	r5,fp
 8006adc:	da000115 	stw	r8,4(sp)
 8006ae0:	8006ec00 	call	8006ec0 <memmove>
 8006ae4:	80800217 	ldw	r2,8(r16)
 8006ae8:	80c00017 	ldw	r3,0(r16)
 8006aec:	da000117 	ldw	r8,4(sp)
 8006af0:	15c5c83a 	sub	r2,r2,r23
 8006af4:	1def883a 	add	r23,r3,r23
 8006af8:	80800215 	stw	r2,8(r16)
 8006afc:	85c00015 	stw	r23,0(r16)
 8006b00:	003fbe06 	br	80069fc <__alt_data_end+0xfc0069fc>
 8006b04:	81000017 	ldw	r4,0(r16)
 8006b08:	9039883a 	mov	fp,r18
 8006b0c:	9029883a 	mov	r20,r18
 8006b10:	902d883a 	mov	r22,r18
 8006b14:	003f7b06 	br	8006904 <__alt_data_end+0xfc006904>
 8006b18:	b80b883a 	mov	r5,r23
 8006b1c:	900d883a 	mov	r6,r18
 8006b20:	8006ec00 	call	8006ec0 <memmove>
 8006b24:	80c00217 	ldw	r3,8(r16)
 8006b28:	80800017 	ldw	r2,0(r16)
 8006b2c:	9029883a 	mov	r20,r18
 8006b30:	1c87c83a 	sub	r3,r3,r18
 8006b34:	1485883a 	add	r2,r2,r18
 8006b38:	80800015 	stw	r2,0(r16)
 8006b3c:	80c00215 	stw	r3,8(r16)
 8006b40:	9005883a 	mov	r2,r18
 8006b44:	003f7906 	br	800692c <__alt_data_end+0xfc00692c>
 8006b48:	e009883a 	mov	r4,fp
 8006b4c:	01400284 	movi	r5,10
 8006b50:	900d883a 	mov	r6,r18
 8006b54:	8006dd80 	call	8006dd8 <memchr>
 8006b58:	10003826 	beq	r2,zero,8006c3c <__sfvwrite_r+0x498>
 8006b5c:	10800044 	addi	r2,r2,1
 8006b60:	1729c83a 	sub	r20,r2,fp
 8006b64:	02000044 	movi	r8,1
 8006b68:	003f8f06 	br	80069a8 <__alt_data_end+0xfc0069a8>
 8006b6c:	80800517 	ldw	r2,20(r16)
 8006b70:	81400417 	ldw	r5,16(r16)
 8006b74:	87000017 	ldw	fp,0(r16)
 8006b78:	10a9883a 	add	r20,r2,r2
 8006b7c:	a085883a 	add	r2,r20,r2
 8006b80:	1028d7fa 	srli	r20,r2,31
 8006b84:	e179c83a 	sub	fp,fp,r5
 8006b88:	e1000044 	addi	r4,fp,1
 8006b8c:	a085883a 	add	r2,r20,r2
 8006b90:	1029d07a 	srai	r20,r2,1
 8006b94:	2485883a 	add	r2,r4,r18
 8006b98:	a00d883a 	mov	r6,r20
 8006b9c:	a080022e 	bgeu	r20,r2,8006ba8 <__sfvwrite_r+0x404>
 8006ba0:	1029883a 	mov	r20,r2
 8006ba4:	100d883a 	mov	r6,r2
 8006ba8:	18c1000c 	andi	r3,r3,1024
 8006bac:	a809883a 	mov	r4,r21
 8006bb0:	183f6a26 	beq	r3,zero,800695c <__alt_data_end+0xfc00695c>
 8006bb4:	300b883a 	mov	r5,r6
 8006bb8:	8001b340 	call	8001b34 <_malloc_r>
 8006bbc:	102d883a 	mov	r22,r2
 8006bc0:	103f6c26 	beq	r2,zero,8006974 <__alt_data_end+0xfc006974>
 8006bc4:	81400417 	ldw	r5,16(r16)
 8006bc8:	1009883a 	mov	r4,r2
 8006bcc:	e00d883a 	mov	r6,fp
 8006bd0:	80022dc0 	call	80022dc <memcpy>
 8006bd4:	8080030b 	ldhu	r2,12(r16)
 8006bd8:	00fedfc4 	movi	r3,-1153
 8006bdc:	10c4703a 	and	r2,r2,r3
 8006be0:	10802014 	ori	r2,r2,128
 8006be4:	8080030d 	sth	r2,12(r16)
 8006be8:	b709883a 	add	r4,r22,fp
 8006bec:	a707c83a 	sub	r3,r20,fp
 8006bf0:	85800415 	stw	r22,16(r16)
 8006bf4:	85000515 	stw	r20,20(r16)
 8006bf8:	81000015 	stw	r4,0(r16)
 8006bfc:	9039883a 	mov	fp,r18
 8006c00:	80c00215 	stw	r3,8(r16)
 8006c04:	9029883a 	mov	r20,r18
 8006c08:	902d883a 	mov	r22,r18
 8006c0c:	003f3d06 	br	8006904 <__alt_data_end+0xfc006904>
 8006c10:	b80b883a 	mov	r5,r23
 8006c14:	a00d883a 	mov	r6,r20
 8006c18:	8006ec00 	call	8006ec0 <memmove>
 8006c1c:	80800017 	ldw	r2,0(r16)
 8006c20:	a809883a 	mov	r4,r21
 8006c24:	800b883a 	mov	r5,r16
 8006c28:	1505883a 	add	r2,r2,r20
 8006c2c:	80800015 	stw	r2,0(r16)
 8006c30:	80004640 	call	8000464 <_fflush_r>
 8006c34:	103fa526 	beq	r2,zero,8006acc <__alt_data_end+0xfc006acc>
 8006c38:	003f5006 	br	800697c <__alt_data_end+0xfc00697c>
 8006c3c:	95000044 	addi	r20,r18,1
 8006c40:	02000044 	movi	r8,1
 8006c44:	003f5806 	br	80069a8 <__alt_data_end+0xfc0069a8>

08006c48 <_isatty_r>:
 8006c48:	defffd04 	addi	sp,sp,-12
 8006c4c:	dc000015 	stw	r16,0(sp)
 8006c50:	04020074 	movhi	r16,2049
 8006c54:	dc400115 	stw	r17,4(sp)
 8006c58:	8412b504 	addi	r16,r16,19156
 8006c5c:	2023883a 	mov	r17,r4
 8006c60:	2809883a 	mov	r4,r5
 8006c64:	dfc00215 	stw	ra,8(sp)
 8006c68:	80000015 	stw	zero,0(r16)
 8006c6c:	800db500 	call	800db50 <isatty>
 8006c70:	00ffffc4 	movi	r3,-1
 8006c74:	10c00526 	beq	r2,r3,8006c8c <_isatty_r+0x44>
 8006c78:	dfc00217 	ldw	ra,8(sp)
 8006c7c:	dc400117 	ldw	r17,4(sp)
 8006c80:	dc000017 	ldw	r16,0(sp)
 8006c84:	dec00304 	addi	sp,sp,12
 8006c88:	f800283a 	ret
 8006c8c:	80c00017 	ldw	r3,0(r16)
 8006c90:	183ff926 	beq	r3,zero,8006c78 <__alt_data_end+0xfc006c78>
 8006c94:	88c00015 	stw	r3,0(r17)
 8006c98:	003ff706 	br	8006c78 <__alt_data_end+0xfc006c78>

08006c9c <_setlocale_r>:
 8006c9c:	30001b26 	beq	r6,zero,8006d0c <_setlocale_r+0x70>
 8006ca0:	01420074 	movhi	r5,2049
 8006ca4:	defffe04 	addi	sp,sp,-8
 8006ca8:	29441d04 	addi	r5,r5,4212
 8006cac:	3009883a 	mov	r4,r6
 8006cb0:	dc000015 	stw	r16,0(sp)
 8006cb4:	dfc00115 	stw	ra,4(sp)
 8006cb8:	3021883a 	mov	r16,r6
 8006cbc:	80086d40 	call	80086d4 <strcmp>
 8006cc0:	1000061e 	bne	r2,zero,8006cdc <_setlocale_r+0x40>
 8006cc4:	00820074 	movhi	r2,2049
 8006cc8:	1083fe04 	addi	r2,r2,4088
 8006ccc:	dfc00117 	ldw	ra,4(sp)
 8006cd0:	dc000017 	ldw	r16,0(sp)
 8006cd4:	dec00204 	addi	sp,sp,8
 8006cd8:	f800283a 	ret
 8006cdc:	01420074 	movhi	r5,2049
 8006ce0:	2943fe04 	addi	r5,r5,4088
 8006ce4:	8009883a 	mov	r4,r16
 8006ce8:	80086d40 	call	80086d4 <strcmp>
 8006cec:	103ff526 	beq	r2,zero,8006cc4 <__alt_data_end+0xfc006cc4>
 8006cf0:	01420074 	movhi	r5,2049
 8006cf4:	29440804 	addi	r5,r5,4128
 8006cf8:	8009883a 	mov	r4,r16
 8006cfc:	80086d40 	call	80086d4 <strcmp>
 8006d00:	103ff026 	beq	r2,zero,8006cc4 <__alt_data_end+0xfc006cc4>
 8006d04:	0005883a 	mov	r2,zero
 8006d08:	003ff006 	br	8006ccc <__alt_data_end+0xfc006ccc>
 8006d0c:	00820074 	movhi	r2,2049
 8006d10:	1083fe04 	addi	r2,r2,4088
 8006d14:	f800283a 	ret

08006d18 <__locale_charset>:
 8006d18:	00820074 	movhi	r2,2049
 8006d1c:	1086da04 	addi	r2,r2,7016
 8006d20:	f800283a 	ret

08006d24 <__locale_mb_cur_max>:
 8006d24:	00820074 	movhi	r2,2049
 8006d28:	108bb204 	addi	r2,r2,11976
 8006d2c:	10800017 	ldw	r2,0(r2)
 8006d30:	f800283a 	ret

08006d34 <__locale_msgcharset>:
 8006d34:	00820074 	movhi	r2,2049
 8006d38:	1086d204 	addi	r2,r2,6984
 8006d3c:	f800283a 	ret

08006d40 <__locale_cjk_lang>:
 8006d40:	0005883a 	mov	r2,zero
 8006d44:	f800283a 	ret

08006d48 <_localeconv_r>:
 8006d48:	00820074 	movhi	r2,2049
 8006d4c:	1086e204 	addi	r2,r2,7048
 8006d50:	f800283a 	ret

08006d54 <setlocale>:
 8006d54:	00c20074 	movhi	r3,2049
 8006d58:	18cbaf04 	addi	r3,r3,11964
 8006d5c:	2005883a 	mov	r2,r4
 8006d60:	19000017 	ldw	r4,0(r3)
 8006d64:	280d883a 	mov	r6,r5
 8006d68:	100b883a 	mov	r5,r2
 8006d6c:	8006c9c1 	jmpi	8006c9c <_setlocale_r>

08006d70 <localeconv>:
 8006d70:	00820074 	movhi	r2,2049
 8006d74:	1086e204 	addi	r2,r2,7048
 8006d78:	f800283a 	ret

08006d7c <_lseek_r>:
 8006d7c:	defffd04 	addi	sp,sp,-12
 8006d80:	dc000015 	stw	r16,0(sp)
 8006d84:	04020074 	movhi	r16,2049
 8006d88:	dc400115 	stw	r17,4(sp)
 8006d8c:	8412b504 	addi	r16,r16,19156
 8006d90:	2023883a 	mov	r17,r4
 8006d94:	2809883a 	mov	r4,r5
 8006d98:	300b883a 	mov	r5,r6
 8006d9c:	380d883a 	mov	r6,r7
 8006da0:	dfc00215 	stw	ra,8(sp)
 8006da4:	80000015 	stw	zero,0(r16)
 8006da8:	800dd300 	call	800dd30 <lseek>
 8006dac:	00ffffc4 	movi	r3,-1
 8006db0:	10c00526 	beq	r2,r3,8006dc8 <_lseek_r+0x4c>
 8006db4:	dfc00217 	ldw	ra,8(sp)
 8006db8:	dc400117 	ldw	r17,4(sp)
 8006dbc:	dc000017 	ldw	r16,0(sp)
 8006dc0:	dec00304 	addi	sp,sp,12
 8006dc4:	f800283a 	ret
 8006dc8:	80c00017 	ldw	r3,0(r16)
 8006dcc:	183ff926 	beq	r3,zero,8006db4 <__alt_data_end+0xfc006db4>
 8006dd0:	88c00015 	stw	r3,0(r17)
 8006dd4:	003ff706 	br	8006db4 <__alt_data_end+0xfc006db4>

08006dd8 <memchr>:
 8006dd8:	208000cc 	andi	r2,r4,3
 8006ddc:	280f883a 	mov	r7,r5
 8006de0:	10003526 	beq	r2,zero,8006eb8 <memchr+0xe0>
 8006de4:	30bfffc4 	addi	r2,r6,-1
 8006de8:	30001b26 	beq	r6,zero,8006e58 <memchr+0x80>
 8006dec:	21800003 	ldbu	r6,0(r4)
 8006df0:	28c03fcc 	andi	r3,r5,255
 8006df4:	30c01a26 	beq	r6,r3,8006e60 <memchr+0x88>
 8006df8:	180d883a 	mov	r6,r3
 8006dfc:	00000406 	br	8006e10 <memchr+0x38>
 8006e00:	10001526 	beq	r2,zero,8006e58 <memchr+0x80>
 8006e04:	20c00003 	ldbu	r3,0(r4)
 8006e08:	10bfffc4 	addi	r2,r2,-1
 8006e0c:	19801426 	beq	r3,r6,8006e60 <memchr+0x88>
 8006e10:	21000044 	addi	r4,r4,1
 8006e14:	20c000cc 	andi	r3,r4,3
 8006e18:	183ff91e 	bne	r3,zero,8006e00 <__alt_data_end+0xfc006e00>
 8006e1c:	024000c4 	movi	r9,3
 8006e20:	48801136 	bltu	r9,r2,8006e68 <memchr+0x90>
 8006e24:	10000c26 	beq	r2,zero,8006e58 <memchr+0x80>
 8006e28:	20c00003 	ldbu	r3,0(r4)
 8006e2c:	29403fcc 	andi	r5,r5,255
 8006e30:	19400b26 	beq	r3,r5,8006e60 <memchr+0x88>
 8006e34:	20c00044 	addi	r3,r4,1
 8006e38:	2085883a 	add	r2,r4,r2
 8006e3c:	39803fcc 	andi	r6,r7,255
 8006e40:	00000306 	br	8006e50 <memchr+0x78>
 8006e44:	18c00044 	addi	r3,r3,1
 8006e48:	197fffc3 	ldbu	r5,-1(r3)
 8006e4c:	29800426 	beq	r5,r6,8006e60 <memchr+0x88>
 8006e50:	1809883a 	mov	r4,r3
 8006e54:	18bffb1e 	bne	r3,r2,8006e44 <__alt_data_end+0xfc006e44>
 8006e58:	0005883a 	mov	r2,zero
 8006e5c:	f800283a 	ret
 8006e60:	2005883a 	mov	r2,r4
 8006e64:	f800283a 	ret
 8006e68:	28c03fcc 	andi	r3,r5,255
 8006e6c:	1810923a 	slli	r8,r3,8
 8006e70:	02ffbff4 	movhi	r11,65279
 8006e74:	02a02074 	movhi	r10,32897
 8006e78:	40c6b03a 	or	r3,r8,r3
 8006e7c:	1810943a 	slli	r8,r3,16
 8006e80:	5affbfc4 	addi	r11,r11,-257
 8006e84:	52a02004 	addi	r10,r10,-32640
 8006e88:	40d0b03a 	or	r8,r8,r3
 8006e8c:	20c00017 	ldw	r3,0(r4)
 8006e90:	40c6f03a 	xor	r3,r8,r3
 8006e94:	1acd883a 	add	r6,r3,r11
 8006e98:	00c6303a 	nor	r3,zero,r3
 8006e9c:	30c6703a 	and	r3,r6,r3
 8006ea0:	1a86703a 	and	r3,r3,r10
 8006ea4:	183fdf1e 	bne	r3,zero,8006e24 <__alt_data_end+0xfc006e24>
 8006ea8:	10bfff04 	addi	r2,r2,-4
 8006eac:	21000104 	addi	r4,r4,4
 8006eb0:	48bff636 	bltu	r9,r2,8006e8c <__alt_data_end+0xfc006e8c>
 8006eb4:	003fdb06 	br	8006e24 <__alt_data_end+0xfc006e24>
 8006eb8:	3005883a 	mov	r2,r6
 8006ebc:	003fd706 	br	8006e1c <__alt_data_end+0xfc006e1c>

08006ec0 <memmove>:
 8006ec0:	2005883a 	mov	r2,r4
 8006ec4:	29000b2e 	bgeu	r5,r4,8006ef4 <memmove+0x34>
 8006ec8:	298f883a 	add	r7,r5,r6
 8006ecc:	21c0092e 	bgeu	r4,r7,8006ef4 <memmove+0x34>
 8006ed0:	2187883a 	add	r3,r4,r6
 8006ed4:	198bc83a 	sub	r5,r3,r6
 8006ed8:	30004b26 	beq	r6,zero,8007008 <memmove+0x148>
 8006edc:	39ffffc4 	addi	r7,r7,-1
 8006ee0:	39000003 	ldbu	r4,0(r7)
 8006ee4:	18ffffc4 	addi	r3,r3,-1
 8006ee8:	19000005 	stb	r4,0(r3)
 8006eec:	197ffb1e 	bne	r3,r5,8006edc <__alt_data_end+0xfc006edc>
 8006ef0:	f800283a 	ret
 8006ef4:	00c003c4 	movi	r3,15
 8006ef8:	1980412e 	bgeu	r3,r6,8007000 <memmove+0x140>
 8006efc:	1146b03a 	or	r3,r2,r5
 8006f00:	18c000cc 	andi	r3,r3,3
 8006f04:	1800411e 	bne	r3,zero,800700c <memmove+0x14c>
 8006f08:	33fffc04 	addi	r15,r6,-16
 8006f0c:	781ed13a 	srli	r15,r15,4
 8006f10:	28c00104 	addi	r3,r5,4
 8006f14:	13400104 	addi	r13,r2,4
 8006f18:	781c913a 	slli	r14,r15,4
 8006f1c:	2b000204 	addi	r12,r5,8
 8006f20:	12c00204 	addi	r11,r2,8
 8006f24:	73800504 	addi	r14,r14,20
 8006f28:	2a800304 	addi	r10,r5,12
 8006f2c:	12400304 	addi	r9,r2,12
 8006f30:	2b9d883a 	add	r14,r5,r14
 8006f34:	2811883a 	mov	r8,r5
 8006f38:	100f883a 	mov	r7,r2
 8006f3c:	41000017 	ldw	r4,0(r8)
 8006f40:	39c00404 	addi	r7,r7,16
 8006f44:	18c00404 	addi	r3,r3,16
 8006f48:	393ffc15 	stw	r4,-16(r7)
 8006f4c:	193ffc17 	ldw	r4,-16(r3)
 8006f50:	6b400404 	addi	r13,r13,16
 8006f54:	5ac00404 	addi	r11,r11,16
 8006f58:	693ffc15 	stw	r4,-16(r13)
 8006f5c:	61000017 	ldw	r4,0(r12)
 8006f60:	4a400404 	addi	r9,r9,16
 8006f64:	42000404 	addi	r8,r8,16
 8006f68:	593ffc15 	stw	r4,-16(r11)
 8006f6c:	51000017 	ldw	r4,0(r10)
 8006f70:	63000404 	addi	r12,r12,16
 8006f74:	52800404 	addi	r10,r10,16
 8006f78:	493ffc15 	stw	r4,-16(r9)
 8006f7c:	1bbfef1e 	bne	r3,r14,8006f3c <__alt_data_end+0xfc006f3c>
 8006f80:	79000044 	addi	r4,r15,1
 8006f84:	2008913a 	slli	r4,r4,4
 8006f88:	328003cc 	andi	r10,r6,15
 8006f8c:	02c000c4 	movi	r11,3
 8006f90:	1107883a 	add	r3,r2,r4
 8006f94:	290b883a 	add	r5,r5,r4
 8006f98:	5a801e2e 	bgeu	r11,r10,8007014 <memmove+0x154>
 8006f9c:	1813883a 	mov	r9,r3
 8006fa0:	2811883a 	mov	r8,r5
 8006fa4:	500f883a 	mov	r7,r10
 8006fa8:	41000017 	ldw	r4,0(r8)
 8006fac:	4a400104 	addi	r9,r9,4
 8006fb0:	39ffff04 	addi	r7,r7,-4
 8006fb4:	493fff15 	stw	r4,-4(r9)
 8006fb8:	42000104 	addi	r8,r8,4
 8006fbc:	59fffa36 	bltu	r11,r7,8006fa8 <__alt_data_end+0xfc006fa8>
 8006fc0:	513fff04 	addi	r4,r10,-4
 8006fc4:	2008d0ba 	srli	r4,r4,2
 8006fc8:	318000cc 	andi	r6,r6,3
 8006fcc:	21000044 	addi	r4,r4,1
 8006fd0:	2109883a 	add	r4,r4,r4
 8006fd4:	2109883a 	add	r4,r4,r4
 8006fd8:	1907883a 	add	r3,r3,r4
 8006fdc:	290b883a 	add	r5,r5,r4
 8006fe0:	30000926 	beq	r6,zero,8007008 <memmove+0x148>
 8006fe4:	198d883a 	add	r6,r3,r6
 8006fe8:	29c00003 	ldbu	r7,0(r5)
 8006fec:	18c00044 	addi	r3,r3,1
 8006ff0:	29400044 	addi	r5,r5,1
 8006ff4:	19ffffc5 	stb	r7,-1(r3)
 8006ff8:	19bffb1e 	bne	r3,r6,8006fe8 <__alt_data_end+0xfc006fe8>
 8006ffc:	f800283a 	ret
 8007000:	1007883a 	mov	r3,r2
 8007004:	003ff606 	br	8006fe0 <__alt_data_end+0xfc006fe0>
 8007008:	f800283a 	ret
 800700c:	1007883a 	mov	r3,r2
 8007010:	003ff406 	br	8006fe4 <__alt_data_end+0xfc006fe4>
 8007014:	500d883a 	mov	r6,r10
 8007018:	003ff106 	br	8006fe0 <__alt_data_end+0xfc006fe0>

0800701c <_Balloc>:
 800701c:	20801317 	ldw	r2,76(r4)
 8007020:	defffc04 	addi	sp,sp,-16
 8007024:	dc400115 	stw	r17,4(sp)
 8007028:	dc000015 	stw	r16,0(sp)
 800702c:	dfc00315 	stw	ra,12(sp)
 8007030:	dc800215 	stw	r18,8(sp)
 8007034:	2023883a 	mov	r17,r4
 8007038:	2821883a 	mov	r16,r5
 800703c:	10000f26 	beq	r2,zero,800707c <_Balloc+0x60>
 8007040:	8407883a 	add	r3,r16,r16
 8007044:	18c7883a 	add	r3,r3,r3
 8007048:	10c7883a 	add	r3,r2,r3
 800704c:	18800017 	ldw	r2,0(r3)
 8007050:	10001126 	beq	r2,zero,8007098 <_Balloc+0x7c>
 8007054:	11000017 	ldw	r4,0(r2)
 8007058:	19000015 	stw	r4,0(r3)
 800705c:	10000415 	stw	zero,16(r2)
 8007060:	10000315 	stw	zero,12(r2)
 8007064:	dfc00317 	ldw	ra,12(sp)
 8007068:	dc800217 	ldw	r18,8(sp)
 800706c:	dc400117 	ldw	r17,4(sp)
 8007070:	dc000017 	ldw	r16,0(sp)
 8007074:	dec00404 	addi	sp,sp,16
 8007078:	f800283a 	ret
 800707c:	01400104 	movi	r5,4
 8007080:	01800844 	movi	r6,33
 8007084:	8009cd40 	call	8009cd4 <_calloc_r>
 8007088:	88801315 	stw	r2,76(r17)
 800708c:	103fec1e 	bne	r2,zero,8007040 <__alt_data_end+0xfc007040>
 8007090:	0005883a 	mov	r2,zero
 8007094:	003ff306 	br	8007064 <__alt_data_end+0xfc007064>
 8007098:	01400044 	movi	r5,1
 800709c:	2c24983a 	sll	r18,r5,r16
 80070a0:	8809883a 	mov	r4,r17
 80070a4:	91800144 	addi	r6,r18,5
 80070a8:	318d883a 	add	r6,r6,r6
 80070ac:	318d883a 	add	r6,r6,r6
 80070b0:	8009cd40 	call	8009cd4 <_calloc_r>
 80070b4:	103ff626 	beq	r2,zero,8007090 <__alt_data_end+0xfc007090>
 80070b8:	14000115 	stw	r16,4(r2)
 80070bc:	14800215 	stw	r18,8(r2)
 80070c0:	003fe606 	br	800705c <__alt_data_end+0xfc00705c>

080070c4 <_Bfree>:
 80070c4:	28000826 	beq	r5,zero,80070e8 <_Bfree+0x24>
 80070c8:	28c00117 	ldw	r3,4(r5)
 80070cc:	20801317 	ldw	r2,76(r4)
 80070d0:	18c7883a 	add	r3,r3,r3
 80070d4:	18c7883a 	add	r3,r3,r3
 80070d8:	10c5883a 	add	r2,r2,r3
 80070dc:	10c00017 	ldw	r3,0(r2)
 80070e0:	28c00015 	stw	r3,0(r5)
 80070e4:	11400015 	stw	r5,0(r2)
 80070e8:	f800283a 	ret

080070ec <__multadd>:
 80070ec:	defff704 	addi	sp,sp,-36
 80070f0:	dc800215 	stw	r18,8(sp)
 80070f4:	2c800417 	ldw	r18,16(r5)
 80070f8:	ddc00715 	stw	r23,28(sp)
 80070fc:	dd800615 	stw	r22,24(sp)
 8007100:	dd000415 	stw	r20,16(sp)
 8007104:	dcc00315 	stw	r19,12(sp)
 8007108:	dc400115 	stw	r17,4(sp)
 800710c:	dc000015 	stw	r16,0(sp)
 8007110:	dfc00815 	stw	ra,32(sp)
 8007114:	dd400515 	stw	r21,20(sp)
 8007118:	2827883a 	mov	r19,r5
 800711c:	2029883a 	mov	r20,r4
 8007120:	3023883a 	mov	r17,r6
 8007124:	3821883a 	mov	r16,r7
 8007128:	2d800504 	addi	r22,r5,20
 800712c:	002f883a 	mov	r23,zero
 8007130:	b5400017 	ldw	r21,0(r22)
 8007134:	880b883a 	mov	r5,r17
 8007138:	bdc00044 	addi	r23,r23,1
 800713c:	a93fffcc 	andi	r4,r21,65535
 8007140:	800b0800 	call	800b080 <__mulsi3>
 8007144:	1421883a 	add	r16,r2,r16
 8007148:	a808d43a 	srli	r4,r21,16
 800714c:	802ad43a 	srli	r21,r16,16
 8007150:	880b883a 	mov	r5,r17
 8007154:	800b0800 	call	800b080 <__mulsi3>
 8007158:	a88f883a 	add	r7,r21,r2
 800715c:	3804943a 	slli	r2,r7,16
 8007160:	80ffffcc 	andi	r3,r16,65535
 8007164:	b5800104 	addi	r22,r22,4
 8007168:	10c7883a 	add	r3,r2,r3
 800716c:	b0ffff15 	stw	r3,-4(r22)
 8007170:	3820d43a 	srli	r16,r7,16
 8007174:	bcbfee16 	blt	r23,r18,8007130 <__alt_data_end+0xfc007130>
 8007178:	80000926 	beq	r16,zero,80071a0 <__multadd+0xb4>
 800717c:	98800217 	ldw	r2,8(r19)
 8007180:	9080130e 	bge	r18,r2,80071d0 <__multadd+0xe4>
 8007184:	90800144 	addi	r2,r18,5
 8007188:	1085883a 	add	r2,r2,r2
 800718c:	1085883a 	add	r2,r2,r2
 8007190:	9885883a 	add	r2,r19,r2
 8007194:	14000015 	stw	r16,0(r2)
 8007198:	94800044 	addi	r18,r18,1
 800719c:	9c800415 	stw	r18,16(r19)
 80071a0:	9805883a 	mov	r2,r19
 80071a4:	dfc00817 	ldw	ra,32(sp)
 80071a8:	ddc00717 	ldw	r23,28(sp)
 80071ac:	dd800617 	ldw	r22,24(sp)
 80071b0:	dd400517 	ldw	r21,20(sp)
 80071b4:	dd000417 	ldw	r20,16(sp)
 80071b8:	dcc00317 	ldw	r19,12(sp)
 80071bc:	dc800217 	ldw	r18,8(sp)
 80071c0:	dc400117 	ldw	r17,4(sp)
 80071c4:	dc000017 	ldw	r16,0(sp)
 80071c8:	dec00904 	addi	sp,sp,36
 80071cc:	f800283a 	ret
 80071d0:	99400117 	ldw	r5,4(r19)
 80071d4:	a009883a 	mov	r4,r20
 80071d8:	29400044 	addi	r5,r5,1
 80071dc:	800701c0 	call	800701c <_Balloc>
 80071e0:	99800417 	ldw	r6,16(r19)
 80071e4:	99400304 	addi	r5,r19,12
 80071e8:	11000304 	addi	r4,r2,12
 80071ec:	31800084 	addi	r6,r6,2
 80071f0:	318d883a 	add	r6,r6,r6
 80071f4:	318d883a 	add	r6,r6,r6
 80071f8:	1023883a 	mov	r17,r2
 80071fc:	80022dc0 	call	80022dc <memcpy>
 8007200:	99000117 	ldw	r4,4(r19)
 8007204:	a0c01317 	ldw	r3,76(r20)
 8007208:	2109883a 	add	r4,r4,r4
 800720c:	2109883a 	add	r4,r4,r4
 8007210:	1907883a 	add	r3,r3,r4
 8007214:	18800017 	ldw	r2,0(r3)
 8007218:	98800015 	stw	r2,0(r19)
 800721c:	1cc00015 	stw	r19,0(r3)
 8007220:	8827883a 	mov	r19,r17
 8007224:	003fd706 	br	8007184 <__alt_data_end+0xfc007184>

08007228 <__s2b>:
 8007228:	defff904 	addi	sp,sp,-28
 800722c:	dc400115 	stw	r17,4(sp)
 8007230:	dc000015 	stw	r16,0(sp)
 8007234:	2023883a 	mov	r17,r4
 8007238:	2821883a 	mov	r16,r5
 800723c:	39000204 	addi	r4,r7,8
 8007240:	01400244 	movi	r5,9
 8007244:	dcc00315 	stw	r19,12(sp)
 8007248:	dc800215 	stw	r18,8(sp)
 800724c:	dfc00615 	stw	ra,24(sp)
 8007250:	dd400515 	stw	r21,20(sp)
 8007254:	dd000415 	stw	r20,16(sp)
 8007258:	3825883a 	mov	r18,r7
 800725c:	3027883a 	mov	r19,r6
 8007260:	800afc00 	call	800afc0 <__divsi3>
 8007264:	00c00044 	movi	r3,1
 8007268:	000b883a 	mov	r5,zero
 800726c:	1880030e 	bge	r3,r2,800727c <__s2b+0x54>
 8007270:	18c7883a 	add	r3,r3,r3
 8007274:	29400044 	addi	r5,r5,1
 8007278:	18bffd16 	blt	r3,r2,8007270 <__alt_data_end+0xfc007270>
 800727c:	8809883a 	mov	r4,r17
 8007280:	800701c0 	call	800701c <_Balloc>
 8007284:	d8c00717 	ldw	r3,28(sp)
 8007288:	10c00515 	stw	r3,20(r2)
 800728c:	00c00044 	movi	r3,1
 8007290:	10c00415 	stw	r3,16(r2)
 8007294:	00c00244 	movi	r3,9
 8007298:	1cc0210e 	bge	r3,r19,8007320 <__s2b+0xf8>
 800729c:	80eb883a 	add	r21,r16,r3
 80072a0:	a829883a 	mov	r20,r21
 80072a4:	84e1883a 	add	r16,r16,r19
 80072a8:	a1c00007 	ldb	r7,0(r20)
 80072ac:	8809883a 	mov	r4,r17
 80072b0:	a5000044 	addi	r20,r20,1
 80072b4:	100b883a 	mov	r5,r2
 80072b8:	01800284 	movi	r6,10
 80072bc:	39fff404 	addi	r7,r7,-48
 80072c0:	80070ec0 	call	80070ec <__multadd>
 80072c4:	a43ff81e 	bne	r20,r16,80072a8 <__alt_data_end+0xfc0072a8>
 80072c8:	ace1883a 	add	r16,r21,r19
 80072cc:	843ffe04 	addi	r16,r16,-8
 80072d0:	9c800a0e 	bge	r19,r18,80072fc <__s2b+0xd4>
 80072d4:	94e5c83a 	sub	r18,r18,r19
 80072d8:	84a5883a 	add	r18,r16,r18
 80072dc:	81c00007 	ldb	r7,0(r16)
 80072e0:	8809883a 	mov	r4,r17
 80072e4:	84000044 	addi	r16,r16,1
 80072e8:	100b883a 	mov	r5,r2
 80072ec:	01800284 	movi	r6,10
 80072f0:	39fff404 	addi	r7,r7,-48
 80072f4:	80070ec0 	call	80070ec <__multadd>
 80072f8:	84bff81e 	bne	r16,r18,80072dc <__alt_data_end+0xfc0072dc>
 80072fc:	dfc00617 	ldw	ra,24(sp)
 8007300:	dd400517 	ldw	r21,20(sp)
 8007304:	dd000417 	ldw	r20,16(sp)
 8007308:	dcc00317 	ldw	r19,12(sp)
 800730c:	dc800217 	ldw	r18,8(sp)
 8007310:	dc400117 	ldw	r17,4(sp)
 8007314:	dc000017 	ldw	r16,0(sp)
 8007318:	dec00704 	addi	sp,sp,28
 800731c:	f800283a 	ret
 8007320:	84000284 	addi	r16,r16,10
 8007324:	1827883a 	mov	r19,r3
 8007328:	003fe906 	br	80072d0 <__alt_data_end+0xfc0072d0>

0800732c <__hi0bits>:
 800732c:	20bfffec 	andhi	r2,r4,65535
 8007330:	1000141e 	bne	r2,zero,8007384 <__hi0bits+0x58>
 8007334:	2008943a 	slli	r4,r4,16
 8007338:	00800404 	movi	r2,16
 800733c:	20ffc02c 	andhi	r3,r4,65280
 8007340:	1800021e 	bne	r3,zero,800734c <__hi0bits+0x20>
 8007344:	2008923a 	slli	r4,r4,8
 8007348:	10800204 	addi	r2,r2,8
 800734c:	20fc002c 	andhi	r3,r4,61440
 8007350:	1800021e 	bne	r3,zero,800735c <__hi0bits+0x30>
 8007354:	2008913a 	slli	r4,r4,4
 8007358:	10800104 	addi	r2,r2,4
 800735c:	20f0002c 	andhi	r3,r4,49152
 8007360:	1800031e 	bne	r3,zero,8007370 <__hi0bits+0x44>
 8007364:	2109883a 	add	r4,r4,r4
 8007368:	10800084 	addi	r2,r2,2
 800736c:	2109883a 	add	r4,r4,r4
 8007370:	20000316 	blt	r4,zero,8007380 <__hi0bits+0x54>
 8007374:	2110002c 	andhi	r4,r4,16384
 8007378:	2000041e 	bne	r4,zero,800738c <__hi0bits+0x60>
 800737c:	00800804 	movi	r2,32
 8007380:	f800283a 	ret
 8007384:	0005883a 	mov	r2,zero
 8007388:	003fec06 	br	800733c <__alt_data_end+0xfc00733c>
 800738c:	10800044 	addi	r2,r2,1
 8007390:	f800283a 	ret

08007394 <__lo0bits>:
 8007394:	20c00017 	ldw	r3,0(r4)
 8007398:	188001cc 	andi	r2,r3,7
 800739c:	10000826 	beq	r2,zero,80073c0 <__lo0bits+0x2c>
 80073a0:	1880004c 	andi	r2,r3,1
 80073a4:	1000211e 	bne	r2,zero,800742c <__lo0bits+0x98>
 80073a8:	1880008c 	andi	r2,r3,2
 80073ac:	1000211e 	bne	r2,zero,8007434 <__lo0bits+0xa0>
 80073b0:	1806d0ba 	srli	r3,r3,2
 80073b4:	00800084 	movi	r2,2
 80073b8:	20c00015 	stw	r3,0(r4)
 80073bc:	f800283a 	ret
 80073c0:	18bfffcc 	andi	r2,r3,65535
 80073c4:	10001326 	beq	r2,zero,8007414 <__lo0bits+0x80>
 80073c8:	0005883a 	mov	r2,zero
 80073cc:	19403fcc 	andi	r5,r3,255
 80073d0:	2800021e 	bne	r5,zero,80073dc <__lo0bits+0x48>
 80073d4:	1806d23a 	srli	r3,r3,8
 80073d8:	10800204 	addi	r2,r2,8
 80073dc:	194003cc 	andi	r5,r3,15
 80073e0:	2800021e 	bne	r5,zero,80073ec <__lo0bits+0x58>
 80073e4:	1806d13a 	srli	r3,r3,4
 80073e8:	10800104 	addi	r2,r2,4
 80073ec:	194000cc 	andi	r5,r3,3
 80073f0:	2800021e 	bne	r5,zero,80073fc <__lo0bits+0x68>
 80073f4:	1806d0ba 	srli	r3,r3,2
 80073f8:	10800084 	addi	r2,r2,2
 80073fc:	1940004c 	andi	r5,r3,1
 8007400:	2800081e 	bne	r5,zero,8007424 <__lo0bits+0x90>
 8007404:	1806d07a 	srli	r3,r3,1
 8007408:	1800051e 	bne	r3,zero,8007420 <__lo0bits+0x8c>
 800740c:	00800804 	movi	r2,32
 8007410:	f800283a 	ret
 8007414:	1806d43a 	srli	r3,r3,16
 8007418:	00800404 	movi	r2,16
 800741c:	003feb06 	br	80073cc <__alt_data_end+0xfc0073cc>
 8007420:	10800044 	addi	r2,r2,1
 8007424:	20c00015 	stw	r3,0(r4)
 8007428:	f800283a 	ret
 800742c:	0005883a 	mov	r2,zero
 8007430:	f800283a 	ret
 8007434:	1806d07a 	srli	r3,r3,1
 8007438:	00800044 	movi	r2,1
 800743c:	20c00015 	stw	r3,0(r4)
 8007440:	f800283a 	ret

08007444 <__i2b>:
 8007444:	defffd04 	addi	sp,sp,-12
 8007448:	dc000015 	stw	r16,0(sp)
 800744c:	04000044 	movi	r16,1
 8007450:	dc400115 	stw	r17,4(sp)
 8007454:	2823883a 	mov	r17,r5
 8007458:	800b883a 	mov	r5,r16
 800745c:	dfc00215 	stw	ra,8(sp)
 8007460:	800701c0 	call	800701c <_Balloc>
 8007464:	14400515 	stw	r17,20(r2)
 8007468:	14000415 	stw	r16,16(r2)
 800746c:	dfc00217 	ldw	ra,8(sp)
 8007470:	dc400117 	ldw	r17,4(sp)
 8007474:	dc000017 	ldw	r16,0(sp)
 8007478:	dec00304 	addi	sp,sp,12
 800747c:	f800283a 	ret

08007480 <__multiply>:
 8007480:	deffef04 	addi	sp,sp,-68
 8007484:	dc400815 	stw	r17,32(sp)
 8007488:	dc000715 	stw	r16,28(sp)
 800748c:	2c400417 	ldw	r17,16(r5)
 8007490:	34000417 	ldw	r16,16(r6)
 8007494:	dd800d15 	stw	r22,52(sp)
 8007498:	dc800915 	stw	r18,36(sp)
 800749c:	dfc01015 	stw	ra,64(sp)
 80074a0:	df000f15 	stw	fp,60(sp)
 80074a4:	ddc00e15 	stw	r23,56(sp)
 80074a8:	dd400c15 	stw	r21,48(sp)
 80074ac:	dd000b15 	stw	r20,44(sp)
 80074b0:	dcc00a15 	stw	r19,40(sp)
 80074b4:	2825883a 	mov	r18,r5
 80074b8:	302d883a 	mov	r22,r6
 80074bc:	8c009116 	blt	r17,r16,8007704 <__multiply+0x284>
 80074c0:	8005883a 	mov	r2,r16
 80074c4:	8821883a 	mov	r16,r17
 80074c8:	1023883a 	mov	r17,r2
 80074cc:	90800217 	ldw	r2,8(r18)
 80074d0:	8447883a 	add	r3,r16,r17
 80074d4:	d8c00215 	stw	r3,8(sp)
 80074d8:	91400117 	ldw	r5,4(r18)
 80074dc:	10c0010e 	bge	r2,r3,80074e4 <__multiply+0x64>
 80074e0:	29400044 	addi	r5,r5,1
 80074e4:	800701c0 	call	800701c <_Balloc>
 80074e8:	d8c00217 	ldw	r3,8(sp)
 80074ec:	d8800615 	stw	r2,24(sp)
 80074f0:	18eb883a 	add	r21,r3,r3
 80074f4:	ad6b883a 	add	r21,r21,r21
 80074f8:	10c00504 	addi	r3,r2,20
 80074fc:	1d6b883a 	add	r21,r3,r21
 8007500:	d8c00115 	stw	r3,4(sp)
 8007504:	dd400315 	stw	r21,12(sp)
 8007508:	1805883a 	mov	r2,r3
 800750c:	1d40042e 	bgeu	r3,r21,8007520 <__multiply+0xa0>
 8007510:	d8c00317 	ldw	r3,12(sp)
 8007514:	10000015 	stw	zero,0(r2)
 8007518:	10800104 	addi	r2,r2,4
 800751c:	10fffc36 	bltu	r2,r3,8007510 <__alt_data_end+0xfc007510>
 8007520:	8c63883a 	add	r17,r17,r17
 8007524:	b5800504 	addi	r22,r22,20
 8007528:	8c63883a 	add	r17,r17,r17
 800752c:	94800504 	addi	r18,r18,20
 8007530:	8421883a 	add	r16,r16,r16
 8007534:	b463883a 	add	r17,r22,r17
 8007538:	8421883a 	add	r16,r16,r16
 800753c:	dd800015 	stw	r22,0(sp)
 8007540:	dc800415 	stw	r18,16(sp)
 8007544:	dc400515 	stw	r17,20(sp)
 8007548:	9429883a 	add	r20,r18,r16
 800754c:	b4404f2e 	bgeu	r22,r17,800768c <__multiply+0x20c>
 8007550:	d8c00017 	ldw	r3,0(sp)
 8007554:	1c800017 	ldw	r18,0(r3)
 8007558:	943fffcc 	andi	r16,r18,65535
 800755c:	80001e26 	beq	r16,zero,80075d8 <__multiply+0x158>
 8007560:	dd800117 	ldw	r22,4(sp)
 8007564:	dd400417 	ldw	r21,16(sp)
 8007568:	0025883a 	mov	r18,zero
 800756c:	adc00017 	ldw	r23,0(r21)
 8007570:	b4c00017 	ldw	r19,0(r22)
 8007574:	800b883a 	mov	r5,r16
 8007578:	b93fffcc 	andi	r4,r23,65535
 800757c:	800b0800 	call	800b080 <__mulsi3>
 8007580:	9c7fffcc 	andi	r17,r19,65535
 8007584:	8885883a 	add	r2,r17,r2
 8007588:	b808d43a 	srli	r4,r23,16
 800758c:	14a3883a 	add	r17,r2,r18
 8007590:	9826d43a 	srli	r19,r19,16
 8007594:	8824d43a 	srli	r18,r17,16
 8007598:	800b883a 	mov	r5,r16
 800759c:	800b0800 	call	800b080 <__mulsi3>
 80075a0:	9885883a 	add	r2,r19,r2
 80075a4:	14a7883a 	add	r19,r2,r18
 80075a8:	88ffffcc 	andi	r3,r17,65535
 80075ac:	9822943a 	slli	r17,r19,16
 80075b0:	ad400104 	addi	r21,r21,4
 80075b4:	b005883a 	mov	r2,r22
 80075b8:	88c6b03a 	or	r3,r17,r3
 80075bc:	b0c00015 	stw	r3,0(r22)
 80075c0:	9824d43a 	srli	r18,r19,16
 80075c4:	b5800104 	addi	r22,r22,4
 80075c8:	ad3fe836 	bltu	r21,r20,800756c <__alt_data_end+0xfc00756c>
 80075cc:	d8c00017 	ldw	r3,0(sp)
 80075d0:	14800115 	stw	r18,4(r2)
 80075d4:	1c800017 	ldw	r18,0(r3)
 80075d8:	9024d43a 	srli	r18,r18,16
 80075dc:	90002226 	beq	r18,zero,8007668 <__multiply+0x1e8>
 80075e0:	d8c00117 	ldw	r3,4(sp)
 80075e4:	dd800417 	ldw	r22,16(sp)
 80075e8:	002f883a 	mov	r23,zero
 80075ec:	1f000017 	ldw	fp,0(r3)
 80075f0:	1823883a 	mov	r17,r3
 80075f4:	182b883a 	mov	r21,r3
 80075f8:	e021883a 	mov	r16,fp
 80075fc:	00000106 	br	8007604 <__multiply+0x184>
 8007600:	982b883a 	mov	r21,r19
 8007604:	b100000b 	ldhu	r4,0(r22)
 8007608:	8020d43a 	srli	r16,r16,16
 800760c:	900b883a 	mov	r5,r18
 8007610:	800b0800 	call	800b080 <__mulsi3>
 8007614:	1405883a 	add	r2,r2,r16
 8007618:	15ef883a 	add	r23,r2,r23
 800761c:	b804943a 	slli	r2,r23,16
 8007620:	e0ffffcc 	andi	r3,fp,65535
 8007624:	8c400104 	addi	r17,r17,4
 8007628:	10c6b03a 	or	r3,r2,r3
 800762c:	88ffff15 	stw	r3,-4(r17)
 8007630:	b5800104 	addi	r22,r22,4
 8007634:	b13fff17 	ldw	r4,-4(r22)
 8007638:	acc00104 	addi	r19,r21,4
 800763c:	900b883a 	mov	r5,r18
 8007640:	2008d43a 	srli	r4,r4,16
 8007644:	9c000017 	ldw	r16,0(r19)
 8007648:	800b0800 	call	800b080 <__mulsi3>
 800764c:	b806d43a 	srli	r3,r23,16
 8007650:	813fffcc 	andi	r4,r16,65535
 8007654:	1105883a 	add	r2,r2,r4
 8007658:	10f9883a 	add	fp,r2,r3
 800765c:	e02ed43a 	srli	r23,fp,16
 8007660:	b53fe736 	bltu	r22,r20,8007600 <__alt_data_end+0xfc007600>
 8007664:	af000115 	stw	fp,4(r21)
 8007668:	d8c00017 	ldw	r3,0(sp)
 800766c:	d9000517 	ldw	r4,20(sp)
 8007670:	18c00104 	addi	r3,r3,4
 8007674:	d8c00015 	stw	r3,0(sp)
 8007678:	d8c00117 	ldw	r3,4(sp)
 800767c:	18c00104 	addi	r3,r3,4
 8007680:	d8c00115 	stw	r3,4(sp)
 8007684:	d8c00017 	ldw	r3,0(sp)
 8007688:	193fb136 	bltu	r3,r4,8007550 <__alt_data_end+0xfc007550>
 800768c:	d8c00217 	ldw	r3,8(sp)
 8007690:	00c00c0e 	bge	zero,r3,80076c4 <__multiply+0x244>
 8007694:	d8c00317 	ldw	r3,12(sp)
 8007698:	18bfff17 	ldw	r2,-4(r3)
 800769c:	1d7fff04 	addi	r21,r3,-4
 80076a0:	10000326 	beq	r2,zero,80076b0 <__multiply+0x230>
 80076a4:	00000706 	br	80076c4 <__multiply+0x244>
 80076a8:	a8800017 	ldw	r2,0(r21)
 80076ac:	1000051e 	bne	r2,zero,80076c4 <__multiply+0x244>
 80076b0:	d8c00217 	ldw	r3,8(sp)
 80076b4:	ad7fff04 	addi	r21,r21,-4
 80076b8:	18ffffc4 	addi	r3,r3,-1
 80076bc:	d8c00215 	stw	r3,8(sp)
 80076c0:	183ff91e 	bne	r3,zero,80076a8 <__alt_data_end+0xfc0076a8>
 80076c4:	d8c00617 	ldw	r3,24(sp)
 80076c8:	d9000217 	ldw	r4,8(sp)
 80076cc:	1805883a 	mov	r2,r3
 80076d0:	19000415 	stw	r4,16(r3)
 80076d4:	dfc01017 	ldw	ra,64(sp)
 80076d8:	df000f17 	ldw	fp,60(sp)
 80076dc:	ddc00e17 	ldw	r23,56(sp)
 80076e0:	dd800d17 	ldw	r22,52(sp)
 80076e4:	dd400c17 	ldw	r21,48(sp)
 80076e8:	dd000b17 	ldw	r20,44(sp)
 80076ec:	dcc00a17 	ldw	r19,40(sp)
 80076f0:	dc800917 	ldw	r18,36(sp)
 80076f4:	dc400817 	ldw	r17,32(sp)
 80076f8:	dc000717 	ldw	r16,28(sp)
 80076fc:	dec01104 	addi	sp,sp,68
 8007700:	f800283a 	ret
 8007704:	3025883a 	mov	r18,r6
 8007708:	282d883a 	mov	r22,r5
 800770c:	003f6f06 	br	80074cc <__alt_data_end+0xfc0074cc>

08007710 <__pow5mult>:
 8007710:	defffa04 	addi	sp,sp,-24
 8007714:	dcc00315 	stw	r19,12(sp)
 8007718:	dc800215 	stw	r18,8(sp)
 800771c:	dc000015 	stw	r16,0(sp)
 8007720:	dfc00515 	stw	ra,20(sp)
 8007724:	dd000415 	stw	r20,16(sp)
 8007728:	dc400115 	stw	r17,4(sp)
 800772c:	308000cc 	andi	r2,r6,3
 8007730:	3021883a 	mov	r16,r6
 8007734:	2027883a 	mov	r19,r4
 8007738:	2825883a 	mov	r18,r5
 800773c:	10002e1e 	bne	r2,zero,80077f8 <__pow5mult+0xe8>
 8007740:	8021d0ba 	srai	r16,r16,2
 8007744:	80001a26 	beq	r16,zero,80077b0 <__pow5mult+0xa0>
 8007748:	9c401217 	ldw	r17,72(r19)
 800774c:	8800061e 	bne	r17,zero,8007768 <__pow5mult+0x58>
 8007750:	00003406 	br	8007824 <__pow5mult+0x114>
 8007754:	8021d07a 	srai	r16,r16,1
 8007758:	80001526 	beq	r16,zero,80077b0 <__pow5mult+0xa0>
 800775c:	88800017 	ldw	r2,0(r17)
 8007760:	10001c26 	beq	r2,zero,80077d4 <__pow5mult+0xc4>
 8007764:	1023883a 	mov	r17,r2
 8007768:	80c0004c 	andi	r3,r16,1
 800776c:	183ff926 	beq	r3,zero,8007754 <__alt_data_end+0xfc007754>
 8007770:	900b883a 	mov	r5,r18
 8007774:	880d883a 	mov	r6,r17
 8007778:	9809883a 	mov	r4,r19
 800777c:	80074800 	call	8007480 <__multiply>
 8007780:	90001b26 	beq	r18,zero,80077f0 <__pow5mult+0xe0>
 8007784:	91c00117 	ldw	r7,4(r18)
 8007788:	98c01317 	ldw	r3,76(r19)
 800778c:	8021d07a 	srai	r16,r16,1
 8007790:	39cf883a 	add	r7,r7,r7
 8007794:	39cf883a 	add	r7,r7,r7
 8007798:	19c7883a 	add	r3,r3,r7
 800779c:	19000017 	ldw	r4,0(r3)
 80077a0:	91000015 	stw	r4,0(r18)
 80077a4:	1c800015 	stw	r18,0(r3)
 80077a8:	1025883a 	mov	r18,r2
 80077ac:	803feb1e 	bne	r16,zero,800775c <__alt_data_end+0xfc00775c>
 80077b0:	9005883a 	mov	r2,r18
 80077b4:	dfc00517 	ldw	ra,20(sp)
 80077b8:	dd000417 	ldw	r20,16(sp)
 80077bc:	dcc00317 	ldw	r19,12(sp)
 80077c0:	dc800217 	ldw	r18,8(sp)
 80077c4:	dc400117 	ldw	r17,4(sp)
 80077c8:	dc000017 	ldw	r16,0(sp)
 80077cc:	dec00604 	addi	sp,sp,24
 80077d0:	f800283a 	ret
 80077d4:	9809883a 	mov	r4,r19
 80077d8:	880b883a 	mov	r5,r17
 80077dc:	880d883a 	mov	r6,r17
 80077e0:	80074800 	call	8007480 <__multiply>
 80077e4:	88800015 	stw	r2,0(r17)
 80077e8:	10000015 	stw	zero,0(r2)
 80077ec:	003fdd06 	br	8007764 <__alt_data_end+0xfc007764>
 80077f0:	1025883a 	mov	r18,r2
 80077f4:	003fd706 	br	8007754 <__alt_data_end+0xfc007754>
 80077f8:	10bfffc4 	addi	r2,r2,-1
 80077fc:	1085883a 	add	r2,r2,r2
 8007800:	00c20074 	movhi	r3,2049
 8007804:	18c42004 	addi	r3,r3,4224
 8007808:	1085883a 	add	r2,r2,r2
 800780c:	1885883a 	add	r2,r3,r2
 8007810:	11800017 	ldw	r6,0(r2)
 8007814:	000f883a 	mov	r7,zero
 8007818:	80070ec0 	call	80070ec <__multadd>
 800781c:	1025883a 	mov	r18,r2
 8007820:	003fc706 	br	8007740 <__alt_data_end+0xfc007740>
 8007824:	05000044 	movi	r20,1
 8007828:	9809883a 	mov	r4,r19
 800782c:	a00b883a 	mov	r5,r20
 8007830:	800701c0 	call	800701c <_Balloc>
 8007834:	1023883a 	mov	r17,r2
 8007838:	00809c44 	movi	r2,625
 800783c:	88800515 	stw	r2,20(r17)
 8007840:	8d000415 	stw	r20,16(r17)
 8007844:	9c401215 	stw	r17,72(r19)
 8007848:	88000015 	stw	zero,0(r17)
 800784c:	003fc606 	br	8007768 <__alt_data_end+0xfc007768>

08007850 <__lshift>:
 8007850:	defff904 	addi	sp,sp,-28
 8007854:	dd000415 	stw	r20,16(sp)
 8007858:	dcc00315 	stw	r19,12(sp)
 800785c:	3029d17a 	srai	r20,r6,5
 8007860:	2cc00417 	ldw	r19,16(r5)
 8007864:	28800217 	ldw	r2,8(r5)
 8007868:	dd400515 	stw	r21,20(sp)
 800786c:	a4e7883a 	add	r19,r20,r19
 8007870:	dc800215 	stw	r18,8(sp)
 8007874:	dc400115 	stw	r17,4(sp)
 8007878:	dc000015 	stw	r16,0(sp)
 800787c:	dfc00615 	stw	ra,24(sp)
 8007880:	9c000044 	addi	r16,r19,1
 8007884:	2823883a 	mov	r17,r5
 8007888:	302b883a 	mov	r21,r6
 800788c:	2025883a 	mov	r18,r4
 8007890:	29400117 	ldw	r5,4(r5)
 8007894:	1400030e 	bge	r2,r16,80078a4 <__lshift+0x54>
 8007898:	1085883a 	add	r2,r2,r2
 800789c:	29400044 	addi	r5,r5,1
 80078a0:	143ffd16 	blt	r2,r16,8007898 <__alt_data_end+0xfc007898>
 80078a4:	9009883a 	mov	r4,r18
 80078a8:	800701c0 	call	800701c <_Balloc>
 80078ac:	11c00504 	addi	r7,r2,20
 80078b0:	0500090e 	bge	zero,r20,80078d8 <__lshift+0x88>
 80078b4:	3811883a 	mov	r8,r7
 80078b8:	0007883a 	mov	r3,zero
 80078bc:	40000015 	stw	zero,0(r8)
 80078c0:	18c00044 	addi	r3,r3,1
 80078c4:	42000104 	addi	r8,r8,4
 80078c8:	1d3ffc1e 	bne	r3,r20,80078bc <__alt_data_end+0xfc0078bc>
 80078cc:	18c7883a 	add	r3,r3,r3
 80078d0:	18c7883a 	add	r3,r3,r3
 80078d4:	38cf883a 	add	r7,r7,r3
 80078d8:	89000417 	ldw	r4,16(r17)
 80078dc:	88c00504 	addi	r3,r17,20
 80078e0:	a98007cc 	andi	r6,r21,31
 80078e4:	2109883a 	add	r4,r4,r4
 80078e8:	2109883a 	add	r4,r4,r4
 80078ec:	1909883a 	add	r4,r3,r4
 80078f0:	30002326 	beq	r6,zero,8007980 <__lshift+0x130>
 80078f4:	01400804 	movi	r5,32
 80078f8:	298bc83a 	sub	r5,r5,r6
 80078fc:	0013883a 	mov	r9,zero
 8007900:	1a000017 	ldw	r8,0(r3)
 8007904:	3815883a 	mov	r10,r7
 8007908:	39c00104 	addi	r7,r7,4
 800790c:	4190983a 	sll	r8,r8,r6
 8007910:	18c00104 	addi	r3,r3,4
 8007914:	4a10b03a 	or	r8,r9,r8
 8007918:	3a3fff15 	stw	r8,-4(r7)
 800791c:	1a3fff17 	ldw	r8,-4(r3)
 8007920:	4152d83a 	srl	r9,r8,r5
 8007924:	193ff636 	bltu	r3,r4,8007900 <__alt_data_end+0xfc007900>
 8007928:	52400115 	stw	r9,4(r10)
 800792c:	48000126 	beq	r9,zero,8007934 <__lshift+0xe4>
 8007930:	9c000084 	addi	r16,r19,2
 8007934:	89000117 	ldw	r4,4(r17)
 8007938:	90c01317 	ldw	r3,76(r18)
 800793c:	843fffc4 	addi	r16,r16,-1
 8007940:	2109883a 	add	r4,r4,r4
 8007944:	2109883a 	add	r4,r4,r4
 8007948:	1907883a 	add	r3,r3,r4
 800794c:	19000017 	ldw	r4,0(r3)
 8007950:	14000415 	stw	r16,16(r2)
 8007954:	89000015 	stw	r4,0(r17)
 8007958:	1c400015 	stw	r17,0(r3)
 800795c:	dfc00617 	ldw	ra,24(sp)
 8007960:	dd400517 	ldw	r21,20(sp)
 8007964:	dd000417 	ldw	r20,16(sp)
 8007968:	dcc00317 	ldw	r19,12(sp)
 800796c:	dc800217 	ldw	r18,8(sp)
 8007970:	dc400117 	ldw	r17,4(sp)
 8007974:	dc000017 	ldw	r16,0(sp)
 8007978:	dec00704 	addi	sp,sp,28
 800797c:	f800283a 	ret
 8007980:	19400017 	ldw	r5,0(r3)
 8007984:	39c00104 	addi	r7,r7,4
 8007988:	18c00104 	addi	r3,r3,4
 800798c:	397fff15 	stw	r5,-4(r7)
 8007990:	193ffb36 	bltu	r3,r4,8007980 <__alt_data_end+0xfc007980>
 8007994:	003fe706 	br	8007934 <__alt_data_end+0xfc007934>

08007998 <__mcmp>:
 8007998:	20800417 	ldw	r2,16(r4)
 800799c:	28c00417 	ldw	r3,16(r5)
 80079a0:	10c5c83a 	sub	r2,r2,r3
 80079a4:	1000111e 	bne	r2,zero,80079ec <__mcmp+0x54>
 80079a8:	18c7883a 	add	r3,r3,r3
 80079ac:	18c7883a 	add	r3,r3,r3
 80079b0:	21000504 	addi	r4,r4,20
 80079b4:	29400504 	addi	r5,r5,20
 80079b8:	20c5883a 	add	r2,r4,r3
 80079bc:	28cb883a 	add	r5,r5,r3
 80079c0:	00000106 	br	80079c8 <__mcmp+0x30>
 80079c4:	20800a2e 	bgeu	r4,r2,80079f0 <__mcmp+0x58>
 80079c8:	10bfff04 	addi	r2,r2,-4
 80079cc:	297fff04 	addi	r5,r5,-4
 80079d0:	11800017 	ldw	r6,0(r2)
 80079d4:	28c00017 	ldw	r3,0(r5)
 80079d8:	30fffa26 	beq	r6,r3,80079c4 <__alt_data_end+0xfc0079c4>
 80079dc:	30c00236 	bltu	r6,r3,80079e8 <__mcmp+0x50>
 80079e0:	00800044 	movi	r2,1
 80079e4:	f800283a 	ret
 80079e8:	00bfffc4 	movi	r2,-1
 80079ec:	f800283a 	ret
 80079f0:	0005883a 	mov	r2,zero
 80079f4:	f800283a 	ret

080079f8 <__mdiff>:
 80079f8:	defffb04 	addi	sp,sp,-20
 80079fc:	dc000015 	stw	r16,0(sp)
 8007a00:	2821883a 	mov	r16,r5
 8007a04:	dcc00315 	stw	r19,12(sp)
 8007a08:	300b883a 	mov	r5,r6
 8007a0c:	2027883a 	mov	r19,r4
 8007a10:	8009883a 	mov	r4,r16
 8007a14:	dc800215 	stw	r18,8(sp)
 8007a18:	dfc00415 	stw	ra,16(sp)
 8007a1c:	dc400115 	stw	r17,4(sp)
 8007a20:	3025883a 	mov	r18,r6
 8007a24:	80079980 	call	8007998 <__mcmp>
 8007a28:	10005226 	beq	r2,zero,8007b74 <__mdiff+0x17c>
 8007a2c:	10004c16 	blt	r2,zero,8007b60 <__mdiff+0x168>
 8007a30:	0023883a 	mov	r17,zero
 8007a34:	81400117 	ldw	r5,4(r16)
 8007a38:	9809883a 	mov	r4,r19
 8007a3c:	800701c0 	call	800701c <_Balloc>
 8007a40:	83400417 	ldw	r13,16(r16)
 8007a44:	93800417 	ldw	r14,16(r18)
 8007a48:	81000504 	addi	r4,r16,20
 8007a4c:	6b59883a 	add	r12,r13,r13
 8007a50:	739d883a 	add	r14,r14,r14
 8007a54:	6319883a 	add	r12,r12,r12
 8007a58:	91800504 	addi	r6,r18,20
 8007a5c:	739d883a 	add	r14,r14,r14
 8007a60:	14400315 	stw	r17,12(r2)
 8007a64:	2319883a 	add	r12,r4,r12
 8007a68:	339d883a 	add	r14,r6,r14
 8007a6c:	12400504 	addi	r9,r2,20
 8007a70:	0007883a 	mov	r3,zero
 8007a74:	22000017 	ldw	r8,0(r4)
 8007a78:	32800017 	ldw	r10,0(r6)
 8007a7c:	4ac00104 	addi	r11,r9,4
 8007a80:	41ffffcc 	andi	r7,r8,65535
 8007a84:	38c7883a 	add	r3,r7,r3
 8007a88:	51ffffcc 	andi	r7,r10,65535
 8007a8c:	19cfc83a 	sub	r7,r3,r7
 8007a90:	4010d43a 	srli	r8,r8,16
 8007a94:	5014d43a 	srli	r10,r10,16
 8007a98:	3807d43a 	srai	r3,r7,16
 8007a9c:	39ffffcc 	andi	r7,r7,65535
 8007aa0:	4291c83a 	sub	r8,r8,r10
 8007aa4:	40c7883a 	add	r3,r8,r3
 8007aa8:	1810943a 	slli	r8,r3,16
 8007aac:	31800104 	addi	r6,r6,4
 8007ab0:	21000104 	addi	r4,r4,4
 8007ab4:	41ceb03a 	or	r7,r8,r7
 8007ab8:	49c00015 	stw	r7,0(r9)
 8007abc:	1807d43a 	srai	r3,r3,16
 8007ac0:	580b883a 	mov	r5,r11
 8007ac4:	5813883a 	mov	r9,r11
 8007ac8:	33bfea36 	bltu	r6,r14,8007a74 <__alt_data_end+0xfc007a74>
 8007acc:	2011883a 	mov	r8,r4
 8007ad0:	2300152e 	bgeu	r4,r12,8007b28 <__mdiff+0x130>
 8007ad4:	21400017 	ldw	r5,0(r4)
 8007ad8:	4a400104 	addi	r9,r9,4
 8007adc:	21000104 	addi	r4,r4,4
 8007ae0:	29ffffcc 	andi	r7,r5,65535
 8007ae4:	38c7883a 	add	r3,r7,r3
 8007ae8:	280ad43a 	srli	r5,r5,16
 8007aec:	180dd43a 	srai	r6,r3,16
 8007af0:	19ffffcc 	andi	r7,r3,65535
 8007af4:	3147883a 	add	r3,r6,r5
 8007af8:	180a943a 	slli	r5,r3,16
 8007afc:	1807d43a 	srai	r3,r3,16
 8007b00:	29ceb03a 	or	r7,r5,r7
 8007b04:	49ffff15 	stw	r7,-4(r9)
 8007b08:	233ff236 	bltu	r4,r12,8007ad4 <__alt_data_end+0xfc007ad4>
 8007b0c:	0206303a 	nor	r3,zero,r8
 8007b10:	1b07883a 	add	r3,r3,r12
 8007b14:	1806d0ba 	srli	r3,r3,2
 8007b18:	18c00044 	addi	r3,r3,1
 8007b1c:	18c7883a 	add	r3,r3,r3
 8007b20:	18c7883a 	add	r3,r3,r3
 8007b24:	58cb883a 	add	r5,r11,r3
 8007b28:	28ffff04 	addi	r3,r5,-4
 8007b2c:	3800041e 	bne	r7,zero,8007b40 <__mdiff+0x148>
 8007b30:	18ffff04 	addi	r3,r3,-4
 8007b34:	19000017 	ldw	r4,0(r3)
 8007b38:	6b7fffc4 	addi	r13,r13,-1
 8007b3c:	203ffc26 	beq	r4,zero,8007b30 <__alt_data_end+0xfc007b30>
 8007b40:	13400415 	stw	r13,16(r2)
 8007b44:	dfc00417 	ldw	ra,16(sp)
 8007b48:	dcc00317 	ldw	r19,12(sp)
 8007b4c:	dc800217 	ldw	r18,8(sp)
 8007b50:	dc400117 	ldw	r17,4(sp)
 8007b54:	dc000017 	ldw	r16,0(sp)
 8007b58:	dec00504 	addi	sp,sp,20
 8007b5c:	f800283a 	ret
 8007b60:	8005883a 	mov	r2,r16
 8007b64:	04400044 	movi	r17,1
 8007b68:	9021883a 	mov	r16,r18
 8007b6c:	1025883a 	mov	r18,r2
 8007b70:	003fb006 	br	8007a34 <__alt_data_end+0xfc007a34>
 8007b74:	9809883a 	mov	r4,r19
 8007b78:	000b883a 	mov	r5,zero
 8007b7c:	800701c0 	call	800701c <_Balloc>
 8007b80:	00c00044 	movi	r3,1
 8007b84:	10c00415 	stw	r3,16(r2)
 8007b88:	10000515 	stw	zero,20(r2)
 8007b8c:	003fed06 	br	8007b44 <__alt_data_end+0xfc007b44>

08007b90 <__ulp>:
 8007b90:	295ffc2c 	andhi	r5,r5,32752
 8007b94:	00bf3034 	movhi	r2,64704
 8007b98:	2887883a 	add	r3,r5,r2
 8007b9c:	00c0020e 	bge	zero,r3,8007ba8 <__ulp+0x18>
 8007ba0:	0005883a 	mov	r2,zero
 8007ba4:	f800283a 	ret
 8007ba8:	00c7c83a 	sub	r3,zero,r3
 8007bac:	180bd53a 	srai	r5,r3,20
 8007bb0:	008004c4 	movi	r2,19
 8007bb4:	11400a0e 	bge	r2,r5,8007be0 <__ulp+0x50>
 8007bb8:	00800c84 	movi	r2,50
 8007bbc:	0007883a 	mov	r3,zero
 8007bc0:	11400516 	blt	r2,r5,8007bd8 <__ulp+0x48>
 8007bc4:	00800cc4 	movi	r2,51
 8007bc8:	114bc83a 	sub	r5,r2,r5
 8007bcc:	00800044 	movi	r2,1
 8007bd0:	1144983a 	sll	r2,r2,r5
 8007bd4:	f800283a 	ret
 8007bd8:	00800044 	movi	r2,1
 8007bdc:	f800283a 	ret
 8007be0:	00800234 	movhi	r2,8
 8007be4:	1147d83a 	sra	r3,r2,r5
 8007be8:	0005883a 	mov	r2,zero
 8007bec:	f800283a 	ret

08007bf0 <__b2d>:
 8007bf0:	defffa04 	addi	sp,sp,-24
 8007bf4:	dc000015 	stw	r16,0(sp)
 8007bf8:	24000417 	ldw	r16,16(r4)
 8007bfc:	dc400115 	stw	r17,4(sp)
 8007c00:	24400504 	addi	r17,r4,20
 8007c04:	8421883a 	add	r16,r16,r16
 8007c08:	8421883a 	add	r16,r16,r16
 8007c0c:	8c21883a 	add	r16,r17,r16
 8007c10:	dc800215 	stw	r18,8(sp)
 8007c14:	84bfff17 	ldw	r18,-4(r16)
 8007c18:	dd000415 	stw	r20,16(sp)
 8007c1c:	dcc00315 	stw	r19,12(sp)
 8007c20:	9009883a 	mov	r4,r18
 8007c24:	2829883a 	mov	r20,r5
 8007c28:	dfc00515 	stw	ra,20(sp)
 8007c2c:	800732c0 	call	800732c <__hi0bits>
 8007c30:	00c00804 	movi	r3,32
 8007c34:	1887c83a 	sub	r3,r3,r2
 8007c38:	a0c00015 	stw	r3,0(r20)
 8007c3c:	00c00284 	movi	r3,10
 8007c40:	84ffff04 	addi	r19,r16,-4
 8007c44:	18801216 	blt	r3,r2,8007c90 <__b2d+0xa0>
 8007c48:	014002c4 	movi	r5,11
 8007c4c:	2889c83a 	sub	r4,r5,r2
 8007c50:	9106d83a 	srl	r3,r18,r4
 8007c54:	18cffc34 	orhi	r3,r3,16368
 8007c58:	8cc0282e 	bgeu	r17,r19,8007cfc <__b2d+0x10c>
 8007c5c:	817ffe17 	ldw	r5,-8(r16)
 8007c60:	290ad83a 	srl	r5,r5,r4
 8007c64:	10800544 	addi	r2,r2,21
 8007c68:	9084983a 	sll	r2,r18,r2
 8007c6c:	2884b03a 	or	r2,r5,r2
 8007c70:	dfc00517 	ldw	ra,20(sp)
 8007c74:	dd000417 	ldw	r20,16(sp)
 8007c78:	dcc00317 	ldw	r19,12(sp)
 8007c7c:	dc800217 	ldw	r18,8(sp)
 8007c80:	dc400117 	ldw	r17,4(sp)
 8007c84:	dc000017 	ldw	r16,0(sp)
 8007c88:	dec00604 	addi	sp,sp,24
 8007c8c:	f800283a 	ret
 8007c90:	113ffd44 	addi	r4,r2,-11
 8007c94:	8cc00f2e 	bgeu	r17,r19,8007cd4 <__b2d+0xe4>
 8007c98:	81bffe04 	addi	r6,r16,-8
 8007c9c:	817ffe17 	ldw	r5,-8(r16)
 8007ca0:	20001326 	beq	r4,zero,8007cf0 <__b2d+0x100>
 8007ca4:	00c00ac4 	movi	r3,43
 8007ca8:	1885c83a 	sub	r2,r3,r2
 8007cac:	2886d83a 	srl	r3,r5,r2
 8007cb0:	9124983a 	sll	r18,r18,r4
 8007cb4:	90e4b03a 	or	r18,r18,r3
 8007cb8:	90cffc34 	orhi	r3,r18,16368
 8007cbc:	8980112e 	bgeu	r17,r6,8007d04 <__b2d+0x114>
 8007cc0:	81bffd17 	ldw	r6,-12(r16)
 8007cc4:	308cd83a 	srl	r6,r6,r2
 8007cc8:	2904983a 	sll	r2,r5,r4
 8007ccc:	1184b03a 	or	r2,r2,r6
 8007cd0:	003fe706 	br	8007c70 <__alt_data_end+0xfc007c70>
 8007cd4:	20000526 	beq	r4,zero,8007cec <__b2d+0xfc>
 8007cd8:	9124983a 	sll	r18,r18,r4
 8007cdc:	000d883a 	mov	r6,zero
 8007ce0:	000b883a 	mov	r5,zero
 8007ce4:	90cffc34 	orhi	r3,r18,16368
 8007ce8:	003ff706 	br	8007cc8 <__alt_data_end+0xfc007cc8>
 8007cec:	000b883a 	mov	r5,zero
 8007cf0:	90cffc34 	orhi	r3,r18,16368
 8007cf4:	2805883a 	mov	r2,r5
 8007cf8:	003fdd06 	br	8007c70 <__alt_data_end+0xfc007c70>
 8007cfc:	000b883a 	mov	r5,zero
 8007d00:	003fd806 	br	8007c64 <__alt_data_end+0xfc007c64>
 8007d04:	000d883a 	mov	r6,zero
 8007d08:	003fef06 	br	8007cc8 <__alt_data_end+0xfc007cc8>

08007d0c <__d2b>:
 8007d0c:	defff704 	addi	sp,sp,-36
 8007d10:	dc000215 	stw	r16,8(sp)
 8007d14:	3021883a 	mov	r16,r6
 8007d18:	dc400315 	stw	r17,12(sp)
 8007d1c:	8022907a 	slli	r17,r16,1
 8007d20:	dd400715 	stw	r21,28(sp)
 8007d24:	282b883a 	mov	r21,r5
 8007d28:	01400044 	movi	r5,1
 8007d2c:	dd000615 	stw	r20,24(sp)
 8007d30:	dcc00515 	stw	r19,20(sp)
 8007d34:	dc800415 	stw	r18,16(sp)
 8007d38:	dfc00815 	stw	ra,32(sp)
 8007d3c:	3829883a 	mov	r20,r7
 8007d40:	dc800917 	ldw	r18,36(sp)
 8007d44:	8822d57a 	srli	r17,r17,21
 8007d48:	800701c0 	call	800701c <_Balloc>
 8007d4c:	1027883a 	mov	r19,r2
 8007d50:	00800434 	movhi	r2,16
 8007d54:	10bfffc4 	addi	r2,r2,-1
 8007d58:	808c703a 	and	r6,r16,r2
 8007d5c:	88000126 	beq	r17,zero,8007d64 <__d2b+0x58>
 8007d60:	31800434 	orhi	r6,r6,16
 8007d64:	d9800015 	stw	r6,0(sp)
 8007d68:	a8001f26 	beq	r21,zero,8007de8 <__d2b+0xdc>
 8007d6c:	d9000104 	addi	r4,sp,4
 8007d70:	dd400115 	stw	r21,4(sp)
 8007d74:	80073940 	call	8007394 <__lo0bits>
 8007d78:	d8c00017 	ldw	r3,0(sp)
 8007d7c:	1000291e 	bne	r2,zero,8007e24 <__d2b+0x118>
 8007d80:	d9000117 	ldw	r4,4(sp)
 8007d84:	99000515 	stw	r4,20(r19)
 8007d88:	1820c03a 	cmpne	r16,r3,zero
 8007d8c:	84000044 	addi	r16,r16,1
 8007d90:	98c00615 	stw	r3,24(r19)
 8007d94:	9c000415 	stw	r16,16(r19)
 8007d98:	88001b1e 	bne	r17,zero,8007e08 <__d2b+0xfc>
 8007d9c:	800690ba 	slli	r3,r16,2
 8007da0:	10bef384 	addi	r2,r2,-1074
 8007da4:	a0800015 	stw	r2,0(r20)
 8007da8:	98c5883a 	add	r2,r19,r3
 8007dac:	11000417 	ldw	r4,16(r2)
 8007db0:	8020917a 	slli	r16,r16,5
 8007db4:	800732c0 	call	800732c <__hi0bits>
 8007db8:	8085c83a 	sub	r2,r16,r2
 8007dbc:	90800015 	stw	r2,0(r18)
 8007dc0:	9805883a 	mov	r2,r19
 8007dc4:	dfc00817 	ldw	ra,32(sp)
 8007dc8:	dd400717 	ldw	r21,28(sp)
 8007dcc:	dd000617 	ldw	r20,24(sp)
 8007dd0:	dcc00517 	ldw	r19,20(sp)
 8007dd4:	dc800417 	ldw	r18,16(sp)
 8007dd8:	dc400317 	ldw	r17,12(sp)
 8007ddc:	dc000217 	ldw	r16,8(sp)
 8007de0:	dec00904 	addi	sp,sp,36
 8007de4:	f800283a 	ret
 8007de8:	d809883a 	mov	r4,sp
 8007dec:	80073940 	call	8007394 <__lo0bits>
 8007df0:	d8c00017 	ldw	r3,0(sp)
 8007df4:	04000044 	movi	r16,1
 8007df8:	9c000415 	stw	r16,16(r19)
 8007dfc:	98c00515 	stw	r3,20(r19)
 8007e00:	10800804 	addi	r2,r2,32
 8007e04:	883fe526 	beq	r17,zero,8007d9c <__alt_data_end+0xfc007d9c>
 8007e08:	8c7ef344 	addi	r17,r17,-1075
 8007e0c:	88a3883a 	add	r17,r17,r2
 8007e10:	00c00d44 	movi	r3,53
 8007e14:	a4400015 	stw	r17,0(r20)
 8007e18:	1885c83a 	sub	r2,r3,r2
 8007e1c:	90800015 	stw	r2,0(r18)
 8007e20:	003fe706 	br	8007dc0 <__alt_data_end+0xfc007dc0>
 8007e24:	01000804 	movi	r4,32
 8007e28:	2089c83a 	sub	r4,r4,r2
 8007e2c:	1908983a 	sll	r4,r3,r4
 8007e30:	d9400117 	ldw	r5,4(sp)
 8007e34:	1886d83a 	srl	r3,r3,r2
 8007e38:	2148b03a 	or	r4,r4,r5
 8007e3c:	99000515 	stw	r4,20(r19)
 8007e40:	d8c00015 	stw	r3,0(sp)
 8007e44:	003fd006 	br	8007d88 <__alt_data_end+0xfc007d88>

08007e48 <__ratio>:
 8007e48:	defff904 	addi	sp,sp,-28
 8007e4c:	dc400315 	stw	r17,12(sp)
 8007e50:	2823883a 	mov	r17,r5
 8007e54:	d9400104 	addi	r5,sp,4
 8007e58:	dfc00615 	stw	ra,24(sp)
 8007e5c:	dcc00515 	stw	r19,20(sp)
 8007e60:	dc800415 	stw	r18,16(sp)
 8007e64:	2027883a 	mov	r19,r4
 8007e68:	dc000215 	stw	r16,8(sp)
 8007e6c:	8007bf00 	call	8007bf0 <__b2d>
 8007e70:	8809883a 	mov	r4,r17
 8007e74:	d80b883a 	mov	r5,sp
 8007e78:	1025883a 	mov	r18,r2
 8007e7c:	1821883a 	mov	r16,r3
 8007e80:	8007bf00 	call	8007bf0 <__b2d>
 8007e84:	8a400417 	ldw	r9,16(r17)
 8007e88:	9a000417 	ldw	r8,16(r19)
 8007e8c:	100d883a 	mov	r6,r2
 8007e90:	d8800017 	ldw	r2,0(sp)
 8007e94:	4251c83a 	sub	r8,r8,r9
 8007e98:	4012917a 	slli	r9,r8,5
 8007e9c:	da000117 	ldw	r8,4(sp)
 8007ea0:	4091c83a 	sub	r8,r8,r2
 8007ea4:	4251883a 	add	r8,r8,r9
 8007ea8:	02000d0e 	bge	zero,r8,8007ee0 <__ratio+0x98>
 8007eac:	4010953a 	slli	r8,r8,20
 8007eb0:	4421883a 	add	r16,r8,r16
 8007eb4:	9009883a 	mov	r4,r18
 8007eb8:	800b883a 	mov	r5,r16
 8007ebc:	180f883a 	mov	r7,r3
 8007ec0:	800b9440 	call	800b944 <__divdf3>
 8007ec4:	dfc00617 	ldw	ra,24(sp)
 8007ec8:	dcc00517 	ldw	r19,20(sp)
 8007ecc:	dc800417 	ldw	r18,16(sp)
 8007ed0:	dc400317 	ldw	r17,12(sp)
 8007ed4:	dc000217 	ldw	r16,8(sp)
 8007ed8:	dec00704 	addi	sp,sp,28
 8007edc:	f800283a 	ret
 8007ee0:	4010953a 	slli	r8,r8,20
 8007ee4:	1a07c83a 	sub	r3,r3,r8
 8007ee8:	003ff206 	br	8007eb4 <__alt_data_end+0xfc007eb4>

08007eec <_mprec_log10>:
 8007eec:	defffe04 	addi	sp,sp,-8
 8007ef0:	dc000015 	stw	r16,0(sp)
 8007ef4:	dfc00115 	stw	ra,4(sp)
 8007ef8:	008005c4 	movi	r2,23
 8007efc:	2021883a 	mov	r16,r4
 8007f00:	11000d0e 	bge	r2,r4,8007f38 <_mprec_log10+0x4c>
 8007f04:	0005883a 	mov	r2,zero
 8007f08:	00cffc34 	movhi	r3,16368
 8007f0c:	843fffc4 	addi	r16,r16,-1
 8007f10:	1009883a 	mov	r4,r2
 8007f14:	180b883a 	mov	r5,r3
 8007f18:	000d883a 	mov	r6,zero
 8007f1c:	01d00934 	movhi	r7,16420
 8007f20:	800c5080 	call	800c508 <__muldf3>
 8007f24:	803ff91e 	bne	r16,zero,8007f0c <__alt_data_end+0xfc007f0c>
 8007f28:	dfc00117 	ldw	ra,4(sp)
 8007f2c:	dc000017 	ldw	r16,0(sp)
 8007f30:	dec00204 	addi	sp,sp,8
 8007f34:	f800283a 	ret
 8007f38:	202090fa 	slli	r16,r4,3
 8007f3c:	00820074 	movhi	r2,2049
 8007f40:	10843704 	addi	r2,r2,4316
 8007f44:	1421883a 	add	r16,r2,r16
 8007f48:	80800017 	ldw	r2,0(r16)
 8007f4c:	80c00117 	ldw	r3,4(r16)
 8007f50:	dfc00117 	ldw	ra,4(sp)
 8007f54:	dc000017 	ldw	r16,0(sp)
 8007f58:	dec00204 	addi	sp,sp,8
 8007f5c:	f800283a 	ret

08007f60 <__copybits>:
 8007f60:	297fffc4 	addi	r5,r5,-1
 8007f64:	280fd17a 	srai	r7,r5,5
 8007f68:	30c00417 	ldw	r3,16(r6)
 8007f6c:	30800504 	addi	r2,r6,20
 8007f70:	39c00044 	addi	r7,r7,1
 8007f74:	18c7883a 	add	r3,r3,r3
 8007f78:	39cf883a 	add	r7,r7,r7
 8007f7c:	18c7883a 	add	r3,r3,r3
 8007f80:	39cf883a 	add	r7,r7,r7
 8007f84:	10c7883a 	add	r3,r2,r3
 8007f88:	21cf883a 	add	r7,r4,r7
 8007f8c:	10c00d2e 	bgeu	r2,r3,8007fc4 <__copybits+0x64>
 8007f90:	200b883a 	mov	r5,r4
 8007f94:	12000017 	ldw	r8,0(r2)
 8007f98:	29400104 	addi	r5,r5,4
 8007f9c:	10800104 	addi	r2,r2,4
 8007fa0:	2a3fff15 	stw	r8,-4(r5)
 8007fa4:	10fffb36 	bltu	r2,r3,8007f94 <__alt_data_end+0xfc007f94>
 8007fa8:	1985c83a 	sub	r2,r3,r6
 8007fac:	10bffac4 	addi	r2,r2,-21
 8007fb0:	1004d0ba 	srli	r2,r2,2
 8007fb4:	10800044 	addi	r2,r2,1
 8007fb8:	1085883a 	add	r2,r2,r2
 8007fbc:	1085883a 	add	r2,r2,r2
 8007fc0:	2089883a 	add	r4,r4,r2
 8007fc4:	21c0032e 	bgeu	r4,r7,8007fd4 <__copybits+0x74>
 8007fc8:	20000015 	stw	zero,0(r4)
 8007fcc:	21000104 	addi	r4,r4,4
 8007fd0:	21fffd36 	bltu	r4,r7,8007fc8 <__alt_data_end+0xfc007fc8>
 8007fd4:	f800283a 	ret

08007fd8 <__any_on>:
 8007fd8:	20c00417 	ldw	r3,16(r4)
 8007fdc:	2805d17a 	srai	r2,r5,5
 8007fe0:	21000504 	addi	r4,r4,20
 8007fe4:	18800d0e 	bge	r3,r2,800801c <__any_on+0x44>
 8007fe8:	18c7883a 	add	r3,r3,r3
 8007fec:	18c7883a 	add	r3,r3,r3
 8007ff0:	20c7883a 	add	r3,r4,r3
 8007ff4:	20c0192e 	bgeu	r4,r3,800805c <__any_on+0x84>
 8007ff8:	18bfff17 	ldw	r2,-4(r3)
 8007ffc:	18ffff04 	addi	r3,r3,-4
 8008000:	1000041e 	bne	r2,zero,8008014 <__any_on+0x3c>
 8008004:	20c0142e 	bgeu	r4,r3,8008058 <__any_on+0x80>
 8008008:	18ffff04 	addi	r3,r3,-4
 800800c:	19400017 	ldw	r5,0(r3)
 8008010:	283ffc26 	beq	r5,zero,8008004 <__alt_data_end+0xfc008004>
 8008014:	00800044 	movi	r2,1
 8008018:	f800283a 	ret
 800801c:	10c00a0e 	bge	r2,r3,8008048 <__any_on+0x70>
 8008020:	1085883a 	add	r2,r2,r2
 8008024:	1085883a 	add	r2,r2,r2
 8008028:	294007cc 	andi	r5,r5,31
 800802c:	2087883a 	add	r3,r4,r2
 8008030:	283ff026 	beq	r5,zero,8007ff4 <__alt_data_end+0xfc007ff4>
 8008034:	19800017 	ldw	r6,0(r3)
 8008038:	3144d83a 	srl	r2,r6,r5
 800803c:	114a983a 	sll	r5,r2,r5
 8008040:	29bff41e 	bne	r5,r6,8008014 <__alt_data_end+0xfc008014>
 8008044:	003feb06 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 8008048:	1085883a 	add	r2,r2,r2
 800804c:	1085883a 	add	r2,r2,r2
 8008050:	2087883a 	add	r3,r4,r2
 8008054:	003fe706 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 8008058:	f800283a 	ret
 800805c:	0005883a 	mov	r2,zero
 8008060:	f800283a 	ret

08008064 <_read_r>:
 8008064:	defffd04 	addi	sp,sp,-12
 8008068:	dc000015 	stw	r16,0(sp)
 800806c:	04020074 	movhi	r16,2049
 8008070:	dc400115 	stw	r17,4(sp)
 8008074:	8412b504 	addi	r16,r16,19156
 8008078:	2023883a 	mov	r17,r4
 800807c:	2809883a 	mov	r4,r5
 8008080:	300b883a 	mov	r5,r6
 8008084:	380d883a 	mov	r6,r7
 8008088:	dfc00215 	stw	ra,8(sp)
 800808c:	80000015 	stw	zero,0(r16)
 8008090:	800e1b80 	call	800e1b8 <read>
 8008094:	00ffffc4 	movi	r3,-1
 8008098:	10c00526 	beq	r2,r3,80080b0 <_read_r+0x4c>
 800809c:	dfc00217 	ldw	ra,8(sp)
 80080a0:	dc400117 	ldw	r17,4(sp)
 80080a4:	dc000017 	ldw	r16,0(sp)
 80080a8:	dec00304 	addi	sp,sp,12
 80080ac:	f800283a 	ret
 80080b0:	80c00017 	ldw	r3,0(r16)
 80080b4:	183ff926 	beq	r3,zero,800809c <__alt_data_end+0xfc00809c>
 80080b8:	88c00015 	stw	r3,0(r17)
 80080bc:	003ff706 	br	800809c <__alt_data_end+0xfc00809c>

080080c0 <_realloc_r>:
 80080c0:	defff604 	addi	sp,sp,-40
 80080c4:	dcc00315 	stw	r19,12(sp)
 80080c8:	dc400115 	stw	r17,4(sp)
 80080cc:	dfc00915 	stw	ra,36(sp)
 80080d0:	df000815 	stw	fp,32(sp)
 80080d4:	ddc00715 	stw	r23,28(sp)
 80080d8:	dd800615 	stw	r22,24(sp)
 80080dc:	dd400515 	stw	r21,20(sp)
 80080e0:	dd000415 	stw	r20,16(sp)
 80080e4:	dc800215 	stw	r18,8(sp)
 80080e8:	dc000015 	stw	r16,0(sp)
 80080ec:	2827883a 	mov	r19,r5
 80080f0:	3023883a 	mov	r17,r6
 80080f4:	2800bf26 	beq	r5,zero,80083f4 <_realloc_r+0x334>
 80080f8:	2025883a 	mov	r18,r4
 80080fc:	800de840 	call	800de84 <__malloc_lock>
 8008100:	98ffff17 	ldw	r3,-4(r19)
 8008104:	01bfff04 	movi	r6,-4
 8008108:	890002c4 	addi	r4,r17,11
 800810c:	01c00584 	movi	r7,22
 8008110:	9d7ffe04 	addi	r21,r19,-8
 8008114:	19a0703a 	and	r16,r3,r6
 8008118:	39003f2e 	bgeu	r7,r4,8008218 <_realloc_r+0x158>
 800811c:	053ffe04 	movi	r20,-8
 8008120:	2528703a 	and	r20,r4,r20
 8008124:	a00f883a 	mov	r7,r20
 8008128:	a0008216 	blt	r20,zero,8008334 <_realloc_r+0x274>
 800812c:	a4408136 	bltu	r20,r17,8008334 <_realloc_r+0x274>
 8008130:	81c03c0e 	bge	r16,r7,8008224 <_realloc_r+0x164>
 8008134:	07020074 	movhi	fp,2049
 8008138:	e705d004 	addi	fp,fp,5952
 800813c:	e1000217 	ldw	r4,8(fp)
 8008140:	ac05883a 	add	r2,r21,r16
 8008144:	2080bf26 	beq	r4,r2,8008444 <_realloc_r+0x384>
 8008148:	11000117 	ldw	r4,4(r2)
 800814c:	023fff84 	movi	r8,-2
 8008150:	2210703a 	and	r8,r4,r8
 8008154:	1211883a 	add	r8,r2,r8
 8008158:	41400117 	ldw	r5,4(r8)
 800815c:	2940004c 	andi	r5,r5,1
 8008160:	28004a1e 	bne	r5,zero,800828c <_realloc_r+0x1cc>
 8008164:	017fff04 	movi	r5,-4
 8008168:	2148703a 	and	r4,r4,r5
 800816c:	2409883a 	add	r4,r4,r16
 8008170:	21c0ad0e 	bge	r4,r7,8008428 <_realloc_r+0x368>
 8008174:	18c0004c 	andi	r3,r3,1
 8008178:	18007f1e 	bne	r3,zero,8008378 <_realloc_r+0x2b8>
 800817c:	9dfffe17 	ldw	r23,-8(r19)
 8008180:	adefc83a 	sub	r23,r21,r23
 8008184:	bd800117 	ldw	r22,4(r23)
 8008188:	b14a703a 	and	r5,r22,r5
 800818c:	216d883a 	add	r22,r4,r5
 8008190:	b1c04516 	blt	r22,r7,80082a8 <_realloc_r+0x1e8>
 8008194:	10c00317 	ldw	r3,12(r2)
 8008198:	10800217 	ldw	r2,8(r2)
 800819c:	81bfff04 	addi	r6,r16,-4
 80081a0:	bc400204 	addi	r17,r23,8
 80081a4:	10c00315 	stw	r3,12(r2)
 80081a8:	18800215 	stw	r2,8(r3)
 80081ac:	b9400217 	ldw	r5,8(r23)
 80081b0:	b8c00317 	ldw	r3,12(r23)
 80081b4:	00800904 	movi	r2,36
 80081b8:	28c00315 	stw	r3,12(r5)
 80081bc:	19400215 	stw	r5,8(r3)
 80081c0:	1180ef36 	bltu	r2,r6,8008580 <_realloc_r+0x4c0>
 80081c4:	008004c4 	movi	r2,19
 80081c8:	1180da2e 	bgeu	r2,r6,8008534 <_realloc_r+0x474>
 80081cc:	98800017 	ldw	r2,0(r19)
 80081d0:	b8800215 	stw	r2,8(r23)
 80081d4:	98800117 	ldw	r2,4(r19)
 80081d8:	b8800315 	stw	r2,12(r23)
 80081dc:	008006c4 	movi	r2,27
 80081e0:	1180fc2e 	bgeu	r2,r6,80085d4 <_realloc_r+0x514>
 80081e4:	98800217 	ldw	r2,8(r19)
 80081e8:	b8800415 	stw	r2,16(r23)
 80081ec:	98800317 	ldw	r2,12(r19)
 80081f0:	b8800515 	stw	r2,20(r23)
 80081f4:	00800904 	movi	r2,36
 80081f8:	3080421e 	bne	r6,r2,8008304 <_realloc_r+0x244>
 80081fc:	98800417 	ldw	r2,16(r19)
 8008200:	9cc00604 	addi	r19,r19,24
 8008204:	b8c00804 	addi	r3,r23,32
 8008208:	b8800615 	stw	r2,24(r23)
 800820c:	98bfff17 	ldw	r2,-4(r19)
 8008210:	b8800715 	stw	r2,28(r23)
 8008214:	00003d06 	br	800830c <_realloc_r+0x24c>
 8008218:	01c00404 	movi	r7,16
 800821c:	3829883a 	mov	r20,r7
 8008220:	003fc206 	br	800812c <__alt_data_end+0xfc00812c>
 8008224:	9823883a 	mov	r17,r19
 8008228:	850fc83a 	sub	r7,r16,r20
 800822c:	008003c4 	movi	r2,15
 8008230:	18c0004c 	andi	r3,r3,1
 8008234:	11c04336 	bltu	r2,r7,8008344 <_realloc_r+0x284>
 8008238:	1c06b03a 	or	r3,r3,r16
 800823c:	a8c00115 	stw	r3,4(r21)
 8008240:	ac21883a 	add	r16,r21,r16
 8008244:	80c00117 	ldw	r3,4(r16)
 8008248:	18c00054 	ori	r3,r3,1
 800824c:	80c00115 	stw	r3,4(r16)
 8008250:	9009883a 	mov	r4,r18
 8008254:	800dea40 	call	800dea4 <__malloc_unlock>
 8008258:	8805883a 	mov	r2,r17
 800825c:	dfc00917 	ldw	ra,36(sp)
 8008260:	df000817 	ldw	fp,32(sp)
 8008264:	ddc00717 	ldw	r23,28(sp)
 8008268:	dd800617 	ldw	r22,24(sp)
 800826c:	dd400517 	ldw	r21,20(sp)
 8008270:	dd000417 	ldw	r20,16(sp)
 8008274:	dcc00317 	ldw	r19,12(sp)
 8008278:	dc800217 	ldw	r18,8(sp)
 800827c:	dc400117 	ldw	r17,4(sp)
 8008280:	dc000017 	ldw	r16,0(sp)
 8008284:	dec00a04 	addi	sp,sp,40
 8008288:	f800283a 	ret
 800828c:	18c0004c 	andi	r3,r3,1
 8008290:	1800391e 	bne	r3,zero,8008378 <_realloc_r+0x2b8>
 8008294:	9dfffe17 	ldw	r23,-8(r19)
 8008298:	00bfff04 	movi	r2,-4
 800829c:	adefc83a 	sub	r23,r21,r23
 80082a0:	b9400117 	ldw	r5,4(r23)
 80082a4:	288a703a 	and	r5,r5,r2
 80082a8:	2c2d883a 	add	r22,r5,r16
 80082ac:	b1c03216 	blt	r22,r7,8008378 <_realloc_r+0x2b8>
 80082b0:	b8800317 	ldw	r2,12(r23)
 80082b4:	b8c00217 	ldw	r3,8(r23)
 80082b8:	81bfff04 	addi	r6,r16,-4
 80082bc:	01000904 	movi	r4,36
 80082c0:	18800315 	stw	r2,12(r3)
 80082c4:	10c00215 	stw	r3,8(r2)
 80082c8:	bc400204 	addi	r17,r23,8
 80082cc:	2180ac36 	bltu	r4,r6,8008580 <_realloc_r+0x4c0>
 80082d0:	008004c4 	movi	r2,19
 80082d4:	1180972e 	bgeu	r2,r6,8008534 <_realloc_r+0x474>
 80082d8:	98800017 	ldw	r2,0(r19)
 80082dc:	b8800215 	stw	r2,8(r23)
 80082e0:	98800117 	ldw	r2,4(r19)
 80082e4:	b8800315 	stw	r2,12(r23)
 80082e8:	008006c4 	movi	r2,27
 80082ec:	1180b92e 	bgeu	r2,r6,80085d4 <_realloc_r+0x514>
 80082f0:	98800217 	ldw	r2,8(r19)
 80082f4:	b8800415 	stw	r2,16(r23)
 80082f8:	98800317 	ldw	r2,12(r19)
 80082fc:	b8800515 	stw	r2,20(r23)
 8008300:	313fbe26 	beq	r6,r4,80081fc <__alt_data_end+0xfc0081fc>
 8008304:	b8c00604 	addi	r3,r23,24
 8008308:	9cc00404 	addi	r19,r19,16
 800830c:	98800017 	ldw	r2,0(r19)
 8008310:	b021883a 	mov	r16,r22
 8008314:	b82b883a 	mov	r21,r23
 8008318:	18800015 	stw	r2,0(r3)
 800831c:	98800117 	ldw	r2,4(r19)
 8008320:	18800115 	stw	r2,4(r3)
 8008324:	98800217 	ldw	r2,8(r19)
 8008328:	18800215 	stw	r2,8(r3)
 800832c:	b8c00117 	ldw	r3,4(r23)
 8008330:	003fbd06 	br	8008228 <__alt_data_end+0xfc008228>
 8008334:	00800304 	movi	r2,12
 8008338:	90800015 	stw	r2,0(r18)
 800833c:	0005883a 	mov	r2,zero
 8008340:	003fc606 	br	800825c <__alt_data_end+0xfc00825c>
 8008344:	1d06b03a 	or	r3,r3,r20
 8008348:	ad0b883a 	add	r5,r21,r20
 800834c:	a8c00115 	stw	r3,4(r21)
 8008350:	38800054 	ori	r2,r7,1
 8008354:	28800115 	stw	r2,4(r5)
 8008358:	29cf883a 	add	r7,r5,r7
 800835c:	38800117 	ldw	r2,4(r7)
 8008360:	9009883a 	mov	r4,r18
 8008364:	29400204 	addi	r5,r5,8
 8008368:	10800054 	ori	r2,r2,1
 800836c:	38800115 	stw	r2,4(r7)
 8008370:	8000f300 	call	8000f30 <_free_r>
 8008374:	003fb606 	br	8008250 <__alt_data_end+0xfc008250>
 8008378:	880b883a 	mov	r5,r17
 800837c:	9009883a 	mov	r4,r18
 8008380:	8001b340 	call	8001b34 <_malloc_r>
 8008384:	1023883a 	mov	r17,r2
 8008388:	1000aa26 	beq	r2,zero,8008634 <_realloc_r+0x574>
 800838c:	98ffff17 	ldw	r3,-4(r19)
 8008390:	113ffe04 	addi	r4,r2,-8
 8008394:	00bfff84 	movi	r2,-2
 8008398:	1884703a 	and	r2,r3,r2
 800839c:	a885883a 	add	r2,r21,r2
 80083a0:	20808626 	beq	r4,r2,80085bc <_realloc_r+0x4fc>
 80083a4:	81bfff04 	addi	r6,r16,-4
 80083a8:	00800904 	movi	r2,36
 80083ac:	11807036 	bltu	r2,r6,8008570 <_realloc_r+0x4b0>
 80083b0:	00c004c4 	movi	r3,19
 80083b4:	19805636 	bltu	r3,r6,8008510 <_realloc_r+0x450>
 80083b8:	8805883a 	mov	r2,r17
 80083bc:	9807883a 	mov	r3,r19
 80083c0:	19000017 	ldw	r4,0(r3)
 80083c4:	11000015 	stw	r4,0(r2)
 80083c8:	19000117 	ldw	r4,4(r3)
 80083cc:	11000115 	stw	r4,4(r2)
 80083d0:	18c00217 	ldw	r3,8(r3)
 80083d4:	10c00215 	stw	r3,8(r2)
 80083d8:	980b883a 	mov	r5,r19
 80083dc:	9009883a 	mov	r4,r18
 80083e0:	8000f300 	call	8000f30 <_free_r>
 80083e4:	9009883a 	mov	r4,r18
 80083e8:	800dea40 	call	800dea4 <__malloc_unlock>
 80083ec:	8805883a 	mov	r2,r17
 80083f0:	003f9a06 	br	800825c <__alt_data_end+0xfc00825c>
 80083f4:	300b883a 	mov	r5,r6
 80083f8:	dfc00917 	ldw	ra,36(sp)
 80083fc:	df000817 	ldw	fp,32(sp)
 8008400:	ddc00717 	ldw	r23,28(sp)
 8008404:	dd800617 	ldw	r22,24(sp)
 8008408:	dd400517 	ldw	r21,20(sp)
 800840c:	dd000417 	ldw	r20,16(sp)
 8008410:	dcc00317 	ldw	r19,12(sp)
 8008414:	dc800217 	ldw	r18,8(sp)
 8008418:	dc400117 	ldw	r17,4(sp)
 800841c:	dc000017 	ldw	r16,0(sp)
 8008420:	dec00a04 	addi	sp,sp,40
 8008424:	8001b341 	jmpi	8001b34 <_malloc_r>
 8008428:	11400317 	ldw	r5,12(r2)
 800842c:	10800217 	ldw	r2,8(r2)
 8008430:	9823883a 	mov	r17,r19
 8008434:	2021883a 	mov	r16,r4
 8008438:	11400315 	stw	r5,12(r2)
 800843c:	28800215 	stw	r2,8(r5)
 8008440:	003f7906 	br	8008228 <__alt_data_end+0xfc008228>
 8008444:	21000117 	ldw	r4,4(r4)
 8008448:	00bfff04 	movi	r2,-4
 800844c:	a1800404 	addi	r6,r20,16
 8008450:	2088703a 	and	r4,r4,r2
 8008454:	2409883a 	add	r4,r4,r16
 8008458:	2180380e 	bge	r4,r6,800853c <_realloc_r+0x47c>
 800845c:	18c0004c 	andi	r3,r3,1
 8008460:	183fc51e 	bne	r3,zero,8008378 <__alt_data_end+0xfc008378>
 8008464:	9dfffe17 	ldw	r23,-8(r19)
 8008468:	adefc83a 	sub	r23,r21,r23
 800846c:	b9400117 	ldw	r5,4(r23)
 8008470:	288a703a 	and	r5,r5,r2
 8008474:	216d883a 	add	r22,r4,r5
 8008478:	b1bf8b16 	blt	r22,r6,80082a8 <__alt_data_end+0xfc0082a8>
 800847c:	b8800317 	ldw	r2,12(r23)
 8008480:	b8c00217 	ldw	r3,8(r23)
 8008484:	81bfff04 	addi	r6,r16,-4
 8008488:	01000904 	movi	r4,36
 800848c:	18800315 	stw	r2,12(r3)
 8008490:	10c00215 	stw	r3,8(r2)
 8008494:	bc400204 	addi	r17,r23,8
 8008498:	21805a36 	bltu	r4,r6,8008604 <_realloc_r+0x544>
 800849c:	008004c4 	movi	r2,19
 80084a0:	1180562e 	bgeu	r2,r6,80085fc <_realloc_r+0x53c>
 80084a4:	98800017 	ldw	r2,0(r19)
 80084a8:	b8800215 	stw	r2,8(r23)
 80084ac:	98800117 	ldw	r2,4(r19)
 80084b0:	b8800315 	stw	r2,12(r23)
 80084b4:	008006c4 	movi	r2,27
 80084b8:	11805636 	bltu	r2,r6,8008614 <_realloc_r+0x554>
 80084bc:	b8800404 	addi	r2,r23,16
 80084c0:	9cc00204 	addi	r19,r19,8
 80084c4:	98c00017 	ldw	r3,0(r19)
 80084c8:	10c00015 	stw	r3,0(r2)
 80084cc:	98c00117 	ldw	r3,4(r19)
 80084d0:	10c00115 	stw	r3,4(r2)
 80084d4:	98c00217 	ldw	r3,8(r19)
 80084d8:	10c00215 	stw	r3,8(r2)
 80084dc:	bd07883a 	add	r3,r23,r20
 80084e0:	b505c83a 	sub	r2,r22,r20
 80084e4:	e0c00215 	stw	r3,8(fp)
 80084e8:	10800054 	ori	r2,r2,1
 80084ec:	18800115 	stw	r2,4(r3)
 80084f0:	b8800117 	ldw	r2,4(r23)
 80084f4:	9009883a 	mov	r4,r18
 80084f8:	1080004c 	andi	r2,r2,1
 80084fc:	a0a8b03a 	or	r20,r20,r2
 8008500:	bd000115 	stw	r20,4(r23)
 8008504:	800dea40 	call	800dea4 <__malloc_unlock>
 8008508:	8805883a 	mov	r2,r17
 800850c:	003f5306 	br	800825c <__alt_data_end+0xfc00825c>
 8008510:	98c00017 	ldw	r3,0(r19)
 8008514:	88c00015 	stw	r3,0(r17)
 8008518:	98c00117 	ldw	r3,4(r19)
 800851c:	88c00115 	stw	r3,4(r17)
 8008520:	00c006c4 	movi	r3,27
 8008524:	19801d36 	bltu	r3,r6,800859c <_realloc_r+0x4dc>
 8008528:	88800204 	addi	r2,r17,8
 800852c:	98c00204 	addi	r3,r19,8
 8008530:	003fa306 	br	80083c0 <__alt_data_end+0xfc0083c0>
 8008534:	8807883a 	mov	r3,r17
 8008538:	003f7406 	br	800830c <__alt_data_end+0xfc00830c>
 800853c:	ad2b883a 	add	r21,r21,r20
 8008540:	2505c83a 	sub	r2,r4,r20
 8008544:	e5400215 	stw	r21,8(fp)
 8008548:	10800054 	ori	r2,r2,1
 800854c:	a8800115 	stw	r2,4(r21)
 8008550:	98bfff17 	ldw	r2,-4(r19)
 8008554:	9009883a 	mov	r4,r18
 8008558:	1080004c 	andi	r2,r2,1
 800855c:	a0a8b03a 	or	r20,r20,r2
 8008560:	9d3fff15 	stw	r20,-4(r19)
 8008564:	800dea40 	call	800dea4 <__malloc_unlock>
 8008568:	9805883a 	mov	r2,r19
 800856c:	003f3b06 	br	800825c <__alt_data_end+0xfc00825c>
 8008570:	8809883a 	mov	r4,r17
 8008574:	980b883a 	mov	r5,r19
 8008578:	8006ec00 	call	8006ec0 <memmove>
 800857c:	003f9606 	br	80083d8 <__alt_data_end+0xfc0083d8>
 8008580:	8809883a 	mov	r4,r17
 8008584:	980b883a 	mov	r5,r19
 8008588:	8006ec00 	call	8006ec0 <memmove>
 800858c:	b8c00117 	ldw	r3,4(r23)
 8008590:	b021883a 	mov	r16,r22
 8008594:	b82b883a 	mov	r21,r23
 8008598:	003f2306 	br	8008228 <__alt_data_end+0xfc008228>
 800859c:	98c00217 	ldw	r3,8(r19)
 80085a0:	88c00215 	stw	r3,8(r17)
 80085a4:	98c00317 	ldw	r3,12(r19)
 80085a8:	88c00315 	stw	r3,12(r17)
 80085ac:	30800c26 	beq	r6,r2,80085e0 <_realloc_r+0x520>
 80085b0:	88800404 	addi	r2,r17,16
 80085b4:	98c00404 	addi	r3,r19,16
 80085b8:	003f8106 	br	80083c0 <__alt_data_end+0xfc0083c0>
 80085bc:	893fff17 	ldw	r4,-4(r17)
 80085c0:	00bfff04 	movi	r2,-4
 80085c4:	9823883a 	mov	r17,r19
 80085c8:	2084703a 	and	r2,r4,r2
 80085cc:	80a1883a 	add	r16,r16,r2
 80085d0:	003f1506 	br	8008228 <__alt_data_end+0xfc008228>
 80085d4:	b8c00404 	addi	r3,r23,16
 80085d8:	9cc00204 	addi	r19,r19,8
 80085dc:	003f4b06 	br	800830c <__alt_data_end+0xfc00830c>
 80085e0:	99000417 	ldw	r4,16(r19)
 80085e4:	88800604 	addi	r2,r17,24
 80085e8:	98c00604 	addi	r3,r19,24
 80085ec:	89000415 	stw	r4,16(r17)
 80085f0:	99000517 	ldw	r4,20(r19)
 80085f4:	89000515 	stw	r4,20(r17)
 80085f8:	003f7106 	br	80083c0 <__alt_data_end+0xfc0083c0>
 80085fc:	8805883a 	mov	r2,r17
 8008600:	003fb006 	br	80084c4 <__alt_data_end+0xfc0084c4>
 8008604:	8809883a 	mov	r4,r17
 8008608:	980b883a 	mov	r5,r19
 800860c:	8006ec00 	call	8006ec0 <memmove>
 8008610:	003fb206 	br	80084dc <__alt_data_end+0xfc0084dc>
 8008614:	98800217 	ldw	r2,8(r19)
 8008618:	b8800415 	stw	r2,16(r23)
 800861c:	98800317 	ldw	r2,12(r19)
 8008620:	b8800515 	stw	r2,20(r23)
 8008624:	31000726 	beq	r6,r4,8008644 <_realloc_r+0x584>
 8008628:	b8800604 	addi	r2,r23,24
 800862c:	9cc00404 	addi	r19,r19,16
 8008630:	003fa406 	br	80084c4 <__alt_data_end+0xfc0084c4>
 8008634:	9009883a 	mov	r4,r18
 8008638:	800dea40 	call	800dea4 <__malloc_unlock>
 800863c:	0005883a 	mov	r2,zero
 8008640:	003f0606 	br	800825c <__alt_data_end+0xfc00825c>
 8008644:	98c00417 	ldw	r3,16(r19)
 8008648:	9cc00604 	addi	r19,r19,24
 800864c:	b8800804 	addi	r2,r23,32
 8008650:	b8c00615 	stw	r3,24(r23)
 8008654:	98ffff17 	ldw	r3,-4(r19)
 8008658:	b8c00715 	stw	r3,28(r23)
 800865c:	003f9906 	br	80084c4 <__alt_data_end+0xfc0084c4>

08008660 <__fpclassifyd>:
 8008660:	00a00034 	movhi	r2,32768
 8008664:	10bfffc4 	addi	r2,r2,-1
 8008668:	2884703a 	and	r2,r5,r2
 800866c:	10000726 	beq	r2,zero,800868c <__fpclassifyd+0x2c>
 8008670:	00fffc34 	movhi	r3,65520
 8008674:	019ff834 	movhi	r6,32736
 8008678:	28c7883a 	add	r3,r5,r3
 800867c:	31bfffc4 	addi	r6,r6,-1
 8008680:	30c00536 	bltu	r6,r3,8008698 <__fpclassifyd+0x38>
 8008684:	00800104 	movi	r2,4
 8008688:	f800283a 	ret
 800868c:	2000021e 	bne	r4,zero,8008698 <__fpclassifyd+0x38>
 8008690:	00800084 	movi	r2,2
 8008694:	f800283a 	ret
 8008698:	00dffc34 	movhi	r3,32752
 800869c:	019ff834 	movhi	r6,32736
 80086a0:	28cb883a 	add	r5,r5,r3
 80086a4:	31bfffc4 	addi	r6,r6,-1
 80086a8:	317ff62e 	bgeu	r6,r5,8008684 <__alt_data_end+0xfc008684>
 80086ac:	01400434 	movhi	r5,16
 80086b0:	297fffc4 	addi	r5,r5,-1
 80086b4:	28800236 	bltu	r5,r2,80086c0 <__fpclassifyd+0x60>
 80086b8:	008000c4 	movi	r2,3
 80086bc:	f800283a 	ret
 80086c0:	10c00226 	beq	r2,r3,80086cc <__fpclassifyd+0x6c>
 80086c4:	0005883a 	mov	r2,zero
 80086c8:	f800283a 	ret
 80086cc:	2005003a 	cmpeq	r2,r4,zero
 80086d0:	f800283a 	ret

080086d4 <strcmp>:
 80086d4:	2144b03a 	or	r2,r4,r5
 80086d8:	108000cc 	andi	r2,r2,3
 80086dc:	1000171e 	bne	r2,zero,800873c <strcmp+0x68>
 80086e0:	20800017 	ldw	r2,0(r4)
 80086e4:	28c00017 	ldw	r3,0(r5)
 80086e8:	10c0141e 	bne	r2,r3,800873c <strcmp+0x68>
 80086ec:	027fbff4 	movhi	r9,65279
 80086f0:	4a7fbfc4 	addi	r9,r9,-257
 80086f4:	0086303a 	nor	r3,zero,r2
 80086f8:	02202074 	movhi	r8,32897
 80086fc:	1245883a 	add	r2,r2,r9
 8008700:	42202004 	addi	r8,r8,-32640
 8008704:	10c4703a 	and	r2,r2,r3
 8008708:	1204703a 	and	r2,r2,r8
 800870c:	10000226 	beq	r2,zero,8008718 <strcmp+0x44>
 8008710:	00001706 	br	8008770 <strcmp+0x9c>
 8008714:	1000161e 	bne	r2,zero,8008770 <strcmp+0x9c>
 8008718:	21000104 	addi	r4,r4,4
 800871c:	20c00017 	ldw	r3,0(r4)
 8008720:	29400104 	addi	r5,r5,4
 8008724:	29800017 	ldw	r6,0(r5)
 8008728:	1a4f883a 	add	r7,r3,r9
 800872c:	00c4303a 	nor	r2,zero,r3
 8008730:	3884703a 	and	r2,r7,r2
 8008734:	1204703a 	and	r2,r2,r8
 8008738:	19bff626 	beq	r3,r6,8008714 <__alt_data_end+0xfc008714>
 800873c:	20800007 	ldb	r2,0(r4)
 8008740:	1000051e 	bne	r2,zero,8008758 <strcmp+0x84>
 8008744:	00000606 	br	8008760 <strcmp+0x8c>
 8008748:	21000044 	addi	r4,r4,1
 800874c:	20800007 	ldb	r2,0(r4)
 8008750:	29400044 	addi	r5,r5,1
 8008754:	10000226 	beq	r2,zero,8008760 <strcmp+0x8c>
 8008758:	28c00007 	ldb	r3,0(r5)
 800875c:	10fffa26 	beq	r2,r3,8008748 <__alt_data_end+0xfc008748>
 8008760:	20800003 	ldbu	r2,0(r4)
 8008764:	28c00003 	ldbu	r3,0(r5)
 8008768:	10c5c83a 	sub	r2,r2,r3
 800876c:	f800283a 	ret
 8008770:	0005883a 	mov	r2,zero
 8008774:	f800283a 	ret

08008778 <__sprint_r.part.0>:
 8008778:	28801917 	ldw	r2,100(r5)
 800877c:	defff604 	addi	sp,sp,-40
 8008780:	dd400515 	stw	r21,20(sp)
 8008784:	dcc00315 	stw	r19,12(sp)
 8008788:	dfc00915 	stw	ra,36(sp)
 800878c:	df000815 	stw	fp,32(sp)
 8008790:	ddc00715 	stw	r23,28(sp)
 8008794:	dd800615 	stw	r22,24(sp)
 8008798:	dd000415 	stw	r20,16(sp)
 800879c:	dc800215 	stw	r18,8(sp)
 80087a0:	dc400115 	stw	r17,4(sp)
 80087a4:	dc000015 	stw	r16,0(sp)
 80087a8:	1088000c 	andi	r2,r2,8192
 80087ac:	2827883a 	mov	r19,r5
 80087b0:	302b883a 	mov	r21,r6
 80087b4:	10002d26 	beq	r2,zero,800886c <__sprint_r.part.0+0xf4>
 80087b8:	30800217 	ldw	r2,8(r6)
 80087bc:	35800017 	ldw	r22,0(r6)
 80087c0:	10002826 	beq	r2,zero,8008864 <__sprint_r.part.0+0xec>
 80087c4:	2029883a 	mov	r20,r4
 80087c8:	b5c00104 	addi	r23,r22,4
 80087cc:	04bfffc4 	movi	r18,-1
 80087d0:	bc400017 	ldw	r17,0(r23)
 80087d4:	b4000017 	ldw	r16,0(r22)
 80087d8:	0039883a 	mov	fp,zero
 80087dc:	8822d0ba 	srli	r17,r17,2
 80087e0:	04400316 	blt	zero,r17,80087f0 <__sprint_r.part.0+0x78>
 80087e4:	00001706 	br	8008844 <__sprint_r.part.0+0xcc>
 80087e8:	84000104 	addi	r16,r16,4
 80087ec:	8f001526 	beq	r17,fp,8008844 <__sprint_r.part.0+0xcc>
 80087f0:	81400017 	ldw	r5,0(r16)
 80087f4:	a009883a 	mov	r4,r20
 80087f8:	980d883a 	mov	r6,r19
 80087fc:	8009dac0 	call	8009dac <_fputwc_r>
 8008800:	e7000044 	addi	fp,fp,1
 8008804:	14bff81e 	bne	r2,r18,80087e8 <__alt_data_end+0xfc0087e8>
 8008808:	9005883a 	mov	r2,r18
 800880c:	a8000215 	stw	zero,8(r21)
 8008810:	a8000115 	stw	zero,4(r21)
 8008814:	dfc00917 	ldw	ra,36(sp)
 8008818:	df000817 	ldw	fp,32(sp)
 800881c:	ddc00717 	ldw	r23,28(sp)
 8008820:	dd800617 	ldw	r22,24(sp)
 8008824:	dd400517 	ldw	r21,20(sp)
 8008828:	dd000417 	ldw	r20,16(sp)
 800882c:	dcc00317 	ldw	r19,12(sp)
 8008830:	dc800217 	ldw	r18,8(sp)
 8008834:	dc400117 	ldw	r17,4(sp)
 8008838:	dc000017 	ldw	r16,0(sp)
 800883c:	dec00a04 	addi	sp,sp,40
 8008840:	f800283a 	ret
 8008844:	a8c00217 	ldw	r3,8(r21)
 8008848:	8c63883a 	add	r17,r17,r17
 800884c:	8c63883a 	add	r17,r17,r17
 8008850:	1c45c83a 	sub	r2,r3,r17
 8008854:	a8800215 	stw	r2,8(r21)
 8008858:	b5800204 	addi	r22,r22,8
 800885c:	bdc00204 	addi	r23,r23,8
 8008860:	103fdb1e 	bne	r2,zero,80087d0 <__alt_data_end+0xfc0087d0>
 8008864:	0005883a 	mov	r2,zero
 8008868:	003fe806 	br	800880c <__alt_data_end+0xfc00880c>
 800886c:	80067a40 	call	80067a4 <__sfvwrite_r>
 8008870:	003fe606 	br	800880c <__alt_data_end+0xfc00880c>

08008874 <__sprint_r>:
 8008874:	30c00217 	ldw	r3,8(r6)
 8008878:	18000126 	beq	r3,zero,8008880 <__sprint_r+0xc>
 800887c:	80087781 	jmpi	8008778 <__sprint_r.part.0>
 8008880:	30000115 	stw	zero,4(r6)
 8008884:	0005883a 	mov	r2,zero
 8008888:	f800283a 	ret

0800888c <___vfiprintf_internal_r>:
 800888c:	defeca04 	addi	sp,sp,-1240
 8008890:	dcc12f15 	stw	r19,1212(sp)
 8008894:	dfc13515 	stw	ra,1236(sp)
 8008898:	df013415 	stw	fp,1232(sp)
 800889c:	ddc13315 	stw	r23,1228(sp)
 80088a0:	dd813215 	stw	r22,1224(sp)
 80088a4:	dd413115 	stw	r21,1220(sp)
 80088a8:	dd013015 	stw	r20,1216(sp)
 80088ac:	dc812e15 	stw	r18,1208(sp)
 80088b0:	dc412d15 	stw	r17,1204(sp)
 80088b4:	dc012c15 	stw	r16,1200(sp)
 80088b8:	d9012115 	stw	r4,1156(sp)
 80088bc:	d9412015 	stw	r5,1152(sp)
 80088c0:	d9c12315 	stw	r7,1164(sp)
 80088c4:	3027883a 	mov	r19,r6
 80088c8:	20000226 	beq	r4,zero,80088d4 <___vfiprintf_internal_r+0x48>
 80088cc:	20800e17 	ldw	r2,56(r4)
 80088d0:	1000f726 	beq	r2,zero,8008cb0 <___vfiprintf_internal_r+0x424>
 80088d4:	d8812017 	ldw	r2,1152(sp)
 80088d8:	10c0030b 	ldhu	r3,12(r2)
 80088dc:	1908000c 	andi	r4,r3,8192
 80088e0:	1805883a 	mov	r2,r3
 80088e4:	2000081e 	bne	r4,zero,8008908 <___vfiprintf_internal_r+0x7c>
 80088e8:	d9412017 	ldw	r5,1152(sp)
 80088ec:	18880014 	ori	r2,r3,8192
 80088f0:	00f7ffc4 	movi	r3,-8193
 80088f4:	29001917 	ldw	r4,100(r5)
 80088f8:	2880030d 	sth	r2,12(r5)
 80088fc:	20c8703a 	and	r4,r4,r3
 8008900:	29001915 	stw	r4,100(r5)
 8008904:	1007883a 	mov	r3,r2
 8008908:	1100020c 	andi	r4,r2,8
 800890c:	2000a726 	beq	r4,zero,8008bac <___vfiprintf_internal_r+0x320>
 8008910:	d9412017 	ldw	r5,1152(sp)
 8008914:	29000417 	ldw	r4,16(r5)
 8008918:	2000a426 	beq	r4,zero,8008bac <___vfiprintf_internal_r+0x320>
 800891c:	1080068c 	andi	r2,r2,26
 8008920:	01000284 	movi	r4,10
 8008924:	1100ab26 	beq	r2,r4,8008bd4 <___vfiprintf_internal_r+0x348>
 8008928:	d9010a04 	addi	r4,sp,1064
 800892c:	d94109c4 	addi	r5,sp,1063
 8008930:	07020074 	movhi	fp,2049
 8008934:	04420074 	movhi	r17,2049
 8008938:	2145c83a 	sub	r2,r4,r5
 800893c:	e7046d04 	addi	fp,fp,4532
 8008940:	8c446904 	addi	r17,r17,4516
 8008944:	d9011e15 	stw	r4,1144(sp)
 8008948:	d9411f15 	stw	r5,1148(sp)
 800894c:	dec11a15 	stw	sp,1128(sp)
 8008950:	d8011c15 	stw	zero,1136(sp)
 8008954:	d8011b15 	stw	zero,1132(sp)
 8008958:	d8012715 	stw	zero,1180(sp)
 800895c:	d8012515 	stw	zero,1172(sp)
 8008960:	d811883a 	mov	r8,sp
 8008964:	d8812815 	stw	r2,1184(sp)
 8008968:	982f883a 	mov	r23,r19
 800896c:	b8800007 	ldb	r2,0(r23)
 8008970:	1003b026 	beq	r2,zero,8009834 <___vfiprintf_internal_r+0xfa8>
 8008974:	01000944 	movi	r4,37
 8008978:	1103ae26 	beq	r2,r4,8009834 <___vfiprintf_internal_r+0xfa8>
 800897c:	b805883a 	mov	r2,r23
 8008980:	00000106 	br	8008988 <___vfiprintf_internal_r+0xfc>
 8008984:	19000326 	beq	r3,r4,8008994 <___vfiprintf_internal_r+0x108>
 8008988:	10800044 	addi	r2,r2,1
 800898c:	10c00007 	ldb	r3,0(r2)
 8008990:	183ffc1e 	bne	r3,zero,8008984 <__alt_data_end+0xfc008984>
 8008994:	15e1c83a 	sub	r16,r2,r23
 8008998:	1029883a 	mov	r20,r2
 800899c:	80001026 	beq	r16,zero,80089e0 <___vfiprintf_internal_r+0x154>
 80089a0:	d8c11c17 	ldw	r3,1136(sp)
 80089a4:	d8811b17 	ldw	r2,1132(sp)
 80089a8:	45c00015 	stw	r23,0(r8)
 80089ac:	80c7883a 	add	r3,r16,r3
 80089b0:	10800044 	addi	r2,r2,1
 80089b4:	44000115 	stw	r16,4(r8)
 80089b8:	d8c11c15 	stw	r3,1136(sp)
 80089bc:	d8811b15 	stw	r2,1132(sp)
 80089c0:	010001c4 	movi	r4,7
 80089c4:	2080740e 	bge	r4,r2,8008b98 <___vfiprintf_internal_r+0x30c>
 80089c8:	1803a71e 	bne	r3,zero,8009868 <___vfiprintf_internal_r+0xfdc>
 80089cc:	d8c12517 	ldw	r3,1172(sp)
 80089d0:	d8011b15 	stw	zero,1132(sp)
 80089d4:	d811883a 	mov	r8,sp
 80089d8:	1c07883a 	add	r3,r3,r16
 80089dc:	d8c12515 	stw	r3,1172(sp)
 80089e0:	a0800007 	ldb	r2,0(r20)
 80089e4:	1002bf26 	beq	r2,zero,80094e4 <___vfiprintf_internal_r+0xc58>
 80089e8:	a5c00044 	addi	r23,r20,1
 80089ec:	a1800047 	ldb	r6,1(r20)
 80089f0:	d8011d85 	stb	zero,1142(sp)
 80089f4:	d8012205 	stb	zero,1160(sp)
 80089f8:	043fffc4 	movi	r16,-1
 80089fc:	d8012415 	stw	zero,1168(sp)
 8008a00:	0025883a 	mov	r18,zero
 8008a04:	05001604 	movi	r20,88
 8008a08:	05400244 	movi	r21,9
 8008a0c:	4027883a 	mov	r19,r8
 8008a10:	bdc00044 	addi	r23,r23,1
 8008a14:	30bff804 	addi	r2,r6,-32
 8008a18:	a0825636 	bltu	r20,r2,8009374 <___vfiprintf_internal_r+0xae8>
 8008a1c:	100490ba 	slli	r2,r2,2
 8008a20:	01020074 	movhi	r4,2049
 8008a24:	21228d04 	addi	r4,r4,-30156
 8008a28:	1105883a 	add	r2,r2,r4
 8008a2c:	10800017 	ldw	r2,0(r2)
 8008a30:	1000683a 	jmp	r2
 8008a34:	08009304 	addi	zero,at,588
 8008a38:	08009374 	orhi	zero,at,589
 8008a3c:	08009374 	orhi	zero,at,589
 8008a40:	08009368 	cmpgeui	zero,at,589
 8008a44:	08009374 	orhi	zero,at,589
 8008a48:	08009374 	orhi	zero,at,589
 8008a4c:	08009374 	orhi	zero,at,589
 8008a50:	08009374 	orhi	zero,at,589
 8008a54:	08009374 	orhi	zero,at,589
 8008a58:	08009374 	orhi	zero,at,589
 8008a5c:	080090f4 	orhi	zero,at,579
 8008a60:	0800931c 	xori	zero,at,588
 8008a64:	08009374 	orhi	zero,at,589
 8008a68:	08008cc8 	cmpgei	zero,at,563
 8008a6c:	08009118 	cmpnei	zero,at,580
 8008a70:	08009374 	orhi	zero,at,589
 8008a74:	08008cd4 	ori	zero,at,563
 8008a78:	08008ce0 	cmpeqi	zero,at,563
 8008a7c:	08008ce0 	cmpeqi	zero,at,563
 8008a80:	08008ce0 	cmpeqi	zero,at,563
 8008a84:	08008ce0 	cmpeqi	zero,at,563
 8008a88:	08008ce0 	cmpeqi	zero,at,563
 8008a8c:	08008ce0 	cmpeqi	zero,at,563
 8008a90:	08008ce0 	cmpeqi	zero,at,563
 8008a94:	08008ce0 	cmpeqi	zero,at,563
 8008a98:	08008ce0 	cmpeqi	zero,at,563
 8008a9c:	08009374 	orhi	zero,at,589
 8008aa0:	08009374 	orhi	zero,at,589
 8008aa4:	08009374 	orhi	zero,at,589
 8008aa8:	08009374 	orhi	zero,at,589
 8008aac:	08009374 	orhi	zero,at,589
 8008ab0:	08009374 	orhi	zero,at,589
 8008ab4:	08009374 	orhi	zero,at,589
 8008ab8:	08009374 	orhi	zero,at,589
 8008abc:	08009374 	orhi	zero,at,589
 8008ac0:	08009374 	orhi	zero,at,589
 8008ac4:	08008d20 	cmpeqi	zero,at,564
 8008ac8:	08009374 	orhi	zero,at,589
 8008acc:	08009374 	orhi	zero,at,589
 8008ad0:	08009374 	orhi	zero,at,589
 8008ad4:	08009374 	orhi	zero,at,589
 8008ad8:	08009374 	orhi	zero,at,589
 8008adc:	08009374 	orhi	zero,at,589
 8008ae0:	08009374 	orhi	zero,at,589
 8008ae4:	08009374 	orhi	zero,at,589
 8008ae8:	08009374 	orhi	zero,at,589
 8008aec:	08009374 	orhi	zero,at,589
 8008af0:	08009010 	cmplti	zero,at,576
 8008af4:	08009374 	orhi	zero,at,589
 8008af8:	08009374 	orhi	zero,at,589
 8008afc:	08009374 	orhi	zero,at,589
 8008b00:	08009374 	orhi	zero,at,589
 8008b04:	08009374 	orhi	zero,at,589
 8008b08:	08009050 	cmplti	zero,at,577
 8008b0c:	08009374 	orhi	zero,at,589
 8008b10:	08009374 	orhi	zero,at,589
 8008b14:	08009094 	ori	zero,at,578
 8008b18:	08009374 	orhi	zero,at,589
 8008b1c:	08009374 	orhi	zero,at,589
 8008b20:	08009374 	orhi	zero,at,589
 8008b24:	08009374 	orhi	zero,at,589
 8008b28:	08009374 	orhi	zero,at,589
 8008b2c:	08009374 	orhi	zero,at,589
 8008b30:	08009374 	orhi	zero,at,589
 8008b34:	08009374 	orhi	zero,at,589
 8008b38:	08009374 	orhi	zero,at,589
 8008b3c:	08009374 	orhi	zero,at,589
 8008b40:	08008fdc 	xori	zero,at,575
 8008b44:	0800932c 	andhi	zero,at,588
 8008b48:	08009374 	orhi	zero,at,589
 8008b4c:	08009374 	orhi	zero,at,589
 8008b50:	08009374 	orhi	zero,at,589
 8008b54:	08009168 	cmpgeui	zero,at,581
 8008b58:	0800932c 	andhi	zero,at,588
 8008b5c:	08009374 	orhi	zero,at,589
 8008b60:	08009374 	orhi	zero,at,589
 8008b64:	08009080 	call	800908 <__alt_mem_sdram-0x77ff6f8>
 8008b68:	08009374 	orhi	zero,at,589
 8008b6c:	080092cc 	andi	zero,at,587
 8008b70:	08009254 	ori	zero,at,585
 8008b74:	08009288 	cmpgei	zero,at,586
 8008b78:	08009174 	orhi	zero,at,581
 8008b7c:	08009374 	orhi	zero,at,589
 8008b80:	08009180 	call	800918 <__alt_mem_sdram-0x77ff6e8>
 8008b84:	08009374 	orhi	zero,at,589
 8008b88:	080091dc 	xori	zero,at,583
 8008b8c:	08009374 	orhi	zero,at,589
 8008b90:	08009374 	orhi	zero,at,589
 8008b94:	08009210 	cmplti	zero,at,584
 8008b98:	42000204 	addi	r8,r8,8
 8008b9c:	d8c12517 	ldw	r3,1172(sp)
 8008ba0:	1c07883a 	add	r3,r3,r16
 8008ba4:	d8c12515 	stw	r3,1172(sp)
 8008ba8:	003f8d06 	br	80089e0 <__alt_data_end+0xfc0089e0>
 8008bac:	d9012117 	ldw	r4,1156(sp)
 8008bb0:	d9412017 	ldw	r5,1152(sp)
 8008bb4:	8004c380 	call	8004c38 <__swsetup_r>
 8008bb8:	1000301e 	bne	r2,zero,8008c7c <___vfiprintf_internal_r+0x3f0>
 8008bbc:	d8812017 	ldw	r2,1152(sp)
 8008bc0:	01000284 	movi	r4,10
 8008bc4:	10c0030b 	ldhu	r3,12(r2)
 8008bc8:	1805883a 	mov	r2,r3
 8008bcc:	1080068c 	andi	r2,r2,26
 8008bd0:	113f551e 	bne	r2,r4,8008928 <__alt_data_end+0xfc008928>
 8008bd4:	d9012017 	ldw	r4,1152(sp)
 8008bd8:	2080038b 	ldhu	r2,14(r4)
 8008bdc:	113fffcc 	andi	r4,r2,65535
 8008be0:	2120001c 	xori	r4,r4,32768
 8008be4:	21200004 	addi	r4,r4,-32768
 8008be8:	203f4f16 	blt	r4,zero,8008928 <__alt_data_end+0xfc008928>
 8008bec:	d9412017 	ldw	r5,1152(sp)
 8008bf0:	d9012117 	ldw	r4,1156(sp)
 8008bf4:	d9c12317 	ldw	r7,1164(sp)
 8008bf8:	2b001917 	ldw	r12,100(r5)
 8008bfc:	2ac00717 	ldw	r11,28(r5)
 8008c00:	2a800917 	ldw	r10,36(r5)
 8008c04:	02010004 	movi	r8,1024
 8008c08:	18ffff4c 	andi	r3,r3,65533
 8008c0c:	da0b883a 	add	r5,sp,r8
 8008c10:	980d883a 	mov	r6,r19
 8008c14:	d8c1030d 	sth	r3,1036(sp)
 8008c18:	db011915 	stw	r12,1124(sp)
 8008c1c:	d881038d 	sth	r2,1038(sp)
 8008c20:	dac10715 	stw	r11,1052(sp)
 8008c24:	da810915 	stw	r10,1060(sp)
 8008c28:	dec10015 	stw	sp,1024(sp)
 8008c2c:	dec10415 	stw	sp,1040(sp)
 8008c30:	da010215 	stw	r8,1032(sp)
 8008c34:	da010515 	stw	r8,1044(sp)
 8008c38:	d8010615 	stw	zero,1048(sp)
 8008c3c:	800888c0 	call	800888c <___vfiprintf_internal_r>
 8008c40:	1021883a 	mov	r16,r2
 8008c44:	10000416 	blt	r2,zero,8008c58 <___vfiprintf_internal_r+0x3cc>
 8008c48:	d9012117 	ldw	r4,1156(sp)
 8008c4c:	d9410004 	addi	r5,sp,1024
 8008c50:	80004640 	call	8000464 <_fflush_r>
 8008c54:	10040f1e 	bne	r2,zero,8009c94 <___vfiprintf_internal_r+0x1408>
 8008c58:	d881030b 	ldhu	r2,1036(sp)
 8008c5c:	1080100c 	andi	r2,r2,64
 8008c60:	10000426 	beq	r2,zero,8008c74 <___vfiprintf_internal_r+0x3e8>
 8008c64:	d8c12017 	ldw	r3,1152(sp)
 8008c68:	1880030b 	ldhu	r2,12(r3)
 8008c6c:	10801014 	ori	r2,r2,64
 8008c70:	1880030d 	sth	r2,12(r3)
 8008c74:	8005883a 	mov	r2,r16
 8008c78:	00000106 	br	8008c80 <___vfiprintf_internal_r+0x3f4>
 8008c7c:	00bfffc4 	movi	r2,-1
 8008c80:	dfc13517 	ldw	ra,1236(sp)
 8008c84:	df013417 	ldw	fp,1232(sp)
 8008c88:	ddc13317 	ldw	r23,1228(sp)
 8008c8c:	dd813217 	ldw	r22,1224(sp)
 8008c90:	dd413117 	ldw	r21,1220(sp)
 8008c94:	dd013017 	ldw	r20,1216(sp)
 8008c98:	dcc12f17 	ldw	r19,1212(sp)
 8008c9c:	dc812e17 	ldw	r18,1208(sp)
 8008ca0:	dc412d17 	ldw	r17,1204(sp)
 8008ca4:	dc012c17 	ldw	r16,1200(sp)
 8008ca8:	dec13604 	addi	sp,sp,1240
 8008cac:	f800283a 	ret
 8008cb0:	8000a200 	call	8000a20 <__sinit>
 8008cb4:	003f0706 	br	80088d4 <__alt_data_end+0xfc0088d4>
 8008cb8:	d8c12417 	ldw	r3,1168(sp)
 8008cbc:	d8812315 	stw	r2,1164(sp)
 8008cc0:	00c7c83a 	sub	r3,zero,r3
 8008cc4:	d8c12415 	stw	r3,1168(sp)
 8008cc8:	94800114 	ori	r18,r18,4
 8008ccc:	b9800007 	ldb	r6,0(r23)
 8008cd0:	003f4f06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8008cd4:	94802014 	ori	r18,r18,128
 8008cd8:	b9800007 	ldb	r6,0(r23)
 8008cdc:	003f4c06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8008ce0:	dc012615 	stw	r16,1176(sp)
 8008ce4:	d8012415 	stw	zero,1168(sp)
 8008ce8:	35bff404 	addi	r22,r6,-48
 8008cec:	0009883a 	mov	r4,zero
 8008cf0:	b821883a 	mov	r16,r23
 8008cf4:	01400284 	movi	r5,10
 8008cf8:	800b0800 	call	800b080 <__mulsi3>
 8008cfc:	81800007 	ldb	r6,0(r16)
 8008d00:	1589883a 	add	r4,r2,r22
 8008d04:	bdc00044 	addi	r23,r23,1
 8008d08:	35bff404 	addi	r22,r6,-48
 8008d0c:	b821883a 	mov	r16,r23
 8008d10:	adbff82e 	bgeu	r21,r22,8008cf4 <__alt_data_end+0xfc008cf4>
 8008d14:	d9012415 	stw	r4,1168(sp)
 8008d18:	dc012617 	ldw	r16,1176(sp)
 8008d1c:	003f3d06 	br	8008a14 <__alt_data_end+0xfc008a14>
 8008d20:	d8c12203 	ldbu	r3,1160(sp)
 8008d24:	94800414 	ori	r18,r18,16
 8008d28:	9080080c 	andi	r2,r18,32
 8008d2c:	d8c11d85 	stb	r3,1142(sp)
 8008d30:	9811883a 	mov	r8,r19
 8008d34:	d8c12317 	ldw	r3,1164(sp)
 8008d38:	10018226 	beq	r2,zero,8009344 <___vfiprintf_internal_r+0xab8>
 8008d3c:	d9012317 	ldw	r4,1164(sp)
 8008d40:	18800117 	ldw	r2,4(r3)
 8008d44:	1cc00017 	ldw	r19,0(r3)
 8008d48:	21000204 	addi	r4,r4,8
 8008d4c:	d9012315 	stw	r4,1164(sp)
 8008d50:	102b883a 	mov	r21,r2
 8008d54:	10030016 	blt	r2,zero,8009958 <___vfiprintf_internal_r+0x10cc>
 8008d58:	dd811d83 	ldbu	r22,1142(sp)
 8008d5c:	8029883a 	mov	r20,r16
 8008d60:	00800044 	movi	r2,1
 8008d64:	9d46b03a 	or	r3,r19,r21
 8008d68:	80000216 	blt	r16,zero,8008d74 <___vfiprintf_internal_r+0x4e8>
 8008d6c:	013fdfc4 	movi	r4,-129
 8008d70:	9124703a 	and	r18,r18,r4
 8008d74:	1801b41e 	bne	r3,zero,8009448 <___vfiprintf_internal_r+0xbbc>
 8008d78:	80028126 	beq	r16,zero,8009780 <___vfiprintf_internal_r+0xef4>
 8008d7c:	10803fcc 	andi	r2,r2,255
 8008d80:	00c00044 	movi	r3,1
 8008d84:	10c1d126 	beq	r2,r3,80094cc <___vfiprintf_internal_r+0xc40>
 8008d88:	00c00084 	movi	r3,2
 8008d8c:	10c28626 	beq	r2,r3,80097a8 <___vfiprintf_internal_r+0xf1c>
 8008d90:	d8c10a04 	addi	r3,sp,1064
 8008d94:	9808d0fa 	srli	r4,r19,3
 8008d98:	a80a977a 	slli	r5,r21,29
 8008d9c:	a82ad0fa 	srli	r21,r21,3
 8008da0:	9cc001cc 	andi	r19,r19,7
 8008da4:	98800c04 	addi	r2,r19,48
 8008da8:	18ffffc4 	addi	r3,r3,-1
 8008dac:	2926b03a 	or	r19,r5,r4
 8008db0:	18800005 	stb	r2,0(r3)
 8008db4:	9d48b03a 	or	r4,r19,r21
 8008db8:	203ff61e 	bne	r4,zero,8008d94 <__alt_data_end+0xfc008d94>
 8008dbc:	9100004c 	andi	r4,r18,1
 8008dc0:	d8c12215 	stw	r3,1160(sp)
 8008dc4:	2002b31e 	bne	r4,zero,8009894 <___vfiprintf_internal_r+0x1008>
 8008dc8:	d9411e17 	ldw	r5,1144(sp)
 8008dcc:	28e9c83a 	sub	r20,r5,r3
 8008dd0:	a02b883a 	mov	r21,r20
 8008dd4:	a400010e 	bge	r20,r16,8008ddc <___vfiprintf_internal_r+0x550>
 8008dd8:	802b883a 	mov	r21,r16
 8008ddc:	b5803fcc 	andi	r22,r22,255
 8008de0:	b580201c 	xori	r22,r22,128
 8008de4:	b5bfe004 	addi	r22,r22,-128
 8008de8:	b0000126 	beq	r22,zero,8008df0 <___vfiprintf_internal_r+0x564>
 8008dec:	ad400044 	addi	r21,r21,1
 8008df0:	9280008c 	andi	r10,r18,2
 8008df4:	50000126 	beq	r10,zero,8008dfc <___vfiprintf_internal_r+0x570>
 8008df8:	ad400084 	addi	r21,r21,2
 8008dfc:	9580210c 	andi	r22,r18,132
 8008e00:	b001751e 	bne	r22,zero,80093d8 <___vfiprintf_internal_r+0xb4c>
 8008e04:	d9012417 	ldw	r4,1168(sp)
 8008e08:	2567c83a 	sub	r19,r4,r21
 8008e0c:	04c1720e 	bge	zero,r19,80093d8 <___vfiprintf_internal_r+0xb4c>
 8008e10:	01c00404 	movi	r7,16
 8008e14:	d8c11c17 	ldw	r3,1136(sp)
 8008e18:	3cc36b0e 	bge	r7,r19,8009bc8 <___vfiprintf_internal_r+0x133c>
 8008e1c:	00820074 	movhi	r2,2049
 8008e20:	10846d04 	addi	r2,r2,4532
 8008e24:	dc012915 	stw	r16,1188(sp)
 8008e28:	d9011b17 	ldw	r4,1132(sp)
 8008e2c:	9821883a 	mov	r16,r19
 8008e30:	d8812615 	stw	r2,1176(sp)
 8008e34:	030001c4 	movi	r12,7
 8008e38:	5027883a 	mov	r19,r10
 8008e3c:	00000506 	br	8008e54 <___vfiprintf_internal_r+0x5c8>
 8008e40:	21400084 	addi	r5,r4,2
 8008e44:	42000204 	addi	r8,r8,8
 8008e48:	1009883a 	mov	r4,r2
 8008e4c:	843ffc04 	addi	r16,r16,-16
 8008e50:	3c000d0e 	bge	r7,r16,8008e88 <___vfiprintf_internal_r+0x5fc>
 8008e54:	18c00404 	addi	r3,r3,16
 8008e58:	20800044 	addi	r2,r4,1
 8008e5c:	47000015 	stw	fp,0(r8)
 8008e60:	41c00115 	stw	r7,4(r8)
 8008e64:	d8c11c15 	stw	r3,1136(sp)
 8008e68:	d8811b15 	stw	r2,1132(sp)
 8008e6c:	60bff40e 	bge	r12,r2,8008e40 <__alt_data_end+0xfc008e40>
 8008e70:	18014b1e 	bne	r3,zero,80093a0 <___vfiprintf_internal_r+0xb14>
 8008e74:	843ffc04 	addi	r16,r16,-16
 8008e78:	0009883a 	mov	r4,zero
 8008e7c:	01400044 	movi	r5,1
 8008e80:	d811883a 	mov	r8,sp
 8008e84:	3c3ff316 	blt	r7,r16,8008e54 <__alt_data_end+0xfc008e54>
 8008e88:	9815883a 	mov	r10,r19
 8008e8c:	8027883a 	mov	r19,r16
 8008e90:	dc012917 	ldw	r16,1188(sp)
 8008e94:	d9012617 	ldw	r4,1176(sp)
 8008e98:	98c7883a 	add	r3,r19,r3
 8008e9c:	44c00115 	stw	r19,4(r8)
 8008ea0:	41000015 	stw	r4,0(r8)
 8008ea4:	d8c11c15 	stw	r3,1136(sp)
 8008ea8:	d9411b15 	stw	r5,1132(sp)
 8008eac:	008001c4 	movi	r2,7
 8008eb0:	11425116 	blt	r2,r5,80097f8 <___vfiprintf_internal_r+0xf6c>
 8008eb4:	d9011d87 	ldb	r4,1142(sp)
 8008eb8:	42000204 	addi	r8,r8,8
 8008ebc:	28800044 	addi	r2,r5,1
 8008ec0:	20014a1e 	bne	r4,zero,80093ec <___vfiprintf_internal_r+0xb60>
 8008ec4:	50000c26 	beq	r10,zero,8008ef8 <___vfiprintf_internal_r+0x66c>
 8008ec8:	d9011d04 	addi	r4,sp,1140
 8008ecc:	18c00084 	addi	r3,r3,2
 8008ed0:	41000015 	stw	r4,0(r8)
 8008ed4:	01000084 	movi	r4,2
 8008ed8:	41000115 	stw	r4,4(r8)
 8008edc:	d8c11c15 	stw	r3,1136(sp)
 8008ee0:	d8811b15 	stw	r2,1132(sp)
 8008ee4:	010001c4 	movi	r4,7
 8008ee8:	20822016 	blt	r4,r2,800976c <___vfiprintf_internal_r+0xee0>
 8008eec:	100b883a 	mov	r5,r2
 8008ef0:	42000204 	addi	r8,r8,8
 8008ef4:	10800044 	addi	r2,r2,1
 8008ef8:	01002004 	movi	r4,128
 8008efc:	b101de26 	beq	r22,r4,8009678 <___vfiprintf_internal_r+0xdec>
 8008f00:	8521c83a 	sub	r16,r16,r20
 8008f04:	0400230e 	bge	zero,r16,8008f94 <___vfiprintf_internal_r+0x708>
 8008f08:	04c00404 	movi	r19,16
 8008f0c:	9c030d0e 	bge	r19,r16,8009b44 <___vfiprintf_internal_r+0x12b8>
 8008f10:	00820074 	movhi	r2,2049
 8008f14:	10846904 	addi	r2,r2,4516
 8008f18:	d8812615 	stw	r2,1176(sp)
 8008f1c:	058001c4 	movi	r22,7
 8008f20:	00000506 	br	8008f38 <___vfiprintf_internal_r+0x6ac>
 8008f24:	28800084 	addi	r2,r5,2
 8008f28:	42000204 	addi	r8,r8,8
 8008f2c:	200b883a 	mov	r5,r4
 8008f30:	843ffc04 	addi	r16,r16,-16
 8008f34:	9c000d0e 	bge	r19,r16,8008f6c <___vfiprintf_internal_r+0x6e0>
 8008f38:	18c00404 	addi	r3,r3,16
 8008f3c:	29000044 	addi	r4,r5,1
 8008f40:	44400015 	stw	r17,0(r8)
 8008f44:	44c00115 	stw	r19,4(r8)
 8008f48:	d8c11c15 	stw	r3,1136(sp)
 8008f4c:	d9011b15 	stw	r4,1132(sp)
 8008f50:	b13ff40e 	bge	r22,r4,8008f24 <__alt_data_end+0xfc008f24>
 8008f54:	1801321e 	bne	r3,zero,8009420 <___vfiprintf_internal_r+0xb94>
 8008f58:	843ffc04 	addi	r16,r16,-16
 8008f5c:	000b883a 	mov	r5,zero
 8008f60:	00800044 	movi	r2,1
 8008f64:	d811883a 	mov	r8,sp
 8008f68:	9c3ff316 	blt	r19,r16,8008f38 <__alt_data_end+0xfc008f38>
 8008f6c:	d9012617 	ldw	r4,1176(sp)
 8008f70:	1c07883a 	add	r3,r3,r16
 8008f74:	44000115 	stw	r16,4(r8)
 8008f78:	41000015 	stw	r4,0(r8)
 8008f7c:	d8c11c15 	stw	r3,1136(sp)
 8008f80:	d8811b15 	stw	r2,1132(sp)
 8008f84:	010001c4 	movi	r4,7
 8008f88:	20816216 	blt	r4,r2,8009514 <___vfiprintf_internal_r+0xc88>
 8008f8c:	42000204 	addi	r8,r8,8
 8008f90:	10800044 	addi	r2,r2,1
 8008f94:	d9012217 	ldw	r4,1160(sp)
 8008f98:	1d07883a 	add	r3,r3,r20
 8008f9c:	45000115 	stw	r20,4(r8)
 8008fa0:	41000015 	stw	r4,0(r8)
 8008fa4:	d8c11c15 	stw	r3,1136(sp)
 8008fa8:	d8811b15 	stw	r2,1132(sp)
 8008fac:	010001c4 	movi	r4,7
 8008fb0:	2081610e 	bge	r4,r2,8009538 <___vfiprintf_internal_r+0xcac>
 8008fb4:	1802211e 	bne	r3,zero,800983c <___vfiprintf_internal_r+0xfb0>
 8008fb8:	d8011b15 	stw	zero,1132(sp)
 8008fbc:	9480010c 	andi	r18,r18,4
 8008fc0:	9002171e 	bne	r18,zero,8009820 <___vfiprintf_internal_r+0xf94>
 8008fc4:	d9412417 	ldw	r5,1168(sp)
 8008fc8:	a9433716 	blt	r21,r5,8009ca8 <___vfiprintf_internal_r+0x141c>
 8008fcc:	d8812517 	ldw	r2,1172(sp)
 8008fd0:	1545883a 	add	r2,r2,r21
 8008fd4:	d8812515 	stw	r2,1172(sp)
 8008fd8:	00019a06 	br	8009644 <___vfiprintf_internal_r+0xdb8>
 8008fdc:	d8c12317 	ldw	r3,1164(sp)
 8008fe0:	05400044 	movi	r21,1
 8008fe4:	9811883a 	mov	r8,r19
 8008fe8:	18800017 	ldw	r2,0(r3)
 8008fec:	18c00104 	addi	r3,r3,4
 8008ff0:	d8c12315 	stw	r3,1164(sp)
 8008ff4:	d8c10004 	addi	r3,sp,1024
 8008ff8:	d8011d85 	stb	zero,1142(sp)
 8008ffc:	d8810005 	stb	r2,1024(sp)
 8009000:	a829883a 	mov	r20,r21
 8009004:	d8c12215 	stw	r3,1160(sp)
 8009008:	0021883a 	mov	r16,zero
 800900c:	003f7806 	br	8008df0 <__alt_data_end+0xfc008df0>
 8009010:	94800414 	ori	r18,r18,16
 8009014:	9080080c 	andi	r2,r18,32
 8009018:	9811883a 	mov	r8,r19
 800901c:	10009026 	beq	r2,zero,8009260 <___vfiprintf_internal_r+0x9d4>
 8009020:	d8812317 	ldw	r2,1164(sp)
 8009024:	d8c12317 	ldw	r3,1164(sp)
 8009028:	14c00017 	ldw	r19,0(r2)
 800902c:	15400117 	ldw	r21,4(r2)
 8009030:	18c00204 	addi	r3,r3,8
 8009034:	d8c12315 	stw	r3,1164(sp)
 8009038:	0005883a 	mov	r2,zero
 800903c:	9d46b03a 	or	r3,r19,r21
 8009040:	d8011d85 	stb	zero,1142(sp)
 8009044:	8029883a 	mov	r20,r16
 8009048:	002d883a 	mov	r22,zero
 800904c:	003f4606 	br	8008d68 <__alt_data_end+0xfc008d68>
 8009050:	94800414 	ori	r18,r18,16
 8009054:	9080080c 	andi	r2,r18,32
 8009058:	9811883a 	mov	r8,r19
 800905c:	10006226 	beq	r2,zero,80091e8 <___vfiprintf_internal_r+0x95c>
 8009060:	d9012317 	ldw	r4,1164(sp)
 8009064:	00800044 	movi	r2,1
 8009068:	24c00017 	ldw	r19,0(r4)
 800906c:	25400117 	ldw	r21,4(r4)
 8009070:	21000204 	addi	r4,r4,8
 8009074:	d9012315 	stw	r4,1164(sp)
 8009078:	9d46b03a 	or	r3,r19,r21
 800907c:	003ff006 	br	8009040 <__alt_data_end+0xfc009040>
 8009080:	b9800007 	ldb	r6,0(r23)
 8009084:	00801b04 	movi	r2,108
 8009088:	3082b226 	beq	r6,r2,8009b54 <___vfiprintf_internal_r+0x12c8>
 800908c:	94800414 	ori	r18,r18,16
 8009090:	003e5f06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009094:	d8c12203 	ldbu	r3,1160(sp)
 8009098:	01020074 	movhi	r4,2049
 800909c:	21040404 	addi	r4,r4,4112
 80090a0:	d8c11d85 	stb	r3,1142(sp)
 80090a4:	d9012715 	stw	r4,1180(sp)
 80090a8:	90c0080c 	andi	r3,r18,32
 80090ac:	9811883a 	mov	r8,r19
 80090b0:	d8812317 	ldw	r2,1164(sp)
 80090b4:	18005f26 	beq	r3,zero,8009234 <___vfiprintf_internal_r+0x9a8>
 80090b8:	d9012317 	ldw	r4,1164(sp)
 80090bc:	14c00017 	ldw	r19,0(r2)
 80090c0:	15400117 	ldw	r21,4(r2)
 80090c4:	21000204 	addi	r4,r4,8
 80090c8:	d9012315 	stw	r4,1164(sp)
 80090cc:	9080004c 	andi	r2,r18,1
 80090d0:	1001e226 	beq	r2,zero,800985c <___vfiprintf_internal_r+0xfd0>
 80090d4:	9d46b03a 	or	r3,r19,r21
 80090d8:	18024e26 	beq	r3,zero,8009a14 <___vfiprintf_internal_r+0x1188>
 80090dc:	00800c04 	movi	r2,48
 80090e0:	d8811d05 	stb	r2,1140(sp)
 80090e4:	d9811d45 	stb	r6,1141(sp)
 80090e8:	94800094 	ori	r18,r18,2
 80090ec:	00800084 	movi	r2,2
 80090f0:	003fd306 	br	8009040 <__alt_data_end+0xfc009040>
 80090f4:	d9012317 	ldw	r4,1164(sp)
 80090f8:	d9412317 	ldw	r5,1164(sp)
 80090fc:	21000017 	ldw	r4,0(r4)
 8009100:	28800104 	addi	r2,r5,4
 8009104:	d9012415 	stw	r4,1168(sp)
 8009108:	203eeb16 	blt	r4,zero,8008cb8 <__alt_data_end+0xfc008cb8>
 800910c:	d8812315 	stw	r2,1164(sp)
 8009110:	b9800007 	ldb	r6,0(r23)
 8009114:	003e3e06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009118:	b9800007 	ldb	r6,0(r23)
 800911c:	01000a84 	movi	r4,42
 8009120:	b8800044 	addi	r2,r23,1
 8009124:	3102d226 	beq	r6,r4,8009c70 <___vfiprintf_internal_r+0x13e4>
 8009128:	35bff404 	addi	r22,r6,-48
 800912c:	102f883a 	mov	r23,r2
 8009130:	0021883a 	mov	r16,zero
 8009134:	adbe3736 	bltu	r21,r22,8008a14 <__alt_data_end+0xfc008a14>
 8009138:	0009883a 	mov	r4,zero
 800913c:	01400284 	movi	r5,10
 8009140:	800b0800 	call	800b080 <__mulsi3>
 8009144:	b9800007 	ldb	r6,0(r23)
 8009148:	b089883a 	add	r4,r22,r2
 800914c:	bdc00044 	addi	r23,r23,1
 8009150:	35bff404 	addi	r22,r6,-48
 8009154:	adbff92e 	bgeu	r21,r22,800913c <__alt_data_end+0xfc00913c>
 8009158:	2021883a 	mov	r16,r4
 800915c:	203e2d0e 	bge	r4,zero,8008a14 <__alt_data_end+0xfc008a14>
 8009160:	043fffc4 	movi	r16,-1
 8009164:	003e2b06 	br	8008a14 <__alt_data_end+0xfc008a14>
 8009168:	94801014 	ori	r18,r18,64
 800916c:	b9800007 	ldb	r6,0(r23)
 8009170:	003e2706 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009174:	94800814 	ori	r18,r18,32
 8009178:	b9800007 	ldb	r6,0(r23)
 800917c:	003e2406 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009180:	d9412317 	ldw	r5,1164(sp)
 8009184:	d8812317 	ldw	r2,1164(sp)
 8009188:	d8011d85 	stb	zero,1142(sp)
 800918c:	29400017 	ldw	r5,0(r5)
 8009190:	9811883a 	mov	r8,r19
 8009194:	14c00104 	addi	r19,r2,4
 8009198:	d9412215 	stw	r5,1160(sp)
 800919c:	28029026 	beq	r5,zero,8009be0 <___vfiprintf_internal_r+0x1354>
 80091a0:	d9012217 	ldw	r4,1160(sp)
 80091a4:	80027616 	blt	r16,zero,8009b80 <___vfiprintf_internal_r+0x12f4>
 80091a8:	000b883a 	mov	r5,zero
 80091ac:	800d883a 	mov	r6,r16
 80091b0:	da012a15 	stw	r8,1192(sp)
 80091b4:	8006dd80 	call	8006dd8 <memchr>
 80091b8:	da012a17 	ldw	r8,1192(sp)
 80091bc:	1002a026 	beq	r2,zero,8009c40 <___vfiprintf_internal_r+0x13b4>
 80091c0:	d8c12217 	ldw	r3,1160(sp)
 80091c4:	10e9c83a 	sub	r20,r2,r3
 80091c8:	85023816 	blt	r16,r20,8009aac <___vfiprintf_internal_r+0x1220>
 80091cc:	dd811d83 	ldbu	r22,1142(sp)
 80091d0:	dcc12315 	stw	r19,1164(sp)
 80091d4:	0021883a 	mov	r16,zero
 80091d8:	003efd06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80091dc:	9080080c 	andi	r2,r18,32
 80091e0:	9811883a 	mov	r8,r19
 80091e4:	103f9e1e 	bne	r2,zero,8009060 <__alt_data_end+0xfc009060>
 80091e8:	9080040c 	andi	r2,r18,16
 80091ec:	10021726 	beq	r2,zero,8009a4c <___vfiprintf_internal_r+0x11c0>
 80091f0:	d9412317 	ldw	r5,1164(sp)
 80091f4:	002b883a 	mov	r21,zero
 80091f8:	00800044 	movi	r2,1
 80091fc:	2cc00017 	ldw	r19,0(r5)
 8009200:	29400104 	addi	r5,r5,4
 8009204:	d9412315 	stw	r5,1164(sp)
 8009208:	9807883a 	mov	r3,r19
 800920c:	003f8c06 	br	8009040 <__alt_data_end+0xfc009040>
 8009210:	d8c12203 	ldbu	r3,1160(sp)
 8009214:	01020074 	movhi	r4,2049
 8009218:	21040904 	addi	r4,r4,4132
 800921c:	d8c11d85 	stb	r3,1142(sp)
 8009220:	d9012715 	stw	r4,1180(sp)
 8009224:	90c0080c 	andi	r3,r18,32
 8009228:	9811883a 	mov	r8,r19
 800922c:	d8812317 	ldw	r2,1164(sp)
 8009230:	183fa11e 	bne	r3,zero,80090b8 <__alt_data_end+0xfc0090b8>
 8009234:	90c0040c 	andi	r3,r18,16
 8009238:	1801e526 	beq	r3,zero,80099d0 <___vfiprintf_internal_r+0x1144>
 800923c:	d9412317 	ldw	r5,1164(sp)
 8009240:	14c00017 	ldw	r19,0(r2)
 8009244:	002b883a 	mov	r21,zero
 8009248:	29400104 	addi	r5,r5,4
 800924c:	d9412315 	stw	r5,1164(sp)
 8009250:	003f9e06 	br	80090cc <__alt_data_end+0xfc0090cc>
 8009254:	9080080c 	andi	r2,r18,32
 8009258:	9811883a 	mov	r8,r19
 800925c:	103f701e 	bne	r2,zero,8009020 <__alt_data_end+0xfc009020>
 8009260:	9080040c 	andi	r2,r18,16
 8009264:	1001ef26 	beq	r2,zero,8009a24 <___vfiprintf_internal_r+0x1198>
 8009268:	d9012317 	ldw	r4,1164(sp)
 800926c:	002b883a 	mov	r21,zero
 8009270:	0005883a 	mov	r2,zero
 8009274:	24c00017 	ldw	r19,0(r4)
 8009278:	21000104 	addi	r4,r4,4
 800927c:	d9012315 	stw	r4,1164(sp)
 8009280:	9807883a 	mov	r3,r19
 8009284:	003f6e06 	br	8009040 <__alt_data_end+0xfc009040>
 8009288:	d8c12317 	ldw	r3,1164(sp)
 800928c:	9811883a 	mov	r8,r19
 8009290:	00800c04 	movi	r2,48
 8009294:	1cc00017 	ldw	r19,0(r3)
 8009298:	01020074 	movhi	r4,2049
 800929c:	18c00104 	addi	r3,r3,4
 80092a0:	d8811d05 	stb	r2,1140(sp)
 80092a4:	21040904 	addi	r4,r4,4132
 80092a8:	00801e04 	movi	r2,120
 80092ac:	d8811d45 	stb	r2,1141(sp)
 80092b0:	d8c12315 	stw	r3,1164(sp)
 80092b4:	002b883a 	mov	r21,zero
 80092b8:	94800094 	ori	r18,r18,2
 80092bc:	d9012715 	stw	r4,1180(sp)
 80092c0:	00800084 	movi	r2,2
 80092c4:	9807883a 	mov	r3,r19
 80092c8:	003f5d06 	br	8009040 <__alt_data_end+0xfc009040>
 80092cc:	d8c12203 	ldbu	r3,1160(sp)
 80092d0:	9080080c 	andi	r2,r18,32
 80092d4:	9811883a 	mov	r8,r19
 80092d8:	d8c11d85 	stb	r3,1142(sp)
 80092dc:	1001b126 	beq	r2,zero,80099a4 <___vfiprintf_internal_r+0x1118>
 80092e0:	d9012317 	ldw	r4,1164(sp)
 80092e4:	d9412517 	ldw	r5,1172(sp)
 80092e8:	20800017 	ldw	r2,0(r4)
 80092ec:	2807d7fa 	srai	r3,r5,31
 80092f0:	21000104 	addi	r4,r4,4
 80092f4:	d9012315 	stw	r4,1164(sp)
 80092f8:	11400015 	stw	r5,0(r2)
 80092fc:	10c00115 	stw	r3,4(r2)
 8009300:	003d9a06 	br	800896c <__alt_data_end+0xfc00896c>
 8009304:	d8812207 	ldb	r2,1160(sp)
 8009308:	1001c41e 	bne	r2,zero,8009a1c <___vfiprintf_internal_r+0x1190>
 800930c:	00c00804 	movi	r3,32
 8009310:	d8c12205 	stb	r3,1160(sp)
 8009314:	b9800007 	ldb	r6,0(r23)
 8009318:	003dbd06 	br	8008a10 <__alt_data_end+0xfc008a10>
 800931c:	00c00ac4 	movi	r3,43
 8009320:	d8c12205 	stb	r3,1160(sp)
 8009324:	b9800007 	ldb	r6,0(r23)
 8009328:	003db906 	br	8008a10 <__alt_data_end+0xfc008a10>
 800932c:	d8c12203 	ldbu	r3,1160(sp)
 8009330:	9080080c 	andi	r2,r18,32
 8009334:	9811883a 	mov	r8,r19
 8009338:	d8c11d85 	stb	r3,1142(sp)
 800933c:	d8c12317 	ldw	r3,1164(sp)
 8009340:	103e7e1e 	bne	r2,zero,8008d3c <__alt_data_end+0xfc008d3c>
 8009344:	9080040c 	andi	r2,r18,16
 8009348:	1001a926 	beq	r2,zero,80099f0 <___vfiprintf_internal_r+0x1164>
 800934c:	1cc00017 	ldw	r19,0(r3)
 8009350:	d9412317 	ldw	r5,1164(sp)
 8009354:	982bd7fa 	srai	r21,r19,31
 8009358:	29400104 	addi	r5,r5,4
 800935c:	d9412315 	stw	r5,1164(sp)
 8009360:	a805883a 	mov	r2,r21
 8009364:	003e7b06 	br	8008d54 <__alt_data_end+0xfc008d54>
 8009368:	94800054 	ori	r18,r18,1
 800936c:	b9800007 	ldb	r6,0(r23)
 8009370:	003da706 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009374:	d8c12203 	ldbu	r3,1160(sp)
 8009378:	9811883a 	mov	r8,r19
 800937c:	d8c11d85 	stb	r3,1142(sp)
 8009380:	30005826 	beq	r6,zero,80094e4 <___vfiprintf_internal_r+0xc58>
 8009384:	05400044 	movi	r21,1
 8009388:	d8c10004 	addi	r3,sp,1024
 800938c:	d9810005 	stb	r6,1024(sp)
 8009390:	d8011d85 	stb	zero,1142(sp)
 8009394:	a829883a 	mov	r20,r21
 8009398:	d8c12215 	stw	r3,1160(sp)
 800939c:	003f1a06 	br	8009008 <__alt_data_end+0xfc009008>
 80093a0:	d9012117 	ldw	r4,1156(sp)
 80093a4:	d9412017 	ldw	r5,1152(sp)
 80093a8:	d9811a04 	addi	r6,sp,1128
 80093ac:	d9c12a15 	stw	r7,1192(sp)
 80093b0:	db012b15 	stw	r12,1196(sp)
 80093b4:	80087780 	call	8008778 <__sprint_r.part.0>
 80093b8:	d9c12a17 	ldw	r7,1192(sp)
 80093bc:	db012b17 	ldw	r12,1196(sp)
 80093c0:	10004e1e 	bne	r2,zero,80094fc <___vfiprintf_internal_r+0xc70>
 80093c4:	d9011b17 	ldw	r4,1132(sp)
 80093c8:	d8c11c17 	ldw	r3,1136(sp)
 80093cc:	d811883a 	mov	r8,sp
 80093d0:	21400044 	addi	r5,r4,1
 80093d4:	003e9d06 	br	8008e4c <__alt_data_end+0xfc008e4c>
 80093d8:	d9411b17 	ldw	r5,1132(sp)
 80093dc:	d8c11c17 	ldw	r3,1136(sp)
 80093e0:	28800044 	addi	r2,r5,1
 80093e4:	d9011d87 	ldb	r4,1142(sp)
 80093e8:	203eb626 	beq	r4,zero,8008ec4 <__alt_data_end+0xfc008ec4>
 80093ec:	01000044 	movi	r4,1
 80093f0:	d9411d84 	addi	r5,sp,1142
 80093f4:	1907883a 	add	r3,r3,r4
 80093f8:	41400015 	stw	r5,0(r8)
 80093fc:	41000115 	stw	r4,4(r8)
 8009400:	d8c11c15 	stw	r3,1136(sp)
 8009404:	d8811b15 	stw	r2,1132(sp)
 8009408:	014001c4 	movi	r5,7
 800940c:	2880ce16 	blt	r5,r2,8009748 <___vfiprintf_internal_r+0xebc>
 8009410:	100b883a 	mov	r5,r2
 8009414:	42000204 	addi	r8,r8,8
 8009418:	10800044 	addi	r2,r2,1
 800941c:	003ea906 	br	8008ec4 <__alt_data_end+0xfc008ec4>
 8009420:	d9012117 	ldw	r4,1156(sp)
 8009424:	d9412017 	ldw	r5,1152(sp)
 8009428:	d9811a04 	addi	r6,sp,1128
 800942c:	80087780 	call	8008778 <__sprint_r.part.0>
 8009430:	1000321e 	bne	r2,zero,80094fc <___vfiprintf_internal_r+0xc70>
 8009434:	d9411b17 	ldw	r5,1132(sp)
 8009438:	d8c11c17 	ldw	r3,1136(sp)
 800943c:	d811883a 	mov	r8,sp
 8009440:	28800044 	addi	r2,r5,1
 8009444:	003eba06 	br	8008f30 <__alt_data_end+0xfc008f30>
 8009448:	10803fcc 	andi	r2,r2,255
 800944c:	00c00044 	movi	r3,1
 8009450:	10fe4d1e 	bne	r2,r3,8008d88 <__alt_data_end+0xfc008d88>
 8009454:	a800021e 	bne	r21,zero,8009460 <___vfiprintf_internal_r+0xbd4>
 8009458:	00800244 	movi	r2,9
 800945c:	14c01b2e 	bgeu	r2,r19,80094cc <___vfiprintf_internal_r+0xc40>
 8009460:	dc012215 	stw	r16,1160(sp)
 8009464:	dd010a04 	addi	r20,sp,1064
 8009468:	a821883a 	mov	r16,r21
 800946c:	402b883a 	mov	r21,r8
 8009470:	9809883a 	mov	r4,r19
 8009474:	800b883a 	mov	r5,r16
 8009478:	01800284 	movi	r6,10
 800947c:	000f883a 	mov	r7,zero
 8009480:	800a9380 	call	800a938 <__umoddi3>
 8009484:	10800c04 	addi	r2,r2,48
 8009488:	a53fffc4 	addi	r20,r20,-1
 800948c:	9809883a 	mov	r4,r19
 8009490:	800b883a 	mov	r5,r16
 8009494:	01800284 	movi	r6,10
 8009498:	000f883a 	mov	r7,zero
 800949c:	a0800005 	stb	r2,0(r20)
 80094a0:	800a2f80 	call	800a2f8 <__udivdi3>
 80094a4:	1027883a 	mov	r19,r2
 80094a8:	10c4b03a 	or	r2,r2,r3
 80094ac:	1821883a 	mov	r16,r3
 80094b0:	103fef1e 	bne	r2,zero,8009470 <__alt_data_end+0xfc009470>
 80094b4:	d9011e17 	ldw	r4,1144(sp)
 80094b8:	dc012217 	ldw	r16,1160(sp)
 80094bc:	a811883a 	mov	r8,r21
 80094c0:	dd012215 	stw	r20,1160(sp)
 80094c4:	2529c83a 	sub	r20,r4,r20
 80094c8:	003e4106 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80094cc:	9cc00c04 	addi	r19,r19,48
 80094d0:	d8c109c4 	addi	r3,sp,1063
 80094d4:	dcc109c5 	stb	r19,1063(sp)
 80094d8:	dd012817 	ldw	r20,1184(sp)
 80094dc:	d8c12215 	stw	r3,1160(sp)
 80094e0:	003e3b06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80094e4:	d8811c17 	ldw	r2,1136(sp)
 80094e8:	10000426 	beq	r2,zero,80094fc <___vfiprintf_internal_r+0xc70>
 80094ec:	d9012117 	ldw	r4,1156(sp)
 80094f0:	d9412017 	ldw	r5,1152(sp)
 80094f4:	d9811a04 	addi	r6,sp,1128
 80094f8:	80087780 	call	8008778 <__sprint_r.part.0>
 80094fc:	d9412017 	ldw	r5,1152(sp)
 8009500:	2880030b 	ldhu	r2,12(r5)
 8009504:	1080100c 	andi	r2,r2,64
 8009508:	103ddc1e 	bne	r2,zero,8008c7c <__alt_data_end+0xfc008c7c>
 800950c:	d8812517 	ldw	r2,1172(sp)
 8009510:	003ddb06 	br	8008c80 <__alt_data_end+0xfc008c80>
 8009514:	1801061e 	bne	r3,zero,8009930 <___vfiprintf_internal_r+0x10a4>
 8009518:	d8c12217 	ldw	r3,1160(sp)
 800951c:	00800044 	movi	r2,1
 8009520:	dd000115 	stw	r20,4(sp)
 8009524:	d8c00015 	stw	r3,0(sp)
 8009528:	dd011c15 	stw	r20,1136(sp)
 800952c:	d8811b15 	stw	r2,1132(sp)
 8009530:	a007883a 	mov	r3,r20
 8009534:	d811883a 	mov	r8,sp
 8009538:	42000204 	addi	r8,r8,8
 800953c:	9480010c 	andi	r18,r18,4
 8009540:	90003426 	beq	r18,zero,8009614 <___vfiprintf_internal_r+0xd88>
 8009544:	d9412417 	ldw	r5,1168(sp)
 8009548:	2d65c83a 	sub	r18,r5,r21
 800954c:	0480310e 	bge	zero,r18,8009614 <___vfiprintf_internal_r+0xd88>
 8009550:	04000404 	movi	r16,16
 8009554:	8481ad0e 	bge	r16,r18,8009c0c <___vfiprintf_internal_r+0x1380>
 8009558:	01420074 	movhi	r5,2049
 800955c:	29446d04 	addi	r5,r5,4532
 8009560:	d9011b17 	ldw	r4,1132(sp)
 8009564:	d9412615 	stw	r5,1176(sp)
 8009568:	04c001c4 	movi	r19,7
 800956c:	dd012117 	ldw	r20,1156(sp)
 8009570:	dd812017 	ldw	r22,1152(sp)
 8009574:	00000506 	br	800958c <___vfiprintf_internal_r+0xd00>
 8009578:	21400084 	addi	r5,r4,2
 800957c:	42000204 	addi	r8,r8,8
 8009580:	1009883a 	mov	r4,r2
 8009584:	94bffc04 	addi	r18,r18,-16
 8009588:	84800d0e 	bge	r16,r18,80095c0 <___vfiprintf_internal_r+0xd34>
 800958c:	18c00404 	addi	r3,r3,16
 8009590:	20800044 	addi	r2,r4,1
 8009594:	47000015 	stw	fp,0(r8)
 8009598:	44000115 	stw	r16,4(r8)
 800959c:	d8c11c15 	stw	r3,1136(sp)
 80095a0:	d8811b15 	stw	r2,1132(sp)
 80095a4:	98bff40e 	bge	r19,r2,8009578 <__alt_data_end+0xfc009578>
 80095a8:	1800291e 	bne	r3,zero,8009650 <___vfiprintf_internal_r+0xdc4>
 80095ac:	94bffc04 	addi	r18,r18,-16
 80095b0:	0009883a 	mov	r4,zero
 80095b4:	01400044 	movi	r5,1
 80095b8:	d811883a 	mov	r8,sp
 80095bc:	84bff316 	blt	r16,r18,800958c <__alt_data_end+0xfc00958c>
 80095c0:	d8812617 	ldw	r2,1176(sp)
 80095c4:	1c87883a 	add	r3,r3,r18
 80095c8:	44800115 	stw	r18,4(r8)
 80095cc:	40800015 	stw	r2,0(r8)
 80095d0:	d8c11c15 	stw	r3,1136(sp)
 80095d4:	d9411b15 	stw	r5,1132(sp)
 80095d8:	008001c4 	movi	r2,7
 80095dc:	11400d0e 	bge	r2,r5,8009614 <___vfiprintf_internal_r+0xd88>
 80095e0:	1800061e 	bne	r3,zero,80095fc <___vfiprintf_internal_r+0xd70>
 80095e4:	d8c12417 	ldw	r3,1168(sp)
 80095e8:	a8c12e16 	blt	r21,r3,8009aa4 <___vfiprintf_internal_r+0x1218>
 80095ec:	d9012517 	ldw	r4,1172(sp)
 80095f0:	2549883a 	add	r4,r4,r21
 80095f4:	d9012515 	stw	r4,1172(sp)
 80095f8:	00001206 	br	8009644 <___vfiprintf_internal_r+0xdb8>
 80095fc:	d9012117 	ldw	r4,1156(sp)
 8009600:	d9412017 	ldw	r5,1152(sp)
 8009604:	d9811a04 	addi	r6,sp,1128
 8009608:	80087780 	call	8008778 <__sprint_r.part.0>
 800960c:	103fbb1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009610:	d8c11c17 	ldw	r3,1136(sp)
 8009614:	d8812417 	ldw	r2,1168(sp)
 8009618:	a880010e 	bge	r21,r2,8009620 <___vfiprintf_internal_r+0xd94>
 800961c:	102b883a 	mov	r21,r2
 8009620:	d9012517 	ldw	r4,1172(sp)
 8009624:	2549883a 	add	r4,r4,r21
 8009628:	d9012515 	stw	r4,1172(sp)
 800962c:	18000526 	beq	r3,zero,8009644 <___vfiprintf_internal_r+0xdb8>
 8009630:	d9012117 	ldw	r4,1156(sp)
 8009634:	d9412017 	ldw	r5,1152(sp)
 8009638:	d9811a04 	addi	r6,sp,1128
 800963c:	80087780 	call	8008778 <__sprint_r.part.0>
 8009640:	103fae1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009644:	d8011b15 	stw	zero,1132(sp)
 8009648:	d811883a 	mov	r8,sp
 800964c:	003cc706 	br	800896c <__alt_data_end+0xfc00896c>
 8009650:	a009883a 	mov	r4,r20
 8009654:	b00b883a 	mov	r5,r22
 8009658:	d9811a04 	addi	r6,sp,1128
 800965c:	80087780 	call	8008778 <__sprint_r.part.0>
 8009660:	103fa61e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009664:	d9011b17 	ldw	r4,1132(sp)
 8009668:	d8c11c17 	ldw	r3,1136(sp)
 800966c:	d811883a 	mov	r8,sp
 8009670:	21400044 	addi	r5,r4,1
 8009674:	003fc306 	br	8009584 <__alt_data_end+0xfc009584>
 8009678:	d9012417 	ldw	r4,1168(sp)
 800967c:	256dc83a 	sub	r22,r4,r21
 8009680:	05be1f0e 	bge	zero,r22,8008f00 <__alt_data_end+0xfc008f00>
 8009684:	04c00404 	movi	r19,16
 8009688:	9d81720e 	bge	r19,r22,8009c54 <___vfiprintf_internal_r+0x13c8>
 800968c:	00820074 	movhi	r2,2049
 8009690:	10846904 	addi	r2,r2,4516
 8009694:	d8812615 	stw	r2,1176(sp)
 8009698:	028001c4 	movi	r10,7
 800969c:	00000506 	br	80096b4 <___vfiprintf_internal_r+0xe28>
 80096a0:	29000084 	addi	r4,r5,2
 80096a4:	42000204 	addi	r8,r8,8
 80096a8:	100b883a 	mov	r5,r2
 80096ac:	b5bffc04 	addi	r22,r22,-16
 80096b0:	9d800d0e 	bge	r19,r22,80096e8 <___vfiprintf_internal_r+0xe5c>
 80096b4:	18c00404 	addi	r3,r3,16
 80096b8:	28800044 	addi	r2,r5,1
 80096bc:	44400015 	stw	r17,0(r8)
 80096c0:	44c00115 	stw	r19,4(r8)
 80096c4:	d8c11c15 	stw	r3,1136(sp)
 80096c8:	d8811b15 	stw	r2,1132(sp)
 80096cc:	50bff40e 	bge	r10,r2,80096a0 <__alt_data_end+0xfc0096a0>
 80096d0:	1800111e 	bne	r3,zero,8009718 <___vfiprintf_internal_r+0xe8c>
 80096d4:	b5bffc04 	addi	r22,r22,-16
 80096d8:	000b883a 	mov	r5,zero
 80096dc:	01000044 	movi	r4,1
 80096e0:	d811883a 	mov	r8,sp
 80096e4:	9dbff316 	blt	r19,r22,80096b4 <__alt_data_end+0xfc0096b4>
 80096e8:	d9412617 	ldw	r5,1176(sp)
 80096ec:	1d87883a 	add	r3,r3,r22
 80096f0:	45800115 	stw	r22,4(r8)
 80096f4:	41400015 	stw	r5,0(r8)
 80096f8:	d8c11c15 	stw	r3,1136(sp)
 80096fc:	d9011b15 	stw	r4,1132(sp)
 8009700:	008001c4 	movi	r2,7
 8009704:	11008516 	blt	r2,r4,800991c <___vfiprintf_internal_r+0x1090>
 8009708:	42000204 	addi	r8,r8,8
 800970c:	20800044 	addi	r2,r4,1
 8009710:	200b883a 	mov	r5,r4
 8009714:	003dfa06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009718:	d9012117 	ldw	r4,1156(sp)
 800971c:	d9412017 	ldw	r5,1152(sp)
 8009720:	d9811a04 	addi	r6,sp,1128
 8009724:	da812a15 	stw	r10,1192(sp)
 8009728:	80087780 	call	8008778 <__sprint_r.part.0>
 800972c:	da812a17 	ldw	r10,1192(sp)
 8009730:	103f721e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009734:	d9411b17 	ldw	r5,1132(sp)
 8009738:	d8c11c17 	ldw	r3,1136(sp)
 800973c:	d811883a 	mov	r8,sp
 8009740:	29000044 	addi	r4,r5,1
 8009744:	003fd906 	br	80096ac <__alt_data_end+0xfc0096ac>
 8009748:	1800681e 	bne	r3,zero,80098ec <___vfiprintf_internal_r+0x1060>
 800974c:	50004d26 	beq	r10,zero,8009884 <___vfiprintf_internal_r+0xff8>
 8009750:	d8811d04 	addi	r2,sp,1140
 8009754:	00c00084 	movi	r3,2
 8009758:	d8800015 	stw	r2,0(sp)
 800975c:	d8c00115 	stw	r3,4(sp)
 8009760:	2005883a 	mov	r2,r4
 8009764:	d811883a 	mov	r8,sp
 8009768:	003de006 	br	8008eec <__alt_data_end+0xfc008eec>
 800976c:	1800551e 	bne	r3,zero,80098c4 <___vfiprintf_internal_r+0x1038>
 8009770:	000b883a 	mov	r5,zero
 8009774:	00800044 	movi	r2,1
 8009778:	d811883a 	mov	r8,sp
 800977c:	003dde06 	br	8008ef8 <__alt_data_end+0xfc008ef8>
 8009780:	10803fcc 	andi	r2,r2,255
 8009784:	1000191e 	bne	r2,zero,80097ec <___vfiprintf_internal_r+0xf60>
 8009788:	9080004c 	andi	r2,r18,1
 800978c:	10001726 	beq	r2,zero,80097ec <___vfiprintf_internal_r+0xf60>
 8009790:	00800c04 	movi	r2,48
 8009794:	d8c109c4 	addi	r3,sp,1063
 8009798:	d88109c5 	stb	r2,1063(sp)
 800979c:	dd012817 	ldw	r20,1184(sp)
 80097a0:	d8c12215 	stw	r3,1160(sp)
 80097a4:	003d8a06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80097a8:	d9012717 	ldw	r4,1180(sp)
 80097ac:	dd010a04 	addi	r20,sp,1064
 80097b0:	988003cc 	andi	r2,r19,15
 80097b4:	a806973a 	slli	r3,r21,28
 80097b8:	2085883a 	add	r2,r4,r2
 80097bc:	9826d13a 	srli	r19,r19,4
 80097c0:	10800003 	ldbu	r2,0(r2)
 80097c4:	a82ad13a 	srli	r21,r21,4
 80097c8:	a53fffc4 	addi	r20,r20,-1
 80097cc:	1ce6b03a 	or	r19,r3,r19
 80097d0:	a0800005 	stb	r2,0(r20)
 80097d4:	9d44b03a 	or	r2,r19,r21
 80097d8:	103ff51e 	bne	r2,zero,80097b0 <__alt_data_end+0xfc0097b0>
 80097dc:	d9411e17 	ldw	r5,1144(sp)
 80097e0:	dd012215 	stw	r20,1160(sp)
 80097e4:	2d29c83a 	sub	r20,r5,r20
 80097e8:	003d7906 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80097ec:	d8c10a04 	addi	r3,sp,1064
 80097f0:	d8c12215 	stw	r3,1160(sp)
 80097f4:	003d7606 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80097f8:	18009e1e 	bne	r3,zero,8009a74 <___vfiprintf_internal_r+0x11e8>
 80097fc:	d8811d87 	ldb	r2,1142(sp)
 8009800:	10005f26 	beq	r2,zero,8009980 <___vfiprintf_internal_r+0x10f4>
 8009804:	00c00044 	movi	r3,1
 8009808:	d9011d84 	addi	r4,sp,1142
 800980c:	1805883a 	mov	r2,r3
 8009810:	d9000015 	stw	r4,0(sp)
 8009814:	d8c00115 	stw	r3,4(sp)
 8009818:	d811883a 	mov	r8,sp
 800981c:	003efc06 	br	8009410 <__alt_data_end+0xfc009410>
 8009820:	d9412417 	ldw	r5,1168(sp)
 8009824:	d811883a 	mov	r8,sp
 8009828:	2d65c83a 	sub	r18,r5,r21
 800982c:	04bf4816 	blt	zero,r18,8009550 <__alt_data_end+0xfc009550>
 8009830:	003f6c06 	br	80095e4 <__alt_data_end+0xfc0095e4>
 8009834:	b829883a 	mov	r20,r23
 8009838:	003c6906 	br	80089e0 <__alt_data_end+0xfc0089e0>
 800983c:	d9012117 	ldw	r4,1156(sp)
 8009840:	d9412017 	ldw	r5,1152(sp)
 8009844:	d9811a04 	addi	r6,sp,1128
 8009848:	80087780 	call	8008778 <__sprint_r.part.0>
 800984c:	103f2b1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009850:	d8c11c17 	ldw	r3,1136(sp)
 8009854:	d811883a 	mov	r8,sp
 8009858:	003f3806 	br	800953c <__alt_data_end+0xfc00953c>
 800985c:	00800084 	movi	r2,2
 8009860:	9d46b03a 	or	r3,r19,r21
 8009864:	003df606 	br	8009040 <__alt_data_end+0xfc009040>
 8009868:	d9012117 	ldw	r4,1156(sp)
 800986c:	d9412017 	ldw	r5,1152(sp)
 8009870:	d9811a04 	addi	r6,sp,1128
 8009874:	80087780 	call	8008778 <__sprint_r.part.0>
 8009878:	103f201e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 800987c:	d811883a 	mov	r8,sp
 8009880:	003cc606 	br	8008b9c <__alt_data_end+0xfc008b9c>
 8009884:	000b883a 	mov	r5,zero
 8009888:	2005883a 	mov	r2,r4
 800988c:	d811883a 	mov	r8,sp
 8009890:	003d9906 	br	8008ef8 <__alt_data_end+0xfc008ef8>
 8009894:	10803fcc 	andi	r2,r2,255
 8009898:	1080201c 	xori	r2,r2,128
 800989c:	10bfe004 	addi	r2,r2,-128
 80098a0:	01000c04 	movi	r4,48
 80098a4:	1100b226 	beq	r2,r4,8009b70 <___vfiprintf_internal_r+0x12e4>
 80098a8:	d9412217 	ldw	r5,1160(sp)
 80098ac:	d8811e17 	ldw	r2,1144(sp)
 80098b0:	193fffc5 	stb	r4,-1(r3)
 80098b4:	297fffc4 	addi	r5,r5,-1
 80098b8:	d9412215 	stw	r5,1160(sp)
 80098bc:	1169c83a 	sub	r20,r2,r5
 80098c0:	003d4306 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 80098c4:	d9012117 	ldw	r4,1156(sp)
 80098c8:	d9412017 	ldw	r5,1152(sp)
 80098cc:	d9811a04 	addi	r6,sp,1128
 80098d0:	80087780 	call	8008778 <__sprint_r.part.0>
 80098d4:	103f091e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 80098d8:	d9411b17 	ldw	r5,1132(sp)
 80098dc:	d8c11c17 	ldw	r3,1136(sp)
 80098e0:	d811883a 	mov	r8,sp
 80098e4:	28800044 	addi	r2,r5,1
 80098e8:	003d8306 	br	8008ef8 <__alt_data_end+0xfc008ef8>
 80098ec:	d9012117 	ldw	r4,1156(sp)
 80098f0:	d9412017 	ldw	r5,1152(sp)
 80098f4:	d9811a04 	addi	r6,sp,1128
 80098f8:	da812a15 	stw	r10,1192(sp)
 80098fc:	80087780 	call	8008778 <__sprint_r.part.0>
 8009900:	da812a17 	ldw	r10,1192(sp)
 8009904:	103efd1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009908:	d9411b17 	ldw	r5,1132(sp)
 800990c:	d8c11c17 	ldw	r3,1136(sp)
 8009910:	d811883a 	mov	r8,sp
 8009914:	28800044 	addi	r2,r5,1
 8009918:	003d6a06 	br	8008ec4 <__alt_data_end+0xfc008ec4>
 800991c:	1800a01e 	bne	r3,zero,8009ba0 <___vfiprintf_internal_r+0x1314>
 8009920:	000b883a 	mov	r5,zero
 8009924:	00800044 	movi	r2,1
 8009928:	d811883a 	mov	r8,sp
 800992c:	003d7406 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009930:	d9012117 	ldw	r4,1156(sp)
 8009934:	d9412017 	ldw	r5,1152(sp)
 8009938:	d9811a04 	addi	r6,sp,1128
 800993c:	80087780 	call	8008778 <__sprint_r.part.0>
 8009940:	103eee1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009944:	d8811b17 	ldw	r2,1132(sp)
 8009948:	d8c11c17 	ldw	r3,1136(sp)
 800994c:	d811883a 	mov	r8,sp
 8009950:	10800044 	addi	r2,r2,1
 8009954:	003d8f06 	br	8008f94 <__alt_data_end+0xfc008f94>
 8009958:	04e7c83a 	sub	r19,zero,r19
 800995c:	9804c03a 	cmpne	r2,r19,zero
 8009960:	056bc83a 	sub	r21,zero,r21
 8009964:	a8abc83a 	sub	r21,r21,r2
 8009968:	05800b44 	movi	r22,45
 800996c:	dd811d85 	stb	r22,1142(sp)
 8009970:	8029883a 	mov	r20,r16
 8009974:	00800044 	movi	r2,1
 8009978:	9d46b03a 	or	r3,r19,r21
 800997c:	003cfa06 	br	8008d68 <__alt_data_end+0xfc008d68>
 8009980:	000b883a 	mov	r5,zero
 8009984:	00800044 	movi	r2,1
 8009988:	d811883a 	mov	r8,sp
 800998c:	503d5a26 	beq	r10,zero,8008ef8 <__alt_data_end+0xfc008ef8>
 8009990:	00c00084 	movi	r3,2
 8009994:	d9011d04 	addi	r4,sp,1140
 8009998:	d9000015 	stw	r4,0(sp)
 800999c:	d8c00115 	stw	r3,4(sp)
 80099a0:	003d5206 	br	8008eec <__alt_data_end+0xfc008eec>
 80099a4:	9080040c 	andi	r2,r18,16
 80099a8:	1000421e 	bne	r2,zero,8009ab4 <___vfiprintf_internal_r+0x1228>
 80099ac:	9480100c 	andi	r18,r18,64
 80099b0:	90009c26 	beq	r18,zero,8009c24 <___vfiprintf_internal_r+0x1398>
 80099b4:	d9412317 	ldw	r5,1164(sp)
 80099b8:	d8c12517 	ldw	r3,1172(sp)
 80099bc:	28800017 	ldw	r2,0(r5)
 80099c0:	29400104 	addi	r5,r5,4
 80099c4:	d9412315 	stw	r5,1164(sp)
 80099c8:	10c0000d 	sth	r3,0(r2)
 80099cc:	003be706 	br	800896c <__alt_data_end+0xfc00896c>
 80099d0:	90c0100c 	andi	r3,r18,64
 80099d4:	18003e26 	beq	r3,zero,8009ad0 <___vfiprintf_internal_r+0x1244>
 80099d8:	d8c12317 	ldw	r3,1164(sp)
 80099dc:	14c0000b 	ldhu	r19,0(r2)
 80099e0:	002b883a 	mov	r21,zero
 80099e4:	18c00104 	addi	r3,r3,4
 80099e8:	d8c12315 	stw	r3,1164(sp)
 80099ec:	003db706 	br	80090cc <__alt_data_end+0xfc0090cc>
 80099f0:	9080100c 	andi	r2,r18,64
 80099f4:	10004c26 	beq	r2,zero,8009b28 <___vfiprintf_internal_r+0x129c>
 80099f8:	1cc0000f 	ldh	r19,0(r3)
 80099fc:	d8812317 	ldw	r2,1164(sp)
 8009a00:	982bd7fa 	srai	r21,r19,31
 8009a04:	10800104 	addi	r2,r2,4
 8009a08:	d8812315 	stw	r2,1164(sp)
 8009a0c:	a805883a 	mov	r2,r21
 8009a10:	003cd006 	br	8008d54 <__alt_data_end+0xfc008d54>
 8009a14:	00800084 	movi	r2,2
 8009a18:	003d8906 	br	8009040 <__alt_data_end+0xfc009040>
 8009a1c:	b9800007 	ldb	r6,0(r23)
 8009a20:	003bfb06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009a24:	9080100c 	andi	r2,r18,64
 8009a28:	10003726 	beq	r2,zero,8009b08 <___vfiprintf_internal_r+0x127c>
 8009a2c:	d9412317 	ldw	r5,1164(sp)
 8009a30:	002b883a 	mov	r21,zero
 8009a34:	0005883a 	mov	r2,zero
 8009a38:	2cc0000b 	ldhu	r19,0(r5)
 8009a3c:	29400104 	addi	r5,r5,4
 8009a40:	d9412315 	stw	r5,1164(sp)
 8009a44:	9807883a 	mov	r3,r19
 8009a48:	003d7d06 	br	8009040 <__alt_data_end+0xfc009040>
 8009a4c:	9080100c 	andi	r2,r18,64
 8009a50:	10002526 	beq	r2,zero,8009ae8 <___vfiprintf_internal_r+0x125c>
 8009a54:	d8812317 	ldw	r2,1164(sp)
 8009a58:	002b883a 	mov	r21,zero
 8009a5c:	14c0000b 	ldhu	r19,0(r2)
 8009a60:	10800104 	addi	r2,r2,4
 8009a64:	d8812315 	stw	r2,1164(sp)
 8009a68:	9807883a 	mov	r3,r19
 8009a6c:	00800044 	movi	r2,1
 8009a70:	003d7306 	br	8009040 <__alt_data_end+0xfc009040>
 8009a74:	d9012117 	ldw	r4,1156(sp)
 8009a78:	d9412017 	ldw	r5,1152(sp)
 8009a7c:	d9811a04 	addi	r6,sp,1128
 8009a80:	da812a15 	stw	r10,1192(sp)
 8009a84:	80087780 	call	8008778 <__sprint_r.part.0>
 8009a88:	da812a17 	ldw	r10,1192(sp)
 8009a8c:	103e9b1e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009a90:	d9411b17 	ldw	r5,1132(sp)
 8009a94:	d8c11c17 	ldw	r3,1136(sp)
 8009a98:	d811883a 	mov	r8,sp
 8009a9c:	28800044 	addi	r2,r5,1
 8009aa0:	003e5006 	br	80093e4 <__alt_data_end+0xfc0093e4>
 8009aa4:	182b883a 	mov	r21,r3
 8009aa8:	003ed006 	br	80095ec <__alt_data_end+0xfc0095ec>
 8009aac:	8029883a 	mov	r20,r16
 8009ab0:	003dc606 	br	80091cc <__alt_data_end+0xfc0091cc>
 8009ab4:	d8c12317 	ldw	r3,1164(sp)
 8009ab8:	d9012517 	ldw	r4,1172(sp)
 8009abc:	18800017 	ldw	r2,0(r3)
 8009ac0:	18c00104 	addi	r3,r3,4
 8009ac4:	d8c12315 	stw	r3,1164(sp)
 8009ac8:	11000015 	stw	r4,0(r2)
 8009acc:	003ba706 	br	800896c <__alt_data_end+0xfc00896c>
 8009ad0:	d9012317 	ldw	r4,1164(sp)
 8009ad4:	14c00017 	ldw	r19,0(r2)
 8009ad8:	002b883a 	mov	r21,zero
 8009adc:	21000104 	addi	r4,r4,4
 8009ae0:	d9012315 	stw	r4,1164(sp)
 8009ae4:	003d7906 	br	80090cc <__alt_data_end+0xfc0090cc>
 8009ae8:	d8c12317 	ldw	r3,1164(sp)
 8009aec:	002b883a 	mov	r21,zero
 8009af0:	00800044 	movi	r2,1
 8009af4:	1cc00017 	ldw	r19,0(r3)
 8009af8:	18c00104 	addi	r3,r3,4
 8009afc:	d8c12315 	stw	r3,1164(sp)
 8009b00:	9807883a 	mov	r3,r19
 8009b04:	003d4e06 	br	8009040 <__alt_data_end+0xfc009040>
 8009b08:	d8812317 	ldw	r2,1164(sp)
 8009b0c:	002b883a 	mov	r21,zero
 8009b10:	14c00017 	ldw	r19,0(r2)
 8009b14:	10800104 	addi	r2,r2,4
 8009b18:	d8812315 	stw	r2,1164(sp)
 8009b1c:	9807883a 	mov	r3,r19
 8009b20:	0005883a 	mov	r2,zero
 8009b24:	003d4606 	br	8009040 <__alt_data_end+0xfc009040>
 8009b28:	1cc00017 	ldw	r19,0(r3)
 8009b2c:	d8c12317 	ldw	r3,1164(sp)
 8009b30:	982bd7fa 	srai	r21,r19,31
 8009b34:	18c00104 	addi	r3,r3,4
 8009b38:	d8c12315 	stw	r3,1164(sp)
 8009b3c:	a805883a 	mov	r2,r21
 8009b40:	003c8406 	br	8008d54 <__alt_data_end+0xfc008d54>
 8009b44:	01020074 	movhi	r4,2049
 8009b48:	21046904 	addi	r4,r4,4516
 8009b4c:	d9012615 	stw	r4,1176(sp)
 8009b50:	003d0606 	br	8008f6c <__alt_data_end+0xfc008f6c>
 8009b54:	b9800043 	ldbu	r6,1(r23)
 8009b58:	94800814 	ori	r18,r18,32
 8009b5c:	bdc00044 	addi	r23,r23,1
 8009b60:	31803fcc 	andi	r6,r6,255
 8009b64:	3180201c 	xori	r6,r6,128
 8009b68:	31bfe004 	addi	r6,r6,-128
 8009b6c:	003ba806 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009b70:	d8811e17 	ldw	r2,1144(sp)
 8009b74:	d8c12217 	ldw	r3,1160(sp)
 8009b78:	10e9c83a 	sub	r20,r2,r3
 8009b7c:	003c9406 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8009b80:	da012a15 	stw	r8,1192(sp)
 8009b84:	8002a1c0 	call	8002a1c <strlen>
 8009b88:	1029883a 	mov	r20,r2
 8009b8c:	dd811d83 	ldbu	r22,1142(sp)
 8009b90:	dcc12315 	stw	r19,1164(sp)
 8009b94:	0021883a 	mov	r16,zero
 8009b98:	da012a17 	ldw	r8,1192(sp)
 8009b9c:	003c8c06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8009ba0:	d9012117 	ldw	r4,1156(sp)
 8009ba4:	d9412017 	ldw	r5,1152(sp)
 8009ba8:	d9811a04 	addi	r6,sp,1128
 8009bac:	80087780 	call	8008778 <__sprint_r.part.0>
 8009bb0:	103e521e 	bne	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009bb4:	d9411b17 	ldw	r5,1132(sp)
 8009bb8:	d8c11c17 	ldw	r3,1136(sp)
 8009bbc:	d811883a 	mov	r8,sp
 8009bc0:	28800044 	addi	r2,r5,1
 8009bc4:	003cce06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009bc8:	01420074 	movhi	r5,2049
 8009bcc:	29446d04 	addi	r5,r5,4532
 8009bd0:	d9412615 	stw	r5,1176(sp)
 8009bd4:	d9411b17 	ldw	r5,1132(sp)
 8009bd8:	29400044 	addi	r5,r5,1
 8009bdc:	003cad06 	br	8008e94 <__alt_data_end+0xfc008e94>
 8009be0:	00800184 	movi	r2,6
 8009be4:	1400012e 	bgeu	r2,r16,8009bec <___vfiprintf_internal_r+0x1360>
 8009be8:	1021883a 	mov	r16,r2
 8009bec:	8029883a 	mov	r20,r16
 8009bf0:	802b883a 	mov	r21,r16
 8009bf4:	80001c16 	blt	r16,zero,8009c68 <___vfiprintf_internal_r+0x13dc>
 8009bf8:	00c20074 	movhi	r3,2049
 8009bfc:	18c40e04 	addi	r3,r3,4152
 8009c00:	dcc12315 	stw	r19,1164(sp)
 8009c04:	d8c12215 	stw	r3,1160(sp)
 8009c08:	003cff06 	br	8009008 <__alt_data_end+0xfc009008>
 8009c0c:	d9411b17 	ldw	r5,1132(sp)
 8009c10:	00820074 	movhi	r2,2049
 8009c14:	10846d04 	addi	r2,r2,4532
 8009c18:	d8812615 	stw	r2,1176(sp)
 8009c1c:	29400044 	addi	r5,r5,1
 8009c20:	003e6706 	br	80095c0 <__alt_data_end+0xfc0095c0>
 8009c24:	d9012317 	ldw	r4,1164(sp)
 8009c28:	d9412517 	ldw	r5,1172(sp)
 8009c2c:	20800017 	ldw	r2,0(r4)
 8009c30:	21000104 	addi	r4,r4,4
 8009c34:	d9012315 	stw	r4,1164(sp)
 8009c38:	11400015 	stw	r5,0(r2)
 8009c3c:	003b4b06 	br	800896c <__alt_data_end+0xfc00896c>
 8009c40:	8029883a 	mov	r20,r16
 8009c44:	dd811d83 	ldbu	r22,1142(sp)
 8009c48:	dcc12315 	stw	r19,1164(sp)
 8009c4c:	0021883a 	mov	r16,zero
 8009c50:	003c5f06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8009c54:	01020074 	movhi	r4,2049
 8009c58:	21046904 	addi	r4,r4,4516
 8009c5c:	d9012615 	stw	r4,1176(sp)
 8009c60:	1009883a 	mov	r4,r2
 8009c64:	003ea006 	br	80096e8 <__alt_data_end+0xfc0096e8>
 8009c68:	002b883a 	mov	r21,zero
 8009c6c:	003fe206 	br	8009bf8 <__alt_data_end+0xfc009bf8>
 8009c70:	d9412317 	ldw	r5,1164(sp)
 8009c74:	b807883a 	mov	r3,r23
 8009c78:	102f883a 	mov	r23,r2
 8009c7c:	2c000017 	ldw	r16,0(r5)
 8009c80:	29000104 	addi	r4,r5,4
 8009c84:	d9012315 	stw	r4,1164(sp)
 8009c88:	80000416 	blt	r16,zero,8009c9c <___vfiprintf_internal_r+0x1410>
 8009c8c:	19800047 	ldb	r6,1(r3)
 8009c90:	003b5f06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009c94:	043fffc4 	movi	r16,-1
 8009c98:	003bef06 	br	8008c58 <__alt_data_end+0xfc008c58>
 8009c9c:	043fffc4 	movi	r16,-1
 8009ca0:	19800047 	ldb	r6,1(r3)
 8009ca4:	003b5a06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009ca8:	282b883a 	mov	r21,r5
 8009cac:	003cc706 	br	8008fcc <__alt_data_end+0xfc008fcc>

08009cb0 <__vfiprintf_internal>:
 8009cb0:	2007883a 	mov	r3,r4
 8009cb4:	01020074 	movhi	r4,2049
 8009cb8:	210baf04 	addi	r4,r4,11964
 8009cbc:	21000017 	ldw	r4,0(r4)
 8009cc0:	2805883a 	mov	r2,r5
 8009cc4:	300f883a 	mov	r7,r6
 8009cc8:	180b883a 	mov	r5,r3
 8009ccc:	100d883a 	mov	r6,r2
 8009cd0:	800888c1 	jmpi	800888c <___vfiprintf_internal_r>

08009cd4 <_calloc_r>:
 8009cd4:	defffe04 	addi	sp,sp,-8
 8009cd8:	dc000015 	stw	r16,0(sp)
 8009cdc:	2021883a 	mov	r16,r4
 8009ce0:	2809883a 	mov	r4,r5
 8009ce4:	300b883a 	mov	r5,r6
 8009ce8:	dfc00115 	stw	ra,4(sp)
 8009cec:	800b0800 	call	800b080 <__mulsi3>
 8009cf0:	8009883a 	mov	r4,r16
 8009cf4:	100b883a 	mov	r5,r2
 8009cf8:	8001b340 	call	8001b34 <_malloc_r>
 8009cfc:	1021883a 	mov	r16,r2
 8009d00:	10002826 	beq	r2,zero,8009da4 <_calloc_r+0xd0>
 8009d04:	11bfff17 	ldw	r6,-4(r2)
 8009d08:	00bfff04 	movi	r2,-4
 8009d0c:	00c00904 	movi	r3,36
 8009d10:	308c703a 	and	r6,r6,r2
 8009d14:	308d883a 	add	r6,r6,r2
 8009d18:	19801436 	bltu	r3,r6,8009d6c <_calloc_r+0x98>
 8009d1c:	008004c4 	movi	r2,19
 8009d20:	11800936 	bltu	r2,r6,8009d48 <_calloc_r+0x74>
 8009d24:	8005883a 	mov	r2,r16
 8009d28:	10000015 	stw	zero,0(r2)
 8009d2c:	10000115 	stw	zero,4(r2)
 8009d30:	10000215 	stw	zero,8(r2)
 8009d34:	8005883a 	mov	r2,r16
 8009d38:	dfc00117 	ldw	ra,4(sp)
 8009d3c:	dc000017 	ldw	r16,0(sp)
 8009d40:	dec00204 	addi	sp,sp,8
 8009d44:	f800283a 	ret
 8009d48:	80000015 	stw	zero,0(r16)
 8009d4c:	80000115 	stw	zero,4(r16)
 8009d50:	008006c4 	movi	r2,27
 8009d54:	11800d2e 	bgeu	r2,r6,8009d8c <_calloc_r+0xb8>
 8009d58:	80000215 	stw	zero,8(r16)
 8009d5c:	80000315 	stw	zero,12(r16)
 8009d60:	30c00c26 	beq	r6,r3,8009d94 <_calloc_r+0xc0>
 8009d64:	80800404 	addi	r2,r16,16
 8009d68:	003fef06 	br	8009d28 <__alt_data_end+0xfc009d28>
 8009d6c:	8009883a 	mov	r4,r16
 8009d70:	000b883a 	mov	r5,zero
 8009d74:	80024140 	call	8002414 <memset>
 8009d78:	8005883a 	mov	r2,r16
 8009d7c:	dfc00117 	ldw	ra,4(sp)
 8009d80:	dc000017 	ldw	r16,0(sp)
 8009d84:	dec00204 	addi	sp,sp,8
 8009d88:	f800283a 	ret
 8009d8c:	80800204 	addi	r2,r16,8
 8009d90:	003fe506 	br	8009d28 <__alt_data_end+0xfc009d28>
 8009d94:	80000415 	stw	zero,16(r16)
 8009d98:	80800604 	addi	r2,r16,24
 8009d9c:	80000515 	stw	zero,20(r16)
 8009da0:	003fe106 	br	8009d28 <__alt_data_end+0xfc009d28>
 8009da4:	0005883a 	mov	r2,zero
 8009da8:	003fe306 	br	8009d38 <__alt_data_end+0xfc009d38>

08009dac <_fputwc_r>:
 8009dac:	3080030b 	ldhu	r2,12(r6)
 8009db0:	defff804 	addi	sp,sp,-32
 8009db4:	dcc00415 	stw	r19,16(sp)
 8009db8:	dc800315 	stw	r18,12(sp)
 8009dbc:	dc000115 	stw	r16,4(sp)
 8009dc0:	dfc00715 	stw	ra,28(sp)
 8009dc4:	dd400615 	stw	r21,24(sp)
 8009dc8:	dd000515 	stw	r20,20(sp)
 8009dcc:	dc400215 	stw	r17,8(sp)
 8009dd0:	10c8000c 	andi	r3,r2,8192
 8009dd4:	3021883a 	mov	r16,r6
 8009dd8:	2027883a 	mov	r19,r4
 8009ddc:	2825883a 	mov	r18,r5
 8009de0:	1800051e 	bne	r3,zero,8009df8 <_fputwc_r+0x4c>
 8009de4:	30c01917 	ldw	r3,100(r6)
 8009de8:	10880014 	ori	r2,r2,8192
 8009dec:	3080030d 	sth	r2,12(r6)
 8009df0:	18880014 	ori	r2,r3,8192
 8009df4:	30801915 	stw	r2,100(r6)
 8009df8:	8006d240 	call	8006d24 <__locale_mb_cur_max>
 8009dfc:	00c00044 	movi	r3,1
 8009e00:	10c03e26 	beq	r2,r3,8009efc <_fputwc_r+0x150>
 8009e04:	9809883a 	mov	r4,r19
 8009e08:	d80b883a 	mov	r5,sp
 8009e0c:	900d883a 	mov	r6,r18
 8009e10:	81c01704 	addi	r7,r16,92
 8009e14:	800a0f80 	call	800a0f8 <_wcrtomb_r>
 8009e18:	1029883a 	mov	r20,r2
 8009e1c:	00bfffc4 	movi	r2,-1
 8009e20:	a0802026 	beq	r20,r2,8009ea4 <_fputwc_r+0xf8>
 8009e24:	d9400003 	ldbu	r5,0(sp)
 8009e28:	a0001c26 	beq	r20,zero,8009e9c <_fputwc_r+0xf0>
 8009e2c:	0023883a 	mov	r17,zero
 8009e30:	05400284 	movi	r21,10
 8009e34:	00000906 	br	8009e5c <_fputwc_r+0xb0>
 8009e38:	80800017 	ldw	r2,0(r16)
 8009e3c:	11400005 	stb	r5,0(r2)
 8009e40:	80c00017 	ldw	r3,0(r16)
 8009e44:	18c00044 	addi	r3,r3,1
 8009e48:	80c00015 	stw	r3,0(r16)
 8009e4c:	8c400044 	addi	r17,r17,1
 8009e50:	dc45883a 	add	r2,sp,r17
 8009e54:	8d00112e 	bgeu	r17,r20,8009e9c <_fputwc_r+0xf0>
 8009e58:	11400003 	ldbu	r5,0(r2)
 8009e5c:	80c00217 	ldw	r3,8(r16)
 8009e60:	18ffffc4 	addi	r3,r3,-1
 8009e64:	80c00215 	stw	r3,8(r16)
 8009e68:	183ff30e 	bge	r3,zero,8009e38 <__alt_data_end+0xfc009e38>
 8009e6c:	80800617 	ldw	r2,24(r16)
 8009e70:	18801916 	blt	r3,r2,8009ed8 <_fputwc_r+0x12c>
 8009e74:	80800017 	ldw	r2,0(r16)
 8009e78:	11400005 	stb	r5,0(r2)
 8009e7c:	80800017 	ldw	r2,0(r16)
 8009e80:	10c00003 	ldbu	r3,0(r2)
 8009e84:	10800044 	addi	r2,r2,1
 8009e88:	1d402326 	beq	r3,r21,8009f18 <_fputwc_r+0x16c>
 8009e8c:	80800015 	stw	r2,0(r16)
 8009e90:	8c400044 	addi	r17,r17,1
 8009e94:	dc45883a 	add	r2,sp,r17
 8009e98:	8d3fef36 	bltu	r17,r20,8009e58 <__alt_data_end+0xfc009e58>
 8009e9c:	9005883a 	mov	r2,r18
 8009ea0:	00000406 	br	8009eb4 <_fputwc_r+0x108>
 8009ea4:	80c0030b 	ldhu	r3,12(r16)
 8009ea8:	a005883a 	mov	r2,r20
 8009eac:	18c01014 	ori	r3,r3,64
 8009eb0:	80c0030d 	sth	r3,12(r16)
 8009eb4:	dfc00717 	ldw	ra,28(sp)
 8009eb8:	dd400617 	ldw	r21,24(sp)
 8009ebc:	dd000517 	ldw	r20,20(sp)
 8009ec0:	dcc00417 	ldw	r19,16(sp)
 8009ec4:	dc800317 	ldw	r18,12(sp)
 8009ec8:	dc400217 	ldw	r17,8(sp)
 8009ecc:	dc000117 	ldw	r16,4(sp)
 8009ed0:	dec00804 	addi	sp,sp,32
 8009ed4:	f800283a 	ret
 8009ed8:	9809883a 	mov	r4,r19
 8009edc:	29403fcc 	andi	r5,r5,255
 8009ee0:	800d883a 	mov	r6,r16
 8009ee4:	8009f880 	call	8009f88 <__swbuf_r>
 8009ee8:	10bfffe0 	cmpeqi	r2,r2,-1
 8009eec:	10803fcc 	andi	r2,r2,255
 8009ef0:	103fd626 	beq	r2,zero,8009e4c <__alt_data_end+0xfc009e4c>
 8009ef4:	00bfffc4 	movi	r2,-1
 8009ef8:	003fee06 	br	8009eb4 <__alt_data_end+0xfc009eb4>
 8009efc:	90ffffc4 	addi	r3,r18,-1
 8009f00:	01003f84 	movi	r4,254
 8009f04:	20ffbf36 	bltu	r4,r3,8009e04 <__alt_data_end+0xfc009e04>
 8009f08:	900b883a 	mov	r5,r18
 8009f0c:	dc800005 	stb	r18,0(sp)
 8009f10:	1029883a 	mov	r20,r2
 8009f14:	003fc506 	br	8009e2c <__alt_data_end+0xfc009e2c>
 8009f18:	9809883a 	mov	r4,r19
 8009f1c:	a80b883a 	mov	r5,r21
 8009f20:	800d883a 	mov	r6,r16
 8009f24:	8009f880 	call	8009f88 <__swbuf_r>
 8009f28:	10bfffe0 	cmpeqi	r2,r2,-1
 8009f2c:	003fef06 	br	8009eec <__alt_data_end+0xfc009eec>

08009f30 <fputwc>:
 8009f30:	defffc04 	addi	sp,sp,-16
 8009f34:	dc000115 	stw	r16,4(sp)
 8009f38:	04020074 	movhi	r16,2049
 8009f3c:	840baf04 	addi	r16,r16,11964
 8009f40:	dc400215 	stw	r17,8(sp)
 8009f44:	2023883a 	mov	r17,r4
 8009f48:	81000017 	ldw	r4,0(r16)
 8009f4c:	dfc00315 	stw	ra,12(sp)
 8009f50:	280d883a 	mov	r6,r5
 8009f54:	20000626 	beq	r4,zero,8009f70 <fputwc+0x40>
 8009f58:	20800e17 	ldw	r2,56(r4)
 8009f5c:	1000041e 	bne	r2,zero,8009f70 <fputwc+0x40>
 8009f60:	d9400015 	stw	r5,0(sp)
 8009f64:	8000a200 	call	8000a20 <__sinit>
 8009f68:	81000017 	ldw	r4,0(r16)
 8009f6c:	d9800017 	ldw	r6,0(sp)
 8009f70:	880b883a 	mov	r5,r17
 8009f74:	dfc00317 	ldw	ra,12(sp)
 8009f78:	dc400217 	ldw	r17,8(sp)
 8009f7c:	dc000117 	ldw	r16,4(sp)
 8009f80:	dec00404 	addi	sp,sp,16
 8009f84:	8009dac1 	jmpi	8009dac <_fputwc_r>

08009f88 <__swbuf_r>:
 8009f88:	defffc04 	addi	sp,sp,-16
 8009f8c:	dc800215 	stw	r18,8(sp)
 8009f90:	dc400115 	stw	r17,4(sp)
 8009f94:	dc000015 	stw	r16,0(sp)
 8009f98:	dfc00315 	stw	ra,12(sp)
 8009f9c:	2025883a 	mov	r18,r4
 8009fa0:	2823883a 	mov	r17,r5
 8009fa4:	3021883a 	mov	r16,r6
 8009fa8:	20000226 	beq	r4,zero,8009fb4 <__swbuf_r+0x2c>
 8009fac:	20800e17 	ldw	r2,56(r4)
 8009fb0:	10004126 	beq	r2,zero,800a0b8 <__swbuf_r+0x130>
 8009fb4:	80c00617 	ldw	r3,24(r16)
 8009fb8:	8180030b 	ldhu	r6,12(r16)
 8009fbc:	80c00215 	stw	r3,8(r16)
 8009fc0:	30c0020c 	andi	r3,r6,8
 8009fc4:	18003526 	beq	r3,zero,800a09c <__swbuf_r+0x114>
 8009fc8:	80c00417 	ldw	r3,16(r16)
 8009fcc:	18003326 	beq	r3,zero,800a09c <__swbuf_r+0x114>
 8009fd0:	3088000c 	andi	r2,r6,8192
 8009fd4:	8c403fcc 	andi	r17,r17,255
 8009fd8:	10001726 	beq	r2,zero,800a038 <__swbuf_r+0xb0>
 8009fdc:	80800017 	ldw	r2,0(r16)
 8009fe0:	81000517 	ldw	r4,20(r16)
 8009fe4:	10c7c83a 	sub	r3,r2,r3
 8009fe8:	19001d0e 	bge	r3,r4,800a060 <__swbuf_r+0xd8>
 8009fec:	18c00044 	addi	r3,r3,1
 8009ff0:	81400217 	ldw	r5,8(r16)
 8009ff4:	11000044 	addi	r4,r2,1
 8009ff8:	81000015 	stw	r4,0(r16)
 8009ffc:	297fffc4 	addi	r5,r5,-1
 800a000:	81400215 	stw	r5,8(r16)
 800a004:	14400005 	stb	r17,0(r2)
 800a008:	80800517 	ldw	r2,20(r16)
 800a00c:	10c01d26 	beq	r2,r3,800a084 <__swbuf_r+0xfc>
 800a010:	8080030b 	ldhu	r2,12(r16)
 800a014:	1080004c 	andi	r2,r2,1
 800a018:	1000181e 	bne	r2,zero,800a07c <__swbuf_r+0xf4>
 800a01c:	8805883a 	mov	r2,r17
 800a020:	dfc00317 	ldw	ra,12(sp)
 800a024:	dc800217 	ldw	r18,8(sp)
 800a028:	dc400117 	ldw	r17,4(sp)
 800a02c:	dc000017 	ldw	r16,0(sp)
 800a030:	dec00404 	addi	sp,sp,16
 800a034:	f800283a 	ret
 800a038:	81001917 	ldw	r4,100(r16)
 800a03c:	00b7ffc4 	movi	r2,-8193
 800a040:	31880014 	ori	r6,r6,8192
 800a044:	2084703a 	and	r2,r4,r2
 800a048:	80801915 	stw	r2,100(r16)
 800a04c:	80800017 	ldw	r2,0(r16)
 800a050:	81000517 	ldw	r4,20(r16)
 800a054:	8180030d 	sth	r6,12(r16)
 800a058:	10c7c83a 	sub	r3,r2,r3
 800a05c:	193fe316 	blt	r3,r4,8009fec <__alt_data_end+0xfc009fec>
 800a060:	9009883a 	mov	r4,r18
 800a064:	800b883a 	mov	r5,r16
 800a068:	80004640 	call	8000464 <_fflush_r>
 800a06c:	1000091e 	bne	r2,zero,800a094 <__swbuf_r+0x10c>
 800a070:	80800017 	ldw	r2,0(r16)
 800a074:	00c00044 	movi	r3,1
 800a078:	003fdd06 	br	8009ff0 <__alt_data_end+0xfc009ff0>
 800a07c:	00800284 	movi	r2,10
 800a080:	88bfe61e 	bne	r17,r2,800a01c <__alt_data_end+0xfc00a01c>
 800a084:	9009883a 	mov	r4,r18
 800a088:	800b883a 	mov	r5,r16
 800a08c:	80004640 	call	8000464 <_fflush_r>
 800a090:	103fe226 	beq	r2,zero,800a01c <__alt_data_end+0xfc00a01c>
 800a094:	00bfffc4 	movi	r2,-1
 800a098:	003fe106 	br	800a020 <__alt_data_end+0xfc00a020>
 800a09c:	9009883a 	mov	r4,r18
 800a0a0:	800b883a 	mov	r5,r16
 800a0a4:	8004c380 	call	8004c38 <__swsetup_r>
 800a0a8:	1000051e 	bne	r2,zero,800a0c0 <__swbuf_r+0x138>
 800a0ac:	8180030b 	ldhu	r6,12(r16)
 800a0b0:	80c00417 	ldw	r3,16(r16)
 800a0b4:	003fc606 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a0b8:	8000a200 	call	8000a20 <__sinit>
 800a0bc:	003fbd06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a0c0:	80c0030b 	ldhu	r3,12(r16)
 800a0c4:	00bfffc4 	movi	r2,-1
 800a0c8:	18c01014 	ori	r3,r3,64
 800a0cc:	80c0030d 	sth	r3,12(r16)
 800a0d0:	00c00244 	movi	r3,9
 800a0d4:	90c00015 	stw	r3,0(r18)
 800a0d8:	003fd106 	br	800a020 <__alt_data_end+0xfc00a020>

0800a0dc <__swbuf>:
 800a0dc:	00c20074 	movhi	r3,2049
 800a0e0:	18cbaf04 	addi	r3,r3,11964
 800a0e4:	2005883a 	mov	r2,r4
 800a0e8:	19000017 	ldw	r4,0(r3)
 800a0ec:	280d883a 	mov	r6,r5
 800a0f0:	100b883a 	mov	r5,r2
 800a0f4:	8009f881 	jmpi	8009f88 <__swbuf_r>

0800a0f8 <_wcrtomb_r>:
 800a0f8:	defff604 	addi	sp,sp,-40
 800a0fc:	00820074 	movhi	r2,2049
 800a100:	dc800815 	stw	r18,32(sp)
 800a104:	dc400715 	stw	r17,28(sp)
 800a108:	dc000615 	stw	r16,24(sp)
 800a10c:	108bb304 	addi	r2,r2,11980
 800a110:	dfc00915 	stw	ra,36(sp)
 800a114:	2021883a 	mov	r16,r4
 800a118:	3823883a 	mov	r17,r7
 800a11c:	14800017 	ldw	r18,0(r2)
 800a120:	28001426 	beq	r5,zero,800a174 <_wcrtomb_r+0x7c>
 800a124:	d9400415 	stw	r5,16(sp)
 800a128:	d9800515 	stw	r6,20(sp)
 800a12c:	8006d180 	call	8006d18 <__locale_charset>
 800a130:	d9400417 	ldw	r5,16(sp)
 800a134:	d9800517 	ldw	r6,20(sp)
 800a138:	8009883a 	mov	r4,r16
 800a13c:	dc400015 	stw	r17,0(sp)
 800a140:	100f883a 	mov	r7,r2
 800a144:	903ee83a 	callr	r18
 800a148:	00ffffc4 	movi	r3,-1
 800a14c:	10c0031e 	bne	r2,r3,800a15c <_wcrtomb_r+0x64>
 800a150:	88000015 	stw	zero,0(r17)
 800a154:	00c02284 	movi	r3,138
 800a158:	80c00015 	stw	r3,0(r16)
 800a15c:	dfc00917 	ldw	ra,36(sp)
 800a160:	dc800817 	ldw	r18,32(sp)
 800a164:	dc400717 	ldw	r17,28(sp)
 800a168:	dc000617 	ldw	r16,24(sp)
 800a16c:	dec00a04 	addi	sp,sp,40
 800a170:	f800283a 	ret
 800a174:	8006d180 	call	8006d18 <__locale_charset>
 800a178:	8009883a 	mov	r4,r16
 800a17c:	dc400015 	stw	r17,0(sp)
 800a180:	d9400104 	addi	r5,sp,4
 800a184:	000d883a 	mov	r6,zero
 800a188:	100f883a 	mov	r7,r2
 800a18c:	903ee83a 	callr	r18
 800a190:	003fed06 	br	800a148 <__alt_data_end+0xfc00a148>

0800a194 <wcrtomb>:
 800a194:	defff504 	addi	sp,sp,-44
 800a198:	dc400515 	stw	r17,20(sp)
 800a19c:	dc000415 	stw	r16,16(sp)
 800a1a0:	dfc00a15 	stw	ra,40(sp)
 800a1a4:	dd400915 	stw	r21,36(sp)
 800a1a8:	dd000815 	stw	r20,32(sp)
 800a1ac:	dcc00715 	stw	r19,28(sp)
 800a1b0:	dc800615 	stw	r18,24(sp)
 800a1b4:	2021883a 	mov	r16,r4
 800a1b8:	3023883a 	mov	r17,r6
 800a1bc:	20001d26 	beq	r4,zero,800a234 <wcrtomb+0xa0>
 800a1c0:	04820074 	movhi	r18,2049
 800a1c4:	948baf04 	addi	r18,r18,11964
 800a1c8:	00820074 	movhi	r2,2049
 800a1cc:	95400017 	ldw	r21,0(r18)
 800a1d0:	108bb304 	addi	r2,r2,11980
 800a1d4:	15000017 	ldw	r20,0(r2)
 800a1d8:	2827883a 	mov	r19,r5
 800a1dc:	8006d180 	call	8006d18 <__locale_charset>
 800a1e0:	a809883a 	mov	r4,r21
 800a1e4:	dc400015 	stw	r17,0(sp)
 800a1e8:	800b883a 	mov	r5,r16
 800a1ec:	980d883a 	mov	r6,r19
 800a1f0:	100f883a 	mov	r7,r2
 800a1f4:	a03ee83a 	callr	r20
 800a1f8:	00ffffc4 	movi	r3,-1
 800a1fc:	10c0041e 	bne	r2,r3,800a210 <wcrtomb+0x7c>
 800a200:	90c00017 	ldw	r3,0(r18)
 800a204:	01002284 	movi	r4,138
 800a208:	88000015 	stw	zero,0(r17)
 800a20c:	19000015 	stw	r4,0(r3)
 800a210:	dfc00a17 	ldw	ra,40(sp)
 800a214:	dd400917 	ldw	r21,36(sp)
 800a218:	dd000817 	ldw	r20,32(sp)
 800a21c:	dcc00717 	ldw	r19,28(sp)
 800a220:	dc800617 	ldw	r18,24(sp)
 800a224:	dc400517 	ldw	r17,20(sp)
 800a228:	dc000417 	ldw	r16,16(sp)
 800a22c:	dec00b04 	addi	sp,sp,44
 800a230:	f800283a 	ret
 800a234:	04820074 	movhi	r18,2049
 800a238:	948baf04 	addi	r18,r18,11964
 800a23c:	00820074 	movhi	r2,2049
 800a240:	94c00017 	ldw	r19,0(r18)
 800a244:	108bb304 	addi	r2,r2,11980
 800a248:	14000017 	ldw	r16,0(r2)
 800a24c:	8006d180 	call	8006d18 <__locale_charset>
 800a250:	9809883a 	mov	r4,r19
 800a254:	dc400015 	stw	r17,0(sp)
 800a258:	d9400104 	addi	r5,sp,4
 800a25c:	000d883a 	mov	r6,zero
 800a260:	100f883a 	mov	r7,r2
 800a264:	803ee83a 	callr	r16
 800a268:	003fe306 	br	800a1f8 <__alt_data_end+0xfc00a1f8>

0800a26c <__ascii_wctomb>:
 800a26c:	28000526 	beq	r5,zero,800a284 <__ascii_wctomb+0x18>
 800a270:	00803fc4 	movi	r2,255
 800a274:	11800536 	bltu	r2,r6,800a28c <__ascii_wctomb+0x20>
 800a278:	29800005 	stb	r6,0(r5)
 800a27c:	00800044 	movi	r2,1
 800a280:	f800283a 	ret
 800a284:	0005883a 	mov	r2,zero
 800a288:	f800283a 	ret
 800a28c:	00802284 	movi	r2,138
 800a290:	20800015 	stw	r2,0(r4)
 800a294:	00bfffc4 	movi	r2,-1
 800a298:	f800283a 	ret

0800a29c <_wctomb_r>:
 800a29c:	00820074 	movhi	r2,2049
 800a2a0:	defff904 	addi	sp,sp,-28
 800a2a4:	108bb304 	addi	r2,r2,11980
 800a2a8:	dfc00615 	stw	ra,24(sp)
 800a2ac:	dc400515 	stw	r17,20(sp)
 800a2b0:	dc000415 	stw	r16,16(sp)
 800a2b4:	3823883a 	mov	r17,r7
 800a2b8:	14000017 	ldw	r16,0(r2)
 800a2bc:	d9000115 	stw	r4,4(sp)
 800a2c0:	d9400215 	stw	r5,8(sp)
 800a2c4:	d9800315 	stw	r6,12(sp)
 800a2c8:	8006d180 	call	8006d18 <__locale_charset>
 800a2cc:	d9000117 	ldw	r4,4(sp)
 800a2d0:	d9400217 	ldw	r5,8(sp)
 800a2d4:	d9800317 	ldw	r6,12(sp)
 800a2d8:	dc400015 	stw	r17,0(sp)
 800a2dc:	100f883a 	mov	r7,r2
 800a2e0:	803ee83a 	callr	r16
 800a2e4:	dfc00617 	ldw	ra,24(sp)
 800a2e8:	dc400517 	ldw	r17,20(sp)
 800a2ec:	dc000417 	ldw	r16,16(sp)
 800a2f0:	dec00704 	addi	sp,sp,28
 800a2f4:	f800283a 	ret

0800a2f8 <__udivdi3>:
 800a2f8:	defff504 	addi	sp,sp,-44
 800a2fc:	dcc00415 	stw	r19,16(sp)
 800a300:	dc000115 	stw	r16,4(sp)
 800a304:	dfc00a15 	stw	ra,40(sp)
 800a308:	df000915 	stw	fp,36(sp)
 800a30c:	ddc00815 	stw	r23,32(sp)
 800a310:	dd800715 	stw	r22,28(sp)
 800a314:	dd400615 	stw	r21,24(sp)
 800a318:	dd000515 	stw	r20,20(sp)
 800a31c:	dc800315 	stw	r18,12(sp)
 800a320:	dc400215 	stw	r17,8(sp)
 800a324:	2027883a 	mov	r19,r4
 800a328:	2821883a 	mov	r16,r5
 800a32c:	3800471e 	bne	r7,zero,800a44c <__udivdi3+0x154>
 800a330:	3025883a 	mov	r18,r6
 800a334:	2023883a 	mov	r17,r4
 800a338:	2980592e 	bgeu	r5,r6,800a4a0 <__udivdi3+0x1a8>
 800a33c:	00bfffd4 	movui	r2,65535
 800a340:	2829883a 	mov	r20,r5
 800a344:	1180b236 	bltu	r2,r6,800a610 <__udivdi3+0x318>
 800a348:	00803fc4 	movi	r2,255
 800a34c:	1181622e 	bgeu	r2,r6,800a8d8 <__udivdi3+0x5e0>
 800a350:	00800204 	movi	r2,8
 800a354:	1007883a 	mov	r3,r2
 800a358:	3084d83a 	srl	r2,r6,r2
 800a35c:	01020074 	movhi	r4,2049
 800a360:	21047104 	addi	r4,r4,4548
 800a364:	2085883a 	add	r2,r4,r2
 800a368:	11000003 	ldbu	r4,0(r2)
 800a36c:	20c9883a 	add	r4,r4,r3
 800a370:	00c00804 	movi	r3,32
 800a374:	1907c83a 	sub	r3,r3,r4
 800a378:	18000526 	beq	r3,zero,800a390 <__udivdi3+0x98>
 800a37c:	80e0983a 	sll	r16,r16,r3
 800a380:	9908d83a 	srl	r4,r19,r4
 800a384:	30e4983a 	sll	r18,r6,r3
 800a388:	98e2983a 	sll	r17,r19,r3
 800a38c:	8128b03a 	or	r20,r16,r4
 800a390:	902ad43a 	srli	r21,r18,16
 800a394:	a009883a 	mov	r4,r20
 800a398:	95bfffcc 	andi	r22,r18,65535
 800a39c:	a80b883a 	mov	r5,r21
 800a3a0:	800b0780 	call	800b078 <__umodsi3>
 800a3a4:	a009883a 	mov	r4,r20
 800a3a8:	a80b883a 	mov	r5,r21
 800a3ac:	102f883a 	mov	r23,r2
 800a3b0:	800b0700 	call	800b070 <__udivsi3>
 800a3b4:	1009883a 	mov	r4,r2
 800a3b8:	b00b883a 	mov	r5,r22
 800a3bc:	1021883a 	mov	r16,r2
 800a3c0:	800b0800 	call	800b080 <__mulsi3>
 800a3c4:	b82e943a 	slli	r23,r23,16
 800a3c8:	8808d43a 	srli	r4,r17,16
 800a3cc:	b906b03a 	or	r3,r23,r4
 800a3d0:	1880052e 	bgeu	r3,r2,800a3e8 <__udivdi3+0xf0>
 800a3d4:	1c87883a 	add	r3,r3,r18
 800a3d8:	813fffc4 	addi	r4,r16,-1
 800a3dc:	1c800136 	bltu	r3,r18,800a3e4 <__udivdi3+0xec>
 800a3e0:	18815236 	bltu	r3,r2,800a92c <__udivdi3+0x634>
 800a3e4:	2021883a 	mov	r16,r4
 800a3e8:	18a7c83a 	sub	r19,r3,r2
 800a3ec:	9809883a 	mov	r4,r19
 800a3f0:	a80b883a 	mov	r5,r21
 800a3f4:	800b0780 	call	800b078 <__umodsi3>
 800a3f8:	1029883a 	mov	r20,r2
 800a3fc:	9809883a 	mov	r4,r19
 800a400:	a80b883a 	mov	r5,r21
 800a404:	a028943a 	slli	r20,r20,16
 800a408:	800b0700 	call	800b070 <__udivsi3>
 800a40c:	1009883a 	mov	r4,r2
 800a410:	b00b883a 	mov	r5,r22
 800a414:	8c7fffcc 	andi	r17,r17,65535
 800a418:	1027883a 	mov	r19,r2
 800a41c:	a462b03a 	or	r17,r20,r17
 800a420:	800b0800 	call	800b080 <__mulsi3>
 800a424:	8880052e 	bgeu	r17,r2,800a43c <__udivdi3+0x144>
 800a428:	8ca3883a 	add	r17,r17,r18
 800a42c:	98ffffc4 	addi	r3,r19,-1
 800a430:	8c811036 	bltu	r17,r18,800a874 <__udivdi3+0x57c>
 800a434:	88810f2e 	bgeu	r17,r2,800a874 <__udivdi3+0x57c>
 800a438:	9cffff84 	addi	r19,r19,-2
 800a43c:	8020943a 	slli	r16,r16,16
 800a440:	0007883a 	mov	r3,zero
 800a444:	9c04b03a 	or	r2,r19,r16
 800a448:	00006006 	br	800a5cc <__udivdi3+0x2d4>
 800a44c:	29c05d36 	bltu	r5,r7,800a5c4 <__udivdi3+0x2cc>
 800a450:	00bfffd4 	movui	r2,65535
 800a454:	11c0692e 	bgeu	r2,r7,800a5fc <__udivdi3+0x304>
 800a458:	00804034 	movhi	r2,256
 800a45c:	10bfffc4 	addi	r2,r2,-1
 800a460:	11c10e2e 	bgeu	r2,r7,800a89c <__udivdi3+0x5a4>
 800a464:	01400604 	movi	r5,24
 800a468:	2811883a 	mov	r8,r5
 800a46c:	394ad83a 	srl	r5,r7,r5
 800a470:	00820074 	movhi	r2,2049
 800a474:	10847104 	addi	r2,r2,4548
 800a478:	114b883a 	add	r5,r2,r5
 800a47c:	29400003 	ldbu	r5,0(r5)
 800a480:	00c00804 	movi	r3,32
 800a484:	2a0b883a 	add	r5,r5,r8
 800a488:	196fc83a 	sub	r23,r3,r5
 800a48c:	b8006b1e 	bne	r23,zero,800a63c <__udivdi3+0x344>
 800a490:	3c011436 	bltu	r7,r16,800a8e4 <__udivdi3+0x5ec>
 800a494:	9985403a 	cmpgeu	r2,r19,r6
 800a498:	0007883a 	mov	r3,zero
 800a49c:	00004b06 	br	800a5cc <__udivdi3+0x2d4>
 800a4a0:	3000041e 	bne	r6,zero,800a4b4 <__udivdi3+0x1bc>
 800a4a4:	01000044 	movi	r4,1
 800a4a8:	000b883a 	mov	r5,zero
 800a4ac:	800b0700 	call	800b070 <__udivsi3>
 800a4b0:	1025883a 	mov	r18,r2
 800a4b4:	00bfffd4 	movui	r2,65535
 800a4b8:	14805b2e 	bgeu	r2,r18,800a628 <__udivdi3+0x330>
 800a4bc:	00804034 	movhi	r2,256
 800a4c0:	10bfffc4 	addi	r2,r2,-1
 800a4c4:	1480fe2e 	bgeu	r2,r18,800a8c0 <__udivdi3+0x5c8>
 800a4c8:	00800604 	movi	r2,24
 800a4cc:	1007883a 	mov	r3,r2
 800a4d0:	9084d83a 	srl	r2,r18,r2
 800a4d4:	01020074 	movhi	r4,2049
 800a4d8:	21047104 	addi	r4,r4,4548
 800a4dc:	2085883a 	add	r2,r4,r2
 800a4e0:	11800003 	ldbu	r6,0(r2)
 800a4e4:	01c00804 	movi	r7,32
 800a4e8:	30c7883a 	add	r3,r6,r3
 800a4ec:	38cfc83a 	sub	r7,r7,r3
 800a4f0:	3800a71e 	bne	r7,zero,800a790 <__udivdi3+0x498>
 800a4f4:	9028d43a 	srli	r20,r18,16
 800a4f8:	84a1c83a 	sub	r16,r16,r18
 800a4fc:	957fffcc 	andi	r21,r18,65535
 800a500:	00c00044 	movi	r3,1
 800a504:	8009883a 	mov	r4,r16
 800a508:	a00b883a 	mov	r5,r20
 800a50c:	d8c00015 	stw	r3,0(sp)
 800a510:	800b0780 	call	800b078 <__umodsi3>
 800a514:	8009883a 	mov	r4,r16
 800a518:	a00b883a 	mov	r5,r20
 800a51c:	102d883a 	mov	r22,r2
 800a520:	800b0700 	call	800b070 <__udivsi3>
 800a524:	1009883a 	mov	r4,r2
 800a528:	a80b883a 	mov	r5,r21
 800a52c:	1021883a 	mov	r16,r2
 800a530:	800b0800 	call	800b080 <__mulsi3>
 800a534:	b02c943a 	slli	r22,r22,16
 800a538:	880ed43a 	srli	r7,r17,16
 800a53c:	d8c00017 	ldw	r3,0(sp)
 800a540:	b1ccb03a 	or	r6,r22,r7
 800a544:	3080052e 	bgeu	r6,r2,800a55c <__udivdi3+0x264>
 800a548:	348d883a 	add	r6,r6,r18
 800a54c:	813fffc4 	addi	r4,r16,-1
 800a550:	34800136 	bltu	r6,r18,800a558 <__udivdi3+0x260>
 800a554:	3080f236 	bltu	r6,r2,800a920 <__udivdi3+0x628>
 800a558:	2021883a 	mov	r16,r4
 800a55c:	30a7c83a 	sub	r19,r6,r2
 800a560:	9809883a 	mov	r4,r19
 800a564:	a00b883a 	mov	r5,r20
 800a568:	d8c00015 	stw	r3,0(sp)
 800a56c:	800b0780 	call	800b078 <__umodsi3>
 800a570:	102d883a 	mov	r22,r2
 800a574:	9809883a 	mov	r4,r19
 800a578:	a00b883a 	mov	r5,r20
 800a57c:	b02c943a 	slli	r22,r22,16
 800a580:	800b0700 	call	800b070 <__udivsi3>
 800a584:	1009883a 	mov	r4,r2
 800a588:	a80b883a 	mov	r5,r21
 800a58c:	8c7fffcc 	andi	r17,r17,65535
 800a590:	1027883a 	mov	r19,r2
 800a594:	b462b03a 	or	r17,r22,r17
 800a598:	800b0800 	call	800b080 <__mulsi3>
 800a59c:	d8c00017 	ldw	r3,0(sp)
 800a5a0:	8880052e 	bgeu	r17,r2,800a5b8 <__udivdi3+0x2c0>
 800a5a4:	8ca3883a 	add	r17,r17,r18
 800a5a8:	993fffc4 	addi	r4,r19,-1
 800a5ac:	8c80af36 	bltu	r17,r18,800a86c <__udivdi3+0x574>
 800a5b0:	8880ae2e 	bgeu	r17,r2,800a86c <__udivdi3+0x574>
 800a5b4:	9cffff84 	addi	r19,r19,-2
 800a5b8:	8020943a 	slli	r16,r16,16
 800a5bc:	9c04b03a 	or	r2,r19,r16
 800a5c0:	00000206 	br	800a5cc <__udivdi3+0x2d4>
 800a5c4:	0007883a 	mov	r3,zero
 800a5c8:	0005883a 	mov	r2,zero
 800a5cc:	dfc00a17 	ldw	ra,40(sp)
 800a5d0:	df000917 	ldw	fp,36(sp)
 800a5d4:	ddc00817 	ldw	r23,32(sp)
 800a5d8:	dd800717 	ldw	r22,28(sp)
 800a5dc:	dd400617 	ldw	r21,24(sp)
 800a5e0:	dd000517 	ldw	r20,20(sp)
 800a5e4:	dcc00417 	ldw	r19,16(sp)
 800a5e8:	dc800317 	ldw	r18,12(sp)
 800a5ec:	dc400217 	ldw	r17,8(sp)
 800a5f0:	dc000117 	ldw	r16,4(sp)
 800a5f4:	dec00b04 	addi	sp,sp,44
 800a5f8:	f800283a 	ret
 800a5fc:	00803fc4 	movi	r2,255
 800a600:	11c0a92e 	bgeu	r2,r7,800a8a8 <__udivdi3+0x5b0>
 800a604:	01400204 	movi	r5,8
 800a608:	2811883a 	mov	r8,r5
 800a60c:	003f9706 	br	800a46c <__alt_data_end+0xfc00a46c>
 800a610:	00804034 	movhi	r2,256
 800a614:	10bfffc4 	addi	r2,r2,-1
 800a618:	1180a62e 	bgeu	r2,r6,800a8b4 <__udivdi3+0x5bc>
 800a61c:	00800604 	movi	r2,24
 800a620:	1007883a 	mov	r3,r2
 800a624:	003f4c06 	br	800a358 <__alt_data_end+0xfc00a358>
 800a628:	00803fc4 	movi	r2,255
 800a62c:	1480a72e 	bgeu	r2,r18,800a8cc <__udivdi3+0x5d4>
 800a630:	00800204 	movi	r2,8
 800a634:	1007883a 	mov	r3,r2
 800a638:	003fa506 	br	800a4d0 <__alt_data_end+0xfc00a4d0>
 800a63c:	3178d83a 	srl	fp,r6,r5
 800a640:	3dce983a 	sll	r7,r7,r23
 800a644:	8168d83a 	srl	r20,r16,r5
 800a648:	9950d83a 	srl	r8,r19,r5
 800a64c:	3f38b03a 	or	fp,r7,fp
 800a650:	e024d43a 	srli	r18,fp,16
 800a654:	85e0983a 	sll	r16,r16,r23
 800a658:	a009883a 	mov	r4,r20
 800a65c:	900b883a 	mov	r5,r18
 800a660:	8220b03a 	or	r16,r16,r8
 800a664:	35ea983a 	sll	r21,r6,r23
 800a668:	800b0780 	call	800b078 <__umodsi3>
 800a66c:	a009883a 	mov	r4,r20
 800a670:	900b883a 	mov	r5,r18
 800a674:	1023883a 	mov	r17,r2
 800a678:	e5bfffcc 	andi	r22,fp,65535
 800a67c:	800b0700 	call	800b070 <__udivsi3>
 800a680:	1009883a 	mov	r4,r2
 800a684:	b00b883a 	mov	r5,r22
 800a688:	1029883a 	mov	r20,r2
 800a68c:	800b0800 	call	800b080 <__mulsi3>
 800a690:	8806943a 	slli	r3,r17,16
 800a694:	8014d43a 	srli	r10,r16,16
 800a698:	1a92b03a 	or	r9,r3,r10
 800a69c:	4880042e 	bgeu	r9,r2,800a6b0 <__udivdi3+0x3b8>
 800a6a0:	4f13883a 	add	r9,r9,fp
 800a6a4:	a0ffffc4 	addi	r3,r20,-1
 800a6a8:	4f00952e 	bgeu	r9,fp,800a900 <__udivdi3+0x608>
 800a6ac:	1829883a 	mov	r20,r3
 800a6b0:	48a3c83a 	sub	r17,r9,r2
 800a6b4:	8809883a 	mov	r4,r17
 800a6b8:	900b883a 	mov	r5,r18
 800a6bc:	800b0780 	call	800b078 <__umodsi3>
 800a6c0:	8809883a 	mov	r4,r17
 800a6c4:	900b883a 	mov	r5,r18
 800a6c8:	d8800015 	stw	r2,0(sp)
 800a6cc:	800b0700 	call	800b070 <__udivsi3>
 800a6d0:	1009883a 	mov	r4,r2
 800a6d4:	b00b883a 	mov	r5,r22
 800a6d8:	1023883a 	mov	r17,r2
 800a6dc:	800b0800 	call	800b080 <__mulsi3>
 800a6e0:	d8c00017 	ldw	r3,0(sp)
 800a6e4:	823fffcc 	andi	r8,r16,65535
 800a6e8:	1806943a 	slli	r3,r3,16
 800a6ec:	1a20b03a 	or	r16,r3,r8
 800a6f0:	8080042e 	bgeu	r16,r2,800a704 <__udivdi3+0x40c>
 800a6f4:	8721883a 	add	r16,r16,fp
 800a6f8:	88ffffc4 	addi	r3,r17,-1
 800a6fc:	87007c2e 	bgeu	r16,fp,800a8f0 <__udivdi3+0x5f8>
 800a700:	1823883a 	mov	r17,r3
 800a704:	a028943a 	slli	r20,r20,16
 800a708:	acbfffcc 	andi	r18,r21,65535
 800a70c:	900b883a 	mov	r5,r18
 800a710:	8d28b03a 	or	r20,r17,r20
 800a714:	a022d43a 	srli	r17,r20,16
 800a718:	a5bfffcc 	andi	r22,r20,65535
 800a71c:	b009883a 	mov	r4,r22
 800a720:	a82ad43a 	srli	r21,r21,16
 800a724:	80a1c83a 	sub	r16,r16,r2
 800a728:	800b0800 	call	800b080 <__mulsi3>
 800a72c:	8809883a 	mov	r4,r17
 800a730:	900b883a 	mov	r5,r18
 800a734:	1039883a 	mov	fp,r2
 800a738:	800b0800 	call	800b080 <__mulsi3>
 800a73c:	8809883a 	mov	r4,r17
 800a740:	a80b883a 	mov	r5,r21
 800a744:	1025883a 	mov	r18,r2
 800a748:	800b0800 	call	800b080 <__mulsi3>
 800a74c:	b009883a 	mov	r4,r22
 800a750:	a80b883a 	mov	r5,r21
 800a754:	1023883a 	mov	r17,r2
 800a758:	800b0800 	call	800b080 <__mulsi3>
 800a75c:	e006d43a 	srli	r3,fp,16
 800a760:	9085883a 	add	r2,r18,r2
 800a764:	10c7883a 	add	r3,r2,r3
 800a768:	1c80022e 	bgeu	r3,r18,800a774 <__udivdi3+0x47c>
 800a76c:	00800074 	movhi	r2,1
 800a770:	88a3883a 	add	r17,r17,r2
 800a774:	1808d43a 	srli	r4,r3,16
 800a778:	8909883a 	add	r4,r17,r4
 800a77c:	81004436 	bltu	r16,r4,800a890 <__udivdi3+0x598>
 800a780:	81003e26 	beq	r16,r4,800a87c <__udivdi3+0x584>
 800a784:	a005883a 	mov	r2,r20
 800a788:	0007883a 	mov	r3,zero
 800a78c:	003f8f06 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a790:	91e4983a 	sll	r18,r18,r7
 800a794:	80eed83a 	srl	r23,r16,r3
 800a798:	81cc983a 	sll	r6,r16,r7
 800a79c:	9028d43a 	srli	r20,r18,16
 800a7a0:	98c6d83a 	srl	r3,r19,r3
 800a7a4:	b809883a 	mov	r4,r23
 800a7a8:	a00b883a 	mov	r5,r20
 800a7ac:	30ecb03a 	or	r22,r6,r3
 800a7b0:	99e2983a 	sll	r17,r19,r7
 800a7b4:	800b0780 	call	800b078 <__umodsi3>
 800a7b8:	b809883a 	mov	r4,r23
 800a7bc:	a00b883a 	mov	r5,r20
 800a7c0:	1021883a 	mov	r16,r2
 800a7c4:	957fffcc 	andi	r21,r18,65535
 800a7c8:	800b0700 	call	800b070 <__udivsi3>
 800a7cc:	a80b883a 	mov	r5,r21
 800a7d0:	1009883a 	mov	r4,r2
 800a7d4:	102f883a 	mov	r23,r2
 800a7d8:	800b0800 	call	800b080 <__mulsi3>
 800a7dc:	8020943a 	slli	r16,r16,16
 800a7e0:	b00ad43a 	srli	r5,r22,16
 800a7e4:	814cb03a 	or	r6,r16,r5
 800a7e8:	3080062e 	bgeu	r6,r2,800a804 <__udivdi3+0x50c>
 800a7ec:	348d883a 	add	r6,r6,r18
 800a7f0:	b8ffffc4 	addi	r3,r23,-1
 800a7f4:	34804836 	bltu	r6,r18,800a918 <__udivdi3+0x620>
 800a7f8:	3080472e 	bgeu	r6,r2,800a918 <__udivdi3+0x620>
 800a7fc:	bdffff84 	addi	r23,r23,-2
 800a800:	348d883a 	add	r6,r6,r18
 800a804:	30a7c83a 	sub	r19,r6,r2
 800a808:	9809883a 	mov	r4,r19
 800a80c:	a00b883a 	mov	r5,r20
 800a810:	800b0780 	call	800b078 <__umodsi3>
 800a814:	9809883a 	mov	r4,r19
 800a818:	a00b883a 	mov	r5,r20
 800a81c:	1039883a 	mov	fp,r2
 800a820:	800b0700 	call	800b070 <__udivsi3>
 800a824:	1009883a 	mov	r4,r2
 800a828:	a80b883a 	mov	r5,r21
 800a82c:	e038943a 	slli	fp,fp,16
 800a830:	1027883a 	mov	r19,r2
 800a834:	800b0800 	call	800b080 <__mulsi3>
 800a838:	b1bfffcc 	andi	r6,r22,65535
 800a83c:	e18cb03a 	or	r6,fp,r6
 800a840:	3080062e 	bgeu	r6,r2,800a85c <__udivdi3+0x564>
 800a844:	348d883a 	add	r6,r6,r18
 800a848:	98ffffc4 	addi	r3,r19,-1
 800a84c:	34803036 	bltu	r6,r18,800a910 <__udivdi3+0x618>
 800a850:	30802f2e 	bgeu	r6,r2,800a910 <__udivdi3+0x618>
 800a854:	9cffff84 	addi	r19,r19,-2
 800a858:	348d883a 	add	r6,r6,r18
 800a85c:	b82e943a 	slli	r23,r23,16
 800a860:	30a1c83a 	sub	r16,r6,r2
 800a864:	9dc6b03a 	or	r3,r19,r23
 800a868:	003f2606 	br	800a504 <__alt_data_end+0xfc00a504>
 800a86c:	2027883a 	mov	r19,r4
 800a870:	003f5106 	br	800a5b8 <__alt_data_end+0xfc00a5b8>
 800a874:	1827883a 	mov	r19,r3
 800a878:	003ef006 	br	800a43c <__alt_data_end+0xfc00a43c>
 800a87c:	1808943a 	slli	r4,r3,16
 800a880:	9dc6983a 	sll	r3,r19,r23
 800a884:	e73fffcc 	andi	fp,fp,65535
 800a888:	2709883a 	add	r4,r4,fp
 800a88c:	193fbd2e 	bgeu	r3,r4,800a784 <__alt_data_end+0xfc00a784>
 800a890:	a0bfffc4 	addi	r2,r20,-1
 800a894:	0007883a 	mov	r3,zero
 800a898:	003f4c06 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a89c:	01400404 	movi	r5,16
 800a8a0:	2811883a 	mov	r8,r5
 800a8a4:	003ef106 	br	800a46c <__alt_data_end+0xfc00a46c>
 800a8a8:	000b883a 	mov	r5,zero
 800a8ac:	0011883a 	mov	r8,zero
 800a8b0:	003eee06 	br	800a46c <__alt_data_end+0xfc00a46c>
 800a8b4:	00800404 	movi	r2,16
 800a8b8:	1007883a 	mov	r3,r2
 800a8bc:	003ea606 	br	800a358 <__alt_data_end+0xfc00a358>
 800a8c0:	00800404 	movi	r2,16
 800a8c4:	1007883a 	mov	r3,r2
 800a8c8:	003f0106 	br	800a4d0 <__alt_data_end+0xfc00a4d0>
 800a8cc:	0005883a 	mov	r2,zero
 800a8d0:	0007883a 	mov	r3,zero
 800a8d4:	003efe06 	br	800a4d0 <__alt_data_end+0xfc00a4d0>
 800a8d8:	0005883a 	mov	r2,zero
 800a8dc:	0007883a 	mov	r3,zero
 800a8e0:	003e9d06 	br	800a358 <__alt_data_end+0xfc00a358>
 800a8e4:	0007883a 	mov	r3,zero
 800a8e8:	00800044 	movi	r2,1
 800a8ec:	003f3706 	br	800a5cc <__alt_data_end+0xfc00a5cc>
 800a8f0:	80bf832e 	bgeu	r16,r2,800a700 <__alt_data_end+0xfc00a700>
 800a8f4:	8c7fff84 	addi	r17,r17,-2
 800a8f8:	8721883a 	add	r16,r16,fp
 800a8fc:	003f8106 	br	800a704 <__alt_data_end+0xfc00a704>
 800a900:	48bf6a2e 	bgeu	r9,r2,800a6ac <__alt_data_end+0xfc00a6ac>
 800a904:	a53fff84 	addi	r20,r20,-2
 800a908:	4f13883a 	add	r9,r9,fp
 800a90c:	003f6806 	br	800a6b0 <__alt_data_end+0xfc00a6b0>
 800a910:	1827883a 	mov	r19,r3
 800a914:	003fd106 	br	800a85c <__alt_data_end+0xfc00a85c>
 800a918:	182f883a 	mov	r23,r3
 800a91c:	003fb906 	br	800a804 <__alt_data_end+0xfc00a804>
 800a920:	843fff84 	addi	r16,r16,-2
 800a924:	348d883a 	add	r6,r6,r18
 800a928:	003f0c06 	br	800a55c <__alt_data_end+0xfc00a55c>
 800a92c:	843fff84 	addi	r16,r16,-2
 800a930:	1c87883a 	add	r3,r3,r18
 800a934:	003eac06 	br	800a3e8 <__alt_data_end+0xfc00a3e8>

0800a938 <__umoddi3>:
 800a938:	defff404 	addi	sp,sp,-48
 800a93c:	dd800815 	stw	r22,32(sp)
 800a940:	dc400315 	stw	r17,12(sp)
 800a944:	dc000215 	stw	r16,8(sp)
 800a948:	dfc00b15 	stw	ra,44(sp)
 800a94c:	df000a15 	stw	fp,40(sp)
 800a950:	ddc00915 	stw	r23,36(sp)
 800a954:	dd400715 	stw	r21,28(sp)
 800a958:	dd000615 	stw	r20,24(sp)
 800a95c:	dcc00515 	stw	r19,20(sp)
 800a960:	dc800415 	stw	r18,16(sp)
 800a964:	2021883a 	mov	r16,r4
 800a968:	2823883a 	mov	r17,r5
 800a96c:	282d883a 	mov	r22,r5
 800a970:	38003c1e 	bne	r7,zero,800aa64 <__umoddi3+0x12c>
 800a974:	3027883a 	mov	r19,r6
 800a978:	2029883a 	mov	r20,r4
 800a97c:	2980522e 	bgeu	r5,r6,800aac8 <__umoddi3+0x190>
 800a980:	00bfffd4 	movui	r2,65535
 800a984:	1180a436 	bltu	r2,r6,800ac18 <__umoddi3+0x2e0>
 800a988:	00803fc4 	movi	r2,255
 800a98c:	11815e2e 	bgeu	r2,r6,800af08 <__umoddi3+0x5d0>
 800a990:	01400204 	movi	r5,8
 800a994:	2805883a 	mov	r2,r5
 800a998:	314ad83a 	srl	r5,r6,r5
 800a99c:	00c20074 	movhi	r3,2049
 800a9a0:	18c47104 	addi	r3,r3,4548
 800a9a4:	194b883a 	add	r5,r3,r5
 800a9a8:	29000003 	ldbu	r4,0(r5)
 800a9ac:	2089883a 	add	r4,r4,r2
 800a9b0:	00800804 	movi	r2,32
 800a9b4:	1105c83a 	sub	r2,r2,r4
 800a9b8:	10010c26 	beq	r2,zero,800adec <__umoddi3+0x4b4>
 800a9bc:	88a2983a 	sll	r17,r17,r2
 800a9c0:	8108d83a 	srl	r4,r16,r4
 800a9c4:	30a6983a 	sll	r19,r6,r2
 800a9c8:	80a8983a 	sll	r20,r16,r2
 800a9cc:	1025883a 	mov	r18,r2
 800a9d0:	892cb03a 	or	r22,r17,r4
 800a9d4:	9822d43a 	srli	r17,r19,16
 800a9d8:	b009883a 	mov	r4,r22
 800a9dc:	9d7fffcc 	andi	r21,r19,65535
 800a9e0:	880b883a 	mov	r5,r17
 800a9e4:	800b0780 	call	800b078 <__umodsi3>
 800a9e8:	b009883a 	mov	r4,r22
 800a9ec:	880b883a 	mov	r5,r17
 800a9f0:	102f883a 	mov	r23,r2
 800a9f4:	800b0700 	call	800b070 <__udivsi3>
 800a9f8:	1009883a 	mov	r4,r2
 800a9fc:	a80b883a 	mov	r5,r21
 800aa00:	800b0800 	call	800b080 <__mulsi3>
 800aa04:	b82e943a 	slli	r23,r23,16
 800aa08:	a008d43a 	srli	r4,r20,16
 800aa0c:	b906b03a 	or	r3,r23,r4
 800aa10:	1880042e 	bgeu	r3,r2,800aa24 <__umoddi3+0xec>
 800aa14:	1cc7883a 	add	r3,r3,r19
 800aa18:	1cc00236 	bltu	r3,r19,800aa24 <__umoddi3+0xec>
 800aa1c:	1880012e 	bgeu	r3,r2,800aa24 <__umoddi3+0xec>
 800aa20:	1cc7883a 	add	r3,r3,r19
 800aa24:	18a1c83a 	sub	r16,r3,r2
 800aa28:	8009883a 	mov	r4,r16
 800aa2c:	880b883a 	mov	r5,r17
 800aa30:	800b0780 	call	800b078 <__umodsi3>
 800aa34:	8009883a 	mov	r4,r16
 800aa38:	880b883a 	mov	r5,r17
 800aa3c:	102d883a 	mov	r22,r2
 800aa40:	800b0700 	call	800b070 <__udivsi3>
 800aa44:	1009883a 	mov	r4,r2
 800aa48:	a80b883a 	mov	r5,r21
 800aa4c:	b02c943a 	slli	r22,r22,16
 800aa50:	800b0800 	call	800b080 <__mulsi3>
 800aa54:	a13fffcc 	andi	r4,r20,65535
 800aa58:	b106b03a 	or	r3,r22,r4
 800aa5c:	1880572e 	bgeu	r3,r2,800abbc <__umoddi3+0x284>
 800aa60:	00005206 	br	800abac <__umoddi3+0x274>
 800aa64:	29c05936 	bltu	r5,r7,800abcc <__umoddi3+0x294>
 800aa68:	00bfffd4 	movui	r2,65535
 800aa6c:	11c0652e 	bgeu	r2,r7,800ac04 <__umoddi3+0x2cc>
 800aa70:	00804034 	movhi	r2,256
 800aa74:	10bfffc4 	addi	r2,r2,-1
 800aa78:	11c1172e 	bgeu	r2,r7,800aed8 <__umoddi3+0x5a0>
 800aa7c:	01400604 	movi	r5,24
 800aa80:	282b883a 	mov	r21,r5
 800aa84:	394ad83a 	srl	r5,r7,r5
 800aa88:	00c20074 	movhi	r3,2049
 800aa8c:	18c47104 	addi	r3,r3,4548
 800aa90:	194b883a 	add	r5,r3,r5
 800aa94:	28800003 	ldbu	r2,0(r5)
 800aa98:	00c00804 	movi	r3,32
 800aa9c:	156b883a 	add	r21,r2,r21
 800aaa0:	1d69c83a 	sub	r20,r3,r21
 800aaa4:	a000671e 	bne	r20,zero,800ac44 <__umoddi3+0x30c>
 800aaa8:	3c400136 	bltu	r7,r17,800aab0 <__umoddi3+0x178>
 800aaac:	81812336 	bltu	r16,r6,800af3c <__umoddi3+0x604>
 800aab0:	8185c83a 	sub	r2,r16,r6
 800aab4:	89e3c83a 	sub	r17,r17,r7
 800aab8:	8087803a 	cmpltu	r3,r16,r2
 800aabc:	88edc83a 	sub	r22,r17,r3
 800aac0:	b007883a 	mov	r3,r22
 800aac4:	00004306 	br	800abd4 <__umoddi3+0x29c>
 800aac8:	3000041e 	bne	r6,zero,800aadc <__umoddi3+0x1a4>
 800aacc:	01000044 	movi	r4,1
 800aad0:	000b883a 	mov	r5,zero
 800aad4:	800b0700 	call	800b070 <__udivsi3>
 800aad8:	1027883a 	mov	r19,r2
 800aadc:	00bfffd4 	movui	r2,65535
 800aae0:	14c0532e 	bgeu	r2,r19,800ac30 <__umoddi3+0x2f8>
 800aae4:	00804034 	movhi	r2,256
 800aae8:	10bfffc4 	addi	r2,r2,-1
 800aaec:	14c1032e 	bgeu	r2,r19,800aefc <__umoddi3+0x5c4>
 800aaf0:	00800604 	movi	r2,24
 800aaf4:	1007883a 	mov	r3,r2
 800aaf8:	9884d83a 	srl	r2,r19,r2
 800aafc:	01020074 	movhi	r4,2049
 800ab00:	21047104 	addi	r4,r4,4548
 800ab04:	2085883a 	add	r2,r4,r2
 800ab08:	11000003 	ldbu	r4,0(r2)
 800ab0c:	00800804 	movi	r2,32
 800ab10:	20c7883a 	add	r3,r4,r3
 800ab14:	10c5c83a 	sub	r2,r2,r3
 800ab18:	1000b61e 	bne	r2,zero,800adf4 <__umoddi3+0x4bc>
 800ab1c:	982ad43a 	srli	r21,r19,16
 800ab20:	8ce3c83a 	sub	r17,r17,r19
 800ab24:	9dbfffcc 	andi	r22,r19,65535
 800ab28:	0025883a 	mov	r18,zero
 800ab2c:	8809883a 	mov	r4,r17
 800ab30:	a80b883a 	mov	r5,r21
 800ab34:	800b0780 	call	800b078 <__umodsi3>
 800ab38:	8809883a 	mov	r4,r17
 800ab3c:	a80b883a 	mov	r5,r21
 800ab40:	102f883a 	mov	r23,r2
 800ab44:	800b0700 	call	800b070 <__udivsi3>
 800ab48:	1009883a 	mov	r4,r2
 800ab4c:	b00b883a 	mov	r5,r22
 800ab50:	800b0800 	call	800b080 <__mulsi3>
 800ab54:	b82e943a 	slli	r23,r23,16
 800ab58:	a008d43a 	srli	r4,r20,16
 800ab5c:	b906b03a 	or	r3,r23,r4
 800ab60:	1880032e 	bgeu	r3,r2,800ab70 <__umoddi3+0x238>
 800ab64:	1cc7883a 	add	r3,r3,r19
 800ab68:	1cc00136 	bltu	r3,r19,800ab70 <__umoddi3+0x238>
 800ab6c:	1880f136 	bltu	r3,r2,800af34 <__umoddi3+0x5fc>
 800ab70:	18a1c83a 	sub	r16,r3,r2
 800ab74:	8009883a 	mov	r4,r16
 800ab78:	a80b883a 	mov	r5,r21
 800ab7c:	800b0780 	call	800b078 <__umodsi3>
 800ab80:	8009883a 	mov	r4,r16
 800ab84:	a80b883a 	mov	r5,r21
 800ab88:	1023883a 	mov	r17,r2
 800ab8c:	800b0700 	call	800b070 <__udivsi3>
 800ab90:	1009883a 	mov	r4,r2
 800ab94:	b00b883a 	mov	r5,r22
 800ab98:	8822943a 	slli	r17,r17,16
 800ab9c:	800b0800 	call	800b080 <__mulsi3>
 800aba0:	a13fffcc 	andi	r4,r20,65535
 800aba4:	8906b03a 	or	r3,r17,r4
 800aba8:	1880042e 	bgeu	r3,r2,800abbc <__umoddi3+0x284>
 800abac:	1cc7883a 	add	r3,r3,r19
 800abb0:	1cc00236 	bltu	r3,r19,800abbc <__umoddi3+0x284>
 800abb4:	1880012e 	bgeu	r3,r2,800abbc <__umoddi3+0x284>
 800abb8:	1cc7883a 	add	r3,r3,r19
 800abbc:	1887c83a 	sub	r3,r3,r2
 800abc0:	1c84d83a 	srl	r2,r3,r18
 800abc4:	0007883a 	mov	r3,zero
 800abc8:	00000206 	br	800abd4 <__umoddi3+0x29c>
 800abcc:	2005883a 	mov	r2,r4
 800abd0:	2807883a 	mov	r3,r5
 800abd4:	dfc00b17 	ldw	ra,44(sp)
 800abd8:	df000a17 	ldw	fp,40(sp)
 800abdc:	ddc00917 	ldw	r23,36(sp)
 800abe0:	dd800817 	ldw	r22,32(sp)
 800abe4:	dd400717 	ldw	r21,28(sp)
 800abe8:	dd000617 	ldw	r20,24(sp)
 800abec:	dcc00517 	ldw	r19,20(sp)
 800abf0:	dc800417 	ldw	r18,16(sp)
 800abf4:	dc400317 	ldw	r17,12(sp)
 800abf8:	dc000217 	ldw	r16,8(sp)
 800abfc:	dec00c04 	addi	sp,sp,48
 800ac00:	f800283a 	ret
 800ac04:	00803fc4 	movi	r2,255
 800ac08:	11c0b02e 	bgeu	r2,r7,800aecc <__umoddi3+0x594>
 800ac0c:	01400204 	movi	r5,8
 800ac10:	282b883a 	mov	r21,r5
 800ac14:	003f9b06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800ac18:	00804034 	movhi	r2,256
 800ac1c:	10bfffc4 	addi	r2,r2,-1
 800ac20:	1180b02e 	bgeu	r2,r6,800aee4 <__umoddi3+0x5ac>
 800ac24:	01400604 	movi	r5,24
 800ac28:	2805883a 	mov	r2,r5
 800ac2c:	003f5a06 	br	800a998 <__alt_data_end+0xfc00a998>
 800ac30:	00803fc4 	movi	r2,255
 800ac34:	14c0ae2e 	bgeu	r2,r19,800aef0 <__umoddi3+0x5b8>
 800ac38:	00800204 	movi	r2,8
 800ac3c:	1007883a 	mov	r3,r2
 800ac40:	003fad06 	br	800aaf8 <__alt_data_end+0xfc00aaf8>
 800ac44:	3d0a983a 	sll	r5,r7,r20
 800ac48:	356cd83a 	srl	r22,r6,r21
 800ac4c:	8d78d83a 	srl	fp,r17,r21
 800ac50:	8d10983a 	sll	r8,r17,r20
 800ac54:	2dacb03a 	or	r22,r5,r22
 800ac58:	b02ed43a 	srli	r23,r22,16
 800ac5c:	8564d83a 	srl	r18,r16,r21
 800ac60:	e009883a 	mov	r4,fp
 800ac64:	b80b883a 	mov	r5,r23
 800ac68:	44a4b03a 	or	r18,r8,r18
 800ac6c:	3526983a 	sll	r19,r6,r20
 800ac70:	800b0780 	call	800b078 <__umodsi3>
 800ac74:	e009883a 	mov	r4,fp
 800ac78:	b80b883a 	mov	r5,r23
 800ac7c:	b47fffcc 	andi	r17,r22,65535
 800ac80:	d8800015 	stw	r2,0(sp)
 800ac84:	800b0700 	call	800b070 <__udivsi3>
 800ac88:	1009883a 	mov	r4,r2
 800ac8c:	880b883a 	mov	r5,r17
 800ac90:	1039883a 	mov	fp,r2
 800ac94:	800b0800 	call	800b080 <__mulsi3>
 800ac98:	d9800017 	ldw	r6,0(sp)
 800ac9c:	9008d43a 	srli	r4,r18,16
 800aca0:	8520983a 	sll	r16,r16,r20
 800aca4:	300c943a 	slli	r6,r6,16
 800aca8:	3106b03a 	or	r3,r6,r4
 800acac:	1880042e 	bgeu	r3,r2,800acc0 <__umoddi3+0x388>
 800acb0:	1d87883a 	add	r3,r3,r22
 800acb4:	e13fffc4 	addi	r4,fp,-1
 800acb8:	1d809a2e 	bgeu	r3,r22,800af24 <__umoddi3+0x5ec>
 800acbc:	2039883a 	mov	fp,r4
 800acc0:	1887c83a 	sub	r3,r3,r2
 800acc4:	1809883a 	mov	r4,r3
 800acc8:	b80b883a 	mov	r5,r23
 800accc:	d8c00115 	stw	r3,4(sp)
 800acd0:	800b0780 	call	800b078 <__umodsi3>
 800acd4:	d8c00117 	ldw	r3,4(sp)
 800acd8:	b80b883a 	mov	r5,r23
 800acdc:	d8800015 	stw	r2,0(sp)
 800ace0:	1809883a 	mov	r4,r3
 800ace4:	800b0700 	call	800b070 <__udivsi3>
 800ace8:	880b883a 	mov	r5,r17
 800acec:	1009883a 	mov	r4,r2
 800acf0:	102f883a 	mov	r23,r2
 800acf4:	800b0800 	call	800b080 <__mulsi3>
 800acf8:	d9800017 	ldw	r6,0(sp)
 800acfc:	947fffcc 	andi	r17,r18,65535
 800ad00:	300c943a 	slli	r6,r6,16
 800ad04:	3464b03a 	or	r18,r6,r17
 800ad08:	9080042e 	bgeu	r18,r2,800ad1c <__umoddi3+0x3e4>
 800ad0c:	95a5883a 	add	r18,r18,r22
 800ad10:	b8ffffc4 	addi	r3,r23,-1
 800ad14:	95807f2e 	bgeu	r18,r22,800af14 <__umoddi3+0x5dc>
 800ad18:	182f883a 	mov	r23,r3
 800ad1c:	e038943a 	slli	fp,fp,16
 800ad20:	980cd43a 	srli	r6,r19,16
 800ad24:	98ffffcc 	andi	r3,r19,65535
 800ad28:	bf38b03a 	or	fp,r23,fp
 800ad2c:	e02ed43a 	srli	r23,fp,16
 800ad30:	e73fffcc 	andi	fp,fp,65535
 800ad34:	180b883a 	mov	r5,r3
 800ad38:	e009883a 	mov	r4,fp
 800ad3c:	d9800015 	stw	r6,0(sp)
 800ad40:	d8c00115 	stw	r3,4(sp)
 800ad44:	90a5c83a 	sub	r18,r18,r2
 800ad48:	800b0800 	call	800b080 <__mulsi3>
 800ad4c:	d8c00117 	ldw	r3,4(sp)
 800ad50:	b809883a 	mov	r4,r23
 800ad54:	1023883a 	mov	r17,r2
 800ad58:	180b883a 	mov	r5,r3
 800ad5c:	800b0800 	call	800b080 <__mulsi3>
 800ad60:	d9800017 	ldw	r6,0(sp)
 800ad64:	b809883a 	mov	r4,r23
 800ad68:	d8800115 	stw	r2,4(sp)
 800ad6c:	300b883a 	mov	r5,r6
 800ad70:	302f883a 	mov	r23,r6
 800ad74:	800b0800 	call	800b080 <__mulsi3>
 800ad78:	e009883a 	mov	r4,fp
 800ad7c:	b80b883a 	mov	r5,r23
 800ad80:	d8800015 	stw	r2,0(sp)
 800ad84:	800b0800 	call	800b080 <__mulsi3>
 800ad88:	d8c00117 	ldw	r3,4(sp)
 800ad8c:	880cd43a 	srli	r6,r17,16
 800ad90:	d9c00017 	ldw	r7,0(sp)
 800ad94:	1885883a 	add	r2,r3,r2
 800ad98:	118d883a 	add	r6,r2,r6
 800ad9c:	30c0022e 	bgeu	r6,r3,800ada8 <__umoddi3+0x470>
 800ada0:	00800074 	movhi	r2,1
 800ada4:	388f883a 	add	r7,r7,r2
 800ada8:	3006d43a 	srli	r3,r6,16
 800adac:	300c943a 	slli	r6,r6,16
 800adb0:	8c7fffcc 	andi	r17,r17,65535
 800adb4:	38c7883a 	add	r3,r7,r3
 800adb8:	3463883a 	add	r17,r6,r17
 800adbc:	90c03d36 	bltu	r18,r3,800aeb4 <__umoddi3+0x57c>
 800adc0:	90c06026 	beq	r18,r3,800af44 <__umoddi3+0x60c>
 800adc4:	90c9c83a 	sub	r4,r18,r3
 800adc8:	880f883a 	mov	r7,r17
 800adcc:	81cfc83a 	sub	r7,r16,r7
 800add0:	81c7803a 	cmpltu	r3,r16,r7
 800add4:	20c7c83a 	sub	r3,r4,r3
 800add8:	1d44983a 	sll	r2,r3,r21
 800addc:	3d0ed83a 	srl	r7,r7,r20
 800ade0:	1d06d83a 	srl	r3,r3,r20
 800ade4:	11c4b03a 	or	r2,r2,r7
 800ade8:	003f7a06 	br	800abd4 <__alt_data_end+0xfc00abd4>
 800adec:	0025883a 	mov	r18,zero
 800adf0:	003ef806 	br	800a9d4 <__alt_data_end+0xfc00a9d4>
 800adf4:	98a6983a 	sll	r19,r19,r2
 800adf8:	88e8d83a 	srl	r20,r17,r3
 800adfc:	80c6d83a 	srl	r3,r16,r3
 800ae00:	982ad43a 	srli	r21,r19,16
 800ae04:	88a2983a 	sll	r17,r17,r2
 800ae08:	a009883a 	mov	r4,r20
 800ae0c:	a80b883a 	mov	r5,r21
 800ae10:	88eeb03a 	or	r23,r17,r3
 800ae14:	1025883a 	mov	r18,r2
 800ae18:	800b0780 	call	800b078 <__umodsi3>
 800ae1c:	a009883a 	mov	r4,r20
 800ae20:	a80b883a 	mov	r5,r21
 800ae24:	1023883a 	mov	r17,r2
 800ae28:	9dbfffcc 	andi	r22,r19,65535
 800ae2c:	800b0700 	call	800b070 <__udivsi3>
 800ae30:	1009883a 	mov	r4,r2
 800ae34:	b00b883a 	mov	r5,r22
 800ae38:	800b0800 	call	800b080 <__mulsi3>
 800ae3c:	8822943a 	slli	r17,r17,16
 800ae40:	b808d43a 	srli	r4,r23,16
 800ae44:	84a8983a 	sll	r20,r16,r18
 800ae48:	8906b03a 	or	r3,r17,r4
 800ae4c:	1880042e 	bgeu	r3,r2,800ae60 <__umoddi3+0x528>
 800ae50:	1cc7883a 	add	r3,r3,r19
 800ae54:	1cc00236 	bltu	r3,r19,800ae60 <__umoddi3+0x528>
 800ae58:	1880012e 	bgeu	r3,r2,800ae60 <__umoddi3+0x528>
 800ae5c:	1cc7883a 	add	r3,r3,r19
 800ae60:	18a1c83a 	sub	r16,r3,r2
 800ae64:	8009883a 	mov	r4,r16
 800ae68:	a80b883a 	mov	r5,r21
 800ae6c:	800b0780 	call	800b078 <__umodsi3>
 800ae70:	8009883a 	mov	r4,r16
 800ae74:	a80b883a 	mov	r5,r21
 800ae78:	1039883a 	mov	fp,r2
 800ae7c:	800b0700 	call	800b070 <__udivsi3>
 800ae80:	1009883a 	mov	r4,r2
 800ae84:	b00b883a 	mov	r5,r22
 800ae88:	800b0800 	call	800b080 <__mulsi3>
 800ae8c:	e006943a 	slli	r3,fp,16
 800ae90:	b93fffcc 	andi	r4,r23,65535
 800ae94:	1906b03a 	or	r3,r3,r4
 800ae98:	1880042e 	bgeu	r3,r2,800aeac <__umoddi3+0x574>
 800ae9c:	1cc7883a 	add	r3,r3,r19
 800aea0:	1cc00236 	bltu	r3,r19,800aeac <__umoddi3+0x574>
 800aea4:	1880012e 	bgeu	r3,r2,800aeac <__umoddi3+0x574>
 800aea8:	1cc7883a 	add	r3,r3,r19
 800aeac:	18a3c83a 	sub	r17,r3,r2
 800aeb0:	003f1e06 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800aeb4:	8ccfc83a 	sub	r7,r17,r19
 800aeb8:	1d89c83a 	sub	r4,r3,r22
 800aebc:	89e3803a 	cmpltu	r17,r17,r7
 800aec0:	2463c83a 	sub	r17,r4,r17
 800aec4:	9449c83a 	sub	r4,r18,r17
 800aec8:	003fc006 	br	800adcc <__alt_data_end+0xfc00adcc>
 800aecc:	000b883a 	mov	r5,zero
 800aed0:	002b883a 	mov	r21,zero
 800aed4:	003eeb06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800aed8:	01400404 	movi	r5,16
 800aedc:	282b883a 	mov	r21,r5
 800aee0:	003ee806 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800aee4:	01400404 	movi	r5,16
 800aee8:	2805883a 	mov	r2,r5
 800aeec:	003eaa06 	br	800a998 <__alt_data_end+0xfc00a998>
 800aef0:	0005883a 	mov	r2,zero
 800aef4:	0007883a 	mov	r3,zero
 800aef8:	003eff06 	br	800aaf8 <__alt_data_end+0xfc00aaf8>
 800aefc:	00800404 	movi	r2,16
 800af00:	1007883a 	mov	r3,r2
 800af04:	003efc06 	br	800aaf8 <__alt_data_end+0xfc00aaf8>
 800af08:	000b883a 	mov	r5,zero
 800af0c:	0005883a 	mov	r2,zero
 800af10:	003ea106 	br	800a998 <__alt_data_end+0xfc00a998>
 800af14:	90bf802e 	bgeu	r18,r2,800ad18 <__alt_data_end+0xfc00ad18>
 800af18:	bdffff84 	addi	r23,r23,-2
 800af1c:	95a5883a 	add	r18,r18,r22
 800af20:	003f7e06 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800af24:	18bf652e 	bgeu	r3,r2,800acbc <__alt_data_end+0xfc00acbc>
 800af28:	e73fff84 	addi	fp,fp,-2
 800af2c:	1d87883a 	add	r3,r3,r22
 800af30:	003f6306 	br	800acc0 <__alt_data_end+0xfc00acc0>
 800af34:	1cc7883a 	add	r3,r3,r19
 800af38:	003f0d06 	br	800ab70 <__alt_data_end+0xfc00ab70>
 800af3c:	8005883a 	mov	r2,r16
 800af40:	003edf06 	br	800aac0 <__alt_data_end+0xfc00aac0>
 800af44:	847fdb36 	bltu	r16,r17,800aeb4 <__alt_data_end+0xfc00aeb4>
 800af48:	880f883a 	mov	r7,r17
 800af4c:	0009883a 	mov	r4,zero
 800af50:	003f9e06 	br	800adcc <__alt_data_end+0xfc00adcc>

0800af54 <udivmodsi4>:
 800af54:	2900182e 	bgeu	r5,r4,800afb8 <udivmodsi4+0x64>
 800af58:	28001716 	blt	r5,zero,800afb8 <udivmodsi4+0x64>
 800af5c:	00800804 	movi	r2,32
 800af60:	00c00044 	movi	r3,1
 800af64:	00000206 	br	800af70 <udivmodsi4+0x1c>
 800af68:	10001126 	beq	r2,zero,800afb0 <udivmodsi4+0x5c>
 800af6c:	28000516 	blt	r5,zero,800af84 <udivmodsi4+0x30>
 800af70:	294b883a 	add	r5,r5,r5
 800af74:	10bfffc4 	addi	r2,r2,-1
 800af78:	18c7883a 	add	r3,r3,r3
 800af7c:	293ffa36 	bltu	r5,r4,800af68 <__alt_data_end+0xfc00af68>
 800af80:	18000b26 	beq	r3,zero,800afb0 <udivmodsi4+0x5c>
 800af84:	0005883a 	mov	r2,zero
 800af88:	21400236 	bltu	r4,r5,800af94 <udivmodsi4+0x40>
 800af8c:	2149c83a 	sub	r4,r4,r5
 800af90:	10c4b03a 	or	r2,r2,r3
 800af94:	1806d07a 	srli	r3,r3,1
 800af98:	280ad07a 	srli	r5,r5,1
 800af9c:	183ffa1e 	bne	r3,zero,800af88 <__alt_data_end+0xfc00af88>
 800afa0:	3000011e 	bne	r6,zero,800afa8 <udivmodsi4+0x54>
 800afa4:	f800283a 	ret
 800afa8:	2005883a 	mov	r2,r4
 800afac:	f800283a 	ret
 800afb0:	0005883a 	mov	r2,zero
 800afb4:	003ffa06 	br	800afa0 <__alt_data_end+0xfc00afa0>
 800afb8:	00c00044 	movi	r3,1
 800afbc:	003ff106 	br	800af84 <__alt_data_end+0xfc00af84>

0800afc0 <__divsi3>:
 800afc0:	defffe04 	addi	sp,sp,-8
 800afc4:	dfc00115 	stw	ra,4(sp)
 800afc8:	dc000015 	stw	r16,0(sp)
 800afcc:	20000b16 	blt	r4,zero,800affc <__divsi3+0x3c>
 800afd0:	0021883a 	mov	r16,zero
 800afd4:	28000c16 	blt	r5,zero,800b008 <__divsi3+0x48>
 800afd8:	000d883a 	mov	r6,zero
 800afdc:	800af540 	call	800af54 <udivmodsi4>
 800afe0:	0407c83a 	sub	r3,zero,r16
 800afe4:	1884f03a 	xor	r2,r3,r2
 800afe8:	1405883a 	add	r2,r2,r16
 800afec:	dfc00117 	ldw	ra,4(sp)
 800aff0:	dc000017 	ldw	r16,0(sp)
 800aff4:	dec00204 	addi	sp,sp,8
 800aff8:	f800283a 	ret
 800affc:	0109c83a 	sub	r4,zero,r4
 800b000:	04000044 	movi	r16,1
 800b004:	283ff40e 	bge	r5,zero,800afd8 <__alt_data_end+0xfc00afd8>
 800b008:	014bc83a 	sub	r5,zero,r5
 800b00c:	8400005c 	xori	r16,r16,1
 800b010:	003ff106 	br	800afd8 <__alt_data_end+0xfc00afd8>

0800b014 <__modsi3>:
 800b014:	defffd04 	addi	sp,sp,-12
 800b018:	dfc00215 	stw	ra,8(sp)
 800b01c:	dc400115 	stw	r17,4(sp)
 800b020:	dc000015 	stw	r16,0(sp)
 800b024:	20000c16 	blt	r4,zero,800b058 <__modsi3+0x44>
 800b028:	0023883a 	mov	r17,zero
 800b02c:	0021883a 	mov	r16,zero
 800b030:	28000d16 	blt	r5,zero,800b068 <__modsi3+0x54>
 800b034:	01800044 	movi	r6,1
 800b038:	800af540 	call	800af54 <udivmodsi4>
 800b03c:	1404f03a 	xor	r2,r2,r16
 800b040:	8885883a 	add	r2,r17,r2
 800b044:	dfc00217 	ldw	ra,8(sp)
 800b048:	dc400117 	ldw	r17,4(sp)
 800b04c:	dc000017 	ldw	r16,0(sp)
 800b050:	dec00304 	addi	sp,sp,12
 800b054:	f800283a 	ret
 800b058:	0109c83a 	sub	r4,zero,r4
 800b05c:	04400044 	movi	r17,1
 800b060:	043fffc4 	movi	r16,-1
 800b064:	283ff30e 	bge	r5,zero,800b034 <__alt_data_end+0xfc00b034>
 800b068:	014bc83a 	sub	r5,zero,r5
 800b06c:	003ff106 	br	800b034 <__alt_data_end+0xfc00b034>

0800b070 <__udivsi3>:
 800b070:	000d883a 	mov	r6,zero
 800b074:	800af541 	jmpi	800af54 <udivmodsi4>

0800b078 <__umodsi3>:
 800b078:	01800044 	movi	r6,1
 800b07c:	800af541 	jmpi	800af54 <udivmodsi4>

0800b080 <__mulsi3>:
 800b080:	0005883a 	mov	r2,zero
 800b084:	20000726 	beq	r4,zero,800b0a4 <__mulsi3+0x24>
 800b088:	20c0004c 	andi	r3,r4,1
 800b08c:	2008d07a 	srli	r4,r4,1
 800b090:	18000126 	beq	r3,zero,800b098 <__mulsi3+0x18>
 800b094:	1145883a 	add	r2,r2,r5
 800b098:	294b883a 	add	r5,r5,r5
 800b09c:	203ffa1e 	bne	r4,zero,800b088 <__alt_data_end+0xfc00b088>
 800b0a0:	f800283a 	ret
 800b0a4:	f800283a 	ret

0800b0a8 <__adddf3>:
 800b0a8:	02000434 	movhi	r8,16
 800b0ac:	423fffc4 	addi	r8,r8,-1
 800b0b0:	defffb04 	addi	sp,sp,-20
 800b0b4:	2a12703a 	and	r9,r5,r8
 800b0b8:	2806d7fa 	srli	r3,r5,31
 800b0bc:	3a10703a 	and	r8,r7,r8
 800b0c0:	3804d53a 	srli	r2,r7,20
 800b0c4:	3014d77a 	srli	r10,r6,29
 800b0c8:	dc000015 	stw	r16,0(sp)
 800b0cc:	481290fa 	slli	r9,r9,3
 800b0d0:	2820d53a 	srli	r16,r5,20
 800b0d4:	401090fa 	slli	r8,r8,3
 800b0d8:	200ad77a 	srli	r5,r4,29
 800b0dc:	380ed7fa 	srli	r7,r7,31
 800b0e0:	dc800215 	stw	r18,8(sp)
 800b0e4:	dc400115 	stw	r17,4(sp)
 800b0e8:	dfc00415 	stw	ra,16(sp)
 800b0ec:	dcc00315 	stw	r19,12(sp)
 800b0f0:	1c803fcc 	andi	r18,r3,255
 800b0f4:	8401ffcc 	andi	r16,r16,2047
 800b0f8:	494ab03a 	or	r5,r9,r5
 800b0fc:	202290fa 	slli	r17,r4,3
 800b100:	1081ffcc 	andi	r2,r2,2047
 800b104:	4290b03a 	or	r8,r8,r10
 800b108:	300c90fa 	slli	r6,r6,3
 800b10c:	91c07026 	beq	r18,r7,800b2d0 <__adddf3+0x228>
 800b110:	8087c83a 	sub	r3,r16,r2
 800b114:	00c0b30e 	bge	zero,r3,800b3e4 <__adddf3+0x33c>
 800b118:	10002a1e 	bne	r2,zero,800b1c4 <__adddf3+0x11c>
 800b11c:	4184b03a 	or	r2,r8,r6
 800b120:	1000991e 	bne	r2,zero,800b388 <__adddf3+0x2e0>
 800b124:	888001cc 	andi	r2,r17,7
 800b128:	10005b26 	beq	r2,zero,800b298 <__adddf3+0x1f0>
 800b12c:	88c003cc 	andi	r3,r17,15
 800b130:	00800104 	movi	r2,4
 800b134:	18805826 	beq	r3,r2,800b298 <__adddf3+0x1f0>
 800b138:	89800104 	addi	r6,r17,4
 800b13c:	3463803a 	cmpltu	r17,r6,r17
 800b140:	2c4b883a 	add	r5,r5,r17
 800b144:	2880202c 	andhi	r2,r5,128
 800b148:	9007883a 	mov	r3,r18
 800b14c:	3023883a 	mov	r17,r6
 800b150:	10005426 	beq	r2,zero,800b2a4 <__adddf3+0x1fc>
 800b154:	84000044 	addi	r16,r16,1
 800b158:	0081ffc4 	movi	r2,2047
 800b15c:	8080c126 	beq	r16,r2,800b464 <__adddf3+0x3bc>
 800b160:	013fe034 	movhi	r4,65408
 800b164:	213fffc4 	addi	r4,r4,-1
 800b168:	290a703a 	and	r5,r5,r4
 800b16c:	2804977a 	slli	r2,r5,29
 800b170:	280a927a 	slli	r5,r5,9
 800b174:	8822d0fa 	srli	r17,r17,3
 800b178:	8401ffcc 	andi	r16,r16,2047
 800b17c:	2808d33a 	srli	r4,r5,12
 800b180:	1444b03a 	or	r2,r2,r17
 800b184:	8401ffcc 	andi	r16,r16,2047
 800b188:	800a953a 	slli	r5,r16,20
 800b18c:	18c03fcc 	andi	r3,r3,255
 800b190:	04000434 	movhi	r16,16
 800b194:	180697fa 	slli	r3,r3,31
 800b198:	843fffc4 	addi	r16,r16,-1
 800b19c:	2420703a 	and	r16,r4,r16
 800b1a0:	8160b03a 	or	r16,r16,r5
 800b1a4:	80c6b03a 	or	r3,r16,r3
 800b1a8:	dfc00417 	ldw	ra,16(sp)
 800b1ac:	dcc00317 	ldw	r19,12(sp)
 800b1b0:	dc800217 	ldw	r18,8(sp)
 800b1b4:	dc400117 	ldw	r17,4(sp)
 800b1b8:	dc000017 	ldw	r16,0(sp)
 800b1bc:	dec00504 	addi	sp,sp,20
 800b1c0:	f800283a 	ret
 800b1c4:	0081ffc4 	movi	r2,2047
 800b1c8:	80bfd626 	beq	r16,r2,800b124 <__alt_data_end+0xfc00b124>
 800b1cc:	42002034 	orhi	r8,r8,128
 800b1d0:	00800e04 	movi	r2,56
 800b1d4:	10c0a616 	blt	r2,r3,800b470 <__adddf3+0x3c8>
 800b1d8:	008007c4 	movi	r2,31
 800b1dc:	10c0c916 	blt	r2,r3,800b504 <__adddf3+0x45c>
 800b1e0:	00800804 	movi	r2,32
 800b1e4:	10c5c83a 	sub	r2,r2,r3
 800b1e8:	408e983a 	sll	r7,r8,r2
 800b1ec:	30c8d83a 	srl	r4,r6,r3
 800b1f0:	3084983a 	sll	r2,r6,r2
 800b1f4:	40c6d83a 	srl	r3,r8,r3
 800b1f8:	390cb03a 	or	r6,r7,r4
 800b1fc:	1004c03a 	cmpne	r2,r2,zero
 800b200:	308cb03a 	or	r6,r6,r2
 800b204:	898dc83a 	sub	r6,r17,r6
 800b208:	89a3803a 	cmpltu	r17,r17,r6
 800b20c:	28cbc83a 	sub	r5,r5,r3
 800b210:	2c4bc83a 	sub	r5,r5,r17
 800b214:	3023883a 	mov	r17,r6
 800b218:	2880202c 	andhi	r2,r5,128
 800b21c:	10006d26 	beq	r2,zero,800b3d4 <__adddf3+0x32c>
 800b220:	04c02034 	movhi	r19,128
 800b224:	9cffffc4 	addi	r19,r19,-1
 800b228:	2ce6703a 	and	r19,r5,r19
 800b22c:	98007e26 	beq	r19,zero,800b428 <__adddf3+0x380>
 800b230:	9809883a 	mov	r4,r19
 800b234:	800d8400 	call	800d840 <__clzsi2>
 800b238:	10fffe04 	addi	r3,r2,-8
 800b23c:	010007c4 	movi	r4,31
 800b240:	20c07f16 	blt	r4,r3,800b440 <__adddf3+0x398>
 800b244:	01400a04 	movi	r5,40
 800b248:	2885c83a 	sub	r2,r5,r2
 800b24c:	888ad83a 	srl	r5,r17,r2
 800b250:	98e6983a 	sll	r19,r19,r3
 800b254:	88e2983a 	sll	r17,r17,r3
 800b258:	2ce6b03a 	or	r19,r5,r19
 800b25c:	1c007c16 	blt	r3,r16,800b450 <__adddf3+0x3a8>
 800b260:	1c21c83a 	sub	r16,r3,r16
 800b264:	81400044 	addi	r5,r16,1
 800b268:	00c007c4 	movi	r3,31
 800b26c:	19409816 	blt	r3,r5,800b4d0 <__adddf3+0x428>
 800b270:	1c21c83a 	sub	r16,r3,r16
 800b274:	8c08983a 	sll	r4,r17,r16
 800b278:	8946d83a 	srl	r3,r17,r5
 800b27c:	9c20983a 	sll	r16,r19,r16
 800b280:	2008c03a 	cmpne	r4,r4,zero
 800b284:	994ad83a 	srl	r5,r19,r5
 800b288:	1c06b03a 	or	r3,r3,r16
 800b28c:	1922b03a 	or	r17,r3,r4
 800b290:	0021883a 	mov	r16,zero
 800b294:	003fa306 	br	800b124 <__alt_data_end+0xfc00b124>
 800b298:	2880202c 	andhi	r2,r5,128
 800b29c:	9007883a 	mov	r3,r18
 800b2a0:	103fac1e 	bne	r2,zero,800b154 <__alt_data_end+0xfc00b154>
 800b2a4:	2804977a 	slli	r2,r5,29
 800b2a8:	8822d0fa 	srli	r17,r17,3
 800b2ac:	0101ffc4 	movi	r4,2047
 800b2b0:	280ad0fa 	srli	r5,r5,3
 800b2b4:	1444b03a 	or	r2,r2,r17
 800b2b8:	81002c26 	beq	r16,r4,800b36c <__adddf3+0x2c4>
 800b2bc:	8120703a 	and	r16,r16,r4
 800b2c0:	01000434 	movhi	r4,16
 800b2c4:	213fffc4 	addi	r4,r4,-1
 800b2c8:	2908703a 	and	r4,r5,r4
 800b2cc:	003fad06 	br	800b184 <__alt_data_end+0xfc00b184>
 800b2d0:	8089c83a 	sub	r4,r16,r2
 800b2d4:	01006a0e 	bge	zero,r4,800b480 <__adddf3+0x3d8>
 800b2d8:	10003326 	beq	r2,zero,800b3a8 <__adddf3+0x300>
 800b2dc:	0081ffc4 	movi	r2,2047
 800b2e0:	80bf9026 	beq	r16,r2,800b124 <__alt_data_end+0xfc00b124>
 800b2e4:	42002034 	orhi	r8,r8,128
 800b2e8:	00800e04 	movi	r2,56
 800b2ec:	1100b116 	blt	r2,r4,800b5b4 <__adddf3+0x50c>
 800b2f0:	008007c4 	movi	r2,31
 800b2f4:	1100e216 	blt	r2,r4,800b680 <__adddf3+0x5d8>
 800b2f8:	00800804 	movi	r2,32
 800b2fc:	1105c83a 	sub	r2,r2,r4
 800b300:	4092983a 	sll	r9,r8,r2
 800b304:	310ed83a 	srl	r7,r6,r4
 800b308:	3084983a 	sll	r2,r6,r2
 800b30c:	4110d83a 	srl	r8,r8,r4
 800b310:	49ccb03a 	or	r6,r9,r7
 800b314:	1004c03a 	cmpne	r2,r2,zero
 800b318:	308cb03a 	or	r6,r6,r2
 800b31c:	344d883a 	add	r6,r6,r17
 800b320:	3463803a 	cmpltu	r17,r6,r17
 800b324:	414b883a 	add	r5,r8,r5
 800b328:	2c4b883a 	add	r5,r5,r17
 800b32c:	3023883a 	mov	r17,r6
 800b330:	2880202c 	andhi	r2,r5,128
 800b334:	10002726 	beq	r2,zero,800b3d4 <__adddf3+0x32c>
 800b338:	84000044 	addi	r16,r16,1
 800b33c:	0081ffc4 	movi	r2,2047
 800b340:	8080ae26 	beq	r16,r2,800b5fc <__adddf3+0x554>
 800b344:	00bfe034 	movhi	r2,65408
 800b348:	10bfffc4 	addi	r2,r2,-1
 800b34c:	288a703a 	and	r5,r5,r2
 800b350:	880cd07a 	srli	r6,r17,1
 800b354:	280897fa 	slli	r4,r5,31
 800b358:	88c0004c 	andi	r3,r17,1
 800b35c:	30e2b03a 	or	r17,r6,r3
 800b360:	280ad07a 	srli	r5,r5,1
 800b364:	8922b03a 	or	r17,r17,r4
 800b368:	003f6e06 	br	800b124 <__alt_data_end+0xfc00b124>
 800b36c:	1148b03a 	or	r4,r2,r5
 800b370:	20003c26 	beq	r4,zero,800b464 <__adddf3+0x3bc>
 800b374:	29000234 	orhi	r4,r5,8
 800b378:	01400434 	movhi	r5,16
 800b37c:	297fffc4 	addi	r5,r5,-1
 800b380:	2148703a 	and	r4,r4,r5
 800b384:	003f7f06 	br	800b184 <__alt_data_end+0xfc00b184>
 800b388:	18ffffc4 	addi	r3,r3,-1
 800b38c:	18004d1e 	bne	r3,zero,800b4c4 <__adddf3+0x41c>
 800b390:	898dc83a 	sub	r6,r17,r6
 800b394:	89a3803a 	cmpltu	r17,r17,r6
 800b398:	2a0bc83a 	sub	r5,r5,r8
 800b39c:	2c4bc83a 	sub	r5,r5,r17
 800b3a0:	3023883a 	mov	r17,r6
 800b3a4:	003f9c06 	br	800b218 <__alt_data_end+0xfc00b218>
 800b3a8:	4184b03a 	or	r2,r8,r6
 800b3ac:	103f5d26 	beq	r2,zero,800b124 <__alt_data_end+0xfc00b124>
 800b3b0:	213fffc4 	addi	r4,r4,-1
 800b3b4:	203fd926 	beq	r4,zero,800b31c <__alt_data_end+0xfc00b31c>
 800b3b8:	0081ffc4 	movi	r2,2047
 800b3bc:	80bfca1e 	bne	r16,r2,800b2e8 <__alt_data_end+0xfc00b2e8>
 800b3c0:	003f5806 	br	800b124 <__alt_data_end+0xfc00b124>
 800b3c4:	10c8b03a 	or	r4,r2,r3
 800b3c8:	20008b26 	beq	r4,zero,800b5f8 <__adddf3+0x550>
 800b3cc:	100b883a 	mov	r5,r2
 800b3d0:	1823883a 	mov	r17,r3
 800b3d4:	888001cc 	andi	r2,r17,7
 800b3d8:	103f541e 	bne	r2,zero,800b12c <__alt_data_end+0xfc00b12c>
 800b3dc:	9007883a 	mov	r3,r18
 800b3e0:	003fb006 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b3e4:	1800531e 	bne	r3,zero,800b534 <__adddf3+0x48c>
 800b3e8:	80800044 	addi	r2,r16,1
 800b3ec:	1081ffcc 	andi	r2,r2,2047
 800b3f0:	00c00044 	movi	r3,1
 800b3f4:	1880990e 	bge	r3,r2,800b65c <__adddf3+0x5b4>
 800b3f8:	8985c83a 	sub	r2,r17,r6
 800b3fc:	8887803a 	cmpltu	r3,r17,r2
 800b400:	2a27c83a 	sub	r19,r5,r8
 800b404:	98e7c83a 	sub	r19,r19,r3
 800b408:	98c0202c 	andhi	r3,r19,128
 800b40c:	18006226 	beq	r3,zero,800b598 <__adddf3+0x4f0>
 800b410:	3463c83a 	sub	r17,r6,r17
 800b414:	4151c83a 	sub	r8,r8,r5
 800b418:	344d803a 	cmpltu	r6,r6,r17
 800b41c:	41a7c83a 	sub	r19,r8,r6
 800b420:	3825883a 	mov	r18,r7
 800b424:	983f821e 	bne	r19,zero,800b230 <__alt_data_end+0xfc00b230>
 800b428:	8809883a 	mov	r4,r17
 800b42c:	800d8400 	call	800d840 <__clzsi2>
 800b430:	10800804 	addi	r2,r2,32
 800b434:	10fffe04 	addi	r3,r2,-8
 800b438:	010007c4 	movi	r4,31
 800b43c:	20ff810e 	bge	r4,r3,800b244 <__alt_data_end+0xfc00b244>
 800b440:	14fff604 	addi	r19,r2,-40
 800b444:	8ce6983a 	sll	r19,r17,r19
 800b448:	0023883a 	mov	r17,zero
 800b44c:	1c3f840e 	bge	r3,r16,800b260 <__alt_data_end+0xfc00b260>
 800b450:	017fe034 	movhi	r5,65408
 800b454:	297fffc4 	addi	r5,r5,-1
 800b458:	80e1c83a 	sub	r16,r16,r3
 800b45c:	994a703a 	and	r5,r19,r5
 800b460:	003f3006 	br	800b124 <__alt_data_end+0xfc00b124>
 800b464:	0009883a 	mov	r4,zero
 800b468:	0005883a 	mov	r2,zero
 800b46c:	003f4506 	br	800b184 <__alt_data_end+0xfc00b184>
 800b470:	418cb03a 	or	r6,r8,r6
 800b474:	300cc03a 	cmpne	r6,r6,zero
 800b478:	0007883a 	mov	r3,zero
 800b47c:	003f6106 	br	800b204 <__alt_data_end+0xfc00b204>
 800b480:	2000921e 	bne	r4,zero,800b6cc <__adddf3+0x624>
 800b484:	80800044 	addi	r2,r16,1
 800b488:	11c1ffcc 	andi	r7,r2,2047
 800b48c:	01000044 	movi	r4,1
 800b490:	21c0610e 	bge	r4,r7,800b618 <__adddf3+0x570>
 800b494:	0101ffc4 	movi	r4,2047
 800b498:	1100a326 	beq	r2,r4,800b728 <__adddf3+0x680>
 800b49c:	344d883a 	add	r6,r6,r17
 800b4a0:	3463803a 	cmpltu	r17,r6,r17
 800b4a4:	414b883a 	add	r5,r8,r5
 800b4a8:	2c4b883a 	add	r5,r5,r17
 800b4ac:	282297fa 	slli	r17,r5,31
 800b4b0:	300cd07a 	srli	r6,r6,1
 800b4b4:	280ad07a 	srli	r5,r5,1
 800b4b8:	1021883a 	mov	r16,r2
 800b4bc:	89a2b03a 	or	r17,r17,r6
 800b4c0:	003f1806 	br	800b124 <__alt_data_end+0xfc00b124>
 800b4c4:	0081ffc4 	movi	r2,2047
 800b4c8:	80bf411e 	bne	r16,r2,800b1d0 <__alt_data_end+0xfc00b1d0>
 800b4cc:	003f1506 	br	800b124 <__alt_data_end+0xfc00b124>
 800b4d0:	80bff844 	addi	r2,r16,-31
 800b4d4:	00c00804 	movi	r3,32
 800b4d8:	9884d83a 	srl	r2,r19,r2
 800b4dc:	28c04a26 	beq	r5,r3,800b608 <__adddf3+0x560>
 800b4e0:	00c00fc4 	movi	r3,63
 800b4e4:	1c21c83a 	sub	r16,r3,r16
 800b4e8:	9c26983a 	sll	r19,r19,r16
 800b4ec:	9c62b03a 	or	r17,r19,r17
 800b4f0:	8822c03a 	cmpne	r17,r17,zero
 800b4f4:	88a2b03a 	or	r17,r17,r2
 800b4f8:	000b883a 	mov	r5,zero
 800b4fc:	0021883a 	mov	r16,zero
 800b500:	003fb406 	br	800b3d4 <__alt_data_end+0xfc00b3d4>
 800b504:	18bff804 	addi	r2,r3,-32
 800b508:	01000804 	movi	r4,32
 800b50c:	4084d83a 	srl	r2,r8,r2
 800b510:	19003f26 	beq	r3,r4,800b610 <__adddf3+0x568>
 800b514:	01001004 	movi	r4,64
 800b518:	20c7c83a 	sub	r3,r4,r3
 800b51c:	40d0983a 	sll	r8,r8,r3
 800b520:	418cb03a 	or	r6,r8,r6
 800b524:	300cc03a 	cmpne	r6,r6,zero
 800b528:	308cb03a 	or	r6,r6,r2
 800b52c:	0007883a 	mov	r3,zero
 800b530:	003f3406 	br	800b204 <__alt_data_end+0xfc00b204>
 800b534:	80002326 	beq	r16,zero,800b5c4 <__adddf3+0x51c>
 800b538:	0101ffc4 	movi	r4,2047
 800b53c:	11005e26 	beq	r2,r4,800b6b8 <__adddf3+0x610>
 800b540:	00c7c83a 	sub	r3,zero,r3
 800b544:	29402034 	orhi	r5,r5,128
 800b548:	01000e04 	movi	r4,56
 800b54c:	20c07216 	blt	r4,r3,800b718 <__adddf3+0x670>
 800b550:	010007c4 	movi	r4,31
 800b554:	20c0ce16 	blt	r4,r3,800b890 <__adddf3+0x7e8>
 800b558:	01000804 	movi	r4,32
 800b55c:	20c9c83a 	sub	r4,r4,r3
 800b560:	2914983a 	sll	r10,r5,r4
 800b564:	88d2d83a 	srl	r9,r17,r3
 800b568:	8908983a 	sll	r4,r17,r4
 800b56c:	28c6d83a 	srl	r3,r5,r3
 800b570:	5262b03a 	or	r17,r10,r9
 800b574:	2008c03a 	cmpne	r4,r4,zero
 800b578:	8922b03a 	or	r17,r17,r4
 800b57c:	3463c83a 	sub	r17,r6,r17
 800b580:	40c7c83a 	sub	r3,r8,r3
 800b584:	344d803a 	cmpltu	r6,r6,r17
 800b588:	198bc83a 	sub	r5,r3,r6
 800b58c:	1021883a 	mov	r16,r2
 800b590:	3825883a 	mov	r18,r7
 800b594:	003f2006 	br	800b218 <__alt_data_end+0xfc00b218>
 800b598:	9886b03a 	or	r3,r19,r2
 800b59c:	1800141e 	bne	r3,zero,800b5f0 <__adddf3+0x548>
 800b5a0:	0007883a 	mov	r3,zero
 800b5a4:	000b883a 	mov	r5,zero
 800b5a8:	0023883a 	mov	r17,zero
 800b5ac:	0021883a 	mov	r16,zero
 800b5b0:	003f3c06 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b5b4:	418cb03a 	or	r6,r8,r6
 800b5b8:	300cc03a 	cmpne	r6,r6,zero
 800b5bc:	0011883a 	mov	r8,zero
 800b5c0:	003f5606 	br	800b31c <__alt_data_end+0xfc00b31c>
 800b5c4:	2c48b03a 	or	r4,r5,r17
 800b5c8:	20003b26 	beq	r4,zero,800b6b8 <__adddf3+0x610>
 800b5cc:	00c6303a 	nor	r3,zero,r3
 800b5d0:	1800371e 	bne	r3,zero,800b6b0 <__adddf3+0x608>
 800b5d4:	3463c83a 	sub	r17,r6,r17
 800b5d8:	414bc83a 	sub	r5,r8,r5
 800b5dc:	344d803a 	cmpltu	r6,r6,r17
 800b5e0:	298bc83a 	sub	r5,r5,r6
 800b5e4:	1021883a 	mov	r16,r2
 800b5e8:	3825883a 	mov	r18,r7
 800b5ec:	003f0a06 	br	800b218 <__alt_data_end+0xfc00b218>
 800b5f0:	1023883a 	mov	r17,r2
 800b5f4:	003f0d06 	br	800b22c <__alt_data_end+0xfc00b22c>
 800b5f8:	0007883a 	mov	r3,zero
 800b5fc:	000b883a 	mov	r5,zero
 800b600:	0023883a 	mov	r17,zero
 800b604:	003f2706 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b608:	0027883a 	mov	r19,zero
 800b60c:	003fb706 	br	800b4ec <__alt_data_end+0xfc00b4ec>
 800b610:	0011883a 	mov	r8,zero
 800b614:	003fc206 	br	800b520 <__alt_data_end+0xfc00b520>
 800b618:	2c44b03a 	or	r2,r5,r17
 800b61c:	8000871e 	bne	r16,zero,800b83c <__adddf3+0x794>
 800b620:	1000b126 	beq	r2,zero,800b8e8 <__adddf3+0x840>
 800b624:	4184b03a 	or	r2,r8,r6
 800b628:	103ebe26 	beq	r2,zero,800b124 <__alt_data_end+0xfc00b124>
 800b62c:	3445883a 	add	r2,r6,r17
 800b630:	1463803a 	cmpltu	r17,r2,r17
 800b634:	414b883a 	add	r5,r8,r5
 800b638:	2c4b883a 	add	r5,r5,r17
 800b63c:	28c0202c 	andhi	r3,r5,128
 800b640:	1023883a 	mov	r17,r2
 800b644:	183f6326 	beq	r3,zero,800b3d4 <__alt_data_end+0xfc00b3d4>
 800b648:	00bfe034 	movhi	r2,65408
 800b64c:	10bfffc4 	addi	r2,r2,-1
 800b650:	2021883a 	mov	r16,r4
 800b654:	288a703a 	and	r5,r5,r2
 800b658:	003eb206 	br	800b124 <__alt_data_end+0xfc00b124>
 800b65c:	2c44b03a 	or	r2,r5,r17
 800b660:	8000251e 	bne	r16,zero,800b6f8 <__adddf3+0x650>
 800b664:	10004b1e 	bne	r2,zero,800b794 <__adddf3+0x6ec>
 800b668:	4184b03a 	or	r2,r8,r6
 800b66c:	103fe226 	beq	r2,zero,800b5f8 <__alt_data_end+0xfc00b5f8>
 800b670:	400b883a 	mov	r5,r8
 800b674:	3023883a 	mov	r17,r6
 800b678:	3825883a 	mov	r18,r7
 800b67c:	003ea906 	br	800b124 <__alt_data_end+0xfc00b124>
 800b680:	20bff804 	addi	r2,r4,-32
 800b684:	01c00804 	movi	r7,32
 800b688:	4084d83a 	srl	r2,r8,r2
 800b68c:	21c07e26 	beq	r4,r7,800b888 <__adddf3+0x7e0>
 800b690:	01c01004 	movi	r7,64
 800b694:	3909c83a 	sub	r4,r7,r4
 800b698:	4110983a 	sll	r8,r8,r4
 800b69c:	418cb03a 	or	r6,r8,r6
 800b6a0:	300cc03a 	cmpne	r6,r6,zero
 800b6a4:	308cb03a 	or	r6,r6,r2
 800b6a8:	0011883a 	mov	r8,zero
 800b6ac:	003f1b06 	br	800b31c <__alt_data_end+0xfc00b31c>
 800b6b0:	0101ffc4 	movi	r4,2047
 800b6b4:	113fa41e 	bne	r2,r4,800b548 <__alt_data_end+0xfc00b548>
 800b6b8:	400b883a 	mov	r5,r8
 800b6bc:	3023883a 	mov	r17,r6
 800b6c0:	1021883a 	mov	r16,r2
 800b6c4:	3825883a 	mov	r18,r7
 800b6c8:	003e9606 	br	800b124 <__alt_data_end+0xfc00b124>
 800b6cc:	80001a1e 	bne	r16,zero,800b738 <__adddf3+0x690>
 800b6d0:	2c4eb03a 	or	r7,r5,r17
 800b6d4:	38005526 	beq	r7,zero,800b82c <__adddf3+0x784>
 800b6d8:	0108303a 	nor	r4,zero,r4
 800b6dc:	2000511e 	bne	r4,zero,800b824 <__adddf3+0x77c>
 800b6e0:	89a3883a 	add	r17,r17,r6
 800b6e4:	414b883a 	add	r5,r8,r5
 800b6e8:	898d803a 	cmpltu	r6,r17,r6
 800b6ec:	298b883a 	add	r5,r5,r6
 800b6f0:	1021883a 	mov	r16,r2
 800b6f4:	003f0e06 	br	800b330 <__alt_data_end+0xfc00b330>
 800b6f8:	1000341e 	bne	r2,zero,800b7cc <__adddf3+0x724>
 800b6fc:	4184b03a 	or	r2,r8,r6
 800b700:	10006f26 	beq	r2,zero,800b8c0 <__adddf3+0x818>
 800b704:	400b883a 	mov	r5,r8
 800b708:	3023883a 	mov	r17,r6
 800b70c:	3825883a 	mov	r18,r7
 800b710:	0401ffc4 	movi	r16,2047
 800b714:	003e8306 	br	800b124 <__alt_data_end+0xfc00b124>
 800b718:	2c62b03a 	or	r17,r5,r17
 800b71c:	8822c03a 	cmpne	r17,r17,zero
 800b720:	0007883a 	mov	r3,zero
 800b724:	003f9506 	br	800b57c <__alt_data_end+0xfc00b57c>
 800b728:	1021883a 	mov	r16,r2
 800b72c:	000b883a 	mov	r5,zero
 800b730:	0023883a 	mov	r17,zero
 800b734:	003edb06 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b738:	01c1ffc4 	movi	r7,2047
 800b73c:	11c03b26 	beq	r2,r7,800b82c <__adddf3+0x784>
 800b740:	0109c83a 	sub	r4,zero,r4
 800b744:	29402034 	orhi	r5,r5,128
 800b748:	01c00e04 	movi	r7,56
 800b74c:	39006216 	blt	r7,r4,800b8d8 <__adddf3+0x830>
 800b750:	01c007c4 	movi	r7,31
 800b754:	39006b16 	blt	r7,r4,800b904 <__adddf3+0x85c>
 800b758:	01c00804 	movi	r7,32
 800b75c:	390fc83a 	sub	r7,r7,r4
 800b760:	29d4983a 	sll	r10,r5,r7
 800b764:	8912d83a 	srl	r9,r17,r4
 800b768:	89ce983a 	sll	r7,r17,r7
 800b76c:	2908d83a 	srl	r4,r5,r4
 800b770:	5262b03a 	or	r17,r10,r9
 800b774:	380ac03a 	cmpne	r5,r7,zero
 800b778:	8962b03a 	or	r17,r17,r5
 800b77c:	89a3883a 	add	r17,r17,r6
 800b780:	2211883a 	add	r8,r4,r8
 800b784:	898d803a 	cmpltu	r6,r17,r6
 800b788:	418b883a 	add	r5,r8,r6
 800b78c:	1021883a 	mov	r16,r2
 800b790:	003ee706 	br	800b330 <__alt_data_end+0xfc00b330>
 800b794:	4184b03a 	or	r2,r8,r6
 800b798:	103e6226 	beq	r2,zero,800b124 <__alt_data_end+0xfc00b124>
 800b79c:	8987c83a 	sub	r3,r17,r6
 800b7a0:	88c9803a 	cmpltu	r4,r17,r3
 800b7a4:	2a05c83a 	sub	r2,r5,r8
 800b7a8:	1105c83a 	sub	r2,r2,r4
 800b7ac:	1100202c 	andhi	r4,r2,128
 800b7b0:	203f0426 	beq	r4,zero,800b3c4 <__alt_data_end+0xfc00b3c4>
 800b7b4:	3463c83a 	sub	r17,r6,r17
 800b7b8:	414bc83a 	sub	r5,r8,r5
 800b7bc:	344d803a 	cmpltu	r6,r6,r17
 800b7c0:	298bc83a 	sub	r5,r5,r6
 800b7c4:	3825883a 	mov	r18,r7
 800b7c8:	003e5606 	br	800b124 <__alt_data_end+0xfc00b124>
 800b7cc:	4184b03a 	or	r2,r8,r6
 800b7d0:	10002b26 	beq	r2,zero,800b880 <__adddf3+0x7d8>
 800b7d4:	2804d0fa 	srli	r2,r5,3
 800b7d8:	8822d0fa 	srli	r17,r17,3
 800b7dc:	280a977a 	slli	r5,r5,29
 800b7e0:	10c0022c 	andhi	r3,r2,8
 800b7e4:	2c62b03a 	or	r17,r5,r17
 800b7e8:	18000826 	beq	r3,zero,800b80c <__adddf3+0x764>
 800b7ec:	4008d0fa 	srli	r4,r8,3
 800b7f0:	20c0022c 	andhi	r3,r4,8
 800b7f4:	1800051e 	bne	r3,zero,800b80c <__adddf3+0x764>
 800b7f8:	300cd0fa 	srli	r6,r6,3
 800b7fc:	4010977a 	slli	r8,r8,29
 800b800:	2005883a 	mov	r2,r4
 800b804:	3825883a 	mov	r18,r7
 800b808:	41a2b03a 	or	r17,r8,r6
 800b80c:	880ad77a 	srli	r5,r17,29
 800b810:	100490fa 	slli	r2,r2,3
 800b814:	882290fa 	slli	r17,r17,3
 800b818:	0401ffc4 	movi	r16,2047
 800b81c:	288ab03a 	or	r5,r5,r2
 800b820:	003e4006 	br	800b124 <__alt_data_end+0xfc00b124>
 800b824:	01c1ffc4 	movi	r7,2047
 800b828:	11ffc71e 	bne	r2,r7,800b748 <__alt_data_end+0xfc00b748>
 800b82c:	400b883a 	mov	r5,r8
 800b830:	3023883a 	mov	r17,r6
 800b834:	1021883a 	mov	r16,r2
 800b838:	003e3a06 	br	800b124 <__alt_data_end+0xfc00b124>
 800b83c:	10002d26 	beq	r2,zero,800b8f4 <__adddf3+0x84c>
 800b840:	4184b03a 	or	r2,r8,r6
 800b844:	10000e26 	beq	r2,zero,800b880 <__adddf3+0x7d8>
 800b848:	2804d0fa 	srli	r2,r5,3
 800b84c:	8822d0fa 	srli	r17,r17,3
 800b850:	280a977a 	slli	r5,r5,29
 800b854:	10c0022c 	andhi	r3,r2,8
 800b858:	2c62b03a 	or	r17,r5,r17
 800b85c:	183feb26 	beq	r3,zero,800b80c <__alt_data_end+0xfc00b80c>
 800b860:	4008d0fa 	srli	r4,r8,3
 800b864:	20c0022c 	andhi	r3,r4,8
 800b868:	183fe81e 	bne	r3,zero,800b80c <__alt_data_end+0xfc00b80c>
 800b86c:	300cd0fa 	srli	r6,r6,3
 800b870:	4010977a 	slli	r8,r8,29
 800b874:	2005883a 	mov	r2,r4
 800b878:	41a2b03a 	or	r17,r8,r6
 800b87c:	003fe306 	br	800b80c <__alt_data_end+0xfc00b80c>
 800b880:	0401ffc4 	movi	r16,2047
 800b884:	003e2706 	br	800b124 <__alt_data_end+0xfc00b124>
 800b888:	0011883a 	mov	r8,zero
 800b88c:	003f8306 	br	800b69c <__alt_data_end+0xfc00b69c>
 800b890:	193ff804 	addi	r4,r3,-32
 800b894:	02400804 	movi	r9,32
 800b898:	2908d83a 	srl	r4,r5,r4
 800b89c:	1a402526 	beq	r3,r9,800b934 <__adddf3+0x88c>
 800b8a0:	02401004 	movi	r9,64
 800b8a4:	48c7c83a 	sub	r3,r9,r3
 800b8a8:	28ca983a 	sll	r5,r5,r3
 800b8ac:	2c62b03a 	or	r17,r5,r17
 800b8b0:	8822c03a 	cmpne	r17,r17,zero
 800b8b4:	8922b03a 	or	r17,r17,r4
 800b8b8:	0007883a 	mov	r3,zero
 800b8bc:	003f2f06 	br	800b57c <__alt_data_end+0xfc00b57c>
 800b8c0:	01402034 	movhi	r5,128
 800b8c4:	0007883a 	mov	r3,zero
 800b8c8:	297fffc4 	addi	r5,r5,-1
 800b8cc:	047ffe04 	movi	r17,-8
 800b8d0:	0401ffc4 	movi	r16,2047
 800b8d4:	003e7306 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b8d8:	2c62b03a 	or	r17,r5,r17
 800b8dc:	8822c03a 	cmpne	r17,r17,zero
 800b8e0:	0009883a 	mov	r4,zero
 800b8e4:	003fa506 	br	800b77c <__alt_data_end+0xfc00b77c>
 800b8e8:	400b883a 	mov	r5,r8
 800b8ec:	3023883a 	mov	r17,r6
 800b8f0:	003e0c06 	br	800b124 <__alt_data_end+0xfc00b124>
 800b8f4:	400b883a 	mov	r5,r8
 800b8f8:	3023883a 	mov	r17,r6
 800b8fc:	0401ffc4 	movi	r16,2047
 800b900:	003e0806 	br	800b124 <__alt_data_end+0xfc00b124>
 800b904:	21fff804 	addi	r7,r4,-32
 800b908:	02400804 	movi	r9,32
 800b90c:	29ced83a 	srl	r7,r5,r7
 800b910:	22400a26 	beq	r4,r9,800b93c <__adddf3+0x894>
 800b914:	02401004 	movi	r9,64
 800b918:	4909c83a 	sub	r4,r9,r4
 800b91c:	290a983a 	sll	r5,r5,r4
 800b920:	2c62b03a 	or	r17,r5,r17
 800b924:	8822c03a 	cmpne	r17,r17,zero
 800b928:	89e2b03a 	or	r17,r17,r7
 800b92c:	0009883a 	mov	r4,zero
 800b930:	003f9206 	br	800b77c <__alt_data_end+0xfc00b77c>
 800b934:	000b883a 	mov	r5,zero
 800b938:	003fdc06 	br	800b8ac <__alt_data_end+0xfc00b8ac>
 800b93c:	000b883a 	mov	r5,zero
 800b940:	003ff706 	br	800b920 <__alt_data_end+0xfc00b920>

0800b944 <__divdf3>:
 800b944:	defff004 	addi	sp,sp,-64
 800b948:	dc800815 	stw	r18,32(sp)
 800b94c:	2824d53a 	srli	r18,r5,20
 800b950:	dd800c15 	stw	r22,48(sp)
 800b954:	282cd7fa 	srli	r22,r5,31
 800b958:	dc000615 	stw	r16,24(sp)
 800b95c:	04000434 	movhi	r16,16
 800b960:	df000e15 	stw	fp,56(sp)
 800b964:	dd000a15 	stw	r20,40(sp)
 800b968:	dcc00915 	stw	r19,36(sp)
 800b96c:	dc400715 	stw	r17,28(sp)
 800b970:	843fffc4 	addi	r16,r16,-1
 800b974:	dfc00f15 	stw	ra,60(sp)
 800b978:	ddc00d15 	stw	r23,52(sp)
 800b97c:	dd400b15 	stw	r21,44(sp)
 800b980:	9481ffcc 	andi	r18,r18,2047
 800b984:	2029883a 	mov	r20,r4
 800b988:	2027883a 	mov	r19,r4
 800b98c:	2c22703a 	and	r17,r5,r16
 800b990:	b7003fcc 	andi	fp,r22,255
 800b994:	90005e26 	beq	r18,zero,800bb10 <__divdf3+0x1cc>
 800b998:	0081ffc4 	movi	r2,2047
 800b99c:	90803526 	beq	r18,r2,800ba74 <__divdf3+0x130>
 800b9a0:	8c000434 	orhi	r16,r17,16
 800b9a4:	2004d77a 	srli	r2,r4,29
 800b9a8:	802090fa 	slli	r16,r16,3
 800b9ac:	202690fa 	slli	r19,r4,3
 800b9b0:	94bf0044 	addi	r18,r18,-1023
 800b9b4:	80a2b03a 	or	r17,r16,r2
 800b9b8:	0029883a 	mov	r20,zero
 800b9bc:	0011883a 	mov	r8,zero
 800b9c0:	380ad53a 	srli	r5,r7,20
 800b9c4:	382ed7fa 	srli	r23,r7,31
 800b9c8:	04000434 	movhi	r16,16
 800b9cc:	843fffc4 	addi	r16,r16,-1
 800b9d0:	2941ffcc 	andi	r5,r5,2047
 800b9d4:	302b883a 	mov	r21,r6
 800b9d8:	3c20703a 	and	r16,r7,r16
 800b9dc:	ba403fcc 	andi	r9,r23,255
 800b9e0:	28006726 	beq	r5,zero,800bb80 <__divdf3+0x23c>
 800b9e4:	0081ffc4 	movi	r2,2047
 800b9e8:	28805f26 	beq	r5,r2,800bb68 <__divdf3+0x224>
 800b9ec:	84000434 	orhi	r16,r16,16
 800b9f0:	3004d77a 	srli	r2,r6,29
 800b9f4:	802090fa 	slli	r16,r16,3
 800b9f8:	302a90fa 	slli	r21,r6,3
 800b9fc:	297f0044 	addi	r5,r5,-1023
 800ba00:	80a0b03a 	or	r16,r16,r2
 800ba04:	000f883a 	mov	r7,zero
 800ba08:	3d06b03a 	or	r3,r7,r20
 800ba0c:	180690ba 	slli	r3,r3,2
 800ba10:	00820074 	movhi	r2,2049
 800ba14:	10ae8d04 	addi	r2,r2,-17868
 800ba18:	1885883a 	add	r2,r3,r2
 800ba1c:	10800017 	ldw	r2,0(r2)
 800ba20:	b5c8f03a 	xor	r4,r22,r23
 800ba24:	200d883a 	mov	r6,r4
 800ba28:	25003fcc 	andi	r20,r4,255
 800ba2c:	9165c83a 	sub	r18,r18,r5
 800ba30:	1000683a 	jmp	r2
 800ba34:	0800bc7c 	xorhi	zero,at,753
 800ba38:	0800baac 	andhi	zero,at,746
 800ba3c:	0800bc40 	call	800bc4 <__alt_mem_sdram-0x77ff43c>
 800ba40:	0800ba90 	cmplti	zero,at,746
 800ba44:	0800bc40 	call	800bc4 <__alt_mem_sdram-0x77ff43c>
 800ba48:	0800bc14 	ori	zero,at,752
 800ba4c:	0800bc40 	call	800bc4 <__alt_mem_sdram-0x77ff43c>
 800ba50:	0800ba90 	cmplti	zero,at,746
 800ba54:	0800baac 	andhi	zero,at,746
 800ba58:	0800baac 	andhi	zero,at,746
 800ba5c:	0800bc14 	ori	zero,at,752
 800ba60:	0800ba90 	cmplti	zero,at,746
 800ba64:	0800baa0 	cmpeqi	zero,at,746
 800ba68:	0800baa0 	cmpeqi	zero,at,746
 800ba6c:	0800baa0 	cmpeqi	zero,at,746
 800ba70:	0800bc50 	cmplti	zero,at,753
 800ba74:	8904b03a 	or	r2,r17,r4
 800ba78:	1000631e 	bne	r2,zero,800bc08 <__divdf3+0x2c4>
 800ba7c:	05000204 	movi	r20,8
 800ba80:	0023883a 	mov	r17,zero
 800ba84:	0027883a 	mov	r19,zero
 800ba88:	02000084 	movi	r8,2
 800ba8c:	003fcc06 	br	800b9c0 <__alt_data_end+0xfc00b9c0>
 800ba90:	8023883a 	mov	r17,r16
 800ba94:	a827883a 	mov	r19,r21
 800ba98:	4839883a 	mov	fp,r9
 800ba9c:	3811883a 	mov	r8,r7
 800baa0:	00800084 	movi	r2,2
 800baa4:	4081531e 	bne	r8,r2,800bff4 <__divdf3+0x6b0>
 800baa8:	e029883a 	mov	r20,fp
 800baac:	a180004c 	andi	r6,r20,1
 800bab0:	0201ffc4 	movi	r8,2047
 800bab4:	000b883a 	mov	r5,zero
 800bab8:	0027883a 	mov	r19,zero
 800babc:	4010953a 	slli	r8,r8,20
 800bac0:	30c03fcc 	andi	r3,r6,255
 800bac4:	04000434 	movhi	r16,16
 800bac8:	180697fa 	slli	r3,r3,31
 800bacc:	843fffc4 	addi	r16,r16,-1
 800bad0:	2c20703a 	and	r16,r5,r16
 800bad4:	8220b03a 	or	r16,r16,r8
 800bad8:	80c6b03a 	or	r3,r16,r3
 800badc:	9805883a 	mov	r2,r19
 800bae0:	dfc00f17 	ldw	ra,60(sp)
 800bae4:	df000e17 	ldw	fp,56(sp)
 800bae8:	ddc00d17 	ldw	r23,52(sp)
 800baec:	dd800c17 	ldw	r22,48(sp)
 800baf0:	dd400b17 	ldw	r21,44(sp)
 800baf4:	dd000a17 	ldw	r20,40(sp)
 800baf8:	dcc00917 	ldw	r19,36(sp)
 800bafc:	dc800817 	ldw	r18,32(sp)
 800bb00:	dc400717 	ldw	r17,28(sp)
 800bb04:	dc000617 	ldw	r16,24(sp)
 800bb08:	dec01004 	addi	sp,sp,64
 800bb0c:	f800283a 	ret
 800bb10:	8904b03a 	or	r2,r17,r4
 800bb14:	10003726 	beq	r2,zero,800bbf4 <__divdf3+0x2b0>
 800bb18:	88014d26 	beq	r17,zero,800c050 <__divdf3+0x70c>
 800bb1c:	8809883a 	mov	r4,r17
 800bb20:	d9800215 	stw	r6,8(sp)
 800bb24:	d9c00515 	stw	r7,20(sp)
 800bb28:	800d8400 	call	800d840 <__clzsi2>
 800bb2c:	d9800217 	ldw	r6,8(sp)
 800bb30:	d9c00517 	ldw	r7,20(sp)
 800bb34:	1007883a 	mov	r3,r2
 800bb38:	01000a04 	movi	r4,40
 800bb3c:	1cfffe04 	addi	r19,r3,-8
 800bb40:	20c9c83a 	sub	r4,r4,r3
 800bb44:	8cca983a 	sll	r5,r17,r19
 800bb48:	a108d83a 	srl	r4,r20,r4
 800bb4c:	a4e6983a 	sll	r19,r20,r19
 800bb50:	2162b03a 	or	r17,r4,r5
 800bb54:	04bf0344 	movi	r18,-1011
 800bb58:	90e5c83a 	sub	r18,r18,r3
 800bb5c:	0029883a 	mov	r20,zero
 800bb60:	0011883a 	mov	r8,zero
 800bb64:	003f9606 	br	800b9c0 <__alt_data_end+0xfc00b9c0>
 800bb68:	8184b03a 	or	r2,r16,r6
 800bb6c:	10001f1e 	bne	r2,zero,800bbec <__divdf3+0x2a8>
 800bb70:	0021883a 	mov	r16,zero
 800bb74:	002b883a 	mov	r21,zero
 800bb78:	01c00084 	movi	r7,2
 800bb7c:	003fa206 	br	800ba08 <__alt_data_end+0xfc00ba08>
 800bb80:	8184b03a 	or	r2,r16,r6
 800bb84:	10001526 	beq	r2,zero,800bbdc <__divdf3+0x298>
 800bb88:	80013d26 	beq	r16,zero,800c080 <__divdf3+0x73c>
 800bb8c:	8009883a 	mov	r4,r16
 800bb90:	d9800215 	stw	r6,8(sp)
 800bb94:	da000315 	stw	r8,12(sp)
 800bb98:	da400415 	stw	r9,16(sp)
 800bb9c:	800d8400 	call	800d840 <__clzsi2>
 800bba0:	d9800217 	ldw	r6,8(sp)
 800bba4:	da000317 	ldw	r8,12(sp)
 800bba8:	da400417 	ldw	r9,16(sp)
 800bbac:	1007883a 	mov	r3,r2
 800bbb0:	01000a04 	movi	r4,40
 800bbb4:	1d7ffe04 	addi	r21,r3,-8
 800bbb8:	20c9c83a 	sub	r4,r4,r3
 800bbbc:	8560983a 	sll	r16,r16,r21
 800bbc0:	3108d83a 	srl	r4,r6,r4
 800bbc4:	356a983a 	sll	r21,r6,r21
 800bbc8:	2420b03a 	or	r16,r4,r16
 800bbcc:	017f0344 	movi	r5,-1011
 800bbd0:	28cbc83a 	sub	r5,r5,r3
 800bbd4:	000f883a 	mov	r7,zero
 800bbd8:	003f8b06 	br	800ba08 <__alt_data_end+0xfc00ba08>
 800bbdc:	0021883a 	mov	r16,zero
 800bbe0:	002b883a 	mov	r21,zero
 800bbe4:	01c00044 	movi	r7,1
 800bbe8:	003f8706 	br	800ba08 <__alt_data_end+0xfc00ba08>
 800bbec:	01c000c4 	movi	r7,3
 800bbf0:	003f8506 	br	800ba08 <__alt_data_end+0xfc00ba08>
 800bbf4:	05000104 	movi	r20,4
 800bbf8:	0023883a 	mov	r17,zero
 800bbfc:	0027883a 	mov	r19,zero
 800bc00:	02000044 	movi	r8,1
 800bc04:	003f6e06 	br	800b9c0 <__alt_data_end+0xfc00b9c0>
 800bc08:	05000304 	movi	r20,12
 800bc0c:	020000c4 	movi	r8,3
 800bc10:	003f6b06 	br	800b9c0 <__alt_data_end+0xfc00b9c0>
 800bc14:	01400434 	movhi	r5,16
 800bc18:	000d883a 	mov	r6,zero
 800bc1c:	297fffc4 	addi	r5,r5,-1
 800bc20:	04ffffc4 	movi	r19,-1
 800bc24:	0201ffc4 	movi	r8,2047
 800bc28:	003fa406 	br	800babc <__alt_data_end+0xfc00babc>
 800bc2c:	043f0084 	movi	r16,-1022
 800bc30:	84a1c83a 	sub	r16,r16,r18
 800bc34:	00800e04 	movi	r2,56
 800bc38:	14014d0e 	bge	r2,r16,800c170 <__divdf3+0x82c>
 800bc3c:	a180004c 	andi	r6,r20,1
 800bc40:	0011883a 	mov	r8,zero
 800bc44:	000b883a 	mov	r5,zero
 800bc48:	0027883a 	mov	r19,zero
 800bc4c:	003f9b06 	br	800babc <__alt_data_end+0xfc00babc>
 800bc50:	8880022c 	andhi	r2,r17,8
 800bc54:	1000f026 	beq	r2,zero,800c018 <__divdf3+0x6d4>
 800bc58:	8080022c 	andhi	r2,r16,8
 800bc5c:	1000ee1e 	bne	r2,zero,800c018 <__divdf3+0x6d4>
 800bc60:	00800434 	movhi	r2,16
 800bc64:	81400234 	orhi	r5,r16,8
 800bc68:	10bfffc4 	addi	r2,r2,-1
 800bc6c:	b80d883a 	mov	r6,r23
 800bc70:	288a703a 	and	r5,r5,r2
 800bc74:	a827883a 	mov	r19,r21
 800bc78:	003fea06 	br	800bc24 <__alt_data_end+0xfc00bc24>
 800bc7c:	84411c36 	bltu	r16,r17,800c0f0 <__divdf3+0x7ac>
 800bc80:	8c011a26 	beq	r17,r16,800c0ec <__divdf3+0x7a8>
 800bc84:	94bfffc4 	addi	r18,r18,-1
 800bc88:	dcc00015 	stw	r19,0(sp)
 800bc8c:	8811883a 	mov	r8,r17
 800bc90:	002d883a 	mov	r22,zero
 800bc94:	a80cd63a 	srli	r6,r21,24
 800bc98:	8020923a 	slli	r16,r16,8
 800bc9c:	a82a923a 	slli	r21,r21,8
 800bca0:	4009883a 	mov	r4,r8
 800bca4:	342eb03a 	or	r23,r6,r16
 800bca8:	dd400115 	stw	r21,4(sp)
 800bcac:	b82ad43a 	srli	r21,r23,16
 800bcb0:	da000315 	stw	r8,12(sp)
 800bcb4:	bcffffcc 	andi	r19,r23,65535
 800bcb8:	a80b883a 	mov	r5,r21
 800bcbc:	800b0700 	call	800b070 <__udivsi3>
 800bcc0:	1009883a 	mov	r4,r2
 800bcc4:	980b883a 	mov	r5,r19
 800bcc8:	1023883a 	mov	r17,r2
 800bccc:	800b0800 	call	800b080 <__mulsi3>
 800bcd0:	da000317 	ldw	r8,12(sp)
 800bcd4:	a80b883a 	mov	r5,r21
 800bcd8:	1039883a 	mov	fp,r2
 800bcdc:	4009883a 	mov	r4,r8
 800bce0:	800b0780 	call	800b078 <__umodsi3>
 800bce4:	d8c00017 	ldw	r3,0(sp)
 800bce8:	1004943a 	slli	r2,r2,16
 800bcec:	1810d43a 	srli	r8,r3,16
 800bcf0:	120eb03a 	or	r7,r2,r8
 800bcf4:	3f00062e 	bgeu	r7,fp,800bd10 <__divdf3+0x3cc>
 800bcf8:	3dcf883a 	add	r7,r7,r23
 800bcfc:	88bfffc4 	addi	r2,r17,-1
 800bd00:	3dc10a36 	bltu	r7,r23,800c12c <__divdf3+0x7e8>
 800bd04:	3f01092e 	bgeu	r7,fp,800c12c <__divdf3+0x7e8>
 800bd08:	8c7fff84 	addi	r17,r17,-2
 800bd0c:	3dcf883a 	add	r7,r7,r23
 800bd10:	3f39c83a 	sub	fp,r7,fp
 800bd14:	e009883a 	mov	r4,fp
 800bd18:	a80b883a 	mov	r5,r21
 800bd1c:	800b0700 	call	800b070 <__udivsi3>
 800bd20:	1009883a 	mov	r4,r2
 800bd24:	980b883a 	mov	r5,r19
 800bd28:	1021883a 	mov	r16,r2
 800bd2c:	800b0800 	call	800b080 <__mulsi3>
 800bd30:	e009883a 	mov	r4,fp
 800bd34:	a80b883a 	mov	r5,r21
 800bd38:	d8800315 	stw	r2,12(sp)
 800bd3c:	800b0780 	call	800b078 <__umodsi3>
 800bd40:	d9000017 	ldw	r4,0(sp)
 800bd44:	1004943a 	slli	r2,r2,16
 800bd48:	da000317 	ldw	r8,12(sp)
 800bd4c:	20ffffcc 	andi	r3,r4,65535
 800bd50:	10ceb03a 	or	r7,r2,r3
 800bd54:	3a00062e 	bgeu	r7,r8,800bd70 <__divdf3+0x42c>
 800bd58:	3dcf883a 	add	r7,r7,r23
 800bd5c:	80bfffc4 	addi	r2,r16,-1
 800bd60:	3dc0f036 	bltu	r7,r23,800c124 <__divdf3+0x7e0>
 800bd64:	3a00ef2e 	bgeu	r7,r8,800c124 <__divdf3+0x7e0>
 800bd68:	843fff84 	addi	r16,r16,-2
 800bd6c:	3dcf883a 	add	r7,r7,r23
 800bd70:	d8c00117 	ldw	r3,4(sp)
 800bd74:	8822943a 	slli	r17,r17,16
 800bd78:	3a0fc83a 	sub	r7,r7,r8
 800bd7c:	1806d43a 	srli	r3,r3,16
 800bd80:	8462b03a 	or	r17,r16,r17
 800bd84:	8affffcc 	andi	r11,r17,65535
 800bd88:	d8c00015 	stw	r3,0(sp)
 800bd8c:	d8c00117 	ldw	r3,4(sp)
 800bd90:	8820d43a 	srli	r16,r17,16
 800bd94:	5809883a 	mov	r4,r11
 800bd98:	1f3fffcc 	andi	fp,r3,65535
 800bd9c:	e00b883a 	mov	r5,fp
 800bda0:	d9c00515 	stw	r7,20(sp)
 800bda4:	dac00215 	stw	r11,8(sp)
 800bda8:	800b0800 	call	800b080 <__mulsi3>
 800bdac:	8009883a 	mov	r4,r16
 800bdb0:	e00b883a 	mov	r5,fp
 800bdb4:	d8800415 	stw	r2,16(sp)
 800bdb8:	800b0800 	call	800b080 <__mulsi3>
 800bdbc:	d9400017 	ldw	r5,0(sp)
 800bdc0:	8009883a 	mov	r4,r16
 800bdc4:	d8800315 	stw	r2,12(sp)
 800bdc8:	800b0800 	call	800b080 <__mulsi3>
 800bdcc:	dac00217 	ldw	r11,8(sp)
 800bdd0:	d9400017 	ldw	r5,0(sp)
 800bdd4:	d8800215 	stw	r2,8(sp)
 800bdd8:	5809883a 	mov	r4,r11
 800bddc:	800b0800 	call	800b080 <__mulsi3>
 800bde0:	da400417 	ldw	r9,16(sp)
 800bde4:	da800317 	ldw	r10,12(sp)
 800bde8:	d9c00517 	ldw	r7,20(sp)
 800bdec:	480ad43a 	srli	r5,r9,16
 800bdf0:	5085883a 	add	r2,r10,r2
 800bdf4:	db000217 	ldw	r12,8(sp)
 800bdf8:	1151883a 	add	r8,r2,r5
 800bdfc:	4280022e 	bgeu	r8,r10,800be08 <__divdf3+0x4c4>
 800be00:	00800074 	movhi	r2,1
 800be04:	6099883a 	add	r12,r12,r2
 800be08:	400ad43a 	srli	r5,r8,16
 800be0c:	4010943a 	slli	r8,r8,16
 800be10:	4c3fffcc 	andi	r16,r9,65535
 800be14:	6149883a 	add	r4,r12,r5
 800be18:	4411883a 	add	r8,r8,r16
 800be1c:	3900a736 	bltu	r7,r4,800c0bc <__divdf3+0x778>
 800be20:	3900c426 	beq	r7,r4,800c134 <__divdf3+0x7f0>
 800be24:	3909c83a 	sub	r4,r7,r4
 800be28:	b221c83a 	sub	r16,r22,r8
 800be2c:	b42d803a 	cmpltu	r22,r22,r16
 800be30:	25adc83a 	sub	r22,r4,r22
 800be34:	b5c0c626 	beq	r22,r23,800c150 <__divdf3+0x80c>
 800be38:	b009883a 	mov	r4,r22
 800be3c:	a80b883a 	mov	r5,r21
 800be40:	800b0700 	call	800b070 <__udivsi3>
 800be44:	1009883a 	mov	r4,r2
 800be48:	980b883a 	mov	r5,r19
 800be4c:	d8800315 	stw	r2,12(sp)
 800be50:	800b0800 	call	800b080 <__mulsi3>
 800be54:	a80b883a 	mov	r5,r21
 800be58:	b009883a 	mov	r4,r22
 800be5c:	d8800415 	stw	r2,16(sp)
 800be60:	800b0780 	call	800b078 <__umodsi3>
 800be64:	1004943a 	slli	r2,r2,16
 800be68:	800ed43a 	srli	r7,r16,16
 800be6c:	da400417 	ldw	r9,16(sp)
 800be70:	da000317 	ldw	r8,12(sp)
 800be74:	11cab03a 	or	r5,r2,r7
 800be78:	2a40062e 	bgeu	r5,r9,800be94 <__divdf3+0x550>
 800be7c:	2dcb883a 	add	r5,r5,r23
 800be80:	40bfffc4 	addi	r2,r8,-1
 800be84:	2dc0b436 	bltu	r5,r23,800c158 <__divdf3+0x814>
 800be88:	2a40b32e 	bgeu	r5,r9,800c158 <__divdf3+0x814>
 800be8c:	423fff84 	addi	r8,r8,-2
 800be90:	2dcb883a 	add	r5,r5,r23
 800be94:	2a6dc83a 	sub	r22,r5,r9
 800be98:	b009883a 	mov	r4,r22
 800be9c:	a80b883a 	mov	r5,r21
 800bea0:	da000315 	stw	r8,12(sp)
 800bea4:	800b0700 	call	800b070 <__udivsi3>
 800bea8:	980b883a 	mov	r5,r19
 800beac:	1009883a 	mov	r4,r2
 800beb0:	d8800415 	stw	r2,16(sp)
 800beb4:	800b0800 	call	800b080 <__mulsi3>
 800beb8:	b009883a 	mov	r4,r22
 800bebc:	a80b883a 	mov	r5,r21
 800bec0:	1027883a 	mov	r19,r2
 800bec4:	800b0780 	call	800b078 <__umodsi3>
 800bec8:	1004943a 	slli	r2,r2,16
 800becc:	843fffcc 	andi	r16,r16,65535
 800bed0:	da000317 	ldw	r8,12(sp)
 800bed4:	140eb03a 	or	r7,r2,r16
 800bed8:	da400417 	ldw	r9,16(sp)
 800bedc:	3cc0062e 	bgeu	r7,r19,800bef8 <__divdf3+0x5b4>
 800bee0:	3dcf883a 	add	r7,r7,r23
 800bee4:	48bfffc4 	addi	r2,r9,-1
 800bee8:	3dc09d36 	bltu	r7,r23,800c160 <__divdf3+0x81c>
 800beec:	3cc09c2e 	bgeu	r7,r19,800c160 <__divdf3+0x81c>
 800bef0:	4a7fff84 	addi	r9,r9,-2
 800bef4:	3dcf883a 	add	r7,r7,r23
 800bef8:	4010943a 	slli	r8,r8,16
 800befc:	3cebc83a 	sub	r21,r7,r19
 800bf00:	e00b883a 	mov	r5,fp
 800bf04:	4a26b03a 	or	r19,r9,r8
 800bf08:	99ffffcc 	andi	r7,r19,65535
 800bf0c:	9820d43a 	srli	r16,r19,16
 800bf10:	3809883a 	mov	r4,r7
 800bf14:	d9c00515 	stw	r7,20(sp)
 800bf18:	800b0800 	call	800b080 <__mulsi3>
 800bf1c:	8009883a 	mov	r4,r16
 800bf20:	e00b883a 	mov	r5,fp
 800bf24:	102d883a 	mov	r22,r2
 800bf28:	800b0800 	call	800b080 <__mulsi3>
 800bf2c:	d9400017 	ldw	r5,0(sp)
 800bf30:	8009883a 	mov	r4,r16
 800bf34:	1039883a 	mov	fp,r2
 800bf38:	800b0800 	call	800b080 <__mulsi3>
 800bf3c:	d9c00517 	ldw	r7,20(sp)
 800bf40:	d9400017 	ldw	r5,0(sp)
 800bf44:	1021883a 	mov	r16,r2
 800bf48:	3809883a 	mov	r4,r7
 800bf4c:	800b0800 	call	800b080 <__mulsi3>
 800bf50:	b008d43a 	srli	r4,r22,16
 800bf54:	e085883a 	add	r2,fp,r2
 800bf58:	1109883a 	add	r4,r2,r4
 800bf5c:	2700022e 	bgeu	r4,fp,800bf68 <__divdf3+0x624>
 800bf60:	00800074 	movhi	r2,1
 800bf64:	80a1883a 	add	r16,r16,r2
 800bf68:	200ad43a 	srli	r5,r4,16
 800bf6c:	2008943a 	slli	r4,r4,16
 800bf70:	b5bfffcc 	andi	r22,r22,65535
 800bf74:	8145883a 	add	r2,r16,r5
 800bf78:	2589883a 	add	r4,r4,r22
 800bf7c:	a8802c36 	bltu	r21,r2,800c030 <__divdf3+0x6ec>
 800bf80:	a880a426 	beq	r21,r2,800c214 <__divdf3+0x8d0>
 800bf84:	9cc00054 	ori	r19,r19,1
 800bf88:	9200ffc4 	addi	r8,r18,1023
 800bf8c:	023f270e 	bge	zero,r8,800bc2c <__alt_data_end+0xfc00bc2c>
 800bf90:	988001cc 	andi	r2,r19,7
 800bf94:	10000726 	beq	r2,zero,800bfb4 <__divdf3+0x670>
 800bf98:	990003cc 	andi	r4,r19,15
 800bf9c:	00800104 	movi	r2,4
 800bfa0:	20800426 	beq	r4,r2,800bfb4 <__divdf3+0x670>
 800bfa4:	9885883a 	add	r2,r19,r2
 800bfa8:	14e7803a 	cmpltu	r19,r2,r19
 800bfac:	8ce3883a 	add	r17,r17,r19
 800bfb0:	1027883a 	mov	r19,r2
 800bfb4:	8880402c 	andhi	r2,r17,256
 800bfb8:	10000426 	beq	r2,zero,800bfcc <__divdf3+0x688>
 800bfbc:	00bfc034 	movhi	r2,65280
 800bfc0:	10bfffc4 	addi	r2,r2,-1
 800bfc4:	92010004 	addi	r8,r18,1024
 800bfc8:	88a2703a 	and	r17,r17,r2
 800bfcc:	0081ff84 	movi	r2,2046
 800bfd0:	123eb616 	blt	r2,r8,800baac <__alt_data_end+0xfc00baac>
 800bfd4:	9826d0fa 	srli	r19,r19,3
 800bfd8:	8804977a 	slli	r2,r17,29
 800bfdc:	8820927a 	slli	r16,r17,9
 800bfe0:	4201ffcc 	andi	r8,r8,2047
 800bfe4:	14e6b03a 	or	r19,r2,r19
 800bfe8:	800ad33a 	srli	r5,r16,12
 800bfec:	a180004c 	andi	r6,r20,1
 800bff0:	003eb206 	br	800babc <__alt_data_end+0xfc00babc>
 800bff4:	008000c4 	movi	r2,3
 800bff8:	4080ac26 	beq	r8,r2,800c2ac <__divdf3+0x968>
 800bffc:	00800044 	movi	r2,1
 800c000:	4080591e 	bne	r8,r2,800c168 <__divdf3+0x824>
 800c004:	e00d883a 	mov	r6,fp
 800c008:	0011883a 	mov	r8,zero
 800c00c:	000b883a 	mov	r5,zero
 800c010:	0027883a 	mov	r19,zero
 800c014:	003ea906 	br	800babc <__alt_data_end+0xfc00babc>
 800c018:	00800434 	movhi	r2,16
 800c01c:	89400234 	orhi	r5,r17,8
 800c020:	10bfffc4 	addi	r2,r2,-1
 800c024:	b00d883a 	mov	r6,r22
 800c028:	288a703a 	and	r5,r5,r2
 800c02c:	003efd06 	br	800bc24 <__alt_data_end+0xfc00bc24>
 800c030:	adcf883a 	add	r7,r21,r23
 800c034:	997fffc4 	addi	r5,r19,-1
 800c038:	3dc0412e 	bgeu	r7,r23,800c140 <__divdf3+0x7fc>
 800c03c:	2827883a 	mov	r19,r5
 800c040:	38bfd01e 	bne	r7,r2,800bf84 <__alt_data_end+0xfc00bf84>
 800c044:	d8c00117 	ldw	r3,4(sp)
 800c048:	193fce1e 	bne	r3,r4,800bf84 <__alt_data_end+0xfc00bf84>
 800c04c:	003fce06 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c050:	d9800215 	stw	r6,8(sp)
 800c054:	d9c00515 	stw	r7,20(sp)
 800c058:	800d8400 	call	800d840 <__clzsi2>
 800c05c:	10c00804 	addi	r3,r2,32
 800c060:	010009c4 	movi	r4,39
 800c064:	d9800217 	ldw	r6,8(sp)
 800c068:	d9c00517 	ldw	r7,20(sp)
 800c06c:	20feb20e 	bge	r4,r3,800bb38 <__alt_data_end+0xfc00bb38>
 800c070:	117ffe04 	addi	r5,r2,-8
 800c074:	a162983a 	sll	r17,r20,r5
 800c078:	0027883a 	mov	r19,zero
 800c07c:	003eb506 	br	800bb54 <__alt_data_end+0xfc00bb54>
 800c080:	3009883a 	mov	r4,r6
 800c084:	d9800215 	stw	r6,8(sp)
 800c088:	da000315 	stw	r8,12(sp)
 800c08c:	da400415 	stw	r9,16(sp)
 800c090:	800d8400 	call	800d840 <__clzsi2>
 800c094:	10c00804 	addi	r3,r2,32
 800c098:	010009c4 	movi	r4,39
 800c09c:	d9800217 	ldw	r6,8(sp)
 800c0a0:	da000317 	ldw	r8,12(sp)
 800c0a4:	da400417 	ldw	r9,16(sp)
 800c0a8:	20fec10e 	bge	r4,r3,800bbb0 <__alt_data_end+0xfc00bbb0>
 800c0ac:	10bffe04 	addi	r2,r2,-8
 800c0b0:	a8a0983a 	sll	r16,r21,r2
 800c0b4:	002b883a 	mov	r21,zero
 800c0b8:	003ec406 	br	800bbcc <__alt_data_end+0xfc00bbcc>
 800c0bc:	d8c00117 	ldw	r3,4(sp)
 800c0c0:	b0ed883a 	add	r22,r22,r3
 800c0c4:	b0c5803a 	cmpltu	r2,r22,r3
 800c0c8:	15c5883a 	add	r2,r2,r23
 800c0cc:	11cf883a 	add	r7,r2,r7
 800c0d0:	88bfffc4 	addi	r2,r17,-1
 800c0d4:	b9c00d2e 	bgeu	r23,r7,800c10c <__divdf3+0x7c8>
 800c0d8:	39003f36 	bltu	r7,r4,800c1d8 <__divdf3+0x894>
 800c0dc:	21c06a26 	beq	r4,r7,800c288 <__divdf3+0x944>
 800c0e0:	3909c83a 	sub	r4,r7,r4
 800c0e4:	1023883a 	mov	r17,r2
 800c0e8:	003f4f06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c0ec:	9d7ee536 	bltu	r19,r21,800bc84 <__alt_data_end+0xfc00bc84>
 800c0f0:	982ed07a 	srli	r23,r19,1
 800c0f4:	880497fa 	slli	r2,r17,31
 800c0f8:	8810d07a 	srli	r8,r17,1
 800c0fc:	982c97fa 	slli	r22,r19,31
 800c100:	b884b03a 	or	r2,r23,r2
 800c104:	d8800015 	stw	r2,0(sp)
 800c108:	003ee206 	br	800bc94 <__alt_data_end+0xfc00bc94>
 800c10c:	3dfff41e 	bne	r7,r23,800c0e0 <__alt_data_end+0xfc00c0e0>
 800c110:	d8c00117 	ldw	r3,4(sp)
 800c114:	b0fff02e 	bgeu	r22,r3,800c0d8 <__alt_data_end+0xfc00c0d8>
 800c118:	b909c83a 	sub	r4,r23,r4
 800c11c:	1023883a 	mov	r17,r2
 800c120:	003f4106 	br	800be28 <__alt_data_end+0xfc00be28>
 800c124:	1021883a 	mov	r16,r2
 800c128:	003f1106 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800c12c:	1023883a 	mov	r17,r2
 800c130:	003ef706 	br	800bd10 <__alt_data_end+0xfc00bd10>
 800c134:	b23fe136 	bltu	r22,r8,800c0bc <__alt_data_end+0xfc00c0bc>
 800c138:	0009883a 	mov	r4,zero
 800c13c:	003f3a06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c140:	38802c36 	bltu	r7,r2,800c1f4 <__divdf3+0x8b0>
 800c144:	11c05326 	beq	r2,r7,800c294 <__divdf3+0x950>
 800c148:	2827883a 	mov	r19,r5
 800c14c:	003f8d06 	br	800bf84 <__alt_data_end+0xfc00bf84>
 800c150:	04ffffc4 	movi	r19,-1
 800c154:	003f8c06 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c158:	1011883a 	mov	r8,r2
 800c15c:	003f4d06 	br	800be94 <__alt_data_end+0xfc00be94>
 800c160:	1013883a 	mov	r9,r2
 800c164:	003f6406 	br	800bef8 <__alt_data_end+0xfc00bef8>
 800c168:	e029883a 	mov	r20,fp
 800c16c:	003f8606 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c170:	008007c4 	movi	r2,31
 800c174:	14002a16 	blt	r2,r16,800c220 <__divdf3+0x8dc>
 800c178:	91410784 	addi	r5,r18,1054
 800c17c:	9c0cd83a 	srl	r6,r19,r16
 800c180:	8948983a 	sll	r4,r17,r5
 800c184:	9944983a 	sll	r2,r19,r5
 800c188:	8c20d83a 	srl	r16,r17,r16
 800c18c:	3108b03a 	or	r4,r6,r4
 800c190:	1004c03a 	cmpne	r2,r2,zero
 800c194:	2084b03a 	or	r2,r4,r2
 800c198:	110001cc 	andi	r4,r2,7
 800c19c:	20000726 	beq	r4,zero,800c1bc <__divdf3+0x878>
 800c1a0:	114003cc 	andi	r5,r2,15
 800c1a4:	01000104 	movi	r4,4
 800c1a8:	29000426 	beq	r5,r4,800c1bc <__divdf3+0x878>
 800c1ac:	11000104 	addi	r4,r2,4
 800c1b0:	2085803a 	cmpltu	r2,r4,r2
 800c1b4:	80a1883a 	add	r16,r16,r2
 800c1b8:	2005883a 	mov	r2,r4
 800c1bc:	8100202c 	andhi	r4,r16,128
 800c1c0:	20002d26 	beq	r4,zero,800c278 <__divdf3+0x934>
 800c1c4:	a180004c 	andi	r6,r20,1
 800c1c8:	02000044 	movi	r8,1
 800c1cc:	000b883a 	mov	r5,zero
 800c1d0:	0027883a 	mov	r19,zero
 800c1d4:	003e3906 	br	800babc <__alt_data_end+0xfc00babc>
 800c1d8:	d8c00117 	ldw	r3,4(sp)
 800c1dc:	8c7fff84 	addi	r17,r17,-2
 800c1e0:	b0ed883a 	add	r22,r22,r3
 800c1e4:	b0c5803a 	cmpltu	r2,r22,r3
 800c1e8:	15c5883a 	add	r2,r2,r23
 800c1ec:	11cf883a 	add	r7,r2,r7
 800c1f0:	003f0c06 	br	800be24 <__alt_data_end+0xfc00be24>
 800c1f4:	d8c00117 	ldw	r3,4(sp)
 800c1f8:	997fff84 	addi	r5,r19,-2
 800c1fc:	18d1883a 	add	r8,r3,r3
 800c200:	40c7803a 	cmpltu	r3,r8,r3
 800c204:	1dcd883a 	add	r6,r3,r23
 800c208:	398f883a 	add	r7,r7,r6
 800c20c:	da000115 	stw	r8,4(sp)
 800c210:	003f8a06 	br	800c03c <__alt_data_end+0xfc00c03c>
 800c214:	203f861e 	bne	r4,zero,800c030 <__alt_data_end+0xfc00c030>
 800c218:	d8000115 	stw	zero,4(sp)
 800c21c:	003f8906 	br	800c044 <__alt_data_end+0xfc00c044>
 800c220:	00bef884 	movi	r2,-1054
 800c224:	1485c83a 	sub	r2,r2,r18
 800c228:	01000804 	movi	r4,32
 800c22c:	8884d83a 	srl	r2,r17,r2
 800c230:	81001c26 	beq	r16,r4,800c2a4 <__divdf3+0x960>
 800c234:	91010f84 	addi	r4,r18,1086
 800c238:	8908983a 	sll	r4,r17,r4
 800c23c:	24c8b03a 	or	r4,r4,r19
 800c240:	2008c03a 	cmpne	r4,r4,zero
 800c244:	2084b03a 	or	r2,r4,r2
 800c248:	140001cc 	andi	r16,r2,7
 800c24c:	8000061e 	bne	r16,zero,800c268 <__divdf3+0x924>
 800c250:	000b883a 	mov	r5,zero
 800c254:	1004d0fa 	srli	r2,r2,3
 800c258:	a180004c 	andi	r6,r20,1
 800c25c:	0011883a 	mov	r8,zero
 800c260:	1426b03a 	or	r19,r2,r16
 800c264:	003e1506 	br	800babc <__alt_data_end+0xfc00babc>
 800c268:	114003cc 	andi	r5,r2,15
 800c26c:	01000104 	movi	r4,4
 800c270:	0021883a 	mov	r16,zero
 800c274:	293fcd1e 	bne	r5,r4,800c1ac <__alt_data_end+0xfc00c1ac>
 800c278:	800a927a 	slli	r5,r16,9
 800c27c:	8020977a 	slli	r16,r16,29
 800c280:	280ad33a 	srli	r5,r5,12
 800c284:	003ff306 	br	800c254 <__alt_data_end+0xfc00c254>
 800c288:	b23fd336 	bltu	r22,r8,800c1d8 <__alt_data_end+0xfc00c1d8>
 800c28c:	1023883a 	mov	r17,r2
 800c290:	003fa906 	br	800c138 <__alt_data_end+0xfc00c138>
 800c294:	d8c00117 	ldw	r3,4(sp)
 800c298:	193fd636 	bltu	r3,r4,800c1f4 <__alt_data_end+0xfc00c1f4>
 800c29c:	2827883a 	mov	r19,r5
 800c2a0:	003f6806 	br	800c044 <__alt_data_end+0xfc00c044>
 800c2a4:	0009883a 	mov	r4,zero
 800c2a8:	003fe406 	br	800c23c <__alt_data_end+0xfc00c23c>
 800c2ac:	00800434 	movhi	r2,16
 800c2b0:	89400234 	orhi	r5,r17,8
 800c2b4:	10bfffc4 	addi	r2,r2,-1
 800c2b8:	e00d883a 	mov	r6,fp
 800c2bc:	288a703a 	and	r5,r5,r2
 800c2c0:	003e5806 	br	800bc24 <__alt_data_end+0xfc00bc24>

0800c2c4 <__eqdf2>:
 800c2c4:	2804d53a 	srli	r2,r5,20
 800c2c8:	3806d53a 	srli	r3,r7,20
 800c2cc:	02000434 	movhi	r8,16
 800c2d0:	423fffc4 	addi	r8,r8,-1
 800c2d4:	1081ffcc 	andi	r2,r2,2047
 800c2d8:	0241ffc4 	movi	r9,2047
 800c2dc:	2a14703a 	and	r10,r5,r8
 800c2e0:	18c1ffcc 	andi	r3,r3,2047
 800c2e4:	3a10703a 	and	r8,r7,r8
 800c2e8:	280ad7fa 	srli	r5,r5,31
 800c2ec:	380ed7fa 	srli	r7,r7,31
 800c2f0:	12400f26 	beq	r2,r9,800c330 <__eqdf2+0x6c>
 800c2f4:	0241ffc4 	movi	r9,2047
 800c2f8:	1a400326 	beq	r3,r9,800c308 <__eqdf2+0x44>
 800c2fc:	10c00526 	beq	r2,r3,800c314 <__eqdf2+0x50>
 800c300:	00800044 	movi	r2,1
 800c304:	f800283a 	ret
 800c308:	4192b03a 	or	r9,r8,r6
 800c30c:	483ffc1e 	bne	r9,zero,800c300 <__alt_data_end+0xfc00c300>
 800c310:	10fffb1e 	bne	r2,r3,800c300 <__alt_data_end+0xfc00c300>
 800c314:	523ffa1e 	bne	r10,r8,800c300 <__alt_data_end+0xfc00c300>
 800c318:	21bff91e 	bne	r4,r6,800c300 <__alt_data_end+0xfc00c300>
 800c31c:	29c00826 	beq	r5,r7,800c340 <__eqdf2+0x7c>
 800c320:	103ff71e 	bne	r2,zero,800c300 <__alt_data_end+0xfc00c300>
 800c324:	5104b03a 	or	r2,r10,r4
 800c328:	1004c03a 	cmpne	r2,r2,zero
 800c32c:	f800283a 	ret
 800c330:	5112b03a 	or	r9,r10,r4
 800c334:	483fef26 	beq	r9,zero,800c2f4 <__alt_data_end+0xfc00c2f4>
 800c338:	00800044 	movi	r2,1
 800c33c:	f800283a 	ret
 800c340:	0005883a 	mov	r2,zero
 800c344:	f800283a 	ret

0800c348 <__gedf2>:
 800c348:	2804d53a 	srli	r2,r5,20
 800c34c:	3806d53a 	srli	r3,r7,20
 800c350:	02000434 	movhi	r8,16
 800c354:	423fffc4 	addi	r8,r8,-1
 800c358:	0241ffc4 	movi	r9,2047
 800c35c:	1081ffcc 	andi	r2,r2,2047
 800c360:	2a14703a 	and	r10,r5,r8
 800c364:	1a46703a 	and	r3,r3,r9
 800c368:	3a10703a 	and	r8,r7,r8
 800c36c:	280ad7fa 	srli	r5,r5,31
 800c370:	380ed7fa 	srli	r7,r7,31
 800c374:	12400b26 	beq	r2,r9,800c3a4 <__gedf2+0x5c>
 800c378:	1a401626 	beq	r3,r9,800c3d4 <__gedf2+0x8c>
 800c37c:	10000c1e 	bne	r2,zero,800c3b0 <__gedf2+0x68>
 800c380:	5112b03a 	or	r9,r10,r4
 800c384:	4813003a 	cmpeq	r9,r9,zero
 800c388:	4817883a 	mov	r11,r9
 800c38c:	18000c1e 	bne	r3,zero,800c3c0 <__gedf2+0x78>
 800c390:	4198b03a 	or	r12,r8,r6
 800c394:	60000a1e 	bne	r12,zero,800c3c0 <__gedf2+0x78>
 800c398:	48001326 	beq	r9,zero,800c3e8 <__gedf2+0xa0>
 800c39c:	0005883a 	mov	r2,zero
 800c3a0:	f800283a 	ret
 800c3a4:	5112b03a 	or	r9,r10,r4
 800c3a8:	4800191e 	bne	r9,zero,800c410 <__gedf2+0xc8>
 800c3ac:	18800926 	beq	r3,r2,800c3d4 <__gedf2+0x8c>
 800c3b0:	18000b1e 	bne	r3,zero,800c3e0 <__gedf2+0x98>
 800c3b4:	4192b03a 	or	r9,r8,r6
 800c3b8:	0017883a 	mov	r11,zero
 800c3bc:	48000a26 	beq	r9,zero,800c3e8 <__gedf2+0xa0>
 800c3c0:	39c03fcc 	andi	r7,r7,255
 800c3c4:	58000726 	beq	r11,zero,800c3e4 <__gedf2+0x9c>
 800c3c8:	3800081e 	bne	r7,zero,800c3ec <__gedf2+0xa4>
 800c3cc:	00bfffc4 	movi	r2,-1
 800c3d0:	f800283a 	ret
 800c3d4:	4192b03a 	or	r9,r8,r6
 800c3d8:	48000d1e 	bne	r9,zero,800c410 <__gedf2+0xc8>
 800c3dc:	103fe826 	beq	r2,zero,800c380 <__alt_data_end+0xfc00c380>
 800c3e0:	39c03fcc 	andi	r7,r7,255
 800c3e4:	29c00326 	beq	r5,r7,800c3f4 <__gedf2+0xac>
 800c3e8:	283ff81e 	bne	r5,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c3ec:	00800044 	movi	r2,1
 800c3f0:	f800283a 	ret
 800c3f4:	18bffc16 	blt	r3,r2,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c3f8:	10c00316 	blt	r2,r3,800c408 <__gedf2+0xc0>
 800c3fc:	42bffa36 	bltu	r8,r10,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c400:	52000526 	beq	r10,r8,800c418 <__gedf2+0xd0>
 800c404:	523fe52e 	bgeu	r10,r8,800c39c <__alt_data_end+0xfc00c39c>
 800c408:	283ff026 	beq	r5,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c40c:	003ff706 	br	800c3ec <__alt_data_end+0xfc00c3ec>
 800c410:	00bfff84 	movi	r2,-2
 800c414:	f800283a 	ret
 800c418:	313ff336 	bltu	r6,r4,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c41c:	21bfdf2e 	bgeu	r4,r6,800c39c <__alt_data_end+0xfc00c39c>
 800c420:	283fea26 	beq	r5,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c424:	003ff106 	br	800c3ec <__alt_data_end+0xfc00c3ec>

0800c428 <__ledf2>:
 800c428:	2804d53a 	srli	r2,r5,20
 800c42c:	3810d53a 	srli	r8,r7,20
 800c430:	00c00434 	movhi	r3,16
 800c434:	18ffffc4 	addi	r3,r3,-1
 800c438:	0241ffc4 	movi	r9,2047
 800c43c:	1081ffcc 	andi	r2,r2,2047
 800c440:	28d4703a 	and	r10,r5,r3
 800c444:	4250703a 	and	r8,r8,r9
 800c448:	38c6703a 	and	r3,r7,r3
 800c44c:	280ad7fa 	srli	r5,r5,31
 800c450:	380ed7fa 	srli	r7,r7,31
 800c454:	12400b26 	beq	r2,r9,800c484 <__ledf2+0x5c>
 800c458:	42401926 	beq	r8,r9,800c4c0 <__ledf2+0x98>
 800c45c:	10000c1e 	bne	r2,zero,800c490 <__ledf2+0x68>
 800c460:	5112b03a 	or	r9,r10,r4
 800c464:	4813003a 	cmpeq	r9,r9,zero
 800c468:	4817883a 	mov	r11,r9
 800c46c:	40000f26 	beq	r8,zero,800c4ac <__ledf2+0x84>
 800c470:	39c03fcc 	andi	r7,r7,255
 800c474:	58001826 	beq	r11,zero,800c4d8 <__ledf2+0xb0>
 800c478:	38000a1e 	bne	r7,zero,800c4a4 <__ledf2+0x7c>
 800c47c:	00bfffc4 	movi	r2,-1
 800c480:	f800283a 	ret
 800c484:	5112b03a 	or	r9,r10,r4
 800c488:	48000f1e 	bne	r9,zero,800c4c8 <__ledf2+0xa0>
 800c48c:	40800c26 	beq	r8,r2,800c4c0 <__ledf2+0x98>
 800c490:	4000101e 	bne	r8,zero,800c4d4 <__ledf2+0xac>
 800c494:	1992b03a 	or	r9,r3,r6
 800c498:	0017883a 	mov	r11,zero
 800c49c:	483ff41e 	bne	r9,zero,800c470 <__alt_data_end+0xfc00c470>
 800c4a0:	283ff61e 	bne	r5,zero,800c47c <__alt_data_end+0xfc00c47c>
 800c4a4:	00800044 	movi	r2,1
 800c4a8:	f800283a 	ret
 800c4ac:	1998b03a 	or	r12,r3,r6
 800c4b0:	603fef1e 	bne	r12,zero,800c470 <__alt_data_end+0xfc00c470>
 800c4b4:	483ffa26 	beq	r9,zero,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4b8:	0005883a 	mov	r2,zero
 800c4bc:	f800283a 	ret
 800c4c0:	1992b03a 	or	r9,r3,r6
 800c4c4:	48000226 	beq	r9,zero,800c4d0 <__ledf2+0xa8>
 800c4c8:	00800084 	movi	r2,2
 800c4cc:	f800283a 	ret
 800c4d0:	103fe326 	beq	r2,zero,800c460 <__alt_data_end+0xfc00c460>
 800c4d4:	39c03fcc 	andi	r7,r7,255
 800c4d8:	29fff11e 	bne	r5,r7,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4dc:	40bff016 	blt	r8,r2,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4e0:	12000316 	blt	r2,r8,800c4f0 <__ledf2+0xc8>
 800c4e4:	1abfee36 	bltu	r3,r10,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4e8:	50c00326 	beq	r10,r3,800c4f8 <__ledf2+0xd0>
 800c4ec:	50fff22e 	bgeu	r10,r3,800c4b8 <__alt_data_end+0xfc00c4b8>
 800c4f0:	283fe226 	beq	r5,zero,800c47c <__alt_data_end+0xfc00c47c>
 800c4f4:	003feb06 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c4f8:	313fe936 	bltu	r6,r4,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4fc:	21bfee2e 	bgeu	r4,r6,800c4b8 <__alt_data_end+0xfc00c4b8>
 800c500:	283fde26 	beq	r5,zero,800c47c <__alt_data_end+0xfc00c47c>
 800c504:	003fe706 	br	800c4a4 <__alt_data_end+0xfc00c4a4>

0800c508 <__muldf3>:
 800c508:	deffee04 	addi	sp,sp,-72
 800c50c:	dd000c15 	stw	r20,48(sp)
 800c510:	2828d53a 	srli	r20,r5,20
 800c514:	dd400d15 	stw	r21,52(sp)
 800c518:	282ad7fa 	srli	r21,r5,31
 800c51c:	dc000815 	stw	r16,32(sp)
 800c520:	04000434 	movhi	r16,16
 800c524:	ddc00f15 	stw	r23,60(sp)
 800c528:	dcc00b15 	stw	r19,44(sp)
 800c52c:	dc800a15 	stw	r18,40(sp)
 800c530:	843fffc4 	addi	r16,r16,-1
 800c534:	dfc01115 	stw	ra,68(sp)
 800c538:	df001015 	stw	fp,64(sp)
 800c53c:	dd800e15 	stw	r22,56(sp)
 800c540:	dc400915 	stw	r17,36(sp)
 800c544:	a501ffcc 	andi	r20,r20,2047
 800c548:	2025883a 	mov	r18,r4
 800c54c:	202f883a 	mov	r23,r4
 800c550:	2c20703a 	and	r16,r5,r16
 800c554:	a827883a 	mov	r19,r21
 800c558:	aa403fcc 	andi	r9,r21,255
 800c55c:	a0005926 	beq	r20,zero,800c6c4 <__muldf3+0x1bc>
 800c560:	0081ffc4 	movi	r2,2047
 800c564:	a0803426 	beq	r20,r2,800c638 <__muldf3+0x130>
 800c568:	84000434 	orhi	r16,r16,16
 800c56c:	2004d77a 	srli	r2,r4,29
 800c570:	802090fa 	slli	r16,r16,3
 800c574:	202e90fa 	slli	r23,r4,3
 800c578:	a53f0044 	addi	r20,r20,-1023
 800c57c:	80a0b03a 	or	r16,r16,r2
 800c580:	000b883a 	mov	r5,zero
 800c584:	0039883a 	mov	fp,zero
 800c588:	3806d53a 	srli	r3,r7,20
 800c58c:	382cd7fa 	srli	r22,r7,31
 800c590:	00800434 	movhi	r2,16
 800c594:	10bfffc4 	addi	r2,r2,-1
 800c598:	18c1ffcc 	andi	r3,r3,2047
 800c59c:	3025883a 	mov	r18,r6
 800c5a0:	38a2703a 	and	r17,r7,r2
 800c5a4:	b2803fcc 	andi	r10,r22,255
 800c5a8:	18006426 	beq	r3,zero,800c73c <__muldf3+0x234>
 800c5ac:	0081ffc4 	movi	r2,2047
 800c5b0:	18805c26 	beq	r3,r2,800c724 <__muldf3+0x21c>
 800c5b4:	8c400434 	orhi	r17,r17,16
 800c5b8:	3004d77a 	srli	r2,r6,29
 800c5bc:	882290fa 	slli	r17,r17,3
 800c5c0:	302490fa 	slli	r18,r6,3
 800c5c4:	18ff0044 	addi	r3,r3,-1023
 800c5c8:	88a2b03a 	or	r17,r17,r2
 800c5cc:	000f883a 	mov	r7,zero
 800c5d0:	394ab03a 	or	r5,r7,r5
 800c5d4:	280a90ba 	slli	r5,r5,2
 800c5d8:	00820074 	movhi	r2,2049
 800c5dc:	10b17e04 	addi	r2,r2,-14856
 800c5e0:	288b883a 	add	r5,r5,r2
 800c5e4:	28800017 	ldw	r2,0(r5)
 800c5e8:	a0c7883a 	add	r3,r20,r3
 800c5ec:	b54cf03a 	xor	r6,r22,r21
 800c5f0:	1a000044 	addi	r8,r3,1
 800c5f4:	1000683a 	jmp	r2
 800c5f8:	0800c83c 	xorhi	zero,at,800
 800c5fc:	0800c828 	cmpgeui	zero,at,800
 800c600:	0800c828 	cmpgeui	zero,at,800
 800c604:	0800c814 	ori	zero,at,800
 800c608:	0800c654 	ori	zero,at,793
 800c60c:	0800c654 	ori	zero,at,793
 800c610:	0800c7fc 	xorhi	zero,at,799
 800c614:	0800c814 	ori	zero,at,800
 800c618:	0800c654 	ori	zero,at,793
 800c61c:	0800c7fc 	xorhi	zero,at,799
 800c620:	0800c654 	ori	zero,at,793
 800c624:	0800c814 	ori	zero,at,800
 800c628:	0800c658 	cmpnei	zero,at,793
 800c62c:	0800c658 	cmpnei	zero,at,793
 800c630:	0800c658 	cmpnei	zero,at,793
 800c634:	0800cb78 	rdprs	zero,at,813
 800c638:	8104b03a 	or	r2,r16,r4
 800c63c:	10006c1e 	bne	r2,zero,800c7f0 <__muldf3+0x2e8>
 800c640:	01400204 	movi	r5,8
 800c644:	0021883a 	mov	r16,zero
 800c648:	002f883a 	mov	r23,zero
 800c64c:	07000084 	movi	fp,2
 800c650:	003fcd06 	br	800c588 <__alt_data_end+0xfc00c588>
 800c654:	3013883a 	mov	r9,r6
 800c658:	00800084 	movi	r2,2
 800c65c:	e080501e 	bne	fp,r2,800c7a0 <__muldf3+0x298>
 800c660:	4cc0004c 	andi	r19,r9,1
 800c664:	0101ffc4 	movi	r4,2047
 800c668:	0021883a 	mov	r16,zero
 800c66c:	002f883a 	mov	r23,zero
 800c670:	2008953a 	slli	r4,r4,20
 800c674:	98c03fcc 	andi	r3,r19,255
 800c678:	04400434 	movhi	r17,16
 800c67c:	8c7fffc4 	addi	r17,r17,-1
 800c680:	180697fa 	slli	r3,r3,31
 800c684:	8460703a 	and	r16,r16,r17
 800c688:	8120b03a 	or	r16,r16,r4
 800c68c:	80c6b03a 	or	r3,r16,r3
 800c690:	b805883a 	mov	r2,r23
 800c694:	dfc01117 	ldw	ra,68(sp)
 800c698:	df001017 	ldw	fp,64(sp)
 800c69c:	ddc00f17 	ldw	r23,60(sp)
 800c6a0:	dd800e17 	ldw	r22,56(sp)
 800c6a4:	dd400d17 	ldw	r21,52(sp)
 800c6a8:	dd000c17 	ldw	r20,48(sp)
 800c6ac:	dcc00b17 	ldw	r19,44(sp)
 800c6b0:	dc800a17 	ldw	r18,40(sp)
 800c6b4:	dc400917 	ldw	r17,36(sp)
 800c6b8:	dc000817 	ldw	r16,32(sp)
 800c6bc:	dec01204 	addi	sp,sp,72
 800c6c0:	f800283a 	ret
 800c6c4:	8104b03a 	or	r2,r16,r4
 800c6c8:	10004426 	beq	r2,zero,800c7dc <__muldf3+0x2d4>
 800c6cc:	80014b26 	beq	r16,zero,800cbfc <__muldf3+0x6f4>
 800c6d0:	8009883a 	mov	r4,r16
 800c6d4:	d9800715 	stw	r6,28(sp)
 800c6d8:	d9c00215 	stw	r7,8(sp)
 800c6dc:	da400415 	stw	r9,16(sp)
 800c6e0:	800d8400 	call	800d840 <__clzsi2>
 800c6e4:	d9800717 	ldw	r6,28(sp)
 800c6e8:	d9c00217 	ldw	r7,8(sp)
 800c6ec:	da400417 	ldw	r9,16(sp)
 800c6f0:	1007883a 	mov	r3,r2
 800c6f4:	01000a04 	movi	r4,40
 800c6f8:	1dfffe04 	addi	r23,r3,-8
 800c6fc:	20c9c83a 	sub	r4,r4,r3
 800c700:	85e0983a 	sll	r16,r16,r23
 800c704:	9108d83a 	srl	r4,r18,r4
 800c708:	95ee983a 	sll	r23,r18,r23
 800c70c:	2420b03a 	or	r16,r4,r16
 800c710:	053f0344 	movi	r20,-1011
 800c714:	a0e9c83a 	sub	r20,r20,r3
 800c718:	000b883a 	mov	r5,zero
 800c71c:	0039883a 	mov	fp,zero
 800c720:	003f9906 	br	800c588 <__alt_data_end+0xfc00c588>
 800c724:	8984b03a 	or	r2,r17,r6
 800c728:	10002a1e 	bne	r2,zero,800c7d4 <__muldf3+0x2cc>
 800c72c:	0023883a 	mov	r17,zero
 800c730:	0025883a 	mov	r18,zero
 800c734:	01c00084 	movi	r7,2
 800c738:	003fa506 	br	800c5d0 <__alt_data_end+0xfc00c5d0>
 800c73c:	8984b03a 	or	r2,r17,r6
 800c740:	10002026 	beq	r2,zero,800c7c4 <__muldf3+0x2bc>
 800c744:	88011c26 	beq	r17,zero,800cbb8 <__muldf3+0x6b0>
 800c748:	8809883a 	mov	r4,r17
 800c74c:	d9400215 	stw	r5,8(sp)
 800c750:	d9800715 	stw	r6,28(sp)
 800c754:	da400415 	stw	r9,16(sp)
 800c758:	da800315 	stw	r10,12(sp)
 800c75c:	800d8400 	call	800d840 <__clzsi2>
 800c760:	d9400217 	ldw	r5,8(sp)
 800c764:	d9800717 	ldw	r6,28(sp)
 800c768:	da400417 	ldw	r9,16(sp)
 800c76c:	da800317 	ldw	r10,12(sp)
 800c770:	1007883a 	mov	r3,r2
 800c774:	01000a04 	movi	r4,40
 800c778:	1cbffe04 	addi	r18,r3,-8
 800c77c:	20c9c83a 	sub	r4,r4,r3
 800c780:	8ca2983a 	sll	r17,r17,r18
 800c784:	3108d83a 	srl	r4,r6,r4
 800c788:	34a4983a 	sll	r18,r6,r18
 800c78c:	2462b03a 	or	r17,r4,r17
 800c790:	00bf0344 	movi	r2,-1011
 800c794:	10c7c83a 	sub	r3,r2,r3
 800c798:	000f883a 	mov	r7,zero
 800c79c:	003f8c06 	br	800c5d0 <__alt_data_end+0xfc00c5d0>
 800c7a0:	008000c4 	movi	r2,3
 800c7a4:	e0816d26 	beq	fp,r2,800cd5c <__muldf3+0x854>
 800c7a8:	00800044 	movi	r2,1
 800c7ac:	e081321e 	bne	fp,r2,800cc78 <__muldf3+0x770>
 800c7b0:	48a6703a 	and	r19,r9,r2
 800c7b4:	0009883a 	mov	r4,zero
 800c7b8:	0021883a 	mov	r16,zero
 800c7bc:	002f883a 	mov	r23,zero
 800c7c0:	003fab06 	br	800c670 <__alt_data_end+0xfc00c670>
 800c7c4:	0023883a 	mov	r17,zero
 800c7c8:	0025883a 	mov	r18,zero
 800c7cc:	01c00044 	movi	r7,1
 800c7d0:	003f7f06 	br	800c5d0 <__alt_data_end+0xfc00c5d0>
 800c7d4:	01c000c4 	movi	r7,3
 800c7d8:	003f7d06 	br	800c5d0 <__alt_data_end+0xfc00c5d0>
 800c7dc:	01400104 	movi	r5,4
 800c7e0:	0021883a 	mov	r16,zero
 800c7e4:	002f883a 	mov	r23,zero
 800c7e8:	07000044 	movi	fp,1
 800c7ec:	003f6606 	br	800c588 <__alt_data_end+0xfc00c588>
 800c7f0:	01400304 	movi	r5,12
 800c7f4:	070000c4 	movi	fp,3
 800c7f8:	003f6306 	br	800c588 <__alt_data_end+0xfc00c588>
 800c7fc:	04000434 	movhi	r16,16
 800c800:	0027883a 	mov	r19,zero
 800c804:	843fffc4 	addi	r16,r16,-1
 800c808:	05ffffc4 	movi	r23,-1
 800c80c:	0101ffc4 	movi	r4,2047
 800c810:	003f9706 	br	800c670 <__alt_data_end+0xfc00c670>
 800c814:	8821883a 	mov	r16,r17
 800c818:	902f883a 	mov	r23,r18
 800c81c:	5013883a 	mov	r9,r10
 800c820:	3839883a 	mov	fp,r7
 800c824:	003f8c06 	br	800c658 <__alt_data_end+0xfc00c658>
 800c828:	8821883a 	mov	r16,r17
 800c82c:	902f883a 	mov	r23,r18
 800c830:	3013883a 	mov	r9,r6
 800c834:	3839883a 	mov	fp,r7
 800c838:	003f8706 	br	800c658 <__alt_data_end+0xfc00c658>
 800c83c:	b82ad43a 	srli	r21,r23,16
 800c840:	9038d43a 	srli	fp,r18,16
 800c844:	bdffffcc 	andi	r23,r23,65535
 800c848:	94bfffcc 	andi	r18,r18,65535
 800c84c:	9009883a 	mov	r4,r18
 800c850:	b80b883a 	mov	r5,r23
 800c854:	d8c00515 	stw	r3,20(sp)
 800c858:	d9800715 	stw	r6,28(sp)
 800c85c:	da000615 	stw	r8,24(sp)
 800c860:	800b0800 	call	800b080 <__mulsi3>
 800c864:	9009883a 	mov	r4,r18
 800c868:	a80b883a 	mov	r5,r21
 800c86c:	1029883a 	mov	r20,r2
 800c870:	800b0800 	call	800b080 <__mulsi3>
 800c874:	e009883a 	mov	r4,fp
 800c878:	a80b883a 	mov	r5,r21
 800c87c:	102d883a 	mov	r22,r2
 800c880:	800b0800 	call	800b080 <__mulsi3>
 800c884:	e009883a 	mov	r4,fp
 800c888:	b80b883a 	mov	r5,r23
 800c88c:	1027883a 	mov	r19,r2
 800c890:	800b0800 	call	800b080 <__mulsi3>
 800c894:	a008d43a 	srli	r4,r20,16
 800c898:	b085883a 	add	r2,r22,r2
 800c89c:	d8c00517 	ldw	r3,20(sp)
 800c8a0:	110f883a 	add	r7,r2,r4
 800c8a4:	d9800717 	ldw	r6,28(sp)
 800c8a8:	da000617 	ldw	r8,24(sp)
 800c8ac:	3d80022e 	bgeu	r7,r22,800c8b8 <__muldf3+0x3b0>
 800c8b0:	00800074 	movhi	r2,1
 800c8b4:	98a7883a 	add	r19,r19,r2
 800c8b8:	3804943a 	slli	r2,r7,16
 800c8bc:	380ed43a 	srli	r7,r7,16
 800c8c0:	882cd43a 	srli	r22,r17,16
 800c8c4:	a53fffcc 	andi	r20,r20,65535
 800c8c8:	8c7fffcc 	andi	r17,r17,65535
 800c8cc:	1529883a 	add	r20,r2,r20
 800c8d0:	8809883a 	mov	r4,r17
 800c8d4:	b80b883a 	mov	r5,r23
 800c8d8:	d8c00515 	stw	r3,20(sp)
 800c8dc:	d9800715 	stw	r6,28(sp)
 800c8e0:	da000615 	stw	r8,24(sp)
 800c8e4:	d9c00015 	stw	r7,0(sp)
 800c8e8:	dd000115 	stw	r20,4(sp)
 800c8ec:	800b0800 	call	800b080 <__mulsi3>
 800c8f0:	a80b883a 	mov	r5,r21
 800c8f4:	8809883a 	mov	r4,r17
 800c8f8:	d8800415 	stw	r2,16(sp)
 800c8fc:	800b0800 	call	800b080 <__mulsi3>
 800c900:	a80b883a 	mov	r5,r21
 800c904:	b009883a 	mov	r4,r22
 800c908:	1029883a 	mov	r20,r2
 800c90c:	800b0800 	call	800b080 <__mulsi3>
 800c910:	b009883a 	mov	r4,r22
 800c914:	b80b883a 	mov	r5,r23
 800c918:	102b883a 	mov	r21,r2
 800c91c:	800b0800 	call	800b080 <__mulsi3>
 800c920:	da400417 	ldw	r9,16(sp)
 800c924:	a085883a 	add	r2,r20,r2
 800c928:	d8c00517 	ldw	r3,20(sp)
 800c92c:	4808d43a 	srli	r4,r9,16
 800c930:	d9800717 	ldw	r6,28(sp)
 800c934:	da000617 	ldw	r8,24(sp)
 800c938:	1109883a 	add	r4,r2,r4
 800c93c:	2500022e 	bgeu	r4,r20,800c948 <__muldf3+0x440>
 800c940:	00800074 	movhi	r2,1
 800c944:	a8ab883a 	add	r21,r21,r2
 800c948:	200e943a 	slli	r7,r4,16
 800c94c:	2004d43a 	srli	r2,r4,16
 800c950:	802ed43a 	srli	r23,r16,16
 800c954:	843fffcc 	andi	r16,r16,65535
 800c958:	4d3fffcc 	andi	r20,r9,65535
 800c95c:	9009883a 	mov	r4,r18
 800c960:	800b883a 	mov	r5,r16
 800c964:	3d29883a 	add	r20,r7,r20
 800c968:	d8c00515 	stw	r3,20(sp)
 800c96c:	d9800715 	stw	r6,28(sp)
 800c970:	da000615 	stw	r8,24(sp)
 800c974:	a8ab883a 	add	r21,r21,r2
 800c978:	800b0800 	call	800b080 <__mulsi3>
 800c97c:	9009883a 	mov	r4,r18
 800c980:	b80b883a 	mov	r5,r23
 800c984:	d8800315 	stw	r2,12(sp)
 800c988:	800b0800 	call	800b080 <__mulsi3>
 800c98c:	e009883a 	mov	r4,fp
 800c990:	b80b883a 	mov	r5,r23
 800c994:	1025883a 	mov	r18,r2
 800c998:	800b0800 	call	800b080 <__mulsi3>
 800c99c:	e009883a 	mov	r4,fp
 800c9a0:	800b883a 	mov	r5,r16
 800c9a4:	d8800215 	stw	r2,8(sp)
 800c9a8:	800b0800 	call	800b080 <__mulsi3>
 800c9ac:	da800317 	ldw	r10,12(sp)
 800c9b0:	d9400017 	ldw	r5,0(sp)
 800c9b4:	9085883a 	add	r2,r18,r2
 800c9b8:	5008d43a 	srli	r4,r10,16
 800c9bc:	a153883a 	add	r9,r20,r5
 800c9c0:	d8c00517 	ldw	r3,20(sp)
 800c9c4:	1109883a 	add	r4,r2,r4
 800c9c8:	d9800717 	ldw	r6,28(sp)
 800c9cc:	da000617 	ldw	r8,24(sp)
 800c9d0:	dac00217 	ldw	r11,8(sp)
 800c9d4:	2480022e 	bgeu	r4,r18,800c9e0 <__muldf3+0x4d8>
 800c9d8:	00800074 	movhi	r2,1
 800c9dc:	5897883a 	add	r11,r11,r2
 800c9e0:	200e943a 	slli	r7,r4,16
 800c9e4:	2038d43a 	srli	fp,r4,16
 800c9e8:	52bfffcc 	andi	r10,r10,65535
 800c9ec:	3a8f883a 	add	r7,r7,r10
 800c9f0:	8809883a 	mov	r4,r17
 800c9f4:	800b883a 	mov	r5,r16
 800c9f8:	d8c00515 	stw	r3,20(sp)
 800c9fc:	d9800715 	stw	r6,28(sp)
 800ca00:	d9c00215 	stw	r7,8(sp)
 800ca04:	da000615 	stw	r8,24(sp)
 800ca08:	da400415 	stw	r9,16(sp)
 800ca0c:	5f39883a 	add	fp,r11,fp
 800ca10:	800b0800 	call	800b080 <__mulsi3>
 800ca14:	8809883a 	mov	r4,r17
 800ca18:	b80b883a 	mov	r5,r23
 800ca1c:	1025883a 	mov	r18,r2
 800ca20:	800b0800 	call	800b080 <__mulsi3>
 800ca24:	b009883a 	mov	r4,r22
 800ca28:	b80b883a 	mov	r5,r23
 800ca2c:	d8800315 	stw	r2,12(sp)
 800ca30:	800b0800 	call	800b080 <__mulsi3>
 800ca34:	b009883a 	mov	r4,r22
 800ca38:	800b883a 	mov	r5,r16
 800ca3c:	1023883a 	mov	r17,r2
 800ca40:	800b0800 	call	800b080 <__mulsi3>
 800ca44:	da800317 	ldw	r10,12(sp)
 800ca48:	9008d43a 	srli	r4,r18,16
 800ca4c:	d8c00517 	ldw	r3,20(sp)
 800ca50:	5085883a 	add	r2,r10,r2
 800ca54:	1109883a 	add	r4,r2,r4
 800ca58:	d9800717 	ldw	r6,28(sp)
 800ca5c:	d9c00217 	ldw	r7,8(sp)
 800ca60:	da000617 	ldw	r8,24(sp)
 800ca64:	da400417 	ldw	r9,16(sp)
 800ca68:	2280022e 	bgeu	r4,r10,800ca74 <__muldf3+0x56c>
 800ca6c:	00800074 	movhi	r2,1
 800ca70:	88a3883a 	add	r17,r17,r2
 800ca74:	2004943a 	slli	r2,r4,16
 800ca78:	94bfffcc 	andi	r18,r18,65535
 800ca7c:	4ce7883a 	add	r19,r9,r19
 800ca80:	14a5883a 	add	r18,r2,r18
 800ca84:	9d29803a 	cmpltu	r20,r19,r20
 800ca88:	9565883a 	add	r18,r18,r21
 800ca8c:	9505883a 	add	r2,r18,r20
 800ca90:	99e7883a 	add	r19,r19,r7
 800ca94:	99cf803a 	cmpltu	r7,r19,r7
 800ca98:	e08b883a 	add	r5,fp,r2
 800ca9c:	2008d43a 	srli	r4,r4,16
 800caa0:	29ef883a 	add	r23,r5,r7
 800caa4:	1529803a 	cmpltu	r20,r2,r20
 800caa8:	956b803a 	cmpltu	r21,r18,r21
 800caac:	b9cf803a 	cmpltu	r7,r23,r7
 800cab0:	a564b03a 	or	r18,r20,r21
 800cab4:	2f39803a 	cmpltu	fp,r5,fp
 800cab8:	9125883a 	add	r18,r18,r4
 800cabc:	3f38b03a 	or	fp,r7,fp
 800cac0:	9725883a 	add	r18,r18,fp
 800cac4:	9804927a 	slli	r2,r19,9
 800cac8:	9463883a 	add	r17,r18,r17
 800cacc:	d9000117 	ldw	r4,4(sp)
 800cad0:	b820d5fa 	srli	r16,r23,23
 800cad4:	8822927a 	slli	r17,r17,9
 800cad8:	9826d5fa 	srli	r19,r19,23
 800cadc:	1104b03a 	or	r2,r2,r4
 800cae0:	b82e927a 	slli	r23,r23,9
 800cae4:	1004c03a 	cmpne	r2,r2,zero
 800cae8:	8c20b03a 	or	r16,r17,r16
 800caec:	14e6b03a 	or	r19,r2,r19
 800caf0:	8080402c 	andhi	r2,r16,256
 800caf4:	9deeb03a 	or	r23,r19,r23
 800caf8:	10000726 	beq	r2,zero,800cb18 <__muldf3+0x610>
 800cafc:	b804d07a 	srli	r2,r23,1
 800cb00:	800697fa 	slli	r3,r16,31
 800cb04:	bdc0004c 	andi	r23,r23,1
 800cb08:	8020d07a 	srli	r16,r16,1
 800cb0c:	b8aeb03a 	or	r23,r23,r2
 800cb10:	b8eeb03a 	or	r23,r23,r3
 800cb14:	4007883a 	mov	r3,r8
 800cb18:	1900ffc4 	addi	r4,r3,1023
 800cb1c:	01004d0e 	bge	zero,r4,800cc54 <__muldf3+0x74c>
 800cb20:	b88001cc 	andi	r2,r23,7
 800cb24:	10000726 	beq	r2,zero,800cb44 <__muldf3+0x63c>
 800cb28:	b94003cc 	andi	r5,r23,15
 800cb2c:	00800104 	movi	r2,4
 800cb30:	28800426 	beq	r5,r2,800cb44 <__muldf3+0x63c>
 800cb34:	b885883a 	add	r2,r23,r2
 800cb38:	15ef803a 	cmpltu	r23,r2,r23
 800cb3c:	85e1883a 	add	r16,r16,r23
 800cb40:	102f883a 	mov	r23,r2
 800cb44:	8080402c 	andhi	r2,r16,256
 800cb48:	10000426 	beq	r2,zero,800cb5c <__muldf3+0x654>
 800cb4c:	00bfc034 	movhi	r2,65280
 800cb50:	10bfffc4 	addi	r2,r2,-1
 800cb54:	19010004 	addi	r4,r3,1024
 800cb58:	80a0703a 	and	r16,r16,r2
 800cb5c:	0081ff84 	movi	r2,2046
 800cb60:	1100340e 	bge	r2,r4,800cc34 <__muldf3+0x72c>
 800cb64:	34c0004c 	andi	r19,r6,1
 800cb68:	0101ffc4 	movi	r4,2047
 800cb6c:	0021883a 	mov	r16,zero
 800cb70:	002f883a 	mov	r23,zero
 800cb74:	003ebe06 	br	800c670 <__alt_data_end+0xfc00c670>
 800cb78:	8080022c 	andhi	r2,r16,8
 800cb7c:	10000926 	beq	r2,zero,800cba4 <__muldf3+0x69c>
 800cb80:	8880022c 	andhi	r2,r17,8
 800cb84:	1000071e 	bne	r2,zero,800cba4 <__muldf3+0x69c>
 800cb88:	00800434 	movhi	r2,16
 800cb8c:	8c000234 	orhi	r16,r17,8
 800cb90:	10bfffc4 	addi	r2,r2,-1
 800cb94:	b027883a 	mov	r19,r22
 800cb98:	80a0703a 	and	r16,r16,r2
 800cb9c:	902f883a 	mov	r23,r18
 800cba0:	003f1a06 	br	800c80c <__alt_data_end+0xfc00c80c>
 800cba4:	00800434 	movhi	r2,16
 800cba8:	84000234 	orhi	r16,r16,8
 800cbac:	10bfffc4 	addi	r2,r2,-1
 800cbb0:	80a0703a 	and	r16,r16,r2
 800cbb4:	003f1506 	br	800c80c <__alt_data_end+0xfc00c80c>
 800cbb8:	3009883a 	mov	r4,r6
 800cbbc:	d9400215 	stw	r5,8(sp)
 800cbc0:	d9800715 	stw	r6,28(sp)
 800cbc4:	da400415 	stw	r9,16(sp)
 800cbc8:	da800315 	stw	r10,12(sp)
 800cbcc:	800d8400 	call	800d840 <__clzsi2>
 800cbd0:	10c00804 	addi	r3,r2,32
 800cbd4:	010009c4 	movi	r4,39
 800cbd8:	d9400217 	ldw	r5,8(sp)
 800cbdc:	d9800717 	ldw	r6,28(sp)
 800cbe0:	da400417 	ldw	r9,16(sp)
 800cbe4:	da800317 	ldw	r10,12(sp)
 800cbe8:	20fee20e 	bge	r4,r3,800c774 <__alt_data_end+0xfc00c774>
 800cbec:	147ffe04 	addi	r17,r2,-8
 800cbf0:	9462983a 	sll	r17,r18,r17
 800cbf4:	0025883a 	mov	r18,zero
 800cbf8:	003ee506 	br	800c790 <__alt_data_end+0xfc00c790>
 800cbfc:	d9800715 	stw	r6,28(sp)
 800cc00:	d9c00215 	stw	r7,8(sp)
 800cc04:	da400415 	stw	r9,16(sp)
 800cc08:	800d8400 	call	800d840 <__clzsi2>
 800cc0c:	10c00804 	addi	r3,r2,32
 800cc10:	010009c4 	movi	r4,39
 800cc14:	d9800717 	ldw	r6,28(sp)
 800cc18:	d9c00217 	ldw	r7,8(sp)
 800cc1c:	da400417 	ldw	r9,16(sp)
 800cc20:	20feb40e 	bge	r4,r3,800c6f4 <__alt_data_end+0xfc00c6f4>
 800cc24:	143ffe04 	addi	r16,r2,-8
 800cc28:	9420983a 	sll	r16,r18,r16
 800cc2c:	002f883a 	mov	r23,zero
 800cc30:	003eb706 	br	800c710 <__alt_data_end+0xfc00c710>
 800cc34:	8004977a 	slli	r2,r16,29
 800cc38:	b82ed0fa 	srli	r23,r23,3
 800cc3c:	8020927a 	slli	r16,r16,9
 800cc40:	2101ffcc 	andi	r4,r4,2047
 800cc44:	15eeb03a 	or	r23,r2,r23
 800cc48:	8020d33a 	srli	r16,r16,12
 800cc4c:	34c0004c 	andi	r19,r6,1
 800cc50:	003e8706 	br	800c670 <__alt_data_end+0xfc00c670>
 800cc54:	00bf0084 	movi	r2,-1022
 800cc58:	10c5c83a 	sub	r2,r2,r3
 800cc5c:	01000e04 	movi	r4,56
 800cc60:	2080080e 	bge	r4,r2,800cc84 <__muldf3+0x77c>
 800cc64:	34c0004c 	andi	r19,r6,1
 800cc68:	0009883a 	mov	r4,zero
 800cc6c:	0021883a 	mov	r16,zero
 800cc70:	002f883a 	mov	r23,zero
 800cc74:	003e7e06 	br	800c670 <__alt_data_end+0xfc00c670>
 800cc78:	4007883a 	mov	r3,r8
 800cc7c:	480d883a 	mov	r6,r9
 800cc80:	003fa506 	br	800cb18 <__alt_data_end+0xfc00cb18>
 800cc84:	010007c4 	movi	r4,31
 800cc88:	20801816 	blt	r4,r2,800ccec <__muldf3+0x7e4>
 800cc8c:	18c10784 	addi	r3,r3,1054
 800cc90:	80c8983a 	sll	r4,r16,r3
 800cc94:	b88ad83a 	srl	r5,r23,r2
 800cc98:	b8c6983a 	sll	r3,r23,r3
 800cc9c:	80a0d83a 	srl	r16,r16,r2
 800cca0:	2908b03a 	or	r4,r5,r4
 800cca4:	1804c03a 	cmpne	r2,r3,zero
 800cca8:	2088b03a 	or	r4,r4,r2
 800ccac:	208001cc 	andi	r2,r4,7
 800ccb0:	10000726 	beq	r2,zero,800ccd0 <__muldf3+0x7c8>
 800ccb4:	20c003cc 	andi	r3,r4,15
 800ccb8:	00800104 	movi	r2,4
 800ccbc:	18800426 	beq	r3,r2,800ccd0 <__muldf3+0x7c8>
 800ccc0:	20c00104 	addi	r3,r4,4
 800ccc4:	1905803a 	cmpltu	r2,r3,r4
 800ccc8:	80a1883a 	add	r16,r16,r2
 800cccc:	1809883a 	mov	r4,r3
 800ccd0:	8080202c 	andhi	r2,r16,128
 800ccd4:	10001b26 	beq	r2,zero,800cd44 <__muldf3+0x83c>
 800ccd8:	34c0004c 	andi	r19,r6,1
 800ccdc:	01000044 	movi	r4,1
 800cce0:	0021883a 	mov	r16,zero
 800cce4:	002f883a 	mov	r23,zero
 800cce8:	003e6106 	br	800c670 <__alt_data_end+0xfc00c670>
 800ccec:	013ef884 	movi	r4,-1054
 800ccf0:	20c9c83a 	sub	r4,r4,r3
 800ccf4:	01400804 	movi	r5,32
 800ccf8:	8108d83a 	srl	r4,r16,r4
 800ccfc:	11401526 	beq	r2,r5,800cd54 <__muldf3+0x84c>
 800cd00:	18c10f84 	addi	r3,r3,1086
 800cd04:	80e0983a 	sll	r16,r16,r3
 800cd08:	85eeb03a 	or	r23,r16,r23
 800cd0c:	b804c03a 	cmpne	r2,r23,zero
 800cd10:	1108b03a 	or	r4,r2,r4
 800cd14:	20c001cc 	andi	r3,r4,7
 800cd18:	1800061e 	bne	r3,zero,800cd34 <__muldf3+0x82c>
 800cd1c:	0021883a 	mov	r16,zero
 800cd20:	202ed0fa 	srli	r23,r4,3
 800cd24:	34c0004c 	andi	r19,r6,1
 800cd28:	0009883a 	mov	r4,zero
 800cd2c:	b8eeb03a 	or	r23,r23,r3
 800cd30:	003e4f06 	br	800c670 <__alt_data_end+0xfc00c670>
 800cd34:	20c003cc 	andi	r3,r4,15
 800cd38:	00800104 	movi	r2,4
 800cd3c:	0021883a 	mov	r16,zero
 800cd40:	18bfdf1e 	bne	r3,r2,800ccc0 <__alt_data_end+0xfc00ccc0>
 800cd44:	8004927a 	slli	r2,r16,9
 800cd48:	8006977a 	slli	r3,r16,29
 800cd4c:	1020d33a 	srli	r16,r2,12
 800cd50:	003ff306 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800cd54:	0021883a 	mov	r16,zero
 800cd58:	003feb06 	br	800cd08 <__alt_data_end+0xfc00cd08>
 800cd5c:	00800434 	movhi	r2,16
 800cd60:	84000234 	orhi	r16,r16,8
 800cd64:	10bfffc4 	addi	r2,r2,-1
 800cd68:	4cc0004c 	andi	r19,r9,1
 800cd6c:	80a0703a 	and	r16,r16,r2
 800cd70:	003ea606 	br	800c80c <__alt_data_end+0xfc00c80c>

0800cd74 <__subdf3>:
 800cd74:	00c00434 	movhi	r3,16
 800cd78:	18ffffc4 	addi	r3,r3,-1
 800cd7c:	defffb04 	addi	sp,sp,-20
 800cd80:	28d2703a 	and	r9,r5,r3
 800cd84:	3814d53a 	srli	r10,r7,20
 800cd88:	38c6703a 	and	r3,r7,r3
 800cd8c:	3004d77a 	srli	r2,r6,29
 800cd90:	dc800215 	stw	r18,8(sp)
 800cd94:	dc000015 	stw	r16,0(sp)
 800cd98:	2824d7fa 	srli	r18,r5,31
 800cd9c:	2820d53a 	srli	r16,r5,20
 800cda0:	481290fa 	slli	r9,r9,3
 800cda4:	200ad77a 	srli	r5,r4,29
 800cda8:	180690fa 	slli	r3,r3,3
 800cdac:	dc400115 	stw	r17,4(sp)
 800cdb0:	dfc00415 	stw	ra,16(sp)
 800cdb4:	202290fa 	slli	r17,r4,3
 800cdb8:	dcc00315 	stw	r19,12(sp)
 800cdbc:	5281ffcc 	andi	r10,r10,2047
 800cdc0:	0101ffc4 	movi	r4,2047
 800cdc4:	9011883a 	mov	r8,r18
 800cdc8:	8401ffcc 	andi	r16,r16,2047
 800cdcc:	94803fcc 	andi	r18,r18,255
 800cdd0:	494ab03a 	or	r5,r9,r5
 800cdd4:	380ed7fa 	srli	r7,r7,31
 800cdd8:	1886b03a 	or	r3,r3,r2
 800cddc:	300c90fa 	slli	r6,r6,3
 800cde0:	51009026 	beq	r10,r4,800d024 <__subdf3+0x2b0>
 800cde4:	39c0005c 	xori	r7,r7,1
 800cde8:	8285c83a 	sub	r2,r16,r10
 800cdec:	91c06f26 	beq	r18,r7,800cfac <__subdf3+0x238>
 800cdf0:	0080b10e 	bge	zero,r2,800d0b8 <__subdf3+0x344>
 800cdf4:	50002a1e 	bne	r10,zero,800cea0 <__subdf3+0x12c>
 800cdf8:	1988b03a 	or	r4,r3,r6
 800cdfc:	2000941e 	bne	r4,zero,800d050 <__subdf3+0x2dc>
 800ce00:	888001cc 	andi	r2,r17,7
 800ce04:	10005b26 	beq	r2,zero,800cf74 <__subdf3+0x200>
 800ce08:	88c003cc 	andi	r3,r17,15
 800ce0c:	00800104 	movi	r2,4
 800ce10:	18805826 	beq	r3,r2,800cf74 <__subdf3+0x200>
 800ce14:	88c00104 	addi	r3,r17,4
 800ce18:	1c63803a 	cmpltu	r17,r3,r17
 800ce1c:	2c4b883a 	add	r5,r5,r17
 800ce20:	2880202c 	andhi	r2,r5,128
 800ce24:	9200004c 	andi	r8,r18,1
 800ce28:	1823883a 	mov	r17,r3
 800ce2c:	10005426 	beq	r2,zero,800cf80 <__subdf3+0x20c>
 800ce30:	84000044 	addi	r16,r16,1
 800ce34:	0081ffc4 	movi	r2,2047
 800ce38:	8080bf26 	beq	r16,r2,800d138 <__subdf3+0x3c4>
 800ce3c:	013fe034 	movhi	r4,65408
 800ce40:	213fffc4 	addi	r4,r4,-1
 800ce44:	290a703a 	and	r5,r5,r4
 800ce48:	2804977a 	slli	r2,r5,29
 800ce4c:	280a927a 	slli	r5,r5,9
 800ce50:	8822d0fa 	srli	r17,r17,3
 800ce54:	8401ffcc 	andi	r16,r16,2047
 800ce58:	2808d33a 	srli	r4,r5,12
 800ce5c:	1444b03a 	or	r2,r2,r17
 800ce60:	8401ffcc 	andi	r16,r16,2047
 800ce64:	800a953a 	slli	r5,r16,20
 800ce68:	40c03fcc 	andi	r3,r8,255
 800ce6c:	04000434 	movhi	r16,16
 800ce70:	180697fa 	slli	r3,r3,31
 800ce74:	843fffc4 	addi	r16,r16,-1
 800ce78:	2420703a 	and	r16,r4,r16
 800ce7c:	8160b03a 	or	r16,r16,r5
 800ce80:	80c6b03a 	or	r3,r16,r3
 800ce84:	dfc00417 	ldw	ra,16(sp)
 800ce88:	dcc00317 	ldw	r19,12(sp)
 800ce8c:	dc800217 	ldw	r18,8(sp)
 800ce90:	dc400117 	ldw	r17,4(sp)
 800ce94:	dc000017 	ldw	r16,0(sp)
 800ce98:	dec00504 	addi	sp,sp,20
 800ce9c:	f800283a 	ret
 800cea0:	0101ffc4 	movi	r4,2047
 800cea4:	813fd626 	beq	r16,r4,800ce00 <__alt_data_end+0xfc00ce00>
 800cea8:	18c02034 	orhi	r3,r3,128
 800ceac:	01000e04 	movi	r4,56
 800ceb0:	2080a416 	blt	r4,r2,800d144 <__subdf3+0x3d0>
 800ceb4:	010007c4 	movi	r4,31
 800ceb8:	2080c716 	blt	r4,r2,800d1d8 <__subdf3+0x464>
 800cebc:	01000804 	movi	r4,32
 800cec0:	2089c83a 	sub	r4,r4,r2
 800cec4:	1910983a 	sll	r8,r3,r4
 800cec8:	308ed83a 	srl	r7,r6,r2
 800cecc:	3108983a 	sll	r4,r6,r4
 800ced0:	1884d83a 	srl	r2,r3,r2
 800ced4:	41ccb03a 	or	r6,r8,r7
 800ced8:	2008c03a 	cmpne	r4,r4,zero
 800cedc:	310cb03a 	or	r6,r6,r4
 800cee0:	898dc83a 	sub	r6,r17,r6
 800cee4:	89a3803a 	cmpltu	r17,r17,r6
 800cee8:	288bc83a 	sub	r5,r5,r2
 800ceec:	2c4bc83a 	sub	r5,r5,r17
 800cef0:	3023883a 	mov	r17,r6
 800cef4:	2880202c 	andhi	r2,r5,128
 800cef8:	10006b26 	beq	r2,zero,800d0a8 <__subdf3+0x334>
 800cefc:	04c02034 	movhi	r19,128
 800cf00:	9cffffc4 	addi	r19,r19,-1
 800cf04:	2ce6703a 	and	r19,r5,r19
 800cf08:	98007c26 	beq	r19,zero,800d0fc <__subdf3+0x388>
 800cf0c:	9809883a 	mov	r4,r19
 800cf10:	800d8400 	call	800d840 <__clzsi2>
 800cf14:	10fffe04 	addi	r3,r2,-8
 800cf18:	010007c4 	movi	r4,31
 800cf1c:	20c07d16 	blt	r4,r3,800d114 <__subdf3+0x3a0>
 800cf20:	01400a04 	movi	r5,40
 800cf24:	2885c83a 	sub	r2,r5,r2
 800cf28:	888ad83a 	srl	r5,r17,r2
 800cf2c:	98e6983a 	sll	r19,r19,r3
 800cf30:	88e2983a 	sll	r17,r17,r3
 800cf34:	2ce6b03a 	or	r19,r5,r19
 800cf38:	1c007a16 	blt	r3,r16,800d124 <__subdf3+0x3b0>
 800cf3c:	1c21c83a 	sub	r16,r3,r16
 800cf40:	81400044 	addi	r5,r16,1
 800cf44:	00c007c4 	movi	r3,31
 800cf48:	19409616 	blt	r3,r5,800d1a4 <__subdf3+0x430>
 800cf4c:	1c21c83a 	sub	r16,r3,r16
 800cf50:	8c08983a 	sll	r4,r17,r16
 800cf54:	8946d83a 	srl	r3,r17,r5
 800cf58:	9c20983a 	sll	r16,r19,r16
 800cf5c:	2008c03a 	cmpne	r4,r4,zero
 800cf60:	994ad83a 	srl	r5,r19,r5
 800cf64:	1c06b03a 	or	r3,r3,r16
 800cf68:	1922b03a 	or	r17,r3,r4
 800cf6c:	0021883a 	mov	r16,zero
 800cf70:	003fa306 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800cf74:	2880202c 	andhi	r2,r5,128
 800cf78:	9200004c 	andi	r8,r18,1
 800cf7c:	103fac1e 	bne	r2,zero,800ce30 <__alt_data_end+0xfc00ce30>
 800cf80:	2804977a 	slli	r2,r5,29
 800cf84:	8822d0fa 	srli	r17,r17,3
 800cf88:	00c1ffc4 	movi	r3,2047
 800cf8c:	280ad0fa 	srli	r5,r5,3
 800cf90:	1444b03a 	or	r2,r2,r17
 800cf94:	80c02726 	beq	r16,r3,800d034 <__subdf3+0x2c0>
 800cf98:	01000434 	movhi	r4,16
 800cf9c:	213fffc4 	addi	r4,r4,-1
 800cfa0:	80e0703a 	and	r16,r16,r3
 800cfa4:	2908703a 	and	r4,r5,r4
 800cfa8:	003fad06 	br	800ce60 <__alt_data_end+0xfc00ce60>
 800cfac:	0080690e 	bge	zero,r2,800d154 <__subdf3+0x3e0>
 800cfb0:	50002f26 	beq	r10,zero,800d070 <__subdf3+0x2fc>
 800cfb4:	0101ffc4 	movi	r4,2047
 800cfb8:	813f9126 	beq	r16,r4,800ce00 <__alt_data_end+0xfc00ce00>
 800cfbc:	18c02034 	orhi	r3,r3,128
 800cfc0:	01000e04 	movi	r4,56
 800cfc4:	2080b00e 	bge	r4,r2,800d288 <__subdf3+0x514>
 800cfc8:	198cb03a 	or	r6,r3,r6
 800cfcc:	300ec03a 	cmpne	r7,r6,zero
 800cfd0:	0005883a 	mov	r2,zero
 800cfd4:	3c4f883a 	add	r7,r7,r17
 800cfd8:	3c63803a 	cmpltu	r17,r7,r17
 800cfdc:	114b883a 	add	r5,r2,r5
 800cfe0:	2c4b883a 	add	r5,r5,r17
 800cfe4:	3823883a 	mov	r17,r7
 800cfe8:	2880202c 	andhi	r2,r5,128
 800cfec:	10002e26 	beq	r2,zero,800d0a8 <__subdf3+0x334>
 800cff0:	84000044 	addi	r16,r16,1
 800cff4:	0081ffc4 	movi	r2,2047
 800cff8:	8080de26 	beq	r16,r2,800d374 <__subdf3+0x600>
 800cffc:	00bfe034 	movhi	r2,65408
 800d000:	10bfffc4 	addi	r2,r2,-1
 800d004:	288a703a 	and	r5,r5,r2
 800d008:	880cd07a 	srli	r6,r17,1
 800d00c:	280897fa 	slli	r4,r5,31
 800d010:	88c0004c 	andi	r3,r17,1
 800d014:	30e2b03a 	or	r17,r6,r3
 800d018:	280ad07a 	srli	r5,r5,1
 800d01c:	8922b03a 	or	r17,r17,r4
 800d020:	003f7706 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d024:	1984b03a 	or	r2,r3,r6
 800d028:	103f6e26 	beq	r2,zero,800cde4 <__alt_data_end+0xfc00cde4>
 800d02c:	39c03fcc 	andi	r7,r7,255
 800d030:	003f6d06 	br	800cde8 <__alt_data_end+0xfc00cde8>
 800d034:	1146b03a 	or	r3,r2,r5
 800d038:	18003f26 	beq	r3,zero,800d138 <__subdf3+0x3c4>
 800d03c:	00c00434 	movhi	r3,16
 800d040:	29000234 	orhi	r4,r5,8
 800d044:	18ffffc4 	addi	r3,r3,-1
 800d048:	20c8703a 	and	r4,r4,r3
 800d04c:	003f8406 	br	800ce60 <__alt_data_end+0xfc00ce60>
 800d050:	10bfffc4 	addi	r2,r2,-1
 800d054:	1000501e 	bne	r2,zero,800d198 <__subdf3+0x424>
 800d058:	898fc83a 	sub	r7,r17,r6
 800d05c:	89e3803a 	cmpltu	r17,r17,r7
 800d060:	28cbc83a 	sub	r5,r5,r3
 800d064:	2c4bc83a 	sub	r5,r5,r17
 800d068:	3823883a 	mov	r17,r7
 800d06c:	003fa106 	br	800cef4 <__alt_data_end+0xfc00cef4>
 800d070:	1988b03a 	or	r4,r3,r6
 800d074:	203f6226 	beq	r4,zero,800ce00 <__alt_data_end+0xfc00ce00>
 800d078:	10bfffc4 	addi	r2,r2,-1
 800d07c:	10009b1e 	bne	r2,zero,800d2ec <__subdf3+0x578>
 800d080:	344d883a 	add	r6,r6,r17
 800d084:	3463803a 	cmpltu	r17,r6,r17
 800d088:	194b883a 	add	r5,r3,r5
 800d08c:	2c4b883a 	add	r5,r5,r17
 800d090:	3023883a 	mov	r17,r6
 800d094:	003fd406 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d098:	1106b03a 	or	r3,r2,r4
 800d09c:	1800b426 	beq	r3,zero,800d370 <__subdf3+0x5fc>
 800d0a0:	100b883a 	mov	r5,r2
 800d0a4:	2023883a 	mov	r17,r4
 800d0a8:	888001cc 	andi	r2,r17,7
 800d0ac:	103f561e 	bne	r2,zero,800ce08 <__alt_data_end+0xfc00ce08>
 800d0b0:	9200004c 	andi	r8,r18,1
 800d0b4:	003fb206 	br	800cf80 <__alt_data_end+0xfc00cf80>
 800d0b8:	1000531e 	bne	r2,zero,800d208 <__subdf3+0x494>
 800d0bc:	80800044 	addi	r2,r16,1
 800d0c0:	1081ffcc 	andi	r2,r2,2047
 800d0c4:	01000044 	movi	r4,1
 800d0c8:	2080a00e 	bge	r4,r2,800d34c <__subdf3+0x5d8>
 800d0cc:	8985c83a 	sub	r2,r17,r6
 800d0d0:	8889803a 	cmpltu	r4,r17,r2
 800d0d4:	28e7c83a 	sub	r19,r5,r3
 800d0d8:	9927c83a 	sub	r19,r19,r4
 800d0dc:	9900202c 	andhi	r4,r19,128
 800d0e0:	20006226 	beq	r4,zero,800d26c <__subdf3+0x4f8>
 800d0e4:	3463c83a 	sub	r17,r6,r17
 800d0e8:	194bc83a 	sub	r5,r3,r5
 800d0ec:	344d803a 	cmpltu	r6,r6,r17
 800d0f0:	29a7c83a 	sub	r19,r5,r6
 800d0f4:	3825883a 	mov	r18,r7
 800d0f8:	983f841e 	bne	r19,zero,800cf0c <__alt_data_end+0xfc00cf0c>
 800d0fc:	8809883a 	mov	r4,r17
 800d100:	800d8400 	call	800d840 <__clzsi2>
 800d104:	10800804 	addi	r2,r2,32
 800d108:	10fffe04 	addi	r3,r2,-8
 800d10c:	010007c4 	movi	r4,31
 800d110:	20ff830e 	bge	r4,r3,800cf20 <__alt_data_end+0xfc00cf20>
 800d114:	14fff604 	addi	r19,r2,-40
 800d118:	8ce6983a 	sll	r19,r17,r19
 800d11c:	0023883a 	mov	r17,zero
 800d120:	1c3f860e 	bge	r3,r16,800cf3c <__alt_data_end+0xfc00cf3c>
 800d124:	017fe034 	movhi	r5,65408
 800d128:	297fffc4 	addi	r5,r5,-1
 800d12c:	80e1c83a 	sub	r16,r16,r3
 800d130:	994a703a 	and	r5,r19,r5
 800d134:	003f3206 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d138:	0009883a 	mov	r4,zero
 800d13c:	0005883a 	mov	r2,zero
 800d140:	003f4706 	br	800ce60 <__alt_data_end+0xfc00ce60>
 800d144:	198cb03a 	or	r6,r3,r6
 800d148:	300cc03a 	cmpne	r6,r6,zero
 800d14c:	0005883a 	mov	r2,zero
 800d150:	003f6306 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d154:	10009d1e 	bne	r2,zero,800d3cc <__subdf3+0x658>
 800d158:	81c00044 	addi	r7,r16,1
 800d15c:	3881ffcc 	andi	r2,r7,2047
 800d160:	02400044 	movi	r9,1
 800d164:	4880680e 	bge	r9,r2,800d308 <__subdf3+0x594>
 800d168:	0081ffc4 	movi	r2,2047
 800d16c:	3880ae26 	beq	r7,r2,800d428 <__subdf3+0x6b4>
 800d170:	344d883a 	add	r6,r6,r17
 800d174:	3463803a 	cmpltu	r17,r6,r17
 800d178:	194b883a 	add	r5,r3,r5
 800d17c:	2c4b883a 	add	r5,r5,r17
 800d180:	282297fa 	slli	r17,r5,31
 800d184:	300cd07a 	srli	r6,r6,1
 800d188:	280ad07a 	srli	r5,r5,1
 800d18c:	3821883a 	mov	r16,r7
 800d190:	89a2b03a 	or	r17,r17,r6
 800d194:	003f1a06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d198:	0101ffc4 	movi	r4,2047
 800d19c:	813f431e 	bne	r16,r4,800ceac <__alt_data_end+0xfc00ceac>
 800d1a0:	003f1706 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d1a4:	80bff844 	addi	r2,r16,-31
 800d1a8:	00c00804 	movi	r3,32
 800d1ac:	9884d83a 	srl	r2,r19,r2
 800d1b0:	28c05126 	beq	r5,r3,800d2f8 <__subdf3+0x584>
 800d1b4:	00c00fc4 	movi	r3,63
 800d1b8:	1c21c83a 	sub	r16,r3,r16
 800d1bc:	9c26983a 	sll	r19,r19,r16
 800d1c0:	9c62b03a 	or	r17,r19,r17
 800d1c4:	8822c03a 	cmpne	r17,r17,zero
 800d1c8:	88a2b03a 	or	r17,r17,r2
 800d1cc:	000b883a 	mov	r5,zero
 800d1d0:	0021883a 	mov	r16,zero
 800d1d4:	003fb406 	br	800d0a8 <__alt_data_end+0xfc00d0a8>
 800d1d8:	113ff804 	addi	r4,r2,-32
 800d1dc:	01c00804 	movi	r7,32
 800d1e0:	1908d83a 	srl	r4,r3,r4
 800d1e4:	11c04626 	beq	r2,r7,800d300 <__subdf3+0x58c>
 800d1e8:	01c01004 	movi	r7,64
 800d1ec:	3885c83a 	sub	r2,r7,r2
 800d1f0:	1884983a 	sll	r2,r3,r2
 800d1f4:	118cb03a 	or	r6,r2,r6
 800d1f8:	300cc03a 	cmpne	r6,r6,zero
 800d1fc:	310cb03a 	or	r6,r6,r4
 800d200:	0005883a 	mov	r2,zero
 800d204:	003f3606 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d208:	80002b26 	beq	r16,zero,800d2b8 <__subdf3+0x544>
 800d20c:	0101ffc4 	movi	r4,2047
 800d210:	51006926 	beq	r10,r4,800d3b8 <__subdf3+0x644>
 800d214:	0085c83a 	sub	r2,zero,r2
 800d218:	29402034 	orhi	r5,r5,128
 800d21c:	01000e04 	movi	r4,56
 800d220:	20807d16 	blt	r4,r2,800d418 <__subdf3+0x6a4>
 800d224:	010007c4 	movi	r4,31
 800d228:	2080d916 	blt	r4,r2,800d590 <__subdf3+0x81c>
 800d22c:	01000804 	movi	r4,32
 800d230:	2089c83a 	sub	r4,r4,r2
 800d234:	2912983a 	sll	r9,r5,r4
 800d238:	8890d83a 	srl	r8,r17,r2
 800d23c:	8908983a 	sll	r4,r17,r4
 800d240:	2884d83a 	srl	r2,r5,r2
 800d244:	4a22b03a 	or	r17,r9,r8
 800d248:	2008c03a 	cmpne	r4,r4,zero
 800d24c:	8922b03a 	or	r17,r17,r4
 800d250:	3463c83a 	sub	r17,r6,r17
 800d254:	1885c83a 	sub	r2,r3,r2
 800d258:	344d803a 	cmpltu	r6,r6,r17
 800d25c:	118bc83a 	sub	r5,r2,r6
 800d260:	5021883a 	mov	r16,r10
 800d264:	3825883a 	mov	r18,r7
 800d268:	003f2206 	br	800cef4 <__alt_data_end+0xfc00cef4>
 800d26c:	9886b03a 	or	r3,r19,r2
 800d270:	18001c1e 	bne	r3,zero,800d2e4 <__subdf3+0x570>
 800d274:	0011883a 	mov	r8,zero
 800d278:	000b883a 	mov	r5,zero
 800d27c:	0023883a 	mov	r17,zero
 800d280:	0021883a 	mov	r16,zero
 800d284:	003f3e06 	br	800cf80 <__alt_data_end+0xfc00cf80>
 800d288:	010007c4 	movi	r4,31
 800d28c:	20803c16 	blt	r4,r2,800d380 <__subdf3+0x60c>
 800d290:	01000804 	movi	r4,32
 800d294:	2089c83a 	sub	r4,r4,r2
 800d298:	1912983a 	sll	r9,r3,r4
 800d29c:	308ed83a 	srl	r7,r6,r2
 800d2a0:	3108983a 	sll	r4,r6,r4
 800d2a4:	1884d83a 	srl	r2,r3,r2
 800d2a8:	49ceb03a 	or	r7,r9,r7
 800d2ac:	2008c03a 	cmpne	r4,r4,zero
 800d2b0:	390eb03a 	or	r7,r7,r4
 800d2b4:	003f4706 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800d2b8:	2c48b03a 	or	r4,r5,r17
 800d2bc:	20003e26 	beq	r4,zero,800d3b8 <__subdf3+0x644>
 800d2c0:	0084303a 	nor	r2,zero,r2
 800d2c4:	10003a1e 	bne	r2,zero,800d3b0 <__subdf3+0x63c>
 800d2c8:	3463c83a 	sub	r17,r6,r17
 800d2cc:	194bc83a 	sub	r5,r3,r5
 800d2d0:	344d803a 	cmpltu	r6,r6,r17
 800d2d4:	298bc83a 	sub	r5,r5,r6
 800d2d8:	5021883a 	mov	r16,r10
 800d2dc:	3825883a 	mov	r18,r7
 800d2e0:	003f0406 	br	800cef4 <__alt_data_end+0xfc00cef4>
 800d2e4:	1023883a 	mov	r17,r2
 800d2e8:	003f0706 	br	800cf08 <__alt_data_end+0xfc00cf08>
 800d2ec:	0101ffc4 	movi	r4,2047
 800d2f0:	813f331e 	bne	r16,r4,800cfc0 <__alt_data_end+0xfc00cfc0>
 800d2f4:	003ec206 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d2f8:	0027883a 	mov	r19,zero
 800d2fc:	003fb006 	br	800d1c0 <__alt_data_end+0xfc00d1c0>
 800d300:	0005883a 	mov	r2,zero
 800d304:	003fbb06 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800d308:	2c44b03a 	or	r2,r5,r17
 800d30c:	80008b1e 	bne	r16,zero,800d53c <__subdf3+0x7c8>
 800d310:	1000b526 	beq	r2,zero,800d5e8 <__subdf3+0x874>
 800d314:	1984b03a 	or	r2,r3,r6
 800d318:	103eb926 	beq	r2,zero,800ce00 <__alt_data_end+0xfc00ce00>
 800d31c:	3449883a 	add	r4,r6,r17
 800d320:	2463803a 	cmpltu	r17,r4,r17
 800d324:	194b883a 	add	r5,r3,r5
 800d328:	2c4b883a 	add	r5,r5,r17
 800d32c:	2880202c 	andhi	r2,r5,128
 800d330:	2023883a 	mov	r17,r4
 800d334:	103f5c26 	beq	r2,zero,800d0a8 <__alt_data_end+0xfc00d0a8>
 800d338:	00bfe034 	movhi	r2,65408
 800d33c:	10bfffc4 	addi	r2,r2,-1
 800d340:	4821883a 	mov	r16,r9
 800d344:	288a703a 	and	r5,r5,r2
 800d348:	003ead06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d34c:	2c44b03a 	or	r2,r5,r17
 800d350:	8000291e 	bne	r16,zero,800d3f8 <__subdf3+0x684>
 800d354:	10004f1e 	bne	r2,zero,800d494 <__subdf3+0x720>
 800d358:	1984b03a 	or	r2,r3,r6
 800d35c:	10000426 	beq	r2,zero,800d370 <__subdf3+0x5fc>
 800d360:	180b883a 	mov	r5,r3
 800d364:	3023883a 	mov	r17,r6
 800d368:	3825883a 	mov	r18,r7
 800d36c:	003ea406 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d370:	0011883a 	mov	r8,zero
 800d374:	000b883a 	mov	r5,zero
 800d378:	0023883a 	mov	r17,zero
 800d37c:	003f0006 	br	800cf80 <__alt_data_end+0xfc00cf80>
 800d380:	11fff804 	addi	r7,r2,-32
 800d384:	19c8d83a 	srl	r4,r3,r7
 800d388:	01c00804 	movi	r7,32
 800d38c:	11c07e26 	beq	r2,r7,800d588 <__subdf3+0x814>
 800d390:	01c01004 	movi	r7,64
 800d394:	3885c83a 	sub	r2,r7,r2
 800d398:	1884983a 	sll	r2,r3,r2
 800d39c:	118cb03a 	or	r6,r2,r6
 800d3a0:	300ec03a 	cmpne	r7,r6,zero
 800d3a4:	390eb03a 	or	r7,r7,r4
 800d3a8:	0005883a 	mov	r2,zero
 800d3ac:	003f0906 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800d3b0:	0101ffc4 	movi	r4,2047
 800d3b4:	513f991e 	bne	r10,r4,800d21c <__alt_data_end+0xfc00d21c>
 800d3b8:	180b883a 	mov	r5,r3
 800d3bc:	3023883a 	mov	r17,r6
 800d3c0:	5021883a 	mov	r16,r10
 800d3c4:	3825883a 	mov	r18,r7
 800d3c8:	003e8d06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d3cc:	80001a1e 	bne	r16,zero,800d438 <__subdf3+0x6c4>
 800d3d0:	2c48b03a 	or	r4,r5,r17
 800d3d4:	20005526 	beq	r4,zero,800d52c <__subdf3+0x7b8>
 800d3d8:	0084303a 	nor	r2,zero,r2
 800d3dc:	1000511e 	bne	r2,zero,800d524 <__subdf3+0x7b0>
 800d3e0:	89a3883a 	add	r17,r17,r6
 800d3e4:	194b883a 	add	r5,r3,r5
 800d3e8:	898d803a 	cmpltu	r6,r17,r6
 800d3ec:	298b883a 	add	r5,r5,r6
 800d3f0:	5021883a 	mov	r16,r10
 800d3f4:	003efc06 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d3f8:	1000341e 	bne	r2,zero,800d4cc <__subdf3+0x758>
 800d3fc:	1984b03a 	or	r2,r3,r6
 800d400:	10006f26 	beq	r2,zero,800d5c0 <__subdf3+0x84c>
 800d404:	180b883a 	mov	r5,r3
 800d408:	3023883a 	mov	r17,r6
 800d40c:	3825883a 	mov	r18,r7
 800d410:	0401ffc4 	movi	r16,2047
 800d414:	003e7a06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d418:	2c62b03a 	or	r17,r5,r17
 800d41c:	8822c03a 	cmpne	r17,r17,zero
 800d420:	0005883a 	mov	r2,zero
 800d424:	003f8a06 	br	800d250 <__alt_data_end+0xfc00d250>
 800d428:	3821883a 	mov	r16,r7
 800d42c:	000b883a 	mov	r5,zero
 800d430:	0023883a 	mov	r17,zero
 800d434:	003ed206 	br	800cf80 <__alt_data_end+0xfc00cf80>
 800d438:	0101ffc4 	movi	r4,2047
 800d43c:	51003b26 	beq	r10,r4,800d52c <__subdf3+0x7b8>
 800d440:	0085c83a 	sub	r2,zero,r2
 800d444:	29402034 	orhi	r5,r5,128
 800d448:	01000e04 	movi	r4,56
 800d44c:	20806216 	blt	r4,r2,800d5d8 <__subdf3+0x864>
 800d450:	010007c4 	movi	r4,31
 800d454:	20806b16 	blt	r4,r2,800d604 <__subdf3+0x890>
 800d458:	01000804 	movi	r4,32
 800d45c:	2089c83a 	sub	r4,r4,r2
 800d460:	2912983a 	sll	r9,r5,r4
 800d464:	888ed83a 	srl	r7,r17,r2
 800d468:	8908983a 	sll	r4,r17,r4
 800d46c:	2884d83a 	srl	r2,r5,r2
 800d470:	49e2b03a 	or	r17,r9,r7
 800d474:	2008c03a 	cmpne	r4,r4,zero
 800d478:	8922b03a 	or	r17,r17,r4
 800d47c:	89a3883a 	add	r17,r17,r6
 800d480:	10c5883a 	add	r2,r2,r3
 800d484:	898d803a 	cmpltu	r6,r17,r6
 800d488:	118b883a 	add	r5,r2,r6
 800d48c:	5021883a 	mov	r16,r10
 800d490:	003ed506 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d494:	1984b03a 	or	r2,r3,r6
 800d498:	103e5926 	beq	r2,zero,800ce00 <__alt_data_end+0xfc00ce00>
 800d49c:	8989c83a 	sub	r4,r17,r6
 800d4a0:	8911803a 	cmpltu	r8,r17,r4
 800d4a4:	28c5c83a 	sub	r2,r5,r3
 800d4a8:	1205c83a 	sub	r2,r2,r8
 800d4ac:	1200202c 	andhi	r8,r2,128
 800d4b0:	403ef926 	beq	r8,zero,800d098 <__alt_data_end+0xfc00d098>
 800d4b4:	3463c83a 	sub	r17,r6,r17
 800d4b8:	194bc83a 	sub	r5,r3,r5
 800d4bc:	344d803a 	cmpltu	r6,r6,r17
 800d4c0:	298bc83a 	sub	r5,r5,r6
 800d4c4:	3825883a 	mov	r18,r7
 800d4c8:	003e4d06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d4cc:	1984b03a 	or	r2,r3,r6
 800d4d0:	10002b26 	beq	r2,zero,800d580 <__subdf3+0x80c>
 800d4d4:	2808d0fa 	srli	r4,r5,3
 800d4d8:	8822d0fa 	srli	r17,r17,3
 800d4dc:	280a977a 	slli	r5,r5,29
 800d4e0:	2080022c 	andhi	r2,r4,8
 800d4e4:	2c62b03a 	or	r17,r5,r17
 800d4e8:	10000826 	beq	r2,zero,800d50c <__subdf3+0x798>
 800d4ec:	1810d0fa 	srli	r8,r3,3
 800d4f0:	4080022c 	andhi	r2,r8,8
 800d4f4:	1000051e 	bne	r2,zero,800d50c <__subdf3+0x798>
 800d4f8:	300cd0fa 	srli	r6,r6,3
 800d4fc:	1804977a 	slli	r2,r3,29
 800d500:	4009883a 	mov	r4,r8
 800d504:	3825883a 	mov	r18,r7
 800d508:	11a2b03a 	or	r17,r2,r6
 800d50c:	880ad77a 	srli	r5,r17,29
 800d510:	200890fa 	slli	r4,r4,3
 800d514:	882290fa 	slli	r17,r17,3
 800d518:	0401ffc4 	movi	r16,2047
 800d51c:	290ab03a 	or	r5,r5,r4
 800d520:	003e3706 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d524:	0101ffc4 	movi	r4,2047
 800d528:	513fc71e 	bne	r10,r4,800d448 <__alt_data_end+0xfc00d448>
 800d52c:	180b883a 	mov	r5,r3
 800d530:	3023883a 	mov	r17,r6
 800d534:	5021883a 	mov	r16,r10
 800d538:	003e3106 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d53c:	10002d26 	beq	r2,zero,800d5f4 <__subdf3+0x880>
 800d540:	1984b03a 	or	r2,r3,r6
 800d544:	10000e26 	beq	r2,zero,800d580 <__subdf3+0x80c>
 800d548:	2808d0fa 	srli	r4,r5,3
 800d54c:	8822d0fa 	srli	r17,r17,3
 800d550:	280a977a 	slli	r5,r5,29
 800d554:	2080022c 	andhi	r2,r4,8
 800d558:	2c62b03a 	or	r17,r5,r17
 800d55c:	103feb26 	beq	r2,zero,800d50c <__alt_data_end+0xfc00d50c>
 800d560:	180ed0fa 	srli	r7,r3,3
 800d564:	3880022c 	andhi	r2,r7,8
 800d568:	103fe81e 	bne	r2,zero,800d50c <__alt_data_end+0xfc00d50c>
 800d56c:	300cd0fa 	srli	r6,r6,3
 800d570:	1804977a 	slli	r2,r3,29
 800d574:	3809883a 	mov	r4,r7
 800d578:	11a2b03a 	or	r17,r2,r6
 800d57c:	003fe306 	br	800d50c <__alt_data_end+0xfc00d50c>
 800d580:	0401ffc4 	movi	r16,2047
 800d584:	003e1e06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d588:	0005883a 	mov	r2,zero
 800d58c:	003f8306 	br	800d39c <__alt_data_end+0xfc00d39c>
 800d590:	113ff804 	addi	r4,r2,-32
 800d594:	02000804 	movi	r8,32
 800d598:	2908d83a 	srl	r4,r5,r4
 800d59c:	12002526 	beq	r2,r8,800d634 <__subdf3+0x8c0>
 800d5a0:	02001004 	movi	r8,64
 800d5a4:	4085c83a 	sub	r2,r8,r2
 800d5a8:	288a983a 	sll	r5,r5,r2
 800d5ac:	2c62b03a 	or	r17,r5,r17
 800d5b0:	8822c03a 	cmpne	r17,r17,zero
 800d5b4:	8922b03a 	or	r17,r17,r4
 800d5b8:	0005883a 	mov	r2,zero
 800d5bc:	003f2406 	br	800d250 <__alt_data_end+0xfc00d250>
 800d5c0:	01402034 	movhi	r5,128
 800d5c4:	0011883a 	mov	r8,zero
 800d5c8:	297fffc4 	addi	r5,r5,-1
 800d5cc:	047ffe04 	movi	r17,-8
 800d5d0:	0401ffc4 	movi	r16,2047
 800d5d4:	003e6a06 	br	800cf80 <__alt_data_end+0xfc00cf80>
 800d5d8:	2c62b03a 	or	r17,r5,r17
 800d5dc:	8822c03a 	cmpne	r17,r17,zero
 800d5e0:	0005883a 	mov	r2,zero
 800d5e4:	003fa506 	br	800d47c <__alt_data_end+0xfc00d47c>
 800d5e8:	180b883a 	mov	r5,r3
 800d5ec:	3023883a 	mov	r17,r6
 800d5f0:	003e0306 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d5f4:	180b883a 	mov	r5,r3
 800d5f8:	3023883a 	mov	r17,r6
 800d5fc:	0401ffc4 	movi	r16,2047
 800d600:	003dff06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d604:	113ff804 	addi	r4,r2,-32
 800d608:	01c00804 	movi	r7,32
 800d60c:	2908d83a 	srl	r4,r5,r4
 800d610:	11c00a26 	beq	r2,r7,800d63c <__subdf3+0x8c8>
 800d614:	01c01004 	movi	r7,64
 800d618:	3885c83a 	sub	r2,r7,r2
 800d61c:	288a983a 	sll	r5,r5,r2
 800d620:	2c62b03a 	or	r17,r5,r17
 800d624:	8822c03a 	cmpne	r17,r17,zero
 800d628:	8922b03a 	or	r17,r17,r4
 800d62c:	0005883a 	mov	r2,zero
 800d630:	003f9206 	br	800d47c <__alt_data_end+0xfc00d47c>
 800d634:	000b883a 	mov	r5,zero
 800d638:	003fdc06 	br	800d5ac <__alt_data_end+0xfc00d5ac>
 800d63c:	000b883a 	mov	r5,zero
 800d640:	003ff706 	br	800d620 <__alt_data_end+0xfc00d620>

0800d644 <__fixdfsi>:
 800d644:	2806d53a 	srli	r3,r5,20
 800d648:	00800434 	movhi	r2,16
 800d64c:	10bfffc4 	addi	r2,r2,-1
 800d650:	18c1ffcc 	andi	r3,r3,2047
 800d654:	0180ff84 	movi	r6,1022
 800d658:	2884703a 	and	r2,r5,r2
 800d65c:	280ad7fa 	srli	r5,r5,31
 800d660:	30c0130e 	bge	r6,r3,800d6b0 <__fixdfsi+0x6c>
 800d664:	01810744 	movi	r6,1053
 800d668:	30c00d16 	blt	r6,r3,800d6a0 <__fixdfsi+0x5c>
 800d66c:	01810cc4 	movi	r6,1075
 800d670:	30cdc83a 	sub	r6,r6,r3
 800d674:	01c007c4 	movi	r7,31
 800d678:	10800434 	orhi	r2,r2,16
 800d67c:	39800e0e 	bge	r7,r6,800d6b8 <__fixdfsi+0x74>
 800d680:	010104c4 	movi	r4,1043
 800d684:	20c7c83a 	sub	r3,r4,r3
 800d688:	10c6d83a 	srl	r3,r2,r3
 800d68c:	29403fcc 	andi	r5,r5,255
 800d690:	0145c83a 	sub	r2,zero,r5
 800d694:	1884f03a 	xor	r2,r3,r2
 800d698:	1145883a 	add	r2,r2,r5
 800d69c:	f800283a 	ret
 800d6a0:	00a00034 	movhi	r2,32768
 800d6a4:	10bfffc4 	addi	r2,r2,-1
 800d6a8:	2885883a 	add	r2,r5,r2
 800d6ac:	f800283a 	ret
 800d6b0:	0005883a 	mov	r2,zero
 800d6b4:	f800283a 	ret
 800d6b8:	18fefb44 	addi	r3,r3,-1043
 800d6bc:	2188d83a 	srl	r4,r4,r6
 800d6c0:	10c6983a 	sll	r3,r2,r3
 800d6c4:	20c6b03a 	or	r3,r4,r3
 800d6c8:	003ff006 	br	800d68c <__alt_data_end+0xfc00d68c>

0800d6cc <__floatsidf>:
 800d6cc:	defffd04 	addi	sp,sp,-12
 800d6d0:	dc400115 	stw	r17,4(sp)
 800d6d4:	dfc00215 	stw	ra,8(sp)
 800d6d8:	dc000015 	stw	r16,0(sp)
 800d6dc:	2023883a 	mov	r17,r4
 800d6e0:	20001426 	beq	r4,zero,800d734 <__floatsidf+0x68>
 800d6e4:	2020d7fa 	srli	r16,r4,31
 800d6e8:	80000126 	beq	r16,zero,800d6f0 <__floatsidf+0x24>
 800d6ec:	0123c83a 	sub	r17,zero,r4
 800d6f0:	8809883a 	mov	r4,r17
 800d6f4:	800d8400 	call	800d840 <__clzsi2>
 800d6f8:	01410784 	movi	r5,1054
 800d6fc:	00c00284 	movi	r3,10
 800d700:	288bc83a 	sub	r5,r5,r2
 800d704:	18801c16 	blt	r3,r2,800d778 <__floatsidf+0xac>
 800d708:	00c002c4 	movi	r3,11
 800d70c:	1887c83a 	sub	r3,r3,r2
 800d710:	88c8d83a 	srl	r4,r17,r3
 800d714:	00c00434 	movhi	r3,16
 800d718:	18ffffc4 	addi	r3,r3,-1
 800d71c:	10800544 	addi	r2,r2,21
 800d720:	20c8703a 	and	r4,r4,r3
 800d724:	8884983a 	sll	r2,r17,r2
 800d728:	28c1ffcc 	andi	r3,r5,2047
 800d72c:	800d883a 	mov	r6,r16
 800d730:	00000406 	br	800d744 <__floatsidf+0x78>
 800d734:	000d883a 	mov	r6,zero
 800d738:	0007883a 	mov	r3,zero
 800d73c:	0009883a 	mov	r4,zero
 800d740:	0005883a 	mov	r2,zero
 800d744:	180a953a 	slli	r5,r3,20
 800d748:	31803fcc 	andi	r6,r6,255
 800d74c:	00c00434 	movhi	r3,16
 800d750:	300c97fa 	slli	r6,r6,31
 800d754:	18ffffc4 	addi	r3,r3,-1
 800d758:	20c6703a 	and	r3,r4,r3
 800d75c:	1946b03a 	or	r3,r3,r5
 800d760:	1986b03a 	or	r3,r3,r6
 800d764:	dfc00217 	ldw	ra,8(sp)
 800d768:	dc400117 	ldw	r17,4(sp)
 800d76c:	dc000017 	ldw	r16,0(sp)
 800d770:	dec00304 	addi	sp,sp,12
 800d774:	f800283a 	ret
 800d778:	10fffd44 	addi	r3,r2,-11
 800d77c:	88c8983a 	sll	r4,r17,r3
 800d780:	00800434 	movhi	r2,16
 800d784:	10bfffc4 	addi	r2,r2,-1
 800d788:	2088703a 	and	r4,r4,r2
 800d78c:	28c1ffcc 	andi	r3,r5,2047
 800d790:	800d883a 	mov	r6,r16
 800d794:	0005883a 	mov	r2,zero
 800d798:	003fea06 	br	800d744 <__alt_data_end+0xfc00d744>

0800d79c <__floatunsidf>:
 800d79c:	defffe04 	addi	sp,sp,-8
 800d7a0:	dc000015 	stw	r16,0(sp)
 800d7a4:	dfc00115 	stw	ra,4(sp)
 800d7a8:	2021883a 	mov	r16,r4
 800d7ac:	20001026 	beq	r4,zero,800d7f0 <__floatunsidf+0x54>
 800d7b0:	800d8400 	call	800d840 <__clzsi2>
 800d7b4:	01410784 	movi	r5,1054
 800d7b8:	100d883a 	mov	r6,r2
 800d7bc:	288bc83a 	sub	r5,r5,r2
 800d7c0:	00800284 	movi	r2,10
 800d7c4:	11801616 	blt	r2,r6,800d820 <__floatunsidf+0x84>
 800d7c8:	008002c4 	movi	r2,11
 800d7cc:	1185c83a 	sub	r2,r2,r6
 800d7d0:	8084d83a 	srl	r2,r16,r2
 800d7d4:	00c00434 	movhi	r3,16
 800d7d8:	31c00544 	addi	r7,r6,21
 800d7dc:	18ffffc4 	addi	r3,r3,-1
 800d7e0:	81e0983a 	sll	r16,r16,r7
 800d7e4:	10cc703a 	and	r6,r2,r3
 800d7e8:	2941ffcc 	andi	r5,r5,2047
 800d7ec:	00000206 	br	800d7f8 <__floatunsidf+0x5c>
 800d7f0:	000b883a 	mov	r5,zero
 800d7f4:	000d883a 	mov	r6,zero
 800d7f8:	280a953a 	slli	r5,r5,20
 800d7fc:	00c00434 	movhi	r3,16
 800d800:	18ffffc4 	addi	r3,r3,-1
 800d804:	30c6703a 	and	r3,r6,r3
 800d808:	8005883a 	mov	r2,r16
 800d80c:	1946b03a 	or	r3,r3,r5
 800d810:	dfc00117 	ldw	ra,4(sp)
 800d814:	dc000017 	ldw	r16,0(sp)
 800d818:	dec00204 	addi	sp,sp,8
 800d81c:	f800283a 	ret
 800d820:	31bffd44 	addi	r6,r6,-11
 800d824:	818c983a 	sll	r6,r16,r6
 800d828:	00800434 	movhi	r2,16
 800d82c:	10bfffc4 	addi	r2,r2,-1
 800d830:	2941ffcc 	andi	r5,r5,2047
 800d834:	0021883a 	mov	r16,zero
 800d838:	308c703a 	and	r6,r6,r2
 800d83c:	003fee06 	br	800d7f8 <__alt_data_end+0xfc00d7f8>

0800d840 <__clzsi2>:
 800d840:	00bfffd4 	movui	r2,65535
 800d844:	11000b36 	bltu	r2,r4,800d874 <__clzsi2+0x34>
 800d848:	00803fc4 	movi	r2,255
 800d84c:	1100122e 	bgeu	r2,r4,800d898 <__clzsi2+0x58>
 800d850:	00c00204 	movi	r3,8
 800d854:	01400604 	movi	r5,24
 800d858:	20c8d83a 	srl	r4,r4,r3
 800d85c:	00820074 	movhi	r2,2049
 800d860:	10847104 	addi	r2,r2,4548
 800d864:	1109883a 	add	r4,r2,r4
 800d868:	20800003 	ldbu	r2,0(r4)
 800d86c:	2885c83a 	sub	r2,r5,r2
 800d870:	f800283a 	ret
 800d874:	00804034 	movhi	r2,256
 800d878:	10bfffc4 	addi	r2,r2,-1
 800d87c:	11000336 	bltu	r2,r4,800d88c <__clzsi2+0x4c>
 800d880:	00c00404 	movi	r3,16
 800d884:	180b883a 	mov	r5,r3
 800d888:	003ff306 	br	800d858 <__alt_data_end+0xfc00d858>
 800d88c:	00c00604 	movi	r3,24
 800d890:	01400204 	movi	r5,8
 800d894:	003ff006 	br	800d858 <__alt_data_end+0xfc00d858>
 800d898:	0007883a 	mov	r3,zero
 800d89c:	01400804 	movi	r5,32
 800d8a0:	003fed06 	br	800d858 <__alt_data_end+0xfc00d858>

0800d8a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d8a4:	defffe04 	addi	sp,sp,-8
 800d8a8:	dfc00115 	stw	ra,4(sp)
 800d8ac:	df000015 	stw	fp,0(sp)
 800d8b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d8b4:	00820074 	movhi	r2,2049
 800d8b8:	108bb904 	addi	r2,r2,12004
 800d8bc:	10800017 	ldw	r2,0(r2)
 800d8c0:	10000526 	beq	r2,zero,800d8d8 <alt_get_errno+0x34>
 800d8c4:	00820074 	movhi	r2,2049
 800d8c8:	108bb904 	addi	r2,r2,12004
 800d8cc:	10800017 	ldw	r2,0(r2)
 800d8d0:	103ee83a 	callr	r2
 800d8d4:	00000206 	br	800d8e0 <alt_get_errno+0x3c>
 800d8d8:	00820074 	movhi	r2,2049
 800d8dc:	1092b504 	addi	r2,r2,19156
}
 800d8e0:	e037883a 	mov	sp,fp
 800d8e4:	dfc00117 	ldw	ra,4(sp)
 800d8e8:	df000017 	ldw	fp,0(sp)
 800d8ec:	dec00204 	addi	sp,sp,8
 800d8f0:	f800283a 	ret

0800d8f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d8f4:	defffb04 	addi	sp,sp,-20
 800d8f8:	dfc00415 	stw	ra,16(sp)
 800d8fc:	df000315 	stw	fp,12(sp)
 800d900:	df000304 	addi	fp,sp,12
 800d904:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d908:	e0bfff17 	ldw	r2,-4(fp)
 800d90c:	10000816 	blt	r2,zero,800d930 <close+0x3c>
 800d910:	e13fff17 	ldw	r4,-4(fp)
 800d914:	01400304 	movi	r5,12
 800d918:	800b0800 	call	800b080 <__mulsi3>
 800d91c:	1007883a 	mov	r3,r2
 800d920:	00820074 	movhi	r2,2049
 800d924:	1086fa04 	addi	r2,r2,7144
 800d928:	1885883a 	add	r2,r3,r2
 800d92c:	00000106 	br	800d934 <close+0x40>
 800d930:	0005883a 	mov	r2,zero
 800d934:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d938:	e0bffd17 	ldw	r2,-12(fp)
 800d93c:	10001926 	beq	r2,zero,800d9a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d940:	e0bffd17 	ldw	r2,-12(fp)
 800d944:	10800017 	ldw	r2,0(r2)
 800d948:	10800417 	ldw	r2,16(r2)
 800d94c:	10000626 	beq	r2,zero,800d968 <close+0x74>
 800d950:	e0bffd17 	ldw	r2,-12(fp)
 800d954:	10800017 	ldw	r2,0(r2)
 800d958:	10800417 	ldw	r2,16(r2)
 800d95c:	e13ffd17 	ldw	r4,-12(fp)
 800d960:	103ee83a 	callr	r2
 800d964:	00000106 	br	800d96c <close+0x78>
 800d968:	0005883a 	mov	r2,zero
 800d96c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d970:	e13fff17 	ldw	r4,-4(fp)
 800d974:	800e2bc0 	call	800e2bc <alt_release_fd>
    if (rval < 0)
 800d978:	e0bffe17 	ldw	r2,-8(fp)
 800d97c:	1000070e 	bge	r2,zero,800d99c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d980:	800d8a40 	call	800d8a4 <alt_get_errno>
 800d984:	1007883a 	mov	r3,r2
 800d988:	e0bffe17 	ldw	r2,-8(fp)
 800d98c:	0085c83a 	sub	r2,zero,r2
 800d990:	18800015 	stw	r2,0(r3)
      return -1;
 800d994:	00bfffc4 	movi	r2,-1
 800d998:	00000706 	br	800d9b8 <close+0xc4>
    }
    return 0;
 800d99c:	0005883a 	mov	r2,zero
 800d9a0:	00000506 	br	800d9b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d9a4:	800d8a40 	call	800d8a4 <alt_get_errno>
 800d9a8:	1007883a 	mov	r3,r2
 800d9ac:	00801444 	movi	r2,81
 800d9b0:	18800015 	stw	r2,0(r3)
    return -1;
 800d9b4:	00bfffc4 	movi	r2,-1
  }
}
 800d9b8:	e037883a 	mov	sp,fp
 800d9bc:	dfc00117 	ldw	ra,4(sp)
 800d9c0:	df000017 	ldw	fp,0(sp)
 800d9c4:	dec00204 	addi	sp,sp,8
 800d9c8:	f800283a 	ret

0800d9cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d9cc:	defffc04 	addi	sp,sp,-16
 800d9d0:	df000315 	stw	fp,12(sp)
 800d9d4:	df000304 	addi	fp,sp,12
 800d9d8:	e13ffd15 	stw	r4,-12(fp)
 800d9dc:	e17ffe15 	stw	r5,-8(fp)
 800d9e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d9e4:	e0bfff17 	ldw	r2,-4(fp)
}
 800d9e8:	e037883a 	mov	sp,fp
 800d9ec:	df000017 	ldw	fp,0(sp)
 800d9f0:	dec00104 	addi	sp,sp,4
 800d9f4:	f800283a 	ret

0800d9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d9f8:	defffe04 	addi	sp,sp,-8
 800d9fc:	dfc00115 	stw	ra,4(sp)
 800da00:	df000015 	stw	fp,0(sp)
 800da04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da08:	00820074 	movhi	r2,2049
 800da0c:	108bb904 	addi	r2,r2,12004
 800da10:	10800017 	ldw	r2,0(r2)
 800da14:	10000526 	beq	r2,zero,800da2c <alt_get_errno+0x34>
 800da18:	00820074 	movhi	r2,2049
 800da1c:	108bb904 	addi	r2,r2,12004
 800da20:	10800017 	ldw	r2,0(r2)
 800da24:	103ee83a 	callr	r2
 800da28:	00000206 	br	800da34 <alt_get_errno+0x3c>
 800da2c:	00820074 	movhi	r2,2049
 800da30:	1092b504 	addi	r2,r2,19156
}
 800da34:	e037883a 	mov	sp,fp
 800da38:	dfc00117 	ldw	ra,4(sp)
 800da3c:	df000017 	ldw	fp,0(sp)
 800da40:	dec00204 	addi	sp,sp,8
 800da44:	f800283a 	ret

0800da48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800da48:	defffb04 	addi	sp,sp,-20
 800da4c:	dfc00415 	stw	ra,16(sp)
 800da50:	df000315 	stw	fp,12(sp)
 800da54:	df000304 	addi	fp,sp,12
 800da58:	e13ffe15 	stw	r4,-8(fp)
 800da5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800da60:	e0bffe17 	ldw	r2,-8(fp)
 800da64:	10000816 	blt	r2,zero,800da88 <fstat+0x40>
 800da68:	e13ffe17 	ldw	r4,-8(fp)
 800da6c:	01400304 	movi	r5,12
 800da70:	800b0800 	call	800b080 <__mulsi3>
 800da74:	1007883a 	mov	r3,r2
 800da78:	00820074 	movhi	r2,2049
 800da7c:	1086fa04 	addi	r2,r2,7144
 800da80:	1885883a 	add	r2,r3,r2
 800da84:	00000106 	br	800da8c <fstat+0x44>
 800da88:	0005883a 	mov	r2,zero
 800da8c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800da90:	e0bffd17 	ldw	r2,-12(fp)
 800da94:	10001026 	beq	r2,zero,800dad8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800da98:	e0bffd17 	ldw	r2,-12(fp)
 800da9c:	10800017 	ldw	r2,0(r2)
 800daa0:	10800817 	ldw	r2,32(r2)
 800daa4:	10000726 	beq	r2,zero,800dac4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800daa8:	e0bffd17 	ldw	r2,-12(fp)
 800daac:	10800017 	ldw	r2,0(r2)
 800dab0:	10800817 	ldw	r2,32(r2)
 800dab4:	e13ffd17 	ldw	r4,-12(fp)
 800dab8:	e17fff17 	ldw	r5,-4(fp)
 800dabc:	103ee83a 	callr	r2
 800dac0:	00000a06 	br	800daec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800dac4:	e0bfff17 	ldw	r2,-4(fp)
 800dac8:	00c80004 	movi	r3,8192
 800dacc:	10c00115 	stw	r3,4(r2)
      return 0;
 800dad0:	0005883a 	mov	r2,zero
 800dad4:	00000506 	br	800daec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800dad8:	800d9f80 	call	800d9f8 <alt_get_errno>
 800dadc:	1007883a 	mov	r3,r2
 800dae0:	00801444 	movi	r2,81
 800dae4:	18800015 	stw	r2,0(r3)
    return -1;
 800dae8:	00bfffc4 	movi	r2,-1
  }
}
 800daec:	e037883a 	mov	sp,fp
 800daf0:	dfc00117 	ldw	ra,4(sp)
 800daf4:	df000017 	ldw	fp,0(sp)
 800daf8:	dec00204 	addi	sp,sp,8
 800dafc:	f800283a 	ret

0800db00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800db00:	defffe04 	addi	sp,sp,-8
 800db04:	dfc00115 	stw	ra,4(sp)
 800db08:	df000015 	stw	fp,0(sp)
 800db0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800db10:	00820074 	movhi	r2,2049
 800db14:	108bb904 	addi	r2,r2,12004
 800db18:	10800017 	ldw	r2,0(r2)
 800db1c:	10000526 	beq	r2,zero,800db34 <alt_get_errno+0x34>
 800db20:	00820074 	movhi	r2,2049
 800db24:	108bb904 	addi	r2,r2,12004
 800db28:	10800017 	ldw	r2,0(r2)
 800db2c:	103ee83a 	callr	r2
 800db30:	00000206 	br	800db3c <alt_get_errno+0x3c>
 800db34:	00820074 	movhi	r2,2049
 800db38:	1092b504 	addi	r2,r2,19156
}
 800db3c:	e037883a 	mov	sp,fp
 800db40:	dfc00117 	ldw	ra,4(sp)
 800db44:	df000017 	ldw	fp,0(sp)
 800db48:	dec00204 	addi	sp,sp,8
 800db4c:	f800283a 	ret

0800db50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800db50:	deffed04 	addi	sp,sp,-76
 800db54:	dfc01215 	stw	ra,72(sp)
 800db58:	df001115 	stw	fp,68(sp)
 800db5c:	df001104 	addi	fp,sp,68
 800db60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800db64:	e0bfff17 	ldw	r2,-4(fp)
 800db68:	10000816 	blt	r2,zero,800db8c <isatty+0x3c>
 800db6c:	e13fff17 	ldw	r4,-4(fp)
 800db70:	01400304 	movi	r5,12
 800db74:	800b0800 	call	800b080 <__mulsi3>
 800db78:	1007883a 	mov	r3,r2
 800db7c:	00820074 	movhi	r2,2049
 800db80:	1086fa04 	addi	r2,r2,7144
 800db84:	1885883a 	add	r2,r3,r2
 800db88:	00000106 	br	800db90 <isatty+0x40>
 800db8c:	0005883a 	mov	r2,zero
 800db90:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800db94:	e0bfef17 	ldw	r2,-68(fp)
 800db98:	10000e26 	beq	r2,zero,800dbd4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800db9c:	e0bfef17 	ldw	r2,-68(fp)
 800dba0:	10800017 	ldw	r2,0(r2)
 800dba4:	10800817 	ldw	r2,32(r2)
 800dba8:	1000021e 	bne	r2,zero,800dbb4 <isatty+0x64>
    {
      return 1;
 800dbac:	00800044 	movi	r2,1
 800dbb0:	00000d06 	br	800dbe8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800dbb4:	e0bff004 	addi	r2,fp,-64
 800dbb8:	e13fff17 	ldw	r4,-4(fp)
 800dbbc:	100b883a 	mov	r5,r2
 800dbc0:	800da480 	call	800da48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800dbc4:	e0bff117 	ldw	r2,-60(fp)
 800dbc8:	10880020 	cmpeqi	r2,r2,8192
 800dbcc:	10803fcc 	andi	r2,r2,255
 800dbd0:	00000506 	br	800dbe8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800dbd4:	800db000 	call	800db00 <alt_get_errno>
 800dbd8:	1007883a 	mov	r3,r2
 800dbdc:	00801444 	movi	r2,81
 800dbe0:	18800015 	stw	r2,0(r3)
    return 0;
 800dbe4:	0005883a 	mov	r2,zero
  }
}
 800dbe8:	e037883a 	mov	sp,fp
 800dbec:	dfc00117 	ldw	ra,4(sp)
 800dbf0:	df000017 	ldw	fp,0(sp)
 800dbf4:	dec00204 	addi	sp,sp,8
 800dbf8:	f800283a 	ret

0800dbfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800dbfc:	defffc04 	addi	sp,sp,-16
 800dc00:	df000315 	stw	fp,12(sp)
 800dc04:	df000304 	addi	fp,sp,12
 800dc08:	e13ffd15 	stw	r4,-12(fp)
 800dc0c:	e17ffe15 	stw	r5,-8(fp)
 800dc10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800dc14:	e0fffe17 	ldw	r3,-8(fp)
 800dc18:	e0bffd17 	ldw	r2,-12(fp)
 800dc1c:	18800c26 	beq	r3,r2,800dc50 <alt_load_section+0x54>
  {
    while( to != end )
 800dc20:	00000806 	br	800dc44 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800dc24:	e0bffe17 	ldw	r2,-8(fp)
 800dc28:	10c00104 	addi	r3,r2,4
 800dc2c:	e0fffe15 	stw	r3,-8(fp)
 800dc30:	e0fffd17 	ldw	r3,-12(fp)
 800dc34:	19000104 	addi	r4,r3,4
 800dc38:	e13ffd15 	stw	r4,-12(fp)
 800dc3c:	18c00017 	ldw	r3,0(r3)
 800dc40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800dc44:	e0fffe17 	ldw	r3,-8(fp)
 800dc48:	e0bfff17 	ldw	r2,-4(fp)
 800dc4c:	18bff51e 	bne	r3,r2,800dc24 <__alt_data_end+0xfc00dc24>
    {
      *to++ = *from++;
    }
  }
}
 800dc50:	e037883a 	mov	sp,fp
 800dc54:	df000017 	ldw	fp,0(sp)
 800dc58:	dec00104 	addi	sp,sp,4
 800dc5c:	f800283a 	ret

0800dc60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800dc60:	defffe04 	addi	sp,sp,-8
 800dc64:	dfc00115 	stw	ra,4(sp)
 800dc68:	df000015 	stw	fp,0(sp)
 800dc6c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800dc70:	01020074 	movhi	r4,2049
 800dc74:	210bbe04 	addi	r4,r4,12024
 800dc78:	01420074 	movhi	r5,2049
 800dc7c:	2944c704 	addi	r5,r5,4892
 800dc80:	01820074 	movhi	r6,2049
 800dc84:	318bbe04 	addi	r6,r6,12024
 800dc88:	800dbfc0 	call	800dbfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800dc8c:	01020034 	movhi	r4,2048
 800dc90:	21000804 	addi	r4,r4,32
 800dc94:	01420034 	movhi	r5,2048
 800dc98:	29400804 	addi	r5,r5,32
 800dc9c:	01820034 	movhi	r6,2048
 800dca0:	31806f04 	addi	r6,r6,444
 800dca4:	800dbfc0 	call	800dbfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800dca8:	01020074 	movhi	r4,2049
 800dcac:	2103d104 	addi	r4,r4,3908
 800dcb0:	01420074 	movhi	r5,2049
 800dcb4:	2943d104 	addi	r5,r5,3908
 800dcb8:	01820074 	movhi	r6,2049
 800dcbc:	3184c704 	addi	r6,r6,4892
 800dcc0:	800dbfc0 	call	800dbfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800dcc4:	80101600 	call	8010160 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800dcc8:	80105a00 	call	80105a0 <alt_icache_flush_all>
}
 800dccc:	e037883a 	mov	sp,fp
 800dcd0:	dfc00117 	ldw	ra,4(sp)
 800dcd4:	df000017 	ldw	fp,0(sp)
 800dcd8:	dec00204 	addi	sp,sp,8
 800dcdc:	f800283a 	ret

0800dce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dce0:	defffe04 	addi	sp,sp,-8
 800dce4:	dfc00115 	stw	ra,4(sp)
 800dce8:	df000015 	stw	fp,0(sp)
 800dcec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dcf0:	00820074 	movhi	r2,2049
 800dcf4:	108bb904 	addi	r2,r2,12004
 800dcf8:	10800017 	ldw	r2,0(r2)
 800dcfc:	10000526 	beq	r2,zero,800dd14 <alt_get_errno+0x34>
 800dd00:	00820074 	movhi	r2,2049
 800dd04:	108bb904 	addi	r2,r2,12004
 800dd08:	10800017 	ldw	r2,0(r2)
 800dd0c:	103ee83a 	callr	r2
 800dd10:	00000206 	br	800dd1c <alt_get_errno+0x3c>
 800dd14:	00820074 	movhi	r2,2049
 800dd18:	1092b504 	addi	r2,r2,19156
}
 800dd1c:	e037883a 	mov	sp,fp
 800dd20:	dfc00117 	ldw	ra,4(sp)
 800dd24:	df000017 	ldw	fp,0(sp)
 800dd28:	dec00204 	addi	sp,sp,8
 800dd2c:	f800283a 	ret

0800dd30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800dd30:	defff904 	addi	sp,sp,-28
 800dd34:	dfc00615 	stw	ra,24(sp)
 800dd38:	df000515 	stw	fp,20(sp)
 800dd3c:	df000504 	addi	fp,sp,20
 800dd40:	e13ffd15 	stw	r4,-12(fp)
 800dd44:	e17ffe15 	stw	r5,-8(fp)
 800dd48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800dd4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dd50:	e0bffd17 	ldw	r2,-12(fp)
 800dd54:	10000816 	blt	r2,zero,800dd78 <lseek+0x48>
 800dd58:	e13ffd17 	ldw	r4,-12(fp)
 800dd5c:	01400304 	movi	r5,12
 800dd60:	800b0800 	call	800b080 <__mulsi3>
 800dd64:	1007883a 	mov	r3,r2
 800dd68:	00820074 	movhi	r2,2049
 800dd6c:	1086fa04 	addi	r2,r2,7144
 800dd70:	1885883a 	add	r2,r3,r2
 800dd74:	00000106 	br	800dd7c <lseek+0x4c>
 800dd78:	0005883a 	mov	r2,zero
 800dd7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800dd80:	e0bffc17 	ldw	r2,-16(fp)
 800dd84:	10001026 	beq	r2,zero,800ddc8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800dd88:	e0bffc17 	ldw	r2,-16(fp)
 800dd8c:	10800017 	ldw	r2,0(r2)
 800dd90:	10800717 	ldw	r2,28(r2)
 800dd94:	10000926 	beq	r2,zero,800ddbc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800dd98:	e0bffc17 	ldw	r2,-16(fp)
 800dd9c:	10800017 	ldw	r2,0(r2)
 800dda0:	10800717 	ldw	r2,28(r2)
 800dda4:	e13ffc17 	ldw	r4,-16(fp)
 800dda8:	e17ffe17 	ldw	r5,-8(fp)
 800ddac:	e1bfff17 	ldw	r6,-4(fp)
 800ddb0:	103ee83a 	callr	r2
 800ddb4:	e0bffb15 	stw	r2,-20(fp)
 800ddb8:	00000506 	br	800ddd0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800ddbc:	00bfde84 	movi	r2,-134
 800ddc0:	e0bffb15 	stw	r2,-20(fp)
 800ddc4:	00000206 	br	800ddd0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800ddc8:	00bfebc4 	movi	r2,-81
 800ddcc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800ddd0:	e0bffb17 	ldw	r2,-20(fp)
 800ddd4:	1000070e 	bge	r2,zero,800ddf4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800ddd8:	800dce00 	call	800dce0 <alt_get_errno>
 800dddc:	1007883a 	mov	r3,r2
 800dde0:	e0bffb17 	ldw	r2,-20(fp)
 800dde4:	0085c83a 	sub	r2,zero,r2
 800dde8:	18800015 	stw	r2,0(r3)
    rc = -1;
 800ddec:	00bfffc4 	movi	r2,-1
 800ddf0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800ddf4:	e0bffb17 	ldw	r2,-20(fp)
}
 800ddf8:	e037883a 	mov	sp,fp
 800ddfc:	dfc00117 	ldw	ra,4(sp)
 800de00:	df000017 	ldw	fp,0(sp)
 800de04:	dec00204 	addi	sp,sp,8
 800de08:	f800283a 	ret

0800de0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800de0c:	defffd04 	addi	sp,sp,-12
 800de10:	dfc00215 	stw	ra,8(sp)
 800de14:	df000115 	stw	fp,4(sp)
 800de18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800de1c:	0009883a 	mov	r4,zero
 800de20:	800e64c0 	call	800e64c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800de24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800de28:	800e6800 	call	800e680 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800de2c:	01020074 	movhi	r4,2049
 800de30:	2104b404 	addi	r4,r4,4816
 800de34:	01420074 	movhi	r5,2049
 800de38:	2944b404 	addi	r5,r5,4816
 800de3c:	01820074 	movhi	r6,2049
 800de40:	3184b404 	addi	r6,r6,4816
 800de44:	801096c0 	call	801096c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800de48:	80102700 	call	8010270 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800de4c:	01020074 	movhi	r4,2049
 800de50:	2100b304 	addi	r4,r4,716
 800de54:	8010ba00 	call	8010ba0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800de58:	d1270e17 	ldw	r4,-25544(gp)
 800de5c:	d0e70f17 	ldw	r3,-25540(gp)
 800de60:	d0a71017 	ldw	r2,-25536(gp)
 800de64:	180b883a 	mov	r5,r3
 800de68:	100d883a 	mov	r6,r2
 800de6c:	80002380 	call	8000238 <main>
 800de70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800de74:	01000044 	movi	r4,1
 800de78:	800d8f40 	call	800d8f4 <close>
  exit (result);
 800de7c:	e13fff17 	ldw	r4,-4(fp)
 800de80:	8010bb40 	call	8010bb4 <exit>

0800de84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800de84:	defffe04 	addi	sp,sp,-8
 800de88:	df000115 	stw	fp,4(sp)
 800de8c:	df000104 	addi	fp,sp,4
 800de90:	e13fff15 	stw	r4,-4(fp)
}
 800de94:	e037883a 	mov	sp,fp
 800de98:	df000017 	ldw	fp,0(sp)
 800de9c:	dec00104 	addi	sp,sp,4
 800dea0:	f800283a 	ret

0800dea4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800dea4:	defffe04 	addi	sp,sp,-8
 800dea8:	df000115 	stw	fp,4(sp)
 800deac:	df000104 	addi	fp,sp,4
 800deb0:	e13fff15 	stw	r4,-4(fp)
}
 800deb4:	e037883a 	mov	sp,fp
 800deb8:	df000017 	ldw	fp,0(sp)
 800debc:	dec00104 	addi	sp,sp,4
 800dec0:	f800283a 	ret

0800dec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dec4:	defffe04 	addi	sp,sp,-8
 800dec8:	dfc00115 	stw	ra,4(sp)
 800decc:	df000015 	stw	fp,0(sp)
 800ded0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ded4:	00820074 	movhi	r2,2049
 800ded8:	108bb904 	addi	r2,r2,12004
 800dedc:	10800017 	ldw	r2,0(r2)
 800dee0:	10000526 	beq	r2,zero,800def8 <alt_get_errno+0x34>
 800dee4:	00820074 	movhi	r2,2049
 800dee8:	108bb904 	addi	r2,r2,12004
 800deec:	10800017 	ldw	r2,0(r2)
 800def0:	103ee83a 	callr	r2
 800def4:	00000206 	br	800df00 <alt_get_errno+0x3c>
 800def8:	00820074 	movhi	r2,2049
 800defc:	1092b504 	addi	r2,r2,19156
}
 800df00:	e037883a 	mov	sp,fp
 800df04:	dfc00117 	ldw	ra,4(sp)
 800df08:	df000017 	ldw	fp,0(sp)
 800df0c:	dec00204 	addi	sp,sp,8
 800df10:	f800283a 	ret

0800df14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800df14:	defffb04 	addi	sp,sp,-20
 800df18:	dfc00415 	stw	ra,16(sp)
 800df1c:	df000315 	stw	fp,12(sp)
 800df20:	dc000215 	stw	r16,8(sp)
 800df24:	df000304 	addi	fp,sp,12
 800df28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800df2c:	e0bffe17 	ldw	r2,-8(fp)
 800df30:	10800217 	ldw	r2,8(r2)
 800df34:	10d00034 	orhi	r3,r2,16384
 800df38:	e0bffe17 	ldw	r2,-8(fp)
 800df3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800df40:	e03ffd15 	stw	zero,-12(fp)
 800df44:	00002306 	br	800dfd4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800df48:	04020074 	movhi	r16,2049
 800df4c:	8406fa04 	addi	r16,r16,7144
 800df50:	e0bffd17 	ldw	r2,-12(fp)
 800df54:	1009883a 	mov	r4,r2
 800df58:	01400304 	movi	r5,12
 800df5c:	800b0800 	call	800b080 <__mulsi3>
 800df60:	8085883a 	add	r2,r16,r2
 800df64:	10c00017 	ldw	r3,0(r2)
 800df68:	e0bffe17 	ldw	r2,-8(fp)
 800df6c:	10800017 	ldw	r2,0(r2)
 800df70:	1880151e 	bne	r3,r2,800dfc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800df74:	04020074 	movhi	r16,2049
 800df78:	8406fa04 	addi	r16,r16,7144
 800df7c:	e0bffd17 	ldw	r2,-12(fp)
 800df80:	1009883a 	mov	r4,r2
 800df84:	01400304 	movi	r5,12
 800df88:	800b0800 	call	800b080 <__mulsi3>
 800df8c:	8085883a 	add	r2,r16,r2
 800df90:	10800204 	addi	r2,r2,8
 800df94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800df98:	10000b0e 	bge	r2,zero,800dfc8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800df9c:	e13ffd17 	ldw	r4,-12(fp)
 800dfa0:	01400304 	movi	r5,12
 800dfa4:	800b0800 	call	800b080 <__mulsi3>
 800dfa8:	1007883a 	mov	r3,r2
 800dfac:	00820074 	movhi	r2,2049
 800dfb0:	1086fa04 	addi	r2,r2,7144
 800dfb4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800dfb8:	e0bffe17 	ldw	r2,-8(fp)
 800dfbc:	18800226 	beq	r3,r2,800dfc8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800dfc0:	00bffcc4 	movi	r2,-13
 800dfc4:	00000a06 	br	800dff0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800dfc8:	e0bffd17 	ldw	r2,-12(fp)
 800dfcc:	10800044 	addi	r2,r2,1
 800dfd0:	e0bffd15 	stw	r2,-12(fp)
 800dfd4:	00820074 	movhi	r2,2049
 800dfd8:	108bb804 	addi	r2,r2,12000
 800dfdc:	10800017 	ldw	r2,0(r2)
 800dfe0:	1007883a 	mov	r3,r2
 800dfe4:	e0bffd17 	ldw	r2,-12(fp)
 800dfe8:	18bfd72e 	bgeu	r3,r2,800df48 <__alt_data_end+0xfc00df48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800dfec:	0005883a 	mov	r2,zero
}
 800dff0:	e6ffff04 	addi	sp,fp,-4
 800dff4:	dfc00217 	ldw	ra,8(sp)
 800dff8:	df000117 	ldw	fp,4(sp)
 800dffc:	dc000017 	ldw	r16,0(sp)
 800e000:	dec00304 	addi	sp,sp,12
 800e004:	f800283a 	ret

0800e008 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e008:	defff604 	addi	sp,sp,-40
 800e00c:	dfc00915 	stw	ra,36(sp)
 800e010:	df000815 	stw	fp,32(sp)
 800e014:	df000804 	addi	fp,sp,32
 800e018:	e13ffd15 	stw	r4,-12(fp)
 800e01c:	e17ffe15 	stw	r5,-8(fp)
 800e020:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e024:	00bfffc4 	movi	r2,-1
 800e028:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800e02c:	00bffb44 	movi	r2,-19
 800e030:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800e034:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e038:	e13ffd17 	ldw	r4,-12(fp)
 800e03c:	01420074 	movhi	r5,2049
 800e040:	294bb604 	addi	r5,r5,11992
 800e044:	80103280 	call	8010328 <alt_find_dev>
 800e048:	e0bff815 	stw	r2,-32(fp)
 800e04c:	e0bff817 	ldw	r2,-32(fp)
 800e050:	1000051e 	bne	r2,zero,800e068 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e054:	e13ffd17 	ldw	r4,-12(fp)
 800e058:	80103b80 	call	80103b8 <alt_find_file>
 800e05c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800e060:	00800044 	movi	r2,1
 800e064:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e068:	e0bff817 	ldw	r2,-32(fp)
 800e06c:	10002b26 	beq	r2,zero,800e11c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e070:	e13ff817 	ldw	r4,-32(fp)
 800e074:	80104cc0 	call	80104cc <alt_get_fd>
 800e078:	e0bff915 	stw	r2,-28(fp)
 800e07c:	e0bff917 	ldw	r2,-28(fp)
 800e080:	1000030e 	bge	r2,zero,800e090 <open+0x88>
    {
      status = index;
 800e084:	e0bff917 	ldw	r2,-28(fp)
 800e088:	e0bffa15 	stw	r2,-24(fp)
 800e08c:	00002506 	br	800e124 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e090:	e13ff917 	ldw	r4,-28(fp)
 800e094:	01400304 	movi	r5,12
 800e098:	800b0800 	call	800b080 <__mulsi3>
 800e09c:	1007883a 	mov	r3,r2
 800e0a0:	00820074 	movhi	r2,2049
 800e0a4:	1086fa04 	addi	r2,r2,7144
 800e0a8:	1885883a 	add	r2,r3,r2
 800e0ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e0b0:	e0fffe17 	ldw	r3,-8(fp)
 800e0b4:	00900034 	movhi	r2,16384
 800e0b8:	10bfffc4 	addi	r2,r2,-1
 800e0bc:	1886703a 	and	r3,r3,r2
 800e0c0:	e0bffc17 	ldw	r2,-16(fp)
 800e0c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800e0c8:	e0bffb17 	ldw	r2,-20(fp)
 800e0cc:	1000051e 	bne	r2,zero,800e0e4 <open+0xdc>
 800e0d0:	e13ffc17 	ldw	r4,-16(fp)
 800e0d4:	800df140 	call	800df14 <alt_file_locked>
 800e0d8:	e0bffa15 	stw	r2,-24(fp)
 800e0dc:	e0bffa17 	ldw	r2,-24(fp)
 800e0e0:	10001016 	blt	r2,zero,800e124 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800e0e4:	e0bff817 	ldw	r2,-32(fp)
 800e0e8:	10800317 	ldw	r2,12(r2)
 800e0ec:	10000826 	beq	r2,zero,800e110 <open+0x108>
 800e0f0:	e0bff817 	ldw	r2,-32(fp)
 800e0f4:	10800317 	ldw	r2,12(r2)
 800e0f8:	e13ffc17 	ldw	r4,-16(fp)
 800e0fc:	e17ffd17 	ldw	r5,-12(fp)
 800e100:	e1bffe17 	ldw	r6,-8(fp)
 800e104:	e1ffff17 	ldw	r7,-4(fp)
 800e108:	103ee83a 	callr	r2
 800e10c:	00000106 	br	800e114 <open+0x10c>
 800e110:	0005883a 	mov	r2,zero
 800e114:	e0bffa15 	stw	r2,-24(fp)
 800e118:	00000206 	br	800e124 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800e11c:	00bffb44 	movi	r2,-19
 800e120:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800e124:	e0bffa17 	ldw	r2,-24(fp)
 800e128:	1000090e 	bge	r2,zero,800e150 <open+0x148>
  {
    alt_release_fd (index);  
 800e12c:	e13ff917 	ldw	r4,-28(fp)
 800e130:	800e2bc0 	call	800e2bc <alt_release_fd>
    ALT_ERRNO = -status;
 800e134:	800dec40 	call	800dec4 <alt_get_errno>
 800e138:	1007883a 	mov	r3,r2
 800e13c:	e0bffa17 	ldw	r2,-24(fp)
 800e140:	0085c83a 	sub	r2,zero,r2
 800e144:	18800015 	stw	r2,0(r3)
    return -1;
 800e148:	00bfffc4 	movi	r2,-1
 800e14c:	00000106 	br	800e154 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800e150:	e0bff917 	ldw	r2,-28(fp)
}
 800e154:	e037883a 	mov	sp,fp
 800e158:	dfc00117 	ldw	ra,4(sp)
 800e15c:	df000017 	ldw	fp,0(sp)
 800e160:	dec00204 	addi	sp,sp,8
 800e164:	f800283a 	ret

0800e168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e168:	defffe04 	addi	sp,sp,-8
 800e16c:	dfc00115 	stw	ra,4(sp)
 800e170:	df000015 	stw	fp,0(sp)
 800e174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e178:	00820074 	movhi	r2,2049
 800e17c:	108bb904 	addi	r2,r2,12004
 800e180:	10800017 	ldw	r2,0(r2)
 800e184:	10000526 	beq	r2,zero,800e19c <alt_get_errno+0x34>
 800e188:	00820074 	movhi	r2,2049
 800e18c:	108bb904 	addi	r2,r2,12004
 800e190:	10800017 	ldw	r2,0(r2)
 800e194:	103ee83a 	callr	r2
 800e198:	00000206 	br	800e1a4 <alt_get_errno+0x3c>
 800e19c:	00820074 	movhi	r2,2049
 800e1a0:	1092b504 	addi	r2,r2,19156
}
 800e1a4:	e037883a 	mov	sp,fp
 800e1a8:	dfc00117 	ldw	ra,4(sp)
 800e1ac:	df000017 	ldw	fp,0(sp)
 800e1b0:	dec00204 	addi	sp,sp,8
 800e1b4:	f800283a 	ret

0800e1b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800e1b8:	defff904 	addi	sp,sp,-28
 800e1bc:	dfc00615 	stw	ra,24(sp)
 800e1c0:	df000515 	stw	fp,20(sp)
 800e1c4:	df000504 	addi	fp,sp,20
 800e1c8:	e13ffd15 	stw	r4,-12(fp)
 800e1cc:	e17ffe15 	stw	r5,-8(fp)
 800e1d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e1d4:	e0bffd17 	ldw	r2,-12(fp)
 800e1d8:	10000816 	blt	r2,zero,800e1fc <read+0x44>
 800e1dc:	e13ffd17 	ldw	r4,-12(fp)
 800e1e0:	01400304 	movi	r5,12
 800e1e4:	800b0800 	call	800b080 <__mulsi3>
 800e1e8:	1007883a 	mov	r3,r2
 800e1ec:	00820074 	movhi	r2,2049
 800e1f0:	1086fa04 	addi	r2,r2,7144
 800e1f4:	1885883a 	add	r2,r3,r2
 800e1f8:	00000106 	br	800e200 <read+0x48>
 800e1fc:	0005883a 	mov	r2,zero
 800e200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e204:	e0bffb17 	ldw	r2,-20(fp)
 800e208:	10002226 	beq	r2,zero,800e294 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e20c:	e0bffb17 	ldw	r2,-20(fp)
 800e210:	10800217 	ldw	r2,8(r2)
 800e214:	108000cc 	andi	r2,r2,3
 800e218:	10800060 	cmpeqi	r2,r2,1
 800e21c:	1000181e 	bne	r2,zero,800e280 <read+0xc8>
        (fd->dev->read))
 800e220:	e0bffb17 	ldw	r2,-20(fp)
 800e224:	10800017 	ldw	r2,0(r2)
 800e228:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e22c:	10001426 	beq	r2,zero,800e280 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800e230:	e0bffb17 	ldw	r2,-20(fp)
 800e234:	10800017 	ldw	r2,0(r2)
 800e238:	10800517 	ldw	r2,20(r2)
 800e23c:	e0ffff17 	ldw	r3,-4(fp)
 800e240:	e13ffb17 	ldw	r4,-20(fp)
 800e244:	e17ffe17 	ldw	r5,-8(fp)
 800e248:	180d883a 	mov	r6,r3
 800e24c:	103ee83a 	callr	r2
 800e250:	e0bffc15 	stw	r2,-16(fp)
 800e254:	e0bffc17 	ldw	r2,-16(fp)
 800e258:	1000070e 	bge	r2,zero,800e278 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800e25c:	800e1680 	call	800e168 <alt_get_errno>
 800e260:	1007883a 	mov	r3,r2
 800e264:	e0bffc17 	ldw	r2,-16(fp)
 800e268:	0085c83a 	sub	r2,zero,r2
 800e26c:	18800015 	stw	r2,0(r3)
          return -1;
 800e270:	00bfffc4 	movi	r2,-1
 800e274:	00000c06 	br	800e2a8 <read+0xf0>
        }
        return rval;
 800e278:	e0bffc17 	ldw	r2,-16(fp)
 800e27c:	00000a06 	br	800e2a8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800e280:	800e1680 	call	800e168 <alt_get_errno>
 800e284:	1007883a 	mov	r3,r2
 800e288:	00800344 	movi	r2,13
 800e28c:	18800015 	stw	r2,0(r3)
 800e290:	00000406 	br	800e2a4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800e294:	800e1680 	call	800e168 <alt_get_errno>
 800e298:	1007883a 	mov	r3,r2
 800e29c:	00801444 	movi	r2,81
 800e2a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e2a4:	00bfffc4 	movi	r2,-1
}
 800e2a8:	e037883a 	mov	sp,fp
 800e2ac:	dfc00117 	ldw	ra,4(sp)
 800e2b0:	df000017 	ldw	fp,0(sp)
 800e2b4:	dec00204 	addi	sp,sp,8
 800e2b8:	f800283a 	ret

0800e2bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800e2bc:	defffc04 	addi	sp,sp,-16
 800e2c0:	dfc00315 	stw	ra,12(sp)
 800e2c4:	df000215 	stw	fp,8(sp)
 800e2c8:	dc000115 	stw	r16,4(sp)
 800e2cc:	df000204 	addi	fp,sp,8
 800e2d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800e2d4:	e0bffe17 	ldw	r2,-8(fp)
 800e2d8:	108000d0 	cmplti	r2,r2,3
 800e2dc:	1000111e 	bne	r2,zero,800e324 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800e2e0:	04020074 	movhi	r16,2049
 800e2e4:	8406fa04 	addi	r16,r16,7144
 800e2e8:	e0bffe17 	ldw	r2,-8(fp)
 800e2ec:	1009883a 	mov	r4,r2
 800e2f0:	01400304 	movi	r5,12
 800e2f4:	800b0800 	call	800b080 <__mulsi3>
 800e2f8:	8085883a 	add	r2,r16,r2
 800e2fc:	10800204 	addi	r2,r2,8
 800e300:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800e304:	04020074 	movhi	r16,2049
 800e308:	8406fa04 	addi	r16,r16,7144
 800e30c:	e0bffe17 	ldw	r2,-8(fp)
 800e310:	1009883a 	mov	r4,r2
 800e314:	01400304 	movi	r5,12
 800e318:	800b0800 	call	800b080 <__mulsi3>
 800e31c:	8085883a 	add	r2,r16,r2
 800e320:	10000015 	stw	zero,0(r2)
  }
}
 800e324:	e6ffff04 	addi	sp,fp,-4
 800e328:	dfc00217 	ldw	ra,8(sp)
 800e32c:	df000117 	ldw	fp,4(sp)
 800e330:	dc000017 	ldw	r16,0(sp)
 800e334:	dec00304 	addi	sp,sp,12
 800e338:	f800283a 	ret

0800e33c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800e33c:	defff904 	addi	sp,sp,-28
 800e340:	df000615 	stw	fp,24(sp)
 800e344:	df000604 	addi	fp,sp,24
 800e348:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e34c:	0005303a 	rdctl	r2,status
 800e350:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e354:	e0fffc17 	ldw	r3,-16(fp)
 800e358:	00bfff84 	movi	r2,-2
 800e35c:	1884703a 	and	r2,r3,r2
 800e360:	1001703a 	wrctl	status,r2
  
  return context;
 800e364:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800e368:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800e36c:	d0a00c17 	ldw	r2,-32720(gp)
 800e370:	10c000c4 	addi	r3,r2,3
 800e374:	00bfff04 	movi	r2,-4
 800e378:	1884703a 	and	r2,r3,r2
 800e37c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800e380:	d0e00c17 	ldw	r3,-32720(gp)
 800e384:	e0bfff17 	ldw	r2,-4(fp)
 800e388:	1887883a 	add	r3,r3,r2
 800e38c:	00830034 	movhi	r2,3072
 800e390:	10800004 	addi	r2,r2,0
 800e394:	10c0062e 	bgeu	r2,r3,800e3b0 <sbrk+0x74>
 800e398:	e0bffa17 	ldw	r2,-24(fp)
 800e39c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e3a0:	e0bffd17 	ldw	r2,-12(fp)
 800e3a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800e3a8:	00bfffc4 	movi	r2,-1
 800e3ac:	00000b06 	br	800e3dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800e3b0:	d0a00c17 	ldw	r2,-32720(gp)
 800e3b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800e3b8:	d0e00c17 	ldw	r3,-32720(gp)
 800e3bc:	e0bfff17 	ldw	r2,-4(fp)
 800e3c0:	1885883a 	add	r2,r3,r2
 800e3c4:	d0a00c15 	stw	r2,-32720(gp)
 800e3c8:	e0bffa17 	ldw	r2,-24(fp)
 800e3cc:	e0bffe15 	stw	r2,-8(fp)
 800e3d0:	e0bffe17 	ldw	r2,-8(fp)
 800e3d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800e3d8:	e0bffb17 	ldw	r2,-20(fp)
} 
 800e3dc:	e037883a 	mov	sp,fp
 800e3e0:	df000017 	ldw	fp,0(sp)
 800e3e4:	dec00104 	addi	sp,sp,4
 800e3e8:	f800283a 	ret

0800e3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e3ec:	defffe04 	addi	sp,sp,-8
 800e3f0:	dfc00115 	stw	ra,4(sp)
 800e3f4:	df000015 	stw	fp,0(sp)
 800e3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e3fc:	00820074 	movhi	r2,2049
 800e400:	108bb904 	addi	r2,r2,12004
 800e404:	10800017 	ldw	r2,0(r2)
 800e408:	10000526 	beq	r2,zero,800e420 <alt_get_errno+0x34>
 800e40c:	00820074 	movhi	r2,2049
 800e410:	108bb904 	addi	r2,r2,12004
 800e414:	10800017 	ldw	r2,0(r2)
 800e418:	103ee83a 	callr	r2
 800e41c:	00000206 	br	800e428 <alt_get_errno+0x3c>
 800e420:	00820074 	movhi	r2,2049
 800e424:	1092b504 	addi	r2,r2,19156
}
 800e428:	e037883a 	mov	sp,fp
 800e42c:	dfc00117 	ldw	ra,4(sp)
 800e430:	df000017 	ldw	fp,0(sp)
 800e434:	dec00204 	addi	sp,sp,8
 800e438:	f800283a 	ret

0800e43c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 800e43c:	defffc04 	addi	sp,sp,-16
 800e440:	dfc00315 	stw	ra,12(sp)
 800e444:	df000215 	stw	fp,8(sp)
 800e448:	df000204 	addi	fp,sp,8
 800e44c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e450:	00820074 	movhi	r2,2049
 800e454:	1092c104 	addi	r2,r2,19204
 800e458:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
 800e45c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e460:	00820074 	movhi	r2,2049
 800e464:	1092c004 	addi	r2,r2,19200
 800e468:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 800e46c:	1000061e 	bne	r2,zero,800e488 <times+0x4c>
  {
    ALT_ERRNO = ENOSYS;
 800e470:	800e3ec0 	call	800e3ec <alt_get_errno>
 800e474:	1007883a 	mov	r3,r2
 800e478:	00801604 	movi	r2,88
 800e47c:	18800015 	stw	r2,0(r3)
    return 0;
 800e480:	0005883a 	mov	r2,zero
 800e484:	00000a06 	br	800e4b0 <times+0x74>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 800e488:	e0bfff17 	ldw	r2,-4(fp)
 800e48c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 800e490:	e0bfff17 	ldw	r2,-4(fp)
 800e494:	e0fffe17 	ldw	r3,-8(fp)
 800e498:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 800e49c:	e0bfff17 	ldw	r2,-4(fp)
 800e4a0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 800e4a4:	e0bfff17 	ldw	r2,-4(fp)
 800e4a8:	10000315 	stw	zero,12(r2)

  return ticks;
 800e4ac:	e0bffe17 	ldw	r2,-8(fp)
}
 800e4b0:	e037883a 	mov	sp,fp
 800e4b4:	dfc00117 	ldw	ra,4(sp)
 800e4b8:	df000017 	ldw	fp,0(sp)
 800e4bc:	dec00204 	addi	sp,sp,8
 800e4c0:	f800283a 	ret

0800e4c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e4c4:	defffe04 	addi	sp,sp,-8
 800e4c8:	dfc00115 	stw	ra,4(sp)
 800e4cc:	df000015 	stw	fp,0(sp)
 800e4d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e4d4:	00820074 	movhi	r2,2049
 800e4d8:	108bb904 	addi	r2,r2,12004
 800e4dc:	10800017 	ldw	r2,0(r2)
 800e4e0:	10000526 	beq	r2,zero,800e4f8 <alt_get_errno+0x34>
 800e4e4:	00820074 	movhi	r2,2049
 800e4e8:	108bb904 	addi	r2,r2,12004
 800e4ec:	10800017 	ldw	r2,0(r2)
 800e4f0:	103ee83a 	callr	r2
 800e4f4:	00000206 	br	800e500 <alt_get_errno+0x3c>
 800e4f8:	00820074 	movhi	r2,2049
 800e4fc:	1092b504 	addi	r2,r2,19156
}
 800e500:	e037883a 	mov	sp,fp
 800e504:	dfc00117 	ldw	ra,4(sp)
 800e508:	df000017 	ldw	fp,0(sp)
 800e50c:	dec00204 	addi	sp,sp,8
 800e510:	f800283a 	ret

0800e514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800e514:	defff904 	addi	sp,sp,-28
 800e518:	dfc00615 	stw	ra,24(sp)
 800e51c:	df000515 	stw	fp,20(sp)
 800e520:	df000504 	addi	fp,sp,20
 800e524:	e13ffd15 	stw	r4,-12(fp)
 800e528:	e17ffe15 	stw	r5,-8(fp)
 800e52c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e530:	e0bffd17 	ldw	r2,-12(fp)
 800e534:	10000816 	blt	r2,zero,800e558 <write+0x44>
 800e538:	e13ffd17 	ldw	r4,-12(fp)
 800e53c:	01400304 	movi	r5,12
 800e540:	800b0800 	call	800b080 <__mulsi3>
 800e544:	1007883a 	mov	r3,r2
 800e548:	00820074 	movhi	r2,2049
 800e54c:	1086fa04 	addi	r2,r2,7144
 800e550:	1885883a 	add	r2,r3,r2
 800e554:	00000106 	br	800e55c <write+0x48>
 800e558:	0005883a 	mov	r2,zero
 800e55c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e560:	e0bffb17 	ldw	r2,-20(fp)
 800e564:	10002126 	beq	r2,zero,800e5ec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800e568:	e0bffb17 	ldw	r2,-20(fp)
 800e56c:	10800217 	ldw	r2,8(r2)
 800e570:	108000cc 	andi	r2,r2,3
 800e574:	10001826 	beq	r2,zero,800e5d8 <write+0xc4>
 800e578:	e0bffb17 	ldw	r2,-20(fp)
 800e57c:	10800017 	ldw	r2,0(r2)
 800e580:	10800617 	ldw	r2,24(r2)
 800e584:	10001426 	beq	r2,zero,800e5d8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800e588:	e0bffb17 	ldw	r2,-20(fp)
 800e58c:	10800017 	ldw	r2,0(r2)
 800e590:	10800617 	ldw	r2,24(r2)
 800e594:	e0ffff17 	ldw	r3,-4(fp)
 800e598:	e13ffb17 	ldw	r4,-20(fp)
 800e59c:	e17ffe17 	ldw	r5,-8(fp)
 800e5a0:	180d883a 	mov	r6,r3
 800e5a4:	103ee83a 	callr	r2
 800e5a8:	e0bffc15 	stw	r2,-16(fp)
 800e5ac:	e0bffc17 	ldw	r2,-16(fp)
 800e5b0:	1000070e 	bge	r2,zero,800e5d0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800e5b4:	800e4c40 	call	800e4c4 <alt_get_errno>
 800e5b8:	1007883a 	mov	r3,r2
 800e5bc:	e0bffc17 	ldw	r2,-16(fp)
 800e5c0:	0085c83a 	sub	r2,zero,r2
 800e5c4:	18800015 	stw	r2,0(r3)
        return -1;
 800e5c8:	00bfffc4 	movi	r2,-1
 800e5cc:	00000c06 	br	800e600 <write+0xec>
      }
      return rval;
 800e5d0:	e0bffc17 	ldw	r2,-16(fp)
 800e5d4:	00000a06 	br	800e600 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800e5d8:	800e4c40 	call	800e4c4 <alt_get_errno>
 800e5dc:	1007883a 	mov	r3,r2
 800e5e0:	00800344 	movi	r2,13
 800e5e4:	18800015 	stw	r2,0(r3)
 800e5e8:	00000406 	br	800e5fc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800e5ec:	800e4c40 	call	800e4c4 <alt_get_errno>
 800e5f0:	1007883a 	mov	r3,r2
 800e5f4:	00801444 	movi	r2,81
 800e5f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e5fc:	00bfffc4 	movi	r2,-1
}
 800e600:	e037883a 	mov	sp,fp
 800e604:	dfc00117 	ldw	ra,4(sp)
 800e608:	df000017 	ldw	fp,0(sp)
 800e60c:	dec00204 	addi	sp,sp,8
 800e610:	f800283a 	ret

0800e614 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800e614:	defffd04 	addi	sp,sp,-12
 800e618:	dfc00215 	stw	ra,8(sp)
 800e61c:	df000115 	stw	fp,4(sp)
 800e620:	df000104 	addi	fp,sp,4
 800e624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800e628:	e13fff17 	ldw	r4,-4(fp)
 800e62c:	01420074 	movhi	r5,2049
 800e630:	294bb604 	addi	r5,r5,11992
 800e634:	80101cc0 	call	80101cc <alt_dev_llist_insert>
}
 800e638:	e037883a 	mov	sp,fp
 800e63c:	dfc00117 	ldw	ra,4(sp)
 800e640:	df000017 	ldw	fp,0(sp)
 800e644:	dec00204 	addi	sp,sp,8
 800e648:	f800283a 	ret

0800e64c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800e64c:	defffd04 	addi	sp,sp,-12
 800e650:	dfc00215 	stw	ra,8(sp)
 800e654:	df000115 	stw	fp,4(sp)
 800e658:	df000104 	addi	fp,sp,4
 800e65c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800e660:	8010b800 	call	8010b80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800e664:	00800044 	movi	r2,1
 800e668:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800e66c:	e037883a 	mov	sp,fp
 800e670:	dfc00117 	ldw	ra,4(sp)
 800e674:	df000017 	ldw	fp,0(sp)
 800e678:	dec00204 	addi	sp,sp,8
 800e67c:	f800283a 	ret

0800e680 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800e680:	defffe04 	addi	sp,sp,-8
 800e684:	dfc00115 	stw	ra,4(sp)
 800e688:	df000015 	stw	fp,0(sp)
 800e68c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800e690:	01082004 	movi	r4,8320
 800e694:	000b883a 	mov	r5,zero
 800e698:	01800104 	movi	r6,4
 800e69c:	01c0fa04 	movi	r7,1000
 800e6a0:	800f1d00 	call	800f1d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800e6a4:	01020074 	movhi	r4,2049
 800e6a8:	21076404 	addi	r4,r4,7568
 800e6ac:	000b883a 	mov	r5,zero
 800e6b0:	01800144 	movi	r6,5
 800e6b4:	800e8740 	call	800e874 <altera_avalon_jtag_uart_init>
 800e6b8:	01020074 	movhi	r4,2049
 800e6bc:	21075a04 	addi	r4,r4,7528
 800e6c0:	800e6140 	call	800e614 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 800e6c4:	01020074 	movhi	r4,2049
 800e6c8:	210b7c04 	addi	r4,r4,11760
 800e6cc:	000b883a 	mov	r5,zero
 800e6d0:	000d883a 	mov	r6,zero
 800e6d4:	800f3680 	call	800f368 <altera_avalon_uart_init>
 800e6d8:	01020074 	movhi	r4,2049
 800e6dc:	210b7204 	addi	r4,r4,11720
 800e6e0:	800e6140 	call	800e614 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800e6e4:	01020074 	movhi	r4,2049
 800e6e8:	210ba304 	addi	r4,r4,11916
 800e6ec:	800fbf80 	call	800fbf8 <alt_up_character_lcd_init>
 800e6f0:	01020074 	movhi	r4,2049
 800e6f4:	210ba304 	addi	r4,r4,11916
 800e6f8:	800e6140 	call	800e614 <alt_dev_reg>
}
 800e6fc:	e037883a 	mov	sp,fp
 800e700:	dfc00117 	ldw	ra,4(sp)
 800e704:	df000017 	ldw	fp,0(sp)
 800e708:	dec00204 	addi	sp,sp,8
 800e70c:	f800283a 	ret

0800e710 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800e710:	defffa04 	addi	sp,sp,-24
 800e714:	dfc00515 	stw	ra,20(sp)
 800e718:	df000415 	stw	fp,16(sp)
 800e71c:	df000404 	addi	fp,sp,16
 800e720:	e13ffd15 	stw	r4,-12(fp)
 800e724:	e17ffe15 	stw	r5,-8(fp)
 800e728:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e72c:	e0bffd17 	ldw	r2,-12(fp)
 800e730:	10800017 	ldw	r2,0(r2)
 800e734:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800e738:	e0bffc17 	ldw	r2,-16(fp)
 800e73c:	10c00a04 	addi	r3,r2,40
 800e740:	e0bffd17 	ldw	r2,-12(fp)
 800e744:	10800217 	ldw	r2,8(r2)
 800e748:	1809883a 	mov	r4,r3
 800e74c:	e17ffe17 	ldw	r5,-8(fp)
 800e750:	e1bfff17 	ldw	r6,-4(fp)
 800e754:	100f883a 	mov	r7,r2
 800e758:	800ed380 	call	800ed38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800e75c:	e037883a 	mov	sp,fp
 800e760:	dfc00117 	ldw	ra,4(sp)
 800e764:	df000017 	ldw	fp,0(sp)
 800e768:	dec00204 	addi	sp,sp,8
 800e76c:	f800283a 	ret

0800e770 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800e770:	defffa04 	addi	sp,sp,-24
 800e774:	dfc00515 	stw	ra,20(sp)
 800e778:	df000415 	stw	fp,16(sp)
 800e77c:	df000404 	addi	fp,sp,16
 800e780:	e13ffd15 	stw	r4,-12(fp)
 800e784:	e17ffe15 	stw	r5,-8(fp)
 800e788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e78c:	e0bffd17 	ldw	r2,-12(fp)
 800e790:	10800017 	ldw	r2,0(r2)
 800e794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e798:	e0bffc17 	ldw	r2,-16(fp)
 800e79c:	10c00a04 	addi	r3,r2,40
 800e7a0:	e0bffd17 	ldw	r2,-12(fp)
 800e7a4:	10800217 	ldw	r2,8(r2)
 800e7a8:	1809883a 	mov	r4,r3
 800e7ac:	e17ffe17 	ldw	r5,-8(fp)
 800e7b0:	e1bfff17 	ldw	r6,-4(fp)
 800e7b4:	100f883a 	mov	r7,r2
 800e7b8:	800ef440 	call	800ef44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e7bc:	e037883a 	mov	sp,fp
 800e7c0:	dfc00117 	ldw	ra,4(sp)
 800e7c4:	df000017 	ldw	fp,0(sp)
 800e7c8:	dec00204 	addi	sp,sp,8
 800e7cc:	f800283a 	ret

0800e7d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e7d0:	defffc04 	addi	sp,sp,-16
 800e7d4:	dfc00315 	stw	ra,12(sp)
 800e7d8:	df000215 	stw	fp,8(sp)
 800e7dc:	df000204 	addi	fp,sp,8
 800e7e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e7e4:	e0bfff17 	ldw	r2,-4(fp)
 800e7e8:	10800017 	ldw	r2,0(r2)
 800e7ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e7f0:	e0bffe17 	ldw	r2,-8(fp)
 800e7f4:	10c00a04 	addi	r3,r2,40
 800e7f8:	e0bfff17 	ldw	r2,-4(fp)
 800e7fc:	10800217 	ldw	r2,8(r2)
 800e800:	1809883a 	mov	r4,r3
 800e804:	100b883a 	mov	r5,r2
 800e808:	800ebe40 	call	800ebe4 <altera_avalon_jtag_uart_close>
}
 800e80c:	e037883a 	mov	sp,fp
 800e810:	dfc00117 	ldw	ra,4(sp)
 800e814:	df000017 	ldw	fp,0(sp)
 800e818:	dec00204 	addi	sp,sp,8
 800e81c:	f800283a 	ret

0800e820 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e820:	defffa04 	addi	sp,sp,-24
 800e824:	dfc00515 	stw	ra,20(sp)
 800e828:	df000415 	stw	fp,16(sp)
 800e82c:	df000404 	addi	fp,sp,16
 800e830:	e13ffd15 	stw	r4,-12(fp)
 800e834:	e17ffe15 	stw	r5,-8(fp)
 800e838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e83c:	e0bffd17 	ldw	r2,-12(fp)
 800e840:	10800017 	ldw	r2,0(r2)
 800e844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e848:	e0bffc17 	ldw	r2,-16(fp)
 800e84c:	10800a04 	addi	r2,r2,40
 800e850:	1009883a 	mov	r4,r2
 800e854:	e17ffe17 	ldw	r5,-8(fp)
 800e858:	e1bfff17 	ldw	r6,-4(fp)
 800e85c:	800ec4c0 	call	800ec4c <altera_avalon_jtag_uart_ioctl>
}
 800e860:	e037883a 	mov	sp,fp
 800e864:	dfc00117 	ldw	ra,4(sp)
 800e868:	df000017 	ldw	fp,0(sp)
 800e86c:	dec00204 	addi	sp,sp,8
 800e870:	f800283a 	ret

0800e874 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e874:	defffa04 	addi	sp,sp,-24
 800e878:	dfc00515 	stw	ra,20(sp)
 800e87c:	df000415 	stw	fp,16(sp)
 800e880:	df000404 	addi	fp,sp,16
 800e884:	e13ffd15 	stw	r4,-12(fp)
 800e888:	e17ffe15 	stw	r5,-8(fp)
 800e88c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e890:	e0bffd17 	ldw	r2,-12(fp)
 800e894:	00c00044 	movi	r3,1
 800e898:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e89c:	e0bffd17 	ldw	r2,-12(fp)
 800e8a0:	10800017 	ldw	r2,0(r2)
 800e8a4:	10800104 	addi	r2,r2,4
 800e8a8:	1007883a 	mov	r3,r2
 800e8ac:	e0bffd17 	ldw	r2,-12(fp)
 800e8b0:	10800817 	ldw	r2,32(r2)
 800e8b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e8b8:	e0fffe17 	ldw	r3,-8(fp)
 800e8bc:	e0bfff17 	ldw	r2,-4(fp)
 800e8c0:	d8000015 	stw	zero,0(sp)
 800e8c4:	1809883a 	mov	r4,r3
 800e8c8:	100b883a 	mov	r5,r2
 800e8cc:	01820074 	movhi	r6,2049
 800e8d0:	31ba4e04 	addi	r6,r6,-5832
 800e8d4:	e1fffd17 	ldw	r7,-12(fp)
 800e8d8:	80105bc0 	call	80105bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e8dc:	e0bffd17 	ldw	r2,-12(fp)
 800e8e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e8e4:	e0bffd17 	ldw	r2,-12(fp)
 800e8e8:	10c00204 	addi	r3,r2,8
 800e8ec:	00820074 	movhi	r2,2049
 800e8f0:	1092c004 	addi	r2,r2,19200
 800e8f4:	10800017 	ldw	r2,0(r2)
 800e8f8:	1809883a 	mov	r4,r3
 800e8fc:	100b883a 	mov	r5,r2
 800e900:	01820074 	movhi	r6,2049
 800e904:	31bacf04 	addi	r6,r6,-5316
 800e908:	e1fffd17 	ldw	r7,-12(fp)
 800e90c:	80100200 	call	8010020 <alt_alarm_start>
 800e910:	1000040e 	bge	r2,zero,800e924 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e914:	e0fffd17 	ldw	r3,-12(fp)
 800e918:	00a00034 	movhi	r2,32768
 800e91c:	10bfffc4 	addi	r2,r2,-1
 800e920:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e924:	e037883a 	mov	sp,fp
 800e928:	dfc00117 	ldw	ra,4(sp)
 800e92c:	df000017 	ldw	fp,0(sp)
 800e930:	dec00204 	addi	sp,sp,8
 800e934:	f800283a 	ret

0800e938 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e938:	defff804 	addi	sp,sp,-32
 800e93c:	df000715 	stw	fp,28(sp)
 800e940:	df000704 	addi	fp,sp,28
 800e944:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e948:	e0bfff17 	ldw	r2,-4(fp)
 800e94c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e950:	e0bffb17 	ldw	r2,-20(fp)
 800e954:	10800017 	ldw	r2,0(r2)
 800e958:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e95c:	e0bffc17 	ldw	r2,-16(fp)
 800e960:	10800104 	addi	r2,r2,4
 800e964:	10800037 	ldwio	r2,0(r2)
 800e968:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e96c:	e0bffd17 	ldw	r2,-12(fp)
 800e970:	1080c00c 	andi	r2,r2,768
 800e974:	1000011e 	bne	r2,zero,800e97c <altera_avalon_jtag_uart_irq+0x44>
      break;
 800e978:	00006c06 	br	800eb2c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e97c:	e0bffd17 	ldw	r2,-12(fp)
 800e980:	1080400c 	andi	r2,r2,256
 800e984:	10003426 	beq	r2,zero,800ea58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e988:	00800074 	movhi	r2,1
 800e98c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e990:	e0bffb17 	ldw	r2,-20(fp)
 800e994:	10800a17 	ldw	r2,40(r2)
 800e998:	10800044 	addi	r2,r2,1
 800e99c:	1081ffcc 	andi	r2,r2,2047
 800e9a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e9a4:	e0bffb17 	ldw	r2,-20(fp)
 800e9a8:	10c00b17 	ldw	r3,44(r2)
 800e9ac:	e0bffe17 	ldw	r2,-8(fp)
 800e9b0:	1880011e 	bne	r3,r2,800e9b8 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800e9b4:	00001606 	br	800ea10 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e9b8:	e0bffc17 	ldw	r2,-16(fp)
 800e9bc:	10800037 	ldwio	r2,0(r2)
 800e9c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e9c4:	e0bff917 	ldw	r2,-28(fp)
 800e9c8:	10a0000c 	andi	r2,r2,32768
 800e9cc:	1000011e 	bne	r2,zero,800e9d4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800e9d0:	00000f06 	br	800ea10 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e9d4:	e0bffb17 	ldw	r2,-20(fp)
 800e9d8:	10800a17 	ldw	r2,40(r2)
 800e9dc:	e0fff917 	ldw	r3,-28(fp)
 800e9e0:	1809883a 	mov	r4,r3
 800e9e4:	e0fffb17 	ldw	r3,-20(fp)
 800e9e8:	1885883a 	add	r2,r3,r2
 800e9ec:	10800e04 	addi	r2,r2,56
 800e9f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e9f4:	e0bffb17 	ldw	r2,-20(fp)
 800e9f8:	10800a17 	ldw	r2,40(r2)
 800e9fc:	10800044 	addi	r2,r2,1
 800ea00:	10c1ffcc 	andi	r3,r2,2047
 800ea04:	e0bffb17 	ldw	r2,-20(fp)
 800ea08:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800ea0c:	003fe006 	br	800e990 <__alt_data_end+0xfc00e990>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800ea10:	e0bff917 	ldw	r2,-28(fp)
 800ea14:	10bfffec 	andhi	r2,r2,65535
 800ea18:	10000f26 	beq	r2,zero,800ea58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ea1c:	e0bffb17 	ldw	r2,-20(fp)
 800ea20:	10c00817 	ldw	r3,32(r2)
 800ea24:	00bfff84 	movi	r2,-2
 800ea28:	1886703a 	and	r3,r3,r2
 800ea2c:	e0bffb17 	ldw	r2,-20(fp)
 800ea30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800ea34:	e0bffc17 	ldw	r2,-16(fp)
 800ea38:	10800104 	addi	r2,r2,4
 800ea3c:	1007883a 	mov	r3,r2
 800ea40:	e0bffb17 	ldw	r2,-20(fp)
 800ea44:	10800817 	ldw	r2,32(r2)
 800ea48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ea4c:	e0bffc17 	ldw	r2,-16(fp)
 800ea50:	10800104 	addi	r2,r2,4
 800ea54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800ea58:	e0bffd17 	ldw	r2,-12(fp)
 800ea5c:	1080800c 	andi	r2,r2,512
 800ea60:	10003126 	beq	r2,zero,800eb28 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800ea64:	e0bffd17 	ldw	r2,-12(fp)
 800ea68:	1004d43a 	srli	r2,r2,16
 800ea6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ea70:	00001406 	br	800eac4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800ea74:	e0bffc17 	ldw	r2,-16(fp)
 800ea78:	e0fffb17 	ldw	r3,-20(fp)
 800ea7c:	18c00d17 	ldw	r3,52(r3)
 800ea80:	e13ffb17 	ldw	r4,-20(fp)
 800ea84:	20c7883a 	add	r3,r4,r3
 800ea88:	18c20e04 	addi	r3,r3,2104
 800ea8c:	18c00003 	ldbu	r3,0(r3)
 800ea90:	18c03fcc 	andi	r3,r3,255
 800ea94:	18c0201c 	xori	r3,r3,128
 800ea98:	18ffe004 	addi	r3,r3,-128
 800ea9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800eaa0:	e0bffb17 	ldw	r2,-20(fp)
 800eaa4:	10800d17 	ldw	r2,52(r2)
 800eaa8:	10800044 	addi	r2,r2,1
 800eaac:	10c1ffcc 	andi	r3,r2,2047
 800eab0:	e0bffb17 	ldw	r2,-20(fp)
 800eab4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800eab8:	e0bffa17 	ldw	r2,-24(fp)
 800eabc:	10bfffc4 	addi	r2,r2,-1
 800eac0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800eac4:	e0bffa17 	ldw	r2,-24(fp)
 800eac8:	10000526 	beq	r2,zero,800eae0 <altera_avalon_jtag_uart_irq+0x1a8>
 800eacc:	e0bffb17 	ldw	r2,-20(fp)
 800ead0:	10c00d17 	ldw	r3,52(r2)
 800ead4:	e0bffb17 	ldw	r2,-20(fp)
 800ead8:	10800c17 	ldw	r2,48(r2)
 800eadc:	18bfe51e 	bne	r3,r2,800ea74 <__alt_data_end+0xfc00ea74>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800eae0:	e0bffa17 	ldw	r2,-24(fp)
 800eae4:	10001026 	beq	r2,zero,800eb28 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800eae8:	e0bffb17 	ldw	r2,-20(fp)
 800eaec:	10c00817 	ldw	r3,32(r2)
 800eaf0:	00bfff44 	movi	r2,-3
 800eaf4:	1886703a 	and	r3,r3,r2
 800eaf8:	e0bffb17 	ldw	r2,-20(fp)
 800eafc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800eb00:	e0bffb17 	ldw	r2,-20(fp)
 800eb04:	10800017 	ldw	r2,0(r2)
 800eb08:	10800104 	addi	r2,r2,4
 800eb0c:	1007883a 	mov	r3,r2
 800eb10:	e0bffb17 	ldw	r2,-20(fp)
 800eb14:	10800817 	ldw	r2,32(r2)
 800eb18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800eb1c:	e0bffc17 	ldw	r2,-16(fp)
 800eb20:	10800104 	addi	r2,r2,4
 800eb24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800eb28:	003f8c06 	br	800e95c <__alt_data_end+0xfc00e95c>
}
 800eb2c:	e037883a 	mov	sp,fp
 800eb30:	df000017 	ldw	fp,0(sp)
 800eb34:	dec00104 	addi	sp,sp,4
 800eb38:	f800283a 	ret

0800eb3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800eb3c:	defff804 	addi	sp,sp,-32
 800eb40:	df000715 	stw	fp,28(sp)
 800eb44:	df000704 	addi	fp,sp,28
 800eb48:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800eb4c:	e0bffb17 	ldw	r2,-20(fp)
 800eb50:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800eb54:	e0bff917 	ldw	r2,-28(fp)
 800eb58:	10800017 	ldw	r2,0(r2)
 800eb5c:	10800104 	addi	r2,r2,4
 800eb60:	10800037 	ldwio	r2,0(r2)
 800eb64:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800eb68:	e0bffa17 	ldw	r2,-24(fp)
 800eb6c:	1081000c 	andi	r2,r2,1024
 800eb70:	10000b26 	beq	r2,zero,800eba0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800eb74:	e0bff917 	ldw	r2,-28(fp)
 800eb78:	10800017 	ldw	r2,0(r2)
 800eb7c:	10800104 	addi	r2,r2,4
 800eb80:	1007883a 	mov	r3,r2
 800eb84:	e0bff917 	ldw	r2,-28(fp)
 800eb88:	10800817 	ldw	r2,32(r2)
 800eb8c:	10810014 	ori	r2,r2,1024
 800eb90:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800eb94:	e0bff917 	ldw	r2,-28(fp)
 800eb98:	10000915 	stw	zero,36(r2)
 800eb9c:	00000a06 	br	800ebc8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800eba0:	e0bff917 	ldw	r2,-28(fp)
 800eba4:	10c00917 	ldw	r3,36(r2)
 800eba8:	00a00034 	movhi	r2,32768
 800ebac:	10bfff04 	addi	r2,r2,-4
 800ebb0:	10c00536 	bltu	r2,r3,800ebc8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800ebb4:	e0bff917 	ldw	r2,-28(fp)
 800ebb8:	10800917 	ldw	r2,36(r2)
 800ebbc:	10c00044 	addi	r3,r2,1
 800ebc0:	e0bff917 	ldw	r2,-28(fp)
 800ebc4:	10c00915 	stw	r3,36(r2)
 800ebc8:	00820074 	movhi	r2,2049
 800ebcc:	1092c004 	addi	r2,r2,19200
 800ebd0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800ebd4:	e037883a 	mov	sp,fp
 800ebd8:	df000017 	ldw	fp,0(sp)
 800ebdc:	dec00104 	addi	sp,sp,4
 800ebe0:	f800283a 	ret

0800ebe4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800ebe4:	defffd04 	addi	sp,sp,-12
 800ebe8:	df000215 	stw	fp,8(sp)
 800ebec:	df000204 	addi	fp,sp,8
 800ebf0:	e13ffe15 	stw	r4,-8(fp)
 800ebf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800ebf8:	00000506 	br	800ec10 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800ebfc:	e0bfff17 	ldw	r2,-4(fp)
 800ec00:	1090000c 	andi	r2,r2,16384
 800ec04:	10000226 	beq	r2,zero,800ec10 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800ec08:	00bffd44 	movi	r2,-11
 800ec0c:	00000b06 	br	800ec3c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800ec10:	e0bffe17 	ldw	r2,-8(fp)
 800ec14:	10c00d17 	ldw	r3,52(r2)
 800ec18:	e0bffe17 	ldw	r2,-8(fp)
 800ec1c:	10800c17 	ldw	r2,48(r2)
 800ec20:	18800526 	beq	r3,r2,800ec38 <altera_avalon_jtag_uart_close+0x54>
 800ec24:	e0bffe17 	ldw	r2,-8(fp)
 800ec28:	10c00917 	ldw	r3,36(r2)
 800ec2c:	e0bffe17 	ldw	r2,-8(fp)
 800ec30:	10800117 	ldw	r2,4(r2)
 800ec34:	18bff136 	bltu	r3,r2,800ebfc <__alt_data_end+0xfc00ebfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800ec38:	0005883a 	mov	r2,zero
}
 800ec3c:	e037883a 	mov	sp,fp
 800ec40:	df000017 	ldw	fp,0(sp)
 800ec44:	dec00104 	addi	sp,sp,4
 800ec48:	f800283a 	ret

0800ec4c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800ec4c:	defffa04 	addi	sp,sp,-24
 800ec50:	df000515 	stw	fp,20(sp)
 800ec54:	df000504 	addi	fp,sp,20
 800ec58:	e13ffd15 	stw	r4,-12(fp)
 800ec5c:	e17ffe15 	stw	r5,-8(fp)
 800ec60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800ec64:	00bff9c4 	movi	r2,-25
 800ec68:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800ec6c:	e0bffe17 	ldw	r2,-8(fp)
 800ec70:	10da8060 	cmpeqi	r3,r2,27137
 800ec74:	1800031e 	bne	r3,zero,800ec84 <altera_avalon_jtag_uart_ioctl+0x38>
 800ec78:	109a80a0 	cmpeqi	r2,r2,27138
 800ec7c:	1000191e 	bne	r2,zero,800ece4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800ec80:	00002806 	br	800ed24 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800ec84:	e0bffd17 	ldw	r2,-12(fp)
 800ec88:	10c00117 	ldw	r3,4(r2)
 800ec8c:	00a00034 	movhi	r2,32768
 800ec90:	10bfffc4 	addi	r2,r2,-1
 800ec94:	18801226 	beq	r3,r2,800ece0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800ec98:	e0bfff17 	ldw	r2,-4(fp)
 800ec9c:	10800017 	ldw	r2,0(r2)
 800eca0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800eca4:	e0bffc17 	ldw	r2,-16(fp)
 800eca8:	10800090 	cmplti	r2,r2,2
 800ecac:	1000061e 	bne	r2,zero,800ecc8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800ecb0:	e0fffc17 	ldw	r3,-16(fp)
 800ecb4:	00a00034 	movhi	r2,32768
 800ecb8:	10bfffc4 	addi	r2,r2,-1
 800ecbc:	18800226 	beq	r3,r2,800ecc8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800ecc0:	e0bffc17 	ldw	r2,-16(fp)
 800ecc4:	00000206 	br	800ecd0 <altera_avalon_jtag_uart_ioctl+0x84>
 800ecc8:	00a00034 	movhi	r2,32768
 800eccc:	10bfff84 	addi	r2,r2,-2
 800ecd0:	e0fffd17 	ldw	r3,-12(fp)
 800ecd4:	18800115 	stw	r2,4(r3)
      rc = 0;
 800ecd8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800ecdc:	00001106 	br	800ed24 <altera_avalon_jtag_uart_ioctl+0xd8>
 800ece0:	00001006 	br	800ed24 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800ece4:	e0bffd17 	ldw	r2,-12(fp)
 800ece8:	10c00117 	ldw	r3,4(r2)
 800ecec:	00a00034 	movhi	r2,32768
 800ecf0:	10bfffc4 	addi	r2,r2,-1
 800ecf4:	18800a26 	beq	r3,r2,800ed20 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800ecf8:	e0bffd17 	ldw	r2,-12(fp)
 800ecfc:	10c00917 	ldw	r3,36(r2)
 800ed00:	e0bffd17 	ldw	r2,-12(fp)
 800ed04:	10800117 	ldw	r2,4(r2)
 800ed08:	1885803a 	cmpltu	r2,r3,r2
 800ed0c:	10c03fcc 	andi	r3,r2,255
 800ed10:	e0bfff17 	ldw	r2,-4(fp)
 800ed14:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800ed18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800ed1c:	00000006 	br	800ed20 <altera_avalon_jtag_uart_ioctl+0xd4>
 800ed20:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800ed24:	e0bffb17 	ldw	r2,-20(fp)
}
 800ed28:	e037883a 	mov	sp,fp
 800ed2c:	df000017 	ldw	fp,0(sp)
 800ed30:	dec00104 	addi	sp,sp,4
 800ed34:	f800283a 	ret

0800ed38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800ed38:	defff304 	addi	sp,sp,-52
 800ed3c:	dfc00c15 	stw	ra,48(sp)
 800ed40:	df000b15 	stw	fp,44(sp)
 800ed44:	df000b04 	addi	fp,sp,44
 800ed48:	e13ffc15 	stw	r4,-16(fp)
 800ed4c:	e17ffd15 	stw	r5,-12(fp)
 800ed50:	e1bffe15 	stw	r6,-8(fp)
 800ed54:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800ed58:	e0bffd17 	ldw	r2,-12(fp)
 800ed5c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800ed60:	00004906 	br	800ee88 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800ed64:	e0bffc17 	ldw	r2,-16(fp)
 800ed68:	10800a17 	ldw	r2,40(r2)
 800ed6c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800ed70:	e0bffc17 	ldw	r2,-16(fp)
 800ed74:	10800b17 	ldw	r2,44(r2)
 800ed78:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800ed7c:	e0fff717 	ldw	r3,-36(fp)
 800ed80:	e0bff817 	ldw	r2,-32(fp)
 800ed84:	18800536 	bltu	r3,r2,800ed9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800ed88:	e0fff717 	ldw	r3,-36(fp)
 800ed8c:	e0bff817 	ldw	r2,-32(fp)
 800ed90:	1885c83a 	sub	r2,r3,r2
 800ed94:	e0bff615 	stw	r2,-40(fp)
 800ed98:	00000406 	br	800edac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800ed9c:	00c20004 	movi	r3,2048
 800eda0:	e0bff817 	ldw	r2,-32(fp)
 800eda4:	1885c83a 	sub	r2,r3,r2
 800eda8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800edac:	e0bff617 	ldw	r2,-40(fp)
 800edb0:	1000011e 	bne	r2,zero,800edb8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800edb4:	00001d06 	br	800ee2c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800edb8:	e0fffe17 	ldw	r3,-8(fp)
 800edbc:	e0bff617 	ldw	r2,-40(fp)
 800edc0:	1880022e 	bgeu	r3,r2,800edcc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800edc4:	e0bffe17 	ldw	r2,-8(fp)
 800edc8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800edcc:	e0bff817 	ldw	r2,-32(fp)
 800edd0:	10800e04 	addi	r2,r2,56
 800edd4:	e0fffc17 	ldw	r3,-16(fp)
 800edd8:	1885883a 	add	r2,r3,r2
 800eddc:	e13ff517 	ldw	r4,-44(fp)
 800ede0:	100b883a 	mov	r5,r2
 800ede4:	e1bff617 	ldw	r6,-40(fp)
 800ede8:	80022dc0 	call	80022dc <memcpy>
      ptr   += n;
 800edec:	e0fff517 	ldw	r3,-44(fp)
 800edf0:	e0bff617 	ldw	r2,-40(fp)
 800edf4:	1885883a 	add	r2,r3,r2
 800edf8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800edfc:	e0fffe17 	ldw	r3,-8(fp)
 800ee00:	e0bff617 	ldw	r2,-40(fp)
 800ee04:	1885c83a 	sub	r2,r3,r2
 800ee08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ee0c:	e0fff817 	ldw	r3,-32(fp)
 800ee10:	e0bff617 	ldw	r2,-40(fp)
 800ee14:	1885883a 	add	r2,r3,r2
 800ee18:	10c1ffcc 	andi	r3,r2,2047
 800ee1c:	e0bffc17 	ldw	r2,-16(fp)
 800ee20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800ee24:	e0bffe17 	ldw	r2,-8(fp)
 800ee28:	00bfce16 	blt	zero,r2,800ed64 <__alt_data_end+0xfc00ed64>

    /* If we read any data then return it */
    if (ptr != buffer)
 800ee2c:	e0fff517 	ldw	r3,-44(fp)
 800ee30:	e0bffd17 	ldw	r2,-12(fp)
 800ee34:	18800126 	beq	r3,r2,800ee3c <altera_avalon_jtag_uart_read+0x104>
      break;
 800ee38:	00001506 	br	800ee90 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800ee3c:	e0bfff17 	ldw	r2,-4(fp)
 800ee40:	1090000c 	andi	r2,r2,16384
 800ee44:	10000126 	beq	r2,zero,800ee4c <altera_avalon_jtag_uart_read+0x114>
      break;
 800ee48:	00001106 	br	800ee90 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800ee4c:	0001883a 	nop
 800ee50:	e0bffc17 	ldw	r2,-16(fp)
 800ee54:	10c00a17 	ldw	r3,40(r2)
 800ee58:	e0bff717 	ldw	r2,-36(fp)
 800ee5c:	1880051e 	bne	r3,r2,800ee74 <altera_avalon_jtag_uart_read+0x13c>
 800ee60:	e0bffc17 	ldw	r2,-16(fp)
 800ee64:	10c00917 	ldw	r3,36(r2)
 800ee68:	e0bffc17 	ldw	r2,-16(fp)
 800ee6c:	10800117 	ldw	r2,4(r2)
 800ee70:	18bff736 	bltu	r3,r2,800ee50 <__alt_data_end+0xfc00ee50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800ee74:	e0bffc17 	ldw	r2,-16(fp)
 800ee78:	10c00a17 	ldw	r3,40(r2)
 800ee7c:	e0bff717 	ldw	r2,-36(fp)
 800ee80:	1880011e 	bne	r3,r2,800ee88 <altera_avalon_jtag_uart_read+0x150>
      break;
 800ee84:	00000206 	br	800ee90 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800ee88:	e0bffe17 	ldw	r2,-8(fp)
 800ee8c:	00bfb516 	blt	zero,r2,800ed64 <__alt_data_end+0xfc00ed64>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800ee90:	e0fff517 	ldw	r3,-44(fp)
 800ee94:	e0bffd17 	ldw	r2,-12(fp)
 800ee98:	18801826 	beq	r3,r2,800eefc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ee9c:	0005303a 	rdctl	r2,status
 800eea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eea4:	e0fffa17 	ldw	r3,-24(fp)
 800eea8:	00bfff84 	movi	r2,-2
 800eeac:	1884703a 	and	r2,r3,r2
 800eeb0:	1001703a 	wrctl	status,r2
  
  return context;
 800eeb4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800eeb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800eebc:	e0bffc17 	ldw	r2,-16(fp)
 800eec0:	10800817 	ldw	r2,32(r2)
 800eec4:	10c00054 	ori	r3,r2,1
 800eec8:	e0bffc17 	ldw	r2,-16(fp)
 800eecc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800eed0:	e0bffc17 	ldw	r2,-16(fp)
 800eed4:	10800017 	ldw	r2,0(r2)
 800eed8:	10800104 	addi	r2,r2,4
 800eedc:	1007883a 	mov	r3,r2
 800eee0:	e0bffc17 	ldw	r2,-16(fp)
 800eee4:	10800817 	ldw	r2,32(r2)
 800eee8:	18800035 	stwio	r2,0(r3)
 800eeec:	e0bff917 	ldw	r2,-28(fp)
 800eef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eef4:	e0bffb17 	ldw	r2,-20(fp)
 800eef8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800eefc:	e0fff517 	ldw	r3,-44(fp)
 800ef00:	e0bffd17 	ldw	r2,-12(fp)
 800ef04:	18800426 	beq	r3,r2,800ef18 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800ef08:	e0fff517 	ldw	r3,-44(fp)
 800ef0c:	e0bffd17 	ldw	r2,-12(fp)
 800ef10:	1885c83a 	sub	r2,r3,r2
 800ef14:	00000606 	br	800ef30 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800ef18:	e0bfff17 	ldw	r2,-4(fp)
 800ef1c:	1090000c 	andi	r2,r2,16384
 800ef20:	10000226 	beq	r2,zero,800ef2c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800ef24:	00bffd44 	movi	r2,-11
 800ef28:	00000106 	br	800ef30 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800ef2c:	00bffec4 	movi	r2,-5
}
 800ef30:	e037883a 	mov	sp,fp
 800ef34:	dfc00117 	ldw	ra,4(sp)
 800ef38:	df000017 	ldw	fp,0(sp)
 800ef3c:	dec00204 	addi	sp,sp,8
 800ef40:	f800283a 	ret

0800ef44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800ef44:	defff304 	addi	sp,sp,-52
 800ef48:	dfc00c15 	stw	ra,48(sp)
 800ef4c:	df000b15 	stw	fp,44(sp)
 800ef50:	df000b04 	addi	fp,sp,44
 800ef54:	e13ffc15 	stw	r4,-16(fp)
 800ef58:	e17ffd15 	stw	r5,-12(fp)
 800ef5c:	e1bffe15 	stw	r6,-8(fp)
 800ef60:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800ef64:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800ef68:	e0bffd17 	ldw	r2,-12(fp)
 800ef6c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ef70:	00003806 	br	800f054 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800ef74:	e0bffc17 	ldw	r2,-16(fp)
 800ef78:	10800c17 	ldw	r2,48(r2)
 800ef7c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800ef80:	e0bffc17 	ldw	r2,-16(fp)
 800ef84:	10800d17 	ldw	r2,52(r2)
 800ef88:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800ef8c:	e0fff817 	ldw	r3,-32(fp)
 800ef90:	e0bff517 	ldw	r2,-44(fp)
 800ef94:	1880062e 	bgeu	r3,r2,800efb0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800ef98:	e0fff517 	ldw	r3,-44(fp)
 800ef9c:	e0bff817 	ldw	r2,-32(fp)
 800efa0:	1885c83a 	sub	r2,r3,r2
 800efa4:	10bfffc4 	addi	r2,r2,-1
 800efa8:	e0bff615 	stw	r2,-40(fp)
 800efac:	00000b06 	br	800efdc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800efb0:	e0bff517 	ldw	r2,-44(fp)
 800efb4:	10000526 	beq	r2,zero,800efcc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800efb8:	00c20004 	movi	r3,2048
 800efbc:	e0bff817 	ldw	r2,-32(fp)
 800efc0:	1885c83a 	sub	r2,r3,r2
 800efc4:	e0bff615 	stw	r2,-40(fp)
 800efc8:	00000406 	br	800efdc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800efcc:	00c1ffc4 	movi	r3,2047
 800efd0:	e0bff817 	ldw	r2,-32(fp)
 800efd4:	1885c83a 	sub	r2,r3,r2
 800efd8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800efdc:	e0bff617 	ldw	r2,-40(fp)
 800efe0:	1000011e 	bne	r2,zero,800efe8 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800efe4:	00001d06 	br	800f05c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800efe8:	e0fffe17 	ldw	r3,-8(fp)
 800efec:	e0bff617 	ldw	r2,-40(fp)
 800eff0:	1880022e 	bgeu	r3,r2,800effc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800eff4:	e0bffe17 	ldw	r2,-8(fp)
 800eff8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800effc:	e0bff817 	ldw	r2,-32(fp)
 800f000:	10820e04 	addi	r2,r2,2104
 800f004:	e0fffc17 	ldw	r3,-16(fp)
 800f008:	1885883a 	add	r2,r3,r2
 800f00c:	1009883a 	mov	r4,r2
 800f010:	e17ffd17 	ldw	r5,-12(fp)
 800f014:	e1bff617 	ldw	r6,-40(fp)
 800f018:	80022dc0 	call	80022dc <memcpy>
      ptr   += n;
 800f01c:	e0fffd17 	ldw	r3,-12(fp)
 800f020:	e0bff617 	ldw	r2,-40(fp)
 800f024:	1885883a 	add	r2,r3,r2
 800f028:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800f02c:	e0fffe17 	ldw	r3,-8(fp)
 800f030:	e0bff617 	ldw	r2,-40(fp)
 800f034:	1885c83a 	sub	r2,r3,r2
 800f038:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f03c:	e0fff817 	ldw	r3,-32(fp)
 800f040:	e0bff617 	ldw	r2,-40(fp)
 800f044:	1885883a 	add	r2,r3,r2
 800f048:	10c1ffcc 	andi	r3,r2,2047
 800f04c:	e0bffc17 	ldw	r2,-16(fp)
 800f050:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800f054:	e0bffe17 	ldw	r2,-8(fp)
 800f058:	00bfc616 	blt	zero,r2,800ef74 <__alt_data_end+0xfc00ef74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f05c:	0005303a 	rdctl	r2,status
 800f060:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f064:	e0fffa17 	ldw	r3,-24(fp)
 800f068:	00bfff84 	movi	r2,-2
 800f06c:	1884703a 	and	r2,r3,r2
 800f070:	1001703a 	wrctl	status,r2
  
  return context;
 800f074:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800f078:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f07c:	e0bffc17 	ldw	r2,-16(fp)
 800f080:	10800817 	ldw	r2,32(r2)
 800f084:	10c00094 	ori	r3,r2,2
 800f088:	e0bffc17 	ldw	r2,-16(fp)
 800f08c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f090:	e0bffc17 	ldw	r2,-16(fp)
 800f094:	10800017 	ldw	r2,0(r2)
 800f098:	10800104 	addi	r2,r2,4
 800f09c:	1007883a 	mov	r3,r2
 800f0a0:	e0bffc17 	ldw	r2,-16(fp)
 800f0a4:	10800817 	ldw	r2,32(r2)
 800f0a8:	18800035 	stwio	r2,0(r3)
 800f0ac:	e0bff917 	ldw	r2,-28(fp)
 800f0b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f0b4:	e0bffb17 	ldw	r2,-20(fp)
 800f0b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800f0bc:	e0bffe17 	ldw	r2,-8(fp)
 800f0c0:	0080120e 	bge	zero,r2,800f10c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800f0c4:	e0bfff17 	ldw	r2,-4(fp)
 800f0c8:	1090000c 	andi	r2,r2,16384
 800f0cc:	10000126 	beq	r2,zero,800f0d4 <altera_avalon_jtag_uart_write+0x190>
        break;
 800f0d0:	00001006 	br	800f114 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800f0d4:	0001883a 	nop
 800f0d8:	e0bffc17 	ldw	r2,-16(fp)
 800f0dc:	10c00d17 	ldw	r3,52(r2)
 800f0e0:	e0bff517 	ldw	r2,-44(fp)
 800f0e4:	1880051e 	bne	r3,r2,800f0fc <altera_avalon_jtag_uart_write+0x1b8>
 800f0e8:	e0bffc17 	ldw	r2,-16(fp)
 800f0ec:	10c00917 	ldw	r3,36(r2)
 800f0f0:	e0bffc17 	ldw	r2,-16(fp)
 800f0f4:	10800117 	ldw	r2,4(r2)
 800f0f8:	18bff736 	bltu	r3,r2,800f0d8 <__alt_data_end+0xfc00f0d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800f0fc:	e0bffc17 	ldw	r2,-16(fp)
 800f100:	10800917 	ldw	r2,36(r2)
 800f104:	10000126 	beq	r2,zero,800f10c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800f108:	00000206 	br	800f114 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800f10c:	e0bffe17 	ldw	r2,-8(fp)
 800f110:	00bf9716 	blt	zero,r2,800ef70 <__alt_data_end+0xfc00ef70>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800f114:	e0fffd17 	ldw	r3,-12(fp)
 800f118:	e0bff717 	ldw	r2,-36(fp)
 800f11c:	18800426 	beq	r3,r2,800f130 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800f120:	e0fffd17 	ldw	r3,-12(fp)
 800f124:	e0bff717 	ldw	r2,-36(fp)
 800f128:	1885c83a 	sub	r2,r3,r2
 800f12c:	00000606 	br	800f148 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800f130:	e0bfff17 	ldw	r2,-4(fp)
 800f134:	1090000c 	andi	r2,r2,16384
 800f138:	10000226 	beq	r2,zero,800f144 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800f13c:	00bffd44 	movi	r2,-11
 800f140:	00000106 	br	800f148 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800f144:	00bffec4 	movi	r2,-5
}
 800f148:	e037883a 	mov	sp,fp
 800f14c:	dfc00117 	ldw	ra,4(sp)
 800f150:	df000017 	ldw	fp,0(sp)
 800f154:	dec00204 	addi	sp,sp,8
 800f158:	f800283a 	ret

0800f15c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800f15c:	defffa04 	addi	sp,sp,-24
 800f160:	dfc00515 	stw	ra,20(sp)
 800f164:	df000415 	stw	fp,16(sp)
 800f168:	df000404 	addi	fp,sp,16
 800f16c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800f170:	0007883a 	mov	r3,zero
 800f174:	e0bfff17 	ldw	r2,-4(fp)
 800f178:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800f17c:	e0bfff17 	ldw	r2,-4(fp)
 800f180:	10800104 	addi	r2,r2,4
 800f184:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f188:	0005303a 	rdctl	r2,status
 800f18c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f190:	e0fffd17 	ldw	r3,-12(fp)
 800f194:	00bfff84 	movi	r2,-2
 800f198:	1884703a 	and	r2,r3,r2
 800f19c:	1001703a 	wrctl	status,r2
  
  return context;
 800f1a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800f1a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800f1a8:	8010a7c0 	call	8010a7c <alt_tick>
 800f1ac:	e0bffc17 	ldw	r2,-16(fp)
 800f1b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f1b4:	e0bffe17 	ldw	r2,-8(fp)
 800f1b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800f1bc:	e037883a 	mov	sp,fp
 800f1c0:	dfc00117 	ldw	ra,4(sp)
 800f1c4:	df000017 	ldw	fp,0(sp)
 800f1c8:	dec00204 	addi	sp,sp,8
 800f1cc:	f800283a 	ret

0800f1d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800f1d0:	defff804 	addi	sp,sp,-32
 800f1d4:	dfc00715 	stw	ra,28(sp)
 800f1d8:	df000615 	stw	fp,24(sp)
 800f1dc:	df000604 	addi	fp,sp,24
 800f1e0:	e13ffc15 	stw	r4,-16(fp)
 800f1e4:	e17ffd15 	stw	r5,-12(fp)
 800f1e8:	e1bffe15 	stw	r6,-8(fp)
 800f1ec:	e1ffff15 	stw	r7,-4(fp)
 800f1f0:	e0bfff17 	ldw	r2,-4(fp)
 800f1f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800f1f8:	00820074 	movhi	r2,2049
 800f1fc:	1092c004 	addi	r2,r2,19200
 800f200:	10800017 	ldw	r2,0(r2)
 800f204:	1000041e 	bne	r2,zero,800f218 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800f208:	00820074 	movhi	r2,2049
 800f20c:	1092c004 	addi	r2,r2,19200
 800f210:	e0fffb17 	ldw	r3,-20(fp)
 800f214:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800f218:	e0bffc17 	ldw	r2,-16(fp)
 800f21c:	10800104 	addi	r2,r2,4
 800f220:	00c001c4 	movi	r3,7
 800f224:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800f228:	d8000015 	stw	zero,0(sp)
 800f22c:	e13ffd17 	ldw	r4,-12(fp)
 800f230:	e17ffe17 	ldw	r5,-8(fp)
 800f234:	01820074 	movhi	r6,2049
 800f238:	31bc5704 	addi	r6,r6,-3748
 800f23c:	e1fffc17 	ldw	r7,-16(fp)
 800f240:	80105bc0 	call	80105bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800f244:	e037883a 	mov	sp,fp
 800f248:	dfc00117 	ldw	ra,4(sp)
 800f24c:	df000017 	ldw	fp,0(sp)
 800f250:	dec00204 	addi	sp,sp,8
 800f254:	f800283a 	ret

0800f258 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f258:	defffa04 	addi	sp,sp,-24
 800f25c:	dfc00515 	stw	ra,20(sp)
 800f260:	df000415 	stw	fp,16(sp)
 800f264:	df000404 	addi	fp,sp,16
 800f268:	e13ffd15 	stw	r4,-12(fp)
 800f26c:	e17ffe15 	stw	r5,-8(fp)
 800f270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800f274:	e0bffd17 	ldw	r2,-12(fp)
 800f278:	10800017 	ldw	r2,0(r2)
 800f27c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 800f280:	e0bffc17 	ldw	r2,-16(fp)
 800f284:	10c00a04 	addi	r3,r2,40
 800f288:	e0bffd17 	ldw	r2,-12(fp)
 800f28c:	10800217 	ldw	r2,8(r2)
 800f290:	1809883a 	mov	r4,r3
 800f294:	e17ffe17 	ldw	r5,-8(fp)
 800f298:	e1bfff17 	ldw	r6,-4(fp)
 800f29c:	100f883a 	mov	r7,r2
 800f2a0:	800f7700 	call	800f770 <altera_avalon_uart_read>
      fd->fd_flags);
}
 800f2a4:	e037883a 	mov	sp,fp
 800f2a8:	dfc00117 	ldw	ra,4(sp)
 800f2ac:	df000017 	ldw	fp,0(sp)
 800f2b0:	dec00204 	addi	sp,sp,8
 800f2b4:	f800283a 	ret

0800f2b8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f2b8:	defffa04 	addi	sp,sp,-24
 800f2bc:	dfc00515 	stw	ra,20(sp)
 800f2c0:	df000415 	stw	fp,16(sp)
 800f2c4:	df000404 	addi	fp,sp,16
 800f2c8:	e13ffd15 	stw	r4,-12(fp)
 800f2cc:	e17ffe15 	stw	r5,-8(fp)
 800f2d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800f2d4:	e0bffd17 	ldw	r2,-12(fp)
 800f2d8:	10800017 	ldw	r2,0(r2)
 800f2dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 800f2e0:	e0bffc17 	ldw	r2,-16(fp)
 800f2e4:	10c00a04 	addi	r3,r2,40
 800f2e8:	e0bffd17 	ldw	r2,-12(fp)
 800f2ec:	10800217 	ldw	r2,8(r2)
 800f2f0:	1809883a 	mov	r4,r3
 800f2f4:	e17ffe17 	ldw	r5,-8(fp)
 800f2f8:	e1bfff17 	ldw	r6,-4(fp)
 800f2fc:	100f883a 	mov	r7,r2
 800f300:	800f99c0 	call	800f99c <altera_avalon_uart_write>
      fd->fd_flags);
}
 800f304:	e037883a 	mov	sp,fp
 800f308:	dfc00117 	ldw	ra,4(sp)
 800f30c:	df000017 	ldw	fp,0(sp)
 800f310:	dec00204 	addi	sp,sp,8
 800f314:	f800283a 	ret

0800f318 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 800f318:	defffc04 	addi	sp,sp,-16
 800f31c:	dfc00315 	stw	ra,12(sp)
 800f320:	df000215 	stw	fp,8(sp)
 800f324:	df000204 	addi	fp,sp,8
 800f328:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800f32c:	e0bfff17 	ldw	r2,-4(fp)
 800f330:	10800017 	ldw	r2,0(r2)
 800f334:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 800f338:	e0bffe17 	ldw	r2,-8(fp)
 800f33c:	10c00a04 	addi	r3,r2,40
 800f340:	e0bfff17 	ldw	r2,-4(fp)
 800f344:	10800217 	ldw	r2,8(r2)
 800f348:	1809883a 	mov	r4,r3
 800f34c:	100b883a 	mov	r5,r2
 800f350:	800f6cc0 	call	800f6cc <altera_avalon_uart_close>
}
 800f354:	e037883a 	mov	sp,fp
 800f358:	dfc00117 	ldw	ra,4(sp)
 800f35c:	df000017 	ldw	fp,0(sp)
 800f360:	dec00204 	addi	sp,sp,8
 800f364:	f800283a 	ret

0800f368 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 800f368:	defff804 	addi	sp,sp,-32
 800f36c:	dfc00715 	stw	ra,28(sp)
 800f370:	df000615 	stw	fp,24(sp)
 800f374:	df000604 	addi	fp,sp,24
 800f378:	e13ffd15 	stw	r4,-12(fp)
 800f37c:	e17ffe15 	stw	r5,-8(fp)
 800f380:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 800f384:	e0bffd17 	ldw	r2,-12(fp)
 800f388:	10800017 	ldw	r2,0(r2)
 800f38c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800f390:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 800f394:	1000041e 	bne	r2,zero,800f3a8 <altera_avalon_uart_init+0x40>
 800f398:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 800f39c:	1000021e 	bne	r2,zero,800f3a8 <altera_avalon_uart_init+0x40>
 800f3a0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 800f3a4:	10000226 	beq	r2,zero,800f3b0 <altera_avalon_uart_init+0x48>
 800f3a8:	00800044 	movi	r2,1
 800f3ac:	00000106 	br	800f3b4 <altera_avalon_uart_init+0x4c>
 800f3b0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 800f3b4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 800f3b8:	e0bffc17 	ldw	r2,-16(fp)
 800f3bc:	10000f1e 	bne	r2,zero,800f3fc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 800f3c0:	e0bffd17 	ldw	r2,-12(fp)
 800f3c4:	00c32004 	movi	r3,3200
 800f3c8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 800f3cc:	e0bffb17 	ldw	r2,-20(fp)
 800f3d0:	10800304 	addi	r2,r2,12
 800f3d4:	e0fffd17 	ldw	r3,-12(fp)
 800f3d8:	18c00117 	ldw	r3,4(r3)
 800f3dc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 800f3e0:	d8000015 	stw	zero,0(sp)
 800f3e4:	e13ffe17 	ldw	r4,-8(fp)
 800f3e8:	e17fff17 	ldw	r5,-4(fp)
 800f3ec:	01820074 	movhi	r6,2049
 800f3f0:	31bd0404 	addi	r6,r6,-3056
 800f3f4:	e1fffd17 	ldw	r7,-12(fp)
 800f3f8:	80105bc0 	call	80105bc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 800f3fc:	e037883a 	mov	sp,fp
 800f400:	dfc00117 	ldw	ra,4(sp)
 800f404:	df000017 	ldw	fp,0(sp)
 800f408:	dec00204 	addi	sp,sp,8
 800f40c:	f800283a 	ret

0800f410 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 800f410:	defffa04 	addi	sp,sp,-24
 800f414:	dfc00515 	stw	ra,20(sp)
 800f418:	df000415 	stw	fp,16(sp)
 800f41c:	df000404 	addi	fp,sp,16
 800f420:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 800f424:	e0bfff17 	ldw	r2,-4(fp)
 800f428:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 800f42c:	e0bffc17 	ldw	r2,-16(fp)
 800f430:	10800017 	ldw	r2,0(r2)
 800f434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 800f438:	e0bffd17 	ldw	r2,-12(fp)
 800f43c:	10800204 	addi	r2,r2,8
 800f440:	10800037 	ldwio	r2,0(r2)
 800f444:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 800f448:	e0bffd17 	ldw	r2,-12(fp)
 800f44c:	10800204 	addi	r2,r2,8
 800f450:	0007883a 	mov	r3,zero
 800f454:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 800f458:	e0bffd17 	ldw	r2,-12(fp)
 800f45c:	10800204 	addi	r2,r2,8
 800f460:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 800f464:	e0bffe17 	ldw	r2,-8(fp)
 800f468:	1080200c 	andi	r2,r2,128
 800f46c:	10000326 	beq	r2,zero,800f47c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 800f470:	e13ffc17 	ldw	r4,-16(fp)
 800f474:	e17ffe17 	ldw	r5,-8(fp)
 800f478:	800f4a80 	call	800f4a8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 800f47c:	e0bffe17 	ldw	r2,-8(fp)
 800f480:	1081100c 	andi	r2,r2,1088
 800f484:	10000326 	beq	r2,zero,800f494 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 800f488:	e13ffc17 	ldw	r4,-16(fp)
 800f48c:	e17ffe17 	ldw	r5,-8(fp)
 800f490:	800f5880 	call	800f588 <altera_avalon_uart_txirq>
  }
  

}
 800f494:	e037883a 	mov	sp,fp
 800f498:	dfc00117 	ldw	ra,4(sp)
 800f49c:	df000017 	ldw	fp,0(sp)
 800f4a0:	dec00204 	addi	sp,sp,8
 800f4a4:	f800283a 	ret

0800f4a8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 800f4a8:	defffc04 	addi	sp,sp,-16
 800f4ac:	df000315 	stw	fp,12(sp)
 800f4b0:	df000304 	addi	fp,sp,12
 800f4b4:	e13ffe15 	stw	r4,-8(fp)
 800f4b8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 800f4bc:	e0bfff17 	ldw	r2,-4(fp)
 800f4c0:	108000cc 	andi	r2,r2,3
 800f4c4:	10000126 	beq	r2,zero,800f4cc <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 800f4c8:	00002b06 	br	800f578 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 800f4cc:	e0bffe17 	ldw	r2,-8(fp)
 800f4d0:	10800317 	ldw	r2,12(r2)
 800f4d4:	e0bffe17 	ldw	r2,-8(fp)
 800f4d8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800f4dc:	e0bffe17 	ldw	r2,-8(fp)
 800f4e0:	10800317 	ldw	r2,12(r2)
 800f4e4:	10800044 	addi	r2,r2,1
 800f4e8:	10800fcc 	andi	r2,r2,63
 800f4ec:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 800f4f0:	e0bffe17 	ldw	r2,-8(fp)
 800f4f4:	10800317 	ldw	r2,12(r2)
 800f4f8:	e0fffe17 	ldw	r3,-8(fp)
 800f4fc:	18c00017 	ldw	r3,0(r3)
 800f500:	18c00037 	ldwio	r3,0(r3)
 800f504:	1809883a 	mov	r4,r3
 800f508:	e0fffe17 	ldw	r3,-8(fp)
 800f50c:	1885883a 	add	r2,r3,r2
 800f510:	10800704 	addi	r2,r2,28
 800f514:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 800f518:	e0bffe17 	ldw	r2,-8(fp)
 800f51c:	e0fffd17 	ldw	r3,-12(fp)
 800f520:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800f524:	e0bffe17 	ldw	r2,-8(fp)
 800f528:	10800317 	ldw	r2,12(r2)
 800f52c:	10800044 	addi	r2,r2,1
 800f530:	10800fcc 	andi	r2,r2,63
 800f534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 800f538:	e0bffe17 	ldw	r2,-8(fp)
 800f53c:	10c00217 	ldw	r3,8(r2)
 800f540:	e0bffd17 	ldw	r2,-12(fp)
 800f544:	18800c1e 	bne	r3,r2,800f578 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800f548:	e0bffe17 	ldw	r2,-8(fp)
 800f54c:	10c00117 	ldw	r3,4(r2)
 800f550:	00bfdfc4 	movi	r2,-129
 800f554:	1886703a 	and	r3,r3,r2
 800f558:	e0bffe17 	ldw	r2,-8(fp)
 800f55c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 800f560:	e0bffe17 	ldw	r2,-8(fp)
 800f564:	10800017 	ldw	r2,0(r2)
 800f568:	10800304 	addi	r2,r2,12
 800f56c:	e0fffe17 	ldw	r3,-8(fp)
 800f570:	18c00117 	ldw	r3,4(r3)
 800f574:	10c00035 	stwio	r3,0(r2)
  }   
}
 800f578:	e037883a 	mov	sp,fp
 800f57c:	df000017 	ldw	fp,0(sp)
 800f580:	dec00104 	addi	sp,sp,4
 800f584:	f800283a 	ret

0800f588 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 800f588:	defffb04 	addi	sp,sp,-20
 800f58c:	df000415 	stw	fp,16(sp)
 800f590:	df000404 	addi	fp,sp,16
 800f594:	e13ffc15 	stw	r4,-16(fp)
 800f598:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 800f59c:	e0bffc17 	ldw	r2,-16(fp)
 800f5a0:	10c00417 	ldw	r3,16(r2)
 800f5a4:	e0bffc17 	ldw	r2,-16(fp)
 800f5a8:	10800517 	ldw	r2,20(r2)
 800f5ac:	18803226 	beq	r3,r2,800f678 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 800f5b0:	e0bffc17 	ldw	r2,-16(fp)
 800f5b4:	10800617 	ldw	r2,24(r2)
 800f5b8:	1080008c 	andi	r2,r2,2
 800f5bc:	10000326 	beq	r2,zero,800f5cc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 800f5c0:	e0bffd17 	ldw	r2,-12(fp)
 800f5c4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 800f5c8:	10001d26 	beq	r2,zero,800f640 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 800f5cc:	e0bffc17 	ldw	r2,-16(fp)
 800f5d0:	10800417 	ldw	r2,16(r2)
 800f5d4:	e0bffc17 	ldw	r2,-16(fp)
 800f5d8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 800f5dc:	e0bffc17 	ldw	r2,-16(fp)
 800f5e0:	10800017 	ldw	r2,0(r2)
 800f5e4:	10800104 	addi	r2,r2,4
 800f5e8:	e0fffc17 	ldw	r3,-16(fp)
 800f5ec:	18c00417 	ldw	r3,16(r3)
 800f5f0:	e13ffc17 	ldw	r4,-16(fp)
 800f5f4:	20c7883a 	add	r3,r4,r3
 800f5f8:	18c01704 	addi	r3,r3,92
 800f5fc:	18c00003 	ldbu	r3,0(r3)
 800f600:	18c03fcc 	andi	r3,r3,255
 800f604:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 800f608:	e0bffc17 	ldw	r2,-16(fp)
 800f60c:	10800417 	ldw	r2,16(r2)
 800f610:	10800044 	addi	r2,r2,1
 800f614:	e0fffc17 	ldw	r3,-16(fp)
 800f618:	18800415 	stw	r2,16(r3)
 800f61c:	10c00fcc 	andi	r3,r2,63
 800f620:	e0bffc17 	ldw	r2,-16(fp)
 800f624:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 800f628:	e0bffc17 	ldw	r2,-16(fp)
 800f62c:	10800117 	ldw	r2,4(r2)
 800f630:	10c01014 	ori	r3,r2,64
 800f634:	e0bffc17 	ldw	r2,-16(fp)
 800f638:	10c00115 	stw	r3,4(r2)
 800f63c:	00000e06 	br	800f678 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 800f640:	e0bffc17 	ldw	r2,-16(fp)
 800f644:	10800017 	ldw	r2,0(r2)
 800f648:	10800204 	addi	r2,r2,8
 800f64c:	10800037 	ldwio	r2,0(r2)
 800f650:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 800f654:	e0bffd17 	ldw	r2,-12(fp)
 800f658:	1082000c 	andi	r2,r2,2048
 800f65c:	1000061e 	bne	r2,zero,800f678 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 800f660:	e0bffc17 	ldw	r2,-16(fp)
 800f664:	10c00117 	ldw	r3,4(r2)
 800f668:	00bfefc4 	movi	r2,-65
 800f66c:	1886703a 	and	r3,r3,r2
 800f670:	e0bffc17 	ldw	r2,-16(fp)
 800f674:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 800f678:	e0bffc17 	ldw	r2,-16(fp)
 800f67c:	10c00417 	ldw	r3,16(r2)
 800f680:	e0bffc17 	ldw	r2,-16(fp)
 800f684:	10800517 	ldw	r2,20(r2)
 800f688:	1880061e 	bne	r3,r2,800f6a4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800f68c:	e0bffc17 	ldw	r2,-16(fp)
 800f690:	10c00117 	ldw	r3,4(r2)
 800f694:	00beefc4 	movi	r2,-1089
 800f698:	1886703a 	and	r3,r3,r2
 800f69c:	e0bffc17 	ldw	r2,-16(fp)
 800f6a0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800f6a4:	e0bffc17 	ldw	r2,-16(fp)
 800f6a8:	10800017 	ldw	r2,0(r2)
 800f6ac:	10800304 	addi	r2,r2,12
 800f6b0:	e0fffc17 	ldw	r3,-16(fp)
 800f6b4:	18c00117 	ldw	r3,4(r3)
 800f6b8:	10c00035 	stwio	r3,0(r2)
}
 800f6bc:	e037883a 	mov	sp,fp
 800f6c0:	df000017 	ldw	fp,0(sp)
 800f6c4:	dec00104 	addi	sp,sp,4
 800f6c8:	f800283a 	ret

0800f6cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 800f6cc:	defffd04 	addi	sp,sp,-12
 800f6d0:	df000215 	stw	fp,8(sp)
 800f6d4:	df000204 	addi	fp,sp,8
 800f6d8:	e13ffe15 	stw	r4,-8(fp)
 800f6dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800f6e0:	00000506 	br	800f6f8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f6e4:	e0bfff17 	ldw	r2,-4(fp)
 800f6e8:	1090000c 	andi	r2,r2,16384
 800f6ec:	10000226 	beq	r2,zero,800f6f8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f6f0:	00bffd44 	movi	r2,-11
 800f6f4:	00000606 	br	800f710 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800f6f8:	e0bffe17 	ldw	r2,-8(fp)
 800f6fc:	10c00417 	ldw	r3,16(r2)
 800f700:	e0bffe17 	ldw	r2,-8(fp)
 800f704:	10800517 	ldw	r2,20(r2)
 800f708:	18bff61e 	bne	r3,r2,800f6e4 <__alt_data_end+0xfc00f6e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f70c:	0005883a 	mov	r2,zero
}
 800f710:	e037883a 	mov	sp,fp
 800f714:	df000017 	ldw	fp,0(sp)
 800f718:	dec00104 	addi	sp,sp,4
 800f71c:	f800283a 	ret

0800f720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f720:	defffe04 	addi	sp,sp,-8
 800f724:	dfc00115 	stw	ra,4(sp)
 800f728:	df000015 	stw	fp,0(sp)
 800f72c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f730:	00820074 	movhi	r2,2049
 800f734:	108bb904 	addi	r2,r2,12004
 800f738:	10800017 	ldw	r2,0(r2)
 800f73c:	10000526 	beq	r2,zero,800f754 <alt_get_errno+0x34>
 800f740:	00820074 	movhi	r2,2049
 800f744:	108bb904 	addi	r2,r2,12004
 800f748:	10800017 	ldw	r2,0(r2)
 800f74c:	103ee83a 	callr	r2
 800f750:	00000206 	br	800f75c <alt_get_errno+0x3c>
 800f754:	00820074 	movhi	r2,2049
 800f758:	1092b504 	addi	r2,r2,19156
}
 800f75c:	e037883a 	mov	sp,fp
 800f760:	dfc00117 	ldw	ra,4(sp)
 800f764:	df000017 	ldw	fp,0(sp)
 800f768:	dec00204 	addi	sp,sp,8
 800f76c:	f800283a 	ret

0800f770 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 800f770:	defff204 	addi	sp,sp,-56
 800f774:	dfc00d15 	stw	ra,52(sp)
 800f778:	df000c15 	stw	fp,48(sp)
 800f77c:	df000c04 	addi	fp,sp,48
 800f780:	e13ffc15 	stw	r4,-16(fp)
 800f784:	e17ffd15 	stw	r5,-12(fp)
 800f788:	e1bffe15 	stw	r6,-8(fp)
 800f78c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 800f790:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 800f794:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 800f798:	e0bfff17 	ldw	r2,-4(fp)
 800f79c:	1090000c 	andi	r2,r2,16384
 800f7a0:	1005003a 	cmpeq	r2,r2,zero
 800f7a4:	10803fcc 	andi	r2,r2,255
 800f7a8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 800f7ac:	00001306 	br	800f7fc <altera_avalon_uart_read+0x8c>
    {
      count++;
 800f7b0:	e0bff517 	ldw	r2,-44(fp)
 800f7b4:	10800044 	addi	r2,r2,1
 800f7b8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 800f7bc:	e0bffd17 	ldw	r2,-12(fp)
 800f7c0:	10c00044 	addi	r3,r2,1
 800f7c4:	e0fffd15 	stw	r3,-12(fp)
 800f7c8:	e0fffc17 	ldw	r3,-16(fp)
 800f7cc:	18c00217 	ldw	r3,8(r3)
 800f7d0:	e13ffc17 	ldw	r4,-16(fp)
 800f7d4:	20c7883a 	add	r3,r4,r3
 800f7d8:	18c00704 	addi	r3,r3,28
 800f7dc:	18c00003 	ldbu	r3,0(r3)
 800f7e0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 800f7e4:	e0bffc17 	ldw	r2,-16(fp)
 800f7e8:	10800217 	ldw	r2,8(r2)
 800f7ec:	10800044 	addi	r2,r2,1
 800f7f0:	10c00fcc 	andi	r3,r2,63
 800f7f4:	e0bffc17 	ldw	r2,-16(fp)
 800f7f8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 800f7fc:	e0fff517 	ldw	r3,-44(fp)
 800f800:	e0bffe17 	ldw	r2,-8(fp)
 800f804:	1880050e 	bge	r3,r2,800f81c <altera_avalon_uart_read+0xac>
 800f808:	e0bffc17 	ldw	r2,-16(fp)
 800f80c:	10c00217 	ldw	r3,8(r2)
 800f810:	e0bffc17 	ldw	r2,-16(fp)
 800f814:	10800317 	ldw	r2,12(r2)
 800f818:	18bfe51e 	bne	r3,r2,800f7b0 <__alt_data_end+0xfc00f7b0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 800f81c:	e0bff517 	ldw	r2,-44(fp)
 800f820:	1000251e 	bne	r2,zero,800f8b8 <altera_avalon_uart_read+0x148>
 800f824:	e0bffc17 	ldw	r2,-16(fp)
 800f828:	10c00217 	ldw	r3,8(r2)
 800f82c:	e0bffc17 	ldw	r2,-16(fp)
 800f830:	10800317 	ldw	r2,12(r2)
 800f834:	1880201e 	bne	r3,r2,800f8b8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 800f838:	e0bff617 	ldw	r2,-40(fp)
 800f83c:	1000071e 	bne	r2,zero,800f85c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 800f840:	800f7200 	call	800f720 <alt_get_errno>
 800f844:	1007883a 	mov	r3,r2
 800f848:	008002c4 	movi	r2,11
 800f84c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 800f850:	00800044 	movi	r2,1
 800f854:	e0bff405 	stb	r2,-48(fp)
        break;
 800f858:	00001b06 	br	800f8c8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f85c:	0005303a 	rdctl	r2,status
 800f860:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f864:	e0fff817 	ldw	r3,-32(fp)
 800f868:	00bfff84 	movi	r2,-2
 800f86c:	1884703a 	and	r2,r3,r2
 800f870:	1001703a 	wrctl	status,r2
  
  return context;
 800f874:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 800f878:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800f87c:	e0bffc17 	ldw	r2,-16(fp)
 800f880:	10800117 	ldw	r2,4(r2)
 800f884:	10c02014 	ori	r3,r2,128
 800f888:	e0bffc17 	ldw	r2,-16(fp)
 800f88c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800f890:	e0bffc17 	ldw	r2,-16(fp)
 800f894:	10800017 	ldw	r2,0(r2)
 800f898:	10800304 	addi	r2,r2,12
 800f89c:	e0fffc17 	ldw	r3,-16(fp)
 800f8a0:	18c00117 	ldw	r3,4(r3)
 800f8a4:	10c00035 	stwio	r3,0(r2)
 800f8a8:	e0bff717 	ldw	r2,-36(fp)
 800f8ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f8b0:	e0bff917 	ldw	r2,-28(fp)
 800f8b4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 800f8b8:	e0bff517 	ldw	r2,-44(fp)
 800f8bc:	1000021e 	bne	r2,zero,800f8c8 <altera_avalon_uart_read+0x158>
 800f8c0:	e0bffe17 	ldw	r2,-8(fp)
 800f8c4:	103fb91e 	bne	r2,zero,800f7ac <__alt_data_end+0xfc00f7ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f8c8:	0005303a 	rdctl	r2,status
 800f8cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f8d0:	e0fffa17 	ldw	r3,-24(fp)
 800f8d4:	00bfff84 	movi	r2,-2
 800f8d8:	1884703a 	and	r2,r3,r2
 800f8dc:	1001703a 	wrctl	status,r2
  
  return context;
 800f8e0:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 800f8e4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800f8e8:	e0bffc17 	ldw	r2,-16(fp)
 800f8ec:	10800117 	ldw	r2,4(r2)
 800f8f0:	10c02014 	ori	r3,r2,128
 800f8f4:	e0bffc17 	ldw	r2,-16(fp)
 800f8f8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800f8fc:	e0bffc17 	ldw	r2,-16(fp)
 800f900:	10800017 	ldw	r2,0(r2)
 800f904:	10800304 	addi	r2,r2,12
 800f908:	e0fffc17 	ldw	r3,-16(fp)
 800f90c:	18c00117 	ldw	r3,4(r3)
 800f910:	10c00035 	stwio	r3,0(r2)
 800f914:	e0bff717 	ldw	r2,-36(fp)
 800f918:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f91c:	e0bffb17 	ldw	r2,-20(fp)
 800f920:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 800f924:	e0bff403 	ldbu	r2,-48(fp)
 800f928:	10000226 	beq	r2,zero,800f934 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 800f92c:	00bffd44 	movi	r2,-11
 800f930:	00000106 	br	800f938 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 800f934:	e0bff517 	ldw	r2,-44(fp)
  }
}
 800f938:	e037883a 	mov	sp,fp
 800f93c:	dfc00117 	ldw	ra,4(sp)
 800f940:	df000017 	ldw	fp,0(sp)
 800f944:	dec00204 	addi	sp,sp,8
 800f948:	f800283a 	ret

0800f94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f94c:	defffe04 	addi	sp,sp,-8
 800f950:	dfc00115 	stw	ra,4(sp)
 800f954:	df000015 	stw	fp,0(sp)
 800f958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f95c:	00820074 	movhi	r2,2049
 800f960:	108bb904 	addi	r2,r2,12004
 800f964:	10800017 	ldw	r2,0(r2)
 800f968:	10000526 	beq	r2,zero,800f980 <alt_get_errno+0x34>
 800f96c:	00820074 	movhi	r2,2049
 800f970:	108bb904 	addi	r2,r2,12004
 800f974:	10800017 	ldw	r2,0(r2)
 800f978:	103ee83a 	callr	r2
 800f97c:	00000206 	br	800f988 <alt_get_errno+0x3c>
 800f980:	00820074 	movhi	r2,2049
 800f984:	1092b504 	addi	r2,r2,19156
}
 800f988:	e037883a 	mov	sp,fp
 800f98c:	dfc00117 	ldw	ra,4(sp)
 800f990:	df000017 	ldw	fp,0(sp)
 800f994:	dec00204 	addi	sp,sp,8
 800f998:	f800283a 	ret

0800f99c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 800f99c:	defff204 	addi	sp,sp,-56
 800f9a0:	dfc00d15 	stw	ra,52(sp)
 800f9a4:	df000c15 	stw	fp,48(sp)
 800f9a8:	df000c04 	addi	fp,sp,48
 800f9ac:	e13ffc15 	stw	r4,-16(fp)
 800f9b0:	e17ffd15 	stw	r5,-12(fp)
 800f9b4:	e1bffe15 	stw	r6,-8(fp)
 800f9b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 800f9bc:	e0bffe17 	ldw	r2,-8(fp)
 800f9c0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 800f9c4:	e0bfff17 	ldw	r2,-4(fp)
 800f9c8:	1090000c 	andi	r2,r2,16384
 800f9cc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 800f9d0:	00003c06 	br	800fac4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800f9d4:	e0bffc17 	ldw	r2,-16(fp)
 800f9d8:	10800517 	ldw	r2,20(r2)
 800f9dc:	10800044 	addi	r2,r2,1
 800f9e0:	10800fcc 	andi	r2,r2,63
 800f9e4:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 800f9e8:	e0bffc17 	ldw	r2,-16(fp)
 800f9ec:	10c00417 	ldw	r3,16(r2)
 800f9f0:	e0bff617 	ldw	r2,-40(fp)
 800f9f4:	1880221e 	bne	r3,r2,800fa80 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 800f9f8:	e0bff517 	ldw	r2,-44(fp)
 800f9fc:	10000526 	beq	r2,zero,800fa14 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 800fa00:	800f94c0 	call	800f94c <alt_get_errno>
 800fa04:	1007883a 	mov	r3,r2
 800fa08:	008002c4 	movi	r2,11
 800fa0c:	18800015 	stw	r2,0(r3)
        break;
 800fa10:	00002e06 	br	800facc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fa14:	0005303a 	rdctl	r2,status
 800fa18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fa1c:	e0fff817 	ldw	r3,-32(fp)
 800fa20:	00bfff84 	movi	r2,-2
 800fa24:	1884703a 	and	r2,r3,r2
 800fa28:	1001703a 	wrctl	status,r2
  
  return context;
 800fa2c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 800fa30:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800fa34:	e0bffc17 	ldw	r2,-16(fp)
 800fa38:	10800117 	ldw	r2,4(r2)
 800fa3c:	10c11014 	ori	r3,r2,1088
 800fa40:	e0bffc17 	ldw	r2,-16(fp)
 800fa44:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800fa48:	e0bffc17 	ldw	r2,-16(fp)
 800fa4c:	10800017 	ldw	r2,0(r2)
 800fa50:	10800304 	addi	r2,r2,12
 800fa54:	e0fffc17 	ldw	r3,-16(fp)
 800fa58:	18c00117 	ldw	r3,4(r3)
 800fa5c:	10c00035 	stwio	r3,0(r2)
 800fa60:	e0bff717 	ldw	r2,-36(fp)
 800fa64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fa68:	e0bff917 	ldw	r2,-28(fp)
 800fa6c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 800fa70:	e0bffc17 	ldw	r2,-16(fp)
 800fa74:	10c00417 	ldw	r3,16(r2)
 800fa78:	e0bff617 	ldw	r2,-40(fp)
 800fa7c:	18bffc26 	beq	r3,r2,800fa70 <__alt_data_end+0xfc00fa70>
      }
    }

    count--;
 800fa80:	e0bff417 	ldw	r2,-48(fp)
 800fa84:	10bfffc4 	addi	r2,r2,-1
 800fa88:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 800fa8c:	e0bffc17 	ldw	r2,-16(fp)
 800fa90:	10c00517 	ldw	r3,20(r2)
 800fa94:	e0bffd17 	ldw	r2,-12(fp)
 800fa98:	11000044 	addi	r4,r2,1
 800fa9c:	e13ffd15 	stw	r4,-12(fp)
 800faa0:	10800003 	ldbu	r2,0(r2)
 800faa4:	1009883a 	mov	r4,r2
 800faa8:	e0bffc17 	ldw	r2,-16(fp)
 800faac:	10c5883a 	add	r2,r2,r3
 800fab0:	10801704 	addi	r2,r2,92
 800fab4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 800fab8:	e0bffc17 	ldw	r2,-16(fp)
 800fabc:	e0fff617 	ldw	r3,-40(fp)
 800fac0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 800fac4:	e0bff417 	ldw	r2,-48(fp)
 800fac8:	103fc21e 	bne	r2,zero,800f9d4 <__alt_data_end+0xfc00f9d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800facc:	0005303a 	rdctl	r2,status
 800fad0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fad4:	e0fffa17 	ldw	r3,-24(fp)
 800fad8:	00bfff84 	movi	r2,-2
 800fadc:	1884703a 	and	r2,r3,r2
 800fae0:	1001703a 	wrctl	status,r2
  
  return context;
 800fae4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 800fae8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800faec:	e0bffc17 	ldw	r2,-16(fp)
 800faf0:	10800117 	ldw	r2,4(r2)
 800faf4:	10c11014 	ori	r3,r2,1088
 800faf8:	e0bffc17 	ldw	r2,-16(fp)
 800fafc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800fb00:	e0bffc17 	ldw	r2,-16(fp)
 800fb04:	10800017 	ldw	r2,0(r2)
 800fb08:	10800304 	addi	r2,r2,12
 800fb0c:	e0fffc17 	ldw	r3,-16(fp)
 800fb10:	18c00117 	ldw	r3,4(r3)
 800fb14:	10c00035 	stwio	r3,0(r2)
 800fb18:	e0bff717 	ldw	r2,-36(fp)
 800fb1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fb20:	e0bffb17 	ldw	r2,-20(fp)
 800fb24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 800fb28:	e0fffe17 	ldw	r3,-8(fp)
 800fb2c:	e0bff417 	ldw	r2,-48(fp)
 800fb30:	1885c83a 	sub	r2,r3,r2
}
 800fb34:	e037883a 	mov	sp,fp
 800fb38:	dfc00117 	ldw	ra,4(sp)
 800fb3c:	df000017 	ldw	fp,0(sp)
 800fb40:	dec00204 	addi	sp,sp,8
 800fb44:	f800283a 	ret

0800fb48 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800fb48:	defffc04 	addi	sp,sp,-16
 800fb4c:	df000315 	stw	fp,12(sp)
 800fb50:	df000304 	addi	fp,sp,12
 800fb54:	e13ffe15 	stw	r4,-8(fp)
 800fb58:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800fb5c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800fb60:	e0bfff17 	ldw	r2,-4(fp)
 800fb64:	1000061e 	bne	r2,zero,800fb80 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800fb68:	e0bffe17 	ldw	r2,-8(fp)
 800fb6c:	1007883a 	mov	r3,r2
 800fb70:	e0bffd03 	ldbu	r2,-12(fp)
 800fb74:	1884b03a 	or	r2,r3,r2
 800fb78:	e0bffd05 	stb	r2,-12(fp)
 800fb7c:	00000806 	br	800fba0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800fb80:	e0bffe17 	ldw	r2,-8(fp)
 800fb84:	1007883a 	mov	r3,r2
 800fb88:	e0bffd03 	ldbu	r2,-12(fp)
 800fb8c:	1884b03a 	or	r2,r3,r2
 800fb90:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800fb94:	e0bffd03 	ldbu	r2,-12(fp)
 800fb98:	10801014 	ori	r2,r2,64
 800fb9c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800fba0:	e0fffd03 	ldbu	r3,-12(fp)
 800fba4:	00bfe004 	movi	r2,-128
 800fba8:	1884b03a 	or	r2,r3,r2
}
 800fbac:	e037883a 	mov	sp,fp
 800fbb0:	df000017 	ldw	fp,0(sp)
 800fbb4:	dec00104 	addi	sp,sp,4
 800fbb8:	f800283a 	ret

0800fbbc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800fbbc:	defffd04 	addi	sp,sp,-12
 800fbc0:	df000215 	stw	fp,8(sp)
 800fbc4:	df000204 	addi	fp,sp,8
 800fbc8:	e13ffe15 	stw	r4,-8(fp)
 800fbcc:	2805883a 	mov	r2,r5
 800fbd0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800fbd4:	e0bffe17 	ldw	r2,-8(fp)
 800fbd8:	10800a17 	ldw	r2,40(r2)
 800fbdc:	1007883a 	mov	r3,r2
 800fbe0:	e0bfff03 	ldbu	r2,-4(fp)
 800fbe4:	18800025 	stbio	r2,0(r3)
}
 800fbe8:	e037883a 	mov	sp,fp
 800fbec:	df000017 	ldw	fp,0(sp)
 800fbf0:	dec00104 	addi	sp,sp,4
 800fbf4:	f800283a 	ret

0800fbf8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800fbf8:	defffe04 	addi	sp,sp,-8
 800fbfc:	df000115 	stw	fp,4(sp)
 800fc00:	df000104 	addi	fp,sp,4
 800fc04:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800fc08:	e0bfff17 	ldw	r2,-4(fp)
 800fc0c:	10800a17 	ldw	r2,40(r2)
 800fc10:	1007883a 	mov	r3,r2
 800fc14:	00800044 	movi	r2,1
 800fc18:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800fc1c:	e037883a 	mov	sp,fp
 800fc20:	df000017 	ldw	fp,0(sp)
 800fc24:	dec00104 	addi	sp,sp,4
 800fc28:	f800283a 	ret

0800fc2c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800fc2c:	defffc04 	addi	sp,sp,-16
 800fc30:	dfc00315 	stw	ra,12(sp)
 800fc34:	df000215 	stw	fp,8(sp)
 800fc38:	df000204 	addi	fp,sp,8
 800fc3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800fc40:	e13fff17 	ldw	r4,-4(fp)
 800fc44:	01420074 	movhi	r5,2049
 800fc48:	294bb604 	addi	r5,r5,11992
 800fc4c:	80103280 	call	8010328 <alt_find_dev>
 800fc50:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800fc54:	e0bffe17 	ldw	r2,-8(fp)
}
 800fc58:	e037883a 	mov	sp,fp
 800fc5c:	dfc00117 	ldw	ra,4(sp)
 800fc60:	df000017 	ldw	fp,0(sp)
 800fc64:	dec00204 	addi	sp,sp,8
 800fc68:	f800283a 	ret

0800fc6c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800fc6c:	defffb04 	addi	sp,sp,-20
 800fc70:	df000415 	stw	fp,16(sp)
 800fc74:	df000404 	addi	fp,sp,16
 800fc78:	e13ffd15 	stw	r4,-12(fp)
 800fc7c:	e17ffe15 	stw	r5,-8(fp)
 800fc80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800fc84:	e03ffc15 	stw	zero,-16(fp)
 800fc88:	00000f06 	br	800fcc8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800fc8c:	e0bffd17 	ldw	r2,-12(fp)
 800fc90:	10800a17 	ldw	r2,40(r2)
 800fc94:	10800044 	addi	r2,r2,1
 800fc98:	1009883a 	mov	r4,r2
 800fc9c:	e0fffe17 	ldw	r3,-8(fp)
 800fca0:	e0bffc17 	ldw	r2,-16(fp)
 800fca4:	1885883a 	add	r2,r3,r2
 800fca8:	10800003 	ldbu	r2,0(r2)
 800fcac:	10803fcc 	andi	r2,r2,255
 800fcb0:	1080201c 	xori	r2,r2,128
 800fcb4:	10bfe004 	addi	r2,r2,-128
 800fcb8:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800fcbc:	e0bffc17 	ldw	r2,-16(fp)
 800fcc0:	10800044 	addi	r2,r2,1
 800fcc4:	e0bffc15 	stw	r2,-16(fp)
 800fcc8:	e0fffc17 	ldw	r3,-16(fp)
 800fccc:	e0bfff17 	ldw	r2,-4(fp)
 800fcd0:	18bfee36 	bltu	r3,r2,800fc8c <__alt_data_end+0xfc00fc8c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800fcd4:	e037883a 	mov	sp,fp
 800fcd8:	df000017 	ldw	fp,0(sp)
 800fcdc:	dec00104 	addi	sp,sp,4
 800fce0:	f800283a 	ret

0800fce4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800fce4:	defffd04 	addi	sp,sp,-12
 800fce8:	df000215 	stw	fp,8(sp)
 800fcec:	df000204 	addi	fp,sp,8
 800fcf0:	e13ffe15 	stw	r4,-8(fp)
 800fcf4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800fcf8:	00000d06 	br	800fd30 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800fcfc:	e0bffe17 	ldw	r2,-8(fp)
 800fd00:	10800a17 	ldw	r2,40(r2)
 800fd04:	10800044 	addi	r2,r2,1
 800fd08:	1007883a 	mov	r3,r2
 800fd0c:	e0bfff17 	ldw	r2,-4(fp)
 800fd10:	10800003 	ldbu	r2,0(r2)
 800fd14:	10803fcc 	andi	r2,r2,255
 800fd18:	1080201c 	xori	r2,r2,128
 800fd1c:	10bfe004 	addi	r2,r2,-128
 800fd20:	18800025 	stbio	r2,0(r3)
		++ptr;
 800fd24:	e0bfff17 	ldw	r2,-4(fp)
 800fd28:	10800044 	addi	r2,r2,1
 800fd2c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800fd30:	e0bfff17 	ldw	r2,-4(fp)
 800fd34:	10800003 	ldbu	r2,0(r2)
 800fd38:	10803fcc 	andi	r2,r2,255
 800fd3c:	1080201c 	xori	r2,r2,128
 800fd40:	10bfe004 	addi	r2,r2,-128
 800fd44:	103fed1e 	bne	r2,zero,800fcfc <__alt_data_end+0xfc00fcfc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800fd48:	e037883a 	mov	sp,fp
 800fd4c:	df000017 	ldw	fp,0(sp)
 800fd50:	dec00104 	addi	sp,sp,4
 800fd54:	f800283a 	ret

0800fd58 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800fd58:	defffb04 	addi	sp,sp,-20
 800fd5c:	dfc00415 	stw	ra,16(sp)
 800fd60:	df000315 	stw	fp,12(sp)
 800fd64:	df000304 	addi	fp,sp,12
 800fd68:	e13ffd15 	stw	r4,-12(fp)
 800fd6c:	e17ffe15 	stw	r5,-8(fp)
 800fd70:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800fd74:	e0bffd17 	ldw	r2,-12(fp)
 800fd78:	10c00017 	ldw	r3,0(r2)
 800fd7c:	e0bfff17 	ldw	r2,-4(fp)
 800fd80:	1809883a 	mov	r4,r3
 800fd84:	e17ffe17 	ldw	r5,-8(fp)
 800fd88:	100d883a 	mov	r6,r2
 800fd8c:	800fc6c0 	call	800fc6c <alt_up_character_lcd_write>
	return 0;
 800fd90:	0005883a 	mov	r2,zero
}
 800fd94:	e037883a 	mov	sp,fp
 800fd98:	dfc00117 	ldw	ra,4(sp)
 800fd9c:	df000017 	ldw	fp,0(sp)
 800fda0:	dec00204 	addi	sp,sp,8
 800fda4:	f800283a 	ret

0800fda8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800fda8:	defffa04 	addi	sp,sp,-24
 800fdac:	dfc00515 	stw	ra,20(sp)
 800fdb0:	df000415 	stw	fp,16(sp)
 800fdb4:	df000404 	addi	fp,sp,16
 800fdb8:	e13ffd15 	stw	r4,-12(fp)
 800fdbc:	e17ffe15 	stw	r5,-8(fp)
 800fdc0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800fdc4:	e0bffe17 	ldw	r2,-8(fp)
 800fdc8:	10800a28 	cmpgeui	r2,r2,40
 800fdcc:	1000031e 	bne	r2,zero,800fddc <alt_up_character_lcd_set_cursor_pos+0x34>
 800fdd0:	e0bfff17 	ldw	r2,-4(fp)
 800fdd4:	108000b0 	cmpltui	r2,r2,2
 800fdd8:	1000021e 	bne	r2,zero,800fde4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800fddc:	00bfffc4 	movi	r2,-1
 800fde0:	00000906 	br	800fe08 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800fde4:	e13ffe17 	ldw	r4,-8(fp)
 800fde8:	e17fff17 	ldw	r5,-4(fp)
 800fdec:	800fb480 	call	800fb48 <get_DDRAM_addr>
 800fdf0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800fdf4:	e0bffc03 	ldbu	r2,-16(fp)
 800fdf8:	e13ffd17 	ldw	r4,-12(fp)
 800fdfc:	100b883a 	mov	r5,r2
 800fe00:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
	return 0;
 800fe04:	0005883a 	mov	r2,zero
}
 800fe08:	e037883a 	mov	sp,fp
 800fe0c:	dfc00117 	ldw	ra,4(sp)
 800fe10:	df000017 	ldw	fp,0(sp)
 800fe14:	dec00204 	addi	sp,sp,8
 800fe18:	f800283a 	ret

0800fe1c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800fe1c:	defffb04 	addi	sp,sp,-20
 800fe20:	dfc00415 	stw	ra,16(sp)
 800fe24:	df000315 	stw	fp,12(sp)
 800fe28:	df000304 	addi	fp,sp,12
 800fe2c:	e13ffe15 	stw	r4,-8(fp)
 800fe30:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800fe34:	e0bfff17 	ldw	r2,-4(fp)
 800fe38:	1000011e 	bne	r2,zero,800fe40 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800fe3c:	00001406 	br	800fe90 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800fe40:	e0bfff17 	ldw	r2,-4(fp)
 800fe44:	0080020e 	bge	zero,r2,800fe50 <alt_up_character_lcd_shift_cursor+0x34>
 800fe48:	00800504 	movi	r2,20
 800fe4c:	00000106 	br	800fe54 <alt_up_character_lcd_shift_cursor+0x38>
 800fe50:	00800404 	movi	r2,16
 800fe54:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800fe58:	e0bfff17 	ldw	r2,-4(fp)
 800fe5c:	1000010e 	bge	r2,zero,800fe64 <alt_up_character_lcd_shift_cursor+0x48>
 800fe60:	0085c83a 	sub	r2,zero,r2
 800fe64:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fe68:	00000406 	br	800fe7c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800fe6c:	e0bffd43 	ldbu	r2,-11(fp)
 800fe70:	e13ffe17 	ldw	r4,-8(fp)
 800fe74:	100b883a 	mov	r5,r2
 800fe78:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fe7c:	e0bffd03 	ldbu	r2,-12(fp)
 800fe80:	10ffffc4 	addi	r3,r2,-1
 800fe84:	e0fffd05 	stb	r3,-12(fp)
 800fe88:	10803fcc 	andi	r2,r2,255
 800fe8c:	103ff71e 	bne	r2,zero,800fe6c <__alt_data_end+0xfc00fe6c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800fe90:	e037883a 	mov	sp,fp
 800fe94:	dfc00117 	ldw	ra,4(sp)
 800fe98:	df000017 	ldw	fp,0(sp)
 800fe9c:	dec00204 	addi	sp,sp,8
 800fea0:	f800283a 	ret

0800fea4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800fea4:	defffb04 	addi	sp,sp,-20
 800fea8:	dfc00415 	stw	ra,16(sp)
 800feac:	df000315 	stw	fp,12(sp)
 800feb0:	df000304 	addi	fp,sp,12
 800feb4:	e13ffe15 	stw	r4,-8(fp)
 800feb8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800febc:	e0bfff17 	ldw	r2,-4(fp)
 800fec0:	1000011e 	bne	r2,zero,800fec8 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800fec4:	00001406 	br	800ff18 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800fec8:	e0bfff17 	ldw	r2,-4(fp)
 800fecc:	0080020e 	bge	zero,r2,800fed8 <alt_up_character_lcd_shift_display+0x34>
 800fed0:	00800704 	movi	r2,28
 800fed4:	00000106 	br	800fedc <alt_up_character_lcd_shift_display+0x38>
 800fed8:	00800604 	movi	r2,24
 800fedc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800fee0:	e0bfff17 	ldw	r2,-4(fp)
 800fee4:	1000010e 	bge	r2,zero,800feec <alt_up_character_lcd_shift_display+0x48>
 800fee8:	0085c83a 	sub	r2,zero,r2
 800feec:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fef0:	00000406 	br	800ff04 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800fef4:	e0bffd43 	ldbu	r2,-11(fp)
 800fef8:	e13ffe17 	ldw	r4,-8(fp)
 800fefc:	100b883a 	mov	r5,r2
 800ff00:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ff04:	e0bffd03 	ldbu	r2,-12(fp)
 800ff08:	10ffffc4 	addi	r3,r2,-1
 800ff0c:	e0fffd05 	stb	r3,-12(fp)
 800ff10:	10803fcc 	andi	r2,r2,255
 800ff14:	103ff71e 	bne	r2,zero,800fef4 <__alt_data_end+0xfc00fef4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800ff18:	e037883a 	mov	sp,fp
 800ff1c:	dfc00117 	ldw	ra,4(sp)
 800ff20:	df000017 	ldw	fp,0(sp)
 800ff24:	dec00204 	addi	sp,sp,8
 800ff28:	f800283a 	ret

0800ff2c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800ff2c:	defffa04 	addi	sp,sp,-24
 800ff30:	dfc00515 	stw	ra,20(sp)
 800ff34:	df000415 	stw	fp,16(sp)
 800ff38:	df000404 	addi	fp,sp,16
 800ff3c:	e13ffd15 	stw	r4,-12(fp)
 800ff40:	e17ffe15 	stw	r5,-8(fp)
 800ff44:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800ff48:	e0bffe17 	ldw	r2,-8(fp)
 800ff4c:	10800a28 	cmpgeui	r2,r2,40
 800ff50:	1000031e 	bne	r2,zero,800ff60 <alt_up_character_lcd_erase_pos+0x34>
 800ff54:	e0bfff17 	ldw	r2,-4(fp)
 800ff58:	108000b0 	cmpltui	r2,r2,2
 800ff5c:	1000021e 	bne	r2,zero,800ff68 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800ff60:	00bfffc4 	movi	r2,-1
 800ff64:	00000f06 	br	800ffa4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800ff68:	e13ffe17 	ldw	r4,-8(fp)
 800ff6c:	e17fff17 	ldw	r5,-4(fp)
 800ff70:	800fb480 	call	800fb48 <get_DDRAM_addr>
 800ff74:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800ff78:	e0bffc03 	ldbu	r2,-16(fp)
 800ff7c:	e13ffd17 	ldw	r4,-12(fp)
 800ff80:	100b883a 	mov	r5,r2
 800ff84:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800ff88:	e0bffd17 	ldw	r2,-12(fp)
 800ff8c:	10800a17 	ldw	r2,40(r2)
 800ff90:	10800044 	addi	r2,r2,1
 800ff94:	1007883a 	mov	r3,r2
 800ff98:	00800084 	movi	r2,2
 800ff9c:	18800025 	stbio	r2,0(r3)
	return 0;
 800ffa0:	0005883a 	mov	r2,zero
}
 800ffa4:	e037883a 	mov	sp,fp
 800ffa8:	dfc00117 	ldw	ra,4(sp)
 800ffac:	df000017 	ldw	fp,0(sp)
 800ffb0:	dec00204 	addi	sp,sp,8
 800ffb4:	f800283a 	ret

0800ffb8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800ffb8:	defffd04 	addi	sp,sp,-12
 800ffbc:	dfc00215 	stw	ra,8(sp)
 800ffc0:	df000115 	stw	fp,4(sp)
 800ffc4:	df000104 	addi	fp,sp,4
 800ffc8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800ffcc:	e13fff17 	ldw	r4,-4(fp)
 800ffd0:	01400304 	movi	r5,12
 800ffd4:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
}
 800ffd8:	e037883a 	mov	sp,fp
 800ffdc:	dfc00117 	ldw	ra,4(sp)
 800ffe0:	df000017 	ldw	fp,0(sp)
 800ffe4:	dec00204 	addi	sp,sp,8
 800ffe8:	f800283a 	ret

0800ffec <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800ffec:	defffd04 	addi	sp,sp,-12
 800fff0:	dfc00215 	stw	ra,8(sp)
 800fff4:	df000115 	stw	fp,4(sp)
 800fff8:	df000104 	addi	fp,sp,4
 800fffc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8010000:	e13fff17 	ldw	r4,-4(fp)
 8010004:	014003c4 	movi	r5,15
 8010008:	800fbbc0 	call	800fbbc <alt_up_character_lcd_send_cmd>
}
 801000c:	e037883a 	mov	sp,fp
 8010010:	dfc00117 	ldw	ra,4(sp)
 8010014:	df000017 	ldw	fp,0(sp)
 8010018:	dec00204 	addi	sp,sp,8
 801001c:	f800283a 	ret

08010020 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010020:	defff504 	addi	sp,sp,-44
 8010024:	df000a15 	stw	fp,40(sp)
 8010028:	df000a04 	addi	fp,sp,40
 801002c:	e13ffc15 	stw	r4,-16(fp)
 8010030:	e17ffd15 	stw	r5,-12(fp)
 8010034:	e1bffe15 	stw	r6,-8(fp)
 8010038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801003c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010040:	00820074 	movhi	r2,2049
 8010044:	1092c004 	addi	r2,r2,19200
 8010048:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801004c:	10003f26 	beq	r2,zero,801014c <alt_alarm_start+0x12c>
  {
    if (alarm)
 8010050:	e0bffc17 	ldw	r2,-16(fp)
 8010054:	10003b26 	beq	r2,zero,8010144 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8010058:	e0bffc17 	ldw	r2,-16(fp)
 801005c:	e0fffe17 	ldw	r3,-8(fp)
 8010060:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010064:	e0bffc17 	ldw	r2,-16(fp)
 8010068:	e0ffff17 	ldw	r3,-4(fp)
 801006c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010070:	0005303a 	rdctl	r2,status
 8010074:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010078:	e0fff817 	ldw	r3,-32(fp)
 801007c:	00bfff84 	movi	r2,-2
 8010080:	1884703a 	and	r2,r3,r2
 8010084:	1001703a 	wrctl	status,r2
  
  return context;
 8010088:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801008c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010090:	00820074 	movhi	r2,2049
 8010094:	1092c104 	addi	r2,r2,19204
 8010098:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801009c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80100a0:	e0fffd17 	ldw	r3,-12(fp)
 80100a4:	e0bff617 	ldw	r2,-40(fp)
 80100a8:	1885883a 	add	r2,r3,r2
 80100ac:	10c00044 	addi	r3,r2,1
 80100b0:	e0bffc17 	ldw	r2,-16(fp)
 80100b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80100b8:	e0bffc17 	ldw	r2,-16(fp)
 80100bc:	10c00217 	ldw	r3,8(r2)
 80100c0:	e0bff617 	ldw	r2,-40(fp)
 80100c4:	1880042e 	bgeu	r3,r2,80100d8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 80100c8:	e0bffc17 	ldw	r2,-16(fp)
 80100cc:	00c00044 	movi	r3,1
 80100d0:	10c00405 	stb	r3,16(r2)
 80100d4:	00000206 	br	80100e0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80100d8:	e0bffc17 	ldw	r2,-16(fp)
 80100dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80100e0:	e0fffc17 	ldw	r3,-16(fp)
 80100e4:	00820074 	movhi	r2,2049
 80100e8:	108bbc04 	addi	r2,r2,12016
 80100ec:	e0bff915 	stw	r2,-28(fp)
 80100f0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80100f4:	e0bffa17 	ldw	r2,-24(fp)
 80100f8:	e0fff917 	ldw	r3,-28(fp)
 80100fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010100:	e0bff917 	ldw	r2,-28(fp)
 8010104:	10c00017 	ldw	r3,0(r2)
 8010108:	e0bffa17 	ldw	r2,-24(fp)
 801010c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010110:	e0bff917 	ldw	r2,-28(fp)
 8010114:	10800017 	ldw	r2,0(r2)
 8010118:	e0fffa17 	ldw	r3,-24(fp)
 801011c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010120:	e0bff917 	ldw	r2,-28(fp)
 8010124:	e0fffa17 	ldw	r3,-24(fp)
 8010128:	10c00015 	stw	r3,0(r2)
 801012c:	e0bff717 	ldw	r2,-36(fp)
 8010130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010134:	e0bffb17 	ldw	r2,-20(fp)
 8010138:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801013c:	0005883a 	mov	r2,zero
 8010140:	00000306 	br	8010150 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010144:	00bffa84 	movi	r2,-22
 8010148:	00000106 	br	8010150 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801014c:	00bfde84 	movi	r2,-134
  }
}
 8010150:	e037883a 	mov	sp,fp
 8010154:	df000017 	ldw	fp,0(sp)
 8010158:	dec00104 	addi	sp,sp,4
 801015c:	f800283a 	ret

08010160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010160:	deffff04 	addi	sp,sp,-4
 8010164:	df000015 	stw	fp,0(sp)
 8010168:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801016c:	e037883a 	mov	sp,fp
 8010170:	df000017 	ldw	fp,0(sp)
 8010174:	dec00104 	addi	sp,sp,4
 8010178:	f800283a 	ret

0801017c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801017c:	defffe04 	addi	sp,sp,-8
 8010180:	dfc00115 	stw	ra,4(sp)
 8010184:	df000015 	stw	fp,0(sp)
 8010188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801018c:	00820074 	movhi	r2,2049
 8010190:	108bb904 	addi	r2,r2,12004
 8010194:	10800017 	ldw	r2,0(r2)
 8010198:	10000526 	beq	r2,zero,80101b0 <alt_get_errno+0x34>
 801019c:	00820074 	movhi	r2,2049
 80101a0:	108bb904 	addi	r2,r2,12004
 80101a4:	10800017 	ldw	r2,0(r2)
 80101a8:	103ee83a 	callr	r2
 80101ac:	00000206 	br	80101b8 <alt_get_errno+0x3c>
 80101b0:	00820074 	movhi	r2,2049
 80101b4:	1092b504 	addi	r2,r2,19156
}
 80101b8:	e037883a 	mov	sp,fp
 80101bc:	dfc00117 	ldw	ra,4(sp)
 80101c0:	df000017 	ldw	fp,0(sp)
 80101c4:	dec00204 	addi	sp,sp,8
 80101c8:	f800283a 	ret

080101cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80101cc:	defffa04 	addi	sp,sp,-24
 80101d0:	dfc00515 	stw	ra,20(sp)
 80101d4:	df000415 	stw	fp,16(sp)
 80101d8:	df000404 	addi	fp,sp,16
 80101dc:	e13ffe15 	stw	r4,-8(fp)
 80101e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80101e4:	e0bffe17 	ldw	r2,-8(fp)
 80101e8:	10000326 	beq	r2,zero,80101f8 <alt_dev_llist_insert+0x2c>
 80101ec:	e0bffe17 	ldw	r2,-8(fp)
 80101f0:	10800217 	ldw	r2,8(r2)
 80101f4:	1000061e 	bne	r2,zero,8010210 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80101f8:	801017c0 	call	801017c <alt_get_errno>
 80101fc:	1007883a 	mov	r3,r2
 8010200:	00800584 	movi	r2,22
 8010204:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010208:	00bffa84 	movi	r2,-22
 801020c:	00001306 	br	801025c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010210:	e0bffe17 	ldw	r2,-8(fp)
 8010214:	e0ffff17 	ldw	r3,-4(fp)
 8010218:	e0fffc15 	stw	r3,-16(fp)
 801021c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010220:	e0bffd17 	ldw	r2,-12(fp)
 8010224:	e0fffc17 	ldw	r3,-16(fp)
 8010228:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801022c:	e0bffc17 	ldw	r2,-16(fp)
 8010230:	10c00017 	ldw	r3,0(r2)
 8010234:	e0bffd17 	ldw	r2,-12(fp)
 8010238:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801023c:	e0bffc17 	ldw	r2,-16(fp)
 8010240:	10800017 	ldw	r2,0(r2)
 8010244:	e0fffd17 	ldw	r3,-12(fp)
 8010248:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801024c:	e0bffc17 	ldw	r2,-16(fp)
 8010250:	e0fffd17 	ldw	r3,-12(fp)
 8010254:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010258:	0005883a 	mov	r2,zero
}
 801025c:	e037883a 	mov	sp,fp
 8010260:	dfc00117 	ldw	ra,4(sp)
 8010264:	df000017 	ldw	fp,0(sp)
 8010268:	dec00204 	addi	sp,sp,8
 801026c:	f800283a 	ret

08010270 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010270:	defffd04 	addi	sp,sp,-12
 8010274:	dfc00215 	stw	ra,8(sp)
 8010278:	df000115 	stw	fp,4(sp)
 801027c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010280:	00820074 	movhi	r2,2049
 8010284:	1083d004 	addi	r2,r2,3904
 8010288:	e0bfff15 	stw	r2,-4(fp)
 801028c:	00000606 	br	80102a8 <_do_ctors+0x38>
        (*ctor) (); 
 8010290:	e0bfff17 	ldw	r2,-4(fp)
 8010294:	10800017 	ldw	r2,0(r2)
 8010298:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801029c:	e0bfff17 	ldw	r2,-4(fp)
 80102a0:	10bfff04 	addi	r2,r2,-4
 80102a4:	e0bfff15 	stw	r2,-4(fp)
 80102a8:	e0ffff17 	ldw	r3,-4(fp)
 80102ac:	00820074 	movhi	r2,2049
 80102b0:	1083d104 	addi	r2,r2,3908
 80102b4:	18bff62e 	bgeu	r3,r2,8010290 <__alt_data_end+0xfc010290>
        (*ctor) (); 
}
 80102b8:	e037883a 	mov	sp,fp
 80102bc:	dfc00117 	ldw	ra,4(sp)
 80102c0:	df000017 	ldw	fp,0(sp)
 80102c4:	dec00204 	addi	sp,sp,8
 80102c8:	f800283a 	ret

080102cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80102cc:	defffd04 	addi	sp,sp,-12
 80102d0:	dfc00215 	stw	ra,8(sp)
 80102d4:	df000115 	stw	fp,4(sp)
 80102d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80102dc:	00820074 	movhi	r2,2049
 80102e0:	1083d004 	addi	r2,r2,3904
 80102e4:	e0bfff15 	stw	r2,-4(fp)
 80102e8:	00000606 	br	8010304 <_do_dtors+0x38>
        (*dtor) (); 
 80102ec:	e0bfff17 	ldw	r2,-4(fp)
 80102f0:	10800017 	ldw	r2,0(r2)
 80102f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80102f8:	e0bfff17 	ldw	r2,-4(fp)
 80102fc:	10bfff04 	addi	r2,r2,-4
 8010300:	e0bfff15 	stw	r2,-4(fp)
 8010304:	e0ffff17 	ldw	r3,-4(fp)
 8010308:	00820074 	movhi	r2,2049
 801030c:	1083d104 	addi	r2,r2,3908
 8010310:	18bff62e 	bgeu	r3,r2,80102ec <__alt_data_end+0xfc0102ec>
        (*dtor) (); 
}
 8010314:	e037883a 	mov	sp,fp
 8010318:	dfc00117 	ldw	ra,4(sp)
 801031c:	df000017 	ldw	fp,0(sp)
 8010320:	dec00204 	addi	sp,sp,8
 8010324:	f800283a 	ret

08010328 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010328:	defffa04 	addi	sp,sp,-24
 801032c:	dfc00515 	stw	ra,20(sp)
 8010330:	df000415 	stw	fp,16(sp)
 8010334:	df000404 	addi	fp,sp,16
 8010338:	e13ffe15 	stw	r4,-8(fp)
 801033c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010340:	e0bfff17 	ldw	r2,-4(fp)
 8010344:	10800017 	ldw	r2,0(r2)
 8010348:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801034c:	e13ffe17 	ldw	r4,-8(fp)
 8010350:	8002a1c0 	call	8002a1c <strlen>
 8010354:	10800044 	addi	r2,r2,1
 8010358:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801035c:	00000d06 	br	8010394 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010360:	e0bffc17 	ldw	r2,-16(fp)
 8010364:	10c00217 	ldw	r3,8(r2)
 8010368:	e0bffd17 	ldw	r2,-12(fp)
 801036c:	1809883a 	mov	r4,r3
 8010370:	e17ffe17 	ldw	r5,-8(fp)
 8010374:	100d883a 	mov	r6,r2
 8010378:	8010bec0 	call	8010bec <memcmp>
 801037c:	1000021e 	bne	r2,zero,8010388 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010380:	e0bffc17 	ldw	r2,-16(fp)
 8010384:	00000706 	br	80103a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010388:	e0bffc17 	ldw	r2,-16(fp)
 801038c:	10800017 	ldw	r2,0(r2)
 8010390:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010394:	e0fffc17 	ldw	r3,-16(fp)
 8010398:	e0bfff17 	ldw	r2,-4(fp)
 801039c:	18bff01e 	bne	r3,r2,8010360 <__alt_data_end+0xfc010360>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80103a0:	0005883a 	mov	r2,zero
}
 80103a4:	e037883a 	mov	sp,fp
 80103a8:	dfc00117 	ldw	ra,4(sp)
 80103ac:	df000017 	ldw	fp,0(sp)
 80103b0:	dec00204 	addi	sp,sp,8
 80103b4:	f800283a 	ret

080103b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80103b8:	defffb04 	addi	sp,sp,-20
 80103bc:	dfc00415 	stw	ra,16(sp)
 80103c0:	df000315 	stw	fp,12(sp)
 80103c4:	df000304 	addi	fp,sp,12
 80103c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80103cc:	00820074 	movhi	r2,2049
 80103d0:	108bb404 	addi	r2,r2,11984
 80103d4:	10800017 	ldw	r2,0(r2)
 80103d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80103dc:	00003106 	br	80104a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80103e0:	e0bffd17 	ldw	r2,-12(fp)
 80103e4:	10800217 	ldw	r2,8(r2)
 80103e8:	1009883a 	mov	r4,r2
 80103ec:	8002a1c0 	call	8002a1c <strlen>
 80103f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80103f4:	e0bffd17 	ldw	r2,-12(fp)
 80103f8:	10c00217 	ldw	r3,8(r2)
 80103fc:	e0bffe17 	ldw	r2,-8(fp)
 8010400:	10bfffc4 	addi	r2,r2,-1
 8010404:	1885883a 	add	r2,r3,r2
 8010408:	10800003 	ldbu	r2,0(r2)
 801040c:	10803fcc 	andi	r2,r2,255
 8010410:	1080201c 	xori	r2,r2,128
 8010414:	10bfe004 	addi	r2,r2,-128
 8010418:	10800bd8 	cmpnei	r2,r2,47
 801041c:	1000031e 	bne	r2,zero,801042c <alt_find_file+0x74>
    {
      len -= 1;
 8010420:	e0bffe17 	ldw	r2,-8(fp)
 8010424:	10bfffc4 	addi	r2,r2,-1
 8010428:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801042c:	e0bffe17 	ldw	r2,-8(fp)
 8010430:	e0ffff17 	ldw	r3,-4(fp)
 8010434:	1885883a 	add	r2,r3,r2
 8010438:	10800003 	ldbu	r2,0(r2)
 801043c:	10803fcc 	andi	r2,r2,255
 8010440:	1080201c 	xori	r2,r2,128
 8010444:	10bfe004 	addi	r2,r2,-128
 8010448:	10800be0 	cmpeqi	r2,r2,47
 801044c:	1000081e 	bne	r2,zero,8010470 <alt_find_file+0xb8>
 8010450:	e0bffe17 	ldw	r2,-8(fp)
 8010454:	e0ffff17 	ldw	r3,-4(fp)
 8010458:	1885883a 	add	r2,r3,r2
 801045c:	10800003 	ldbu	r2,0(r2)
 8010460:	10803fcc 	andi	r2,r2,255
 8010464:	1080201c 	xori	r2,r2,128
 8010468:	10bfe004 	addi	r2,r2,-128
 801046c:	10000a1e 	bne	r2,zero,8010498 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010470:	e0bffd17 	ldw	r2,-12(fp)
 8010474:	10c00217 	ldw	r3,8(r2)
 8010478:	e0bffe17 	ldw	r2,-8(fp)
 801047c:	1809883a 	mov	r4,r3
 8010480:	e17fff17 	ldw	r5,-4(fp)
 8010484:	100d883a 	mov	r6,r2
 8010488:	8010bec0 	call	8010bec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801048c:	1000021e 	bne	r2,zero,8010498 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010490:	e0bffd17 	ldw	r2,-12(fp)
 8010494:	00000806 	br	80104b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010498:	e0bffd17 	ldw	r2,-12(fp)
 801049c:	10800017 	ldw	r2,0(r2)
 80104a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80104a4:	e0fffd17 	ldw	r3,-12(fp)
 80104a8:	00820074 	movhi	r2,2049
 80104ac:	108bb404 	addi	r2,r2,11984
 80104b0:	18bfcb1e 	bne	r3,r2,80103e0 <__alt_data_end+0xfc0103e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80104b4:	0005883a 	mov	r2,zero
}
 80104b8:	e037883a 	mov	sp,fp
 80104bc:	dfc00117 	ldw	ra,4(sp)
 80104c0:	df000017 	ldw	fp,0(sp)
 80104c4:	dec00204 	addi	sp,sp,8
 80104c8:	f800283a 	ret

080104cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80104cc:	defffa04 	addi	sp,sp,-24
 80104d0:	dfc00515 	stw	ra,20(sp)
 80104d4:	df000415 	stw	fp,16(sp)
 80104d8:	dc000315 	stw	r16,12(sp)
 80104dc:	df000404 	addi	fp,sp,16
 80104e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80104e4:	00bffa04 	movi	r2,-24
 80104e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80104ec:	e03ffc15 	stw	zero,-16(fp)
 80104f0:	00002106 	br	8010578 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 80104f4:	04020074 	movhi	r16,2049
 80104f8:	8406fa04 	addi	r16,r16,7144
 80104fc:	e0bffc17 	ldw	r2,-16(fp)
 8010500:	1009883a 	mov	r4,r2
 8010504:	01400304 	movi	r5,12
 8010508:	800b0800 	call	800b080 <__mulsi3>
 801050c:	8085883a 	add	r2,r16,r2
 8010510:	10800017 	ldw	r2,0(r2)
 8010514:	1000151e 	bne	r2,zero,801056c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010518:	04020074 	movhi	r16,2049
 801051c:	8406fa04 	addi	r16,r16,7144
 8010520:	e0bffc17 	ldw	r2,-16(fp)
 8010524:	1009883a 	mov	r4,r2
 8010528:	01400304 	movi	r5,12
 801052c:	800b0800 	call	800b080 <__mulsi3>
 8010530:	8085883a 	add	r2,r16,r2
 8010534:	e0fffe17 	ldw	r3,-8(fp)
 8010538:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801053c:	00820074 	movhi	r2,2049
 8010540:	108bb804 	addi	r2,r2,12000
 8010544:	10c00017 	ldw	r3,0(r2)
 8010548:	e0bffc17 	ldw	r2,-16(fp)
 801054c:	1880040e 	bge	r3,r2,8010560 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010550:	00820074 	movhi	r2,2049
 8010554:	108bb804 	addi	r2,r2,12000
 8010558:	e0fffc17 	ldw	r3,-16(fp)
 801055c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010560:	e0bffc17 	ldw	r2,-16(fp)
 8010564:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010568:	00000606 	br	8010584 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801056c:	e0bffc17 	ldw	r2,-16(fp)
 8010570:	10800044 	addi	r2,r2,1
 8010574:	e0bffc15 	stw	r2,-16(fp)
 8010578:	e0bffc17 	ldw	r2,-16(fp)
 801057c:	10800810 	cmplti	r2,r2,32
 8010580:	103fdc1e 	bne	r2,zero,80104f4 <__alt_data_end+0xfc0104f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010584:	e0bffd17 	ldw	r2,-12(fp)
}
 8010588:	e6ffff04 	addi	sp,fp,-4
 801058c:	dfc00217 	ldw	ra,8(sp)
 8010590:	df000117 	ldw	fp,4(sp)
 8010594:	dc000017 	ldw	r16,0(sp)
 8010598:	dec00304 	addi	sp,sp,12
 801059c:	f800283a 	ret

080105a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80105a0:	deffff04 	addi	sp,sp,-4
 80105a4:	df000015 	stw	fp,0(sp)
 80105a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80105ac:	e037883a 	mov	sp,fp
 80105b0:	df000017 	ldw	fp,0(sp)
 80105b4:	dec00104 	addi	sp,sp,4
 80105b8:	f800283a 	ret

080105bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80105bc:	defff904 	addi	sp,sp,-28
 80105c0:	dfc00615 	stw	ra,24(sp)
 80105c4:	df000515 	stw	fp,20(sp)
 80105c8:	df000504 	addi	fp,sp,20
 80105cc:	e13ffc15 	stw	r4,-16(fp)
 80105d0:	e17ffd15 	stw	r5,-12(fp)
 80105d4:	e1bffe15 	stw	r6,-8(fp)
 80105d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80105dc:	e0800217 	ldw	r2,8(fp)
 80105e0:	d8800015 	stw	r2,0(sp)
 80105e4:	e13ffc17 	ldw	r4,-16(fp)
 80105e8:	e17ffd17 	ldw	r5,-12(fp)
 80105ec:	e1bffe17 	ldw	r6,-8(fp)
 80105f0:	e1ffff17 	ldw	r7,-4(fp)
 80105f4:	801079c0 	call	801079c <alt_iic_isr_register>
}  
 80105f8:	e037883a 	mov	sp,fp
 80105fc:	dfc00117 	ldw	ra,4(sp)
 8010600:	df000017 	ldw	fp,0(sp)
 8010604:	dec00204 	addi	sp,sp,8
 8010608:	f800283a 	ret

0801060c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801060c:	defff904 	addi	sp,sp,-28
 8010610:	df000615 	stw	fp,24(sp)
 8010614:	df000604 	addi	fp,sp,24
 8010618:	e13ffe15 	stw	r4,-8(fp)
 801061c:	e17fff15 	stw	r5,-4(fp)
 8010620:	e0bfff17 	ldw	r2,-4(fp)
 8010624:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010628:	0005303a 	rdctl	r2,status
 801062c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010630:	e0fffb17 	ldw	r3,-20(fp)
 8010634:	00bfff84 	movi	r2,-2
 8010638:	1884703a 	and	r2,r3,r2
 801063c:	1001703a 	wrctl	status,r2
  
  return context;
 8010640:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010644:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010648:	e0bffa17 	ldw	r2,-24(fp)
 801064c:	00c00044 	movi	r3,1
 8010650:	1884983a 	sll	r2,r3,r2
 8010654:	1007883a 	mov	r3,r2
 8010658:	00820074 	movhi	r2,2049
 801065c:	1092bf04 	addi	r2,r2,19196
 8010660:	10800017 	ldw	r2,0(r2)
 8010664:	1886b03a 	or	r3,r3,r2
 8010668:	00820074 	movhi	r2,2049
 801066c:	1092bf04 	addi	r2,r2,19196
 8010670:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010674:	00820074 	movhi	r2,2049
 8010678:	1092bf04 	addi	r2,r2,19196
 801067c:	10800017 	ldw	r2,0(r2)
 8010680:	100170fa 	wrctl	ienable,r2
 8010684:	e0bffc17 	ldw	r2,-16(fp)
 8010688:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801068c:	e0bffd17 	ldw	r2,-12(fp)
 8010690:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010694:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010698:	0001883a 	nop
}
 801069c:	e037883a 	mov	sp,fp
 80106a0:	df000017 	ldw	fp,0(sp)
 80106a4:	dec00104 	addi	sp,sp,4
 80106a8:	f800283a 	ret

080106ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80106ac:	defff904 	addi	sp,sp,-28
 80106b0:	df000615 	stw	fp,24(sp)
 80106b4:	df000604 	addi	fp,sp,24
 80106b8:	e13ffe15 	stw	r4,-8(fp)
 80106bc:	e17fff15 	stw	r5,-4(fp)
 80106c0:	e0bfff17 	ldw	r2,-4(fp)
 80106c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106c8:	0005303a 	rdctl	r2,status
 80106cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80106d0:	e0fffb17 	ldw	r3,-20(fp)
 80106d4:	00bfff84 	movi	r2,-2
 80106d8:	1884703a 	and	r2,r3,r2
 80106dc:	1001703a 	wrctl	status,r2
  
  return context;
 80106e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80106e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80106e8:	e0bffa17 	ldw	r2,-24(fp)
 80106ec:	00c00044 	movi	r3,1
 80106f0:	1884983a 	sll	r2,r3,r2
 80106f4:	0084303a 	nor	r2,zero,r2
 80106f8:	1007883a 	mov	r3,r2
 80106fc:	00820074 	movhi	r2,2049
 8010700:	1092bf04 	addi	r2,r2,19196
 8010704:	10800017 	ldw	r2,0(r2)
 8010708:	1886703a 	and	r3,r3,r2
 801070c:	00820074 	movhi	r2,2049
 8010710:	1092bf04 	addi	r2,r2,19196
 8010714:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010718:	00820074 	movhi	r2,2049
 801071c:	1092bf04 	addi	r2,r2,19196
 8010720:	10800017 	ldw	r2,0(r2)
 8010724:	100170fa 	wrctl	ienable,r2
 8010728:	e0bffc17 	ldw	r2,-16(fp)
 801072c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010730:	e0bffd17 	ldw	r2,-12(fp)
 8010734:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010738:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801073c:	0001883a 	nop
}
 8010740:	e037883a 	mov	sp,fp
 8010744:	df000017 	ldw	fp,0(sp)
 8010748:	dec00104 	addi	sp,sp,4
 801074c:	f800283a 	ret

08010750 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010750:	defffc04 	addi	sp,sp,-16
 8010754:	df000315 	stw	fp,12(sp)
 8010758:	df000304 	addi	fp,sp,12
 801075c:	e13ffe15 	stw	r4,-8(fp)
 8010760:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010764:	000530fa 	rdctl	r2,ienable
 8010768:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801076c:	e0bfff17 	ldw	r2,-4(fp)
 8010770:	00c00044 	movi	r3,1
 8010774:	1884983a 	sll	r2,r3,r2
 8010778:	1007883a 	mov	r3,r2
 801077c:	e0bffd17 	ldw	r2,-12(fp)
 8010780:	1884703a 	and	r2,r3,r2
 8010784:	1004c03a 	cmpne	r2,r2,zero
 8010788:	10803fcc 	andi	r2,r2,255
}
 801078c:	e037883a 	mov	sp,fp
 8010790:	df000017 	ldw	fp,0(sp)
 8010794:	dec00104 	addi	sp,sp,4
 8010798:	f800283a 	ret

0801079c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801079c:	defff504 	addi	sp,sp,-44
 80107a0:	dfc00a15 	stw	ra,40(sp)
 80107a4:	df000915 	stw	fp,36(sp)
 80107a8:	df000904 	addi	fp,sp,36
 80107ac:	e13ffc15 	stw	r4,-16(fp)
 80107b0:	e17ffd15 	stw	r5,-12(fp)
 80107b4:	e1bffe15 	stw	r6,-8(fp)
 80107b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80107bc:	00bffa84 	movi	r2,-22
 80107c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80107c4:	e0bffd17 	ldw	r2,-12(fp)
 80107c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80107cc:	e0bff817 	ldw	r2,-32(fp)
 80107d0:	10800808 	cmpgei	r2,r2,32
 80107d4:	1000271e 	bne	r2,zero,8010874 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80107d8:	0005303a 	rdctl	r2,status
 80107dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80107e0:	e0fffa17 	ldw	r3,-24(fp)
 80107e4:	00bfff84 	movi	r2,-2
 80107e8:	1884703a 	and	r2,r3,r2
 80107ec:	1001703a 	wrctl	status,r2
  
  return context;
 80107f0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80107f4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 80107f8:	00820074 	movhi	r2,2049
 80107fc:	1092cc04 	addi	r2,r2,19248
 8010800:	e0fff817 	ldw	r3,-32(fp)
 8010804:	180690fa 	slli	r3,r3,3
 8010808:	10c5883a 	add	r2,r2,r3
 801080c:	e0fffe17 	ldw	r3,-8(fp)
 8010810:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010814:	00820074 	movhi	r2,2049
 8010818:	1092cc04 	addi	r2,r2,19248
 801081c:	e0fff817 	ldw	r3,-32(fp)
 8010820:	180690fa 	slli	r3,r3,3
 8010824:	10c5883a 	add	r2,r2,r3
 8010828:	10800104 	addi	r2,r2,4
 801082c:	e0ffff17 	ldw	r3,-4(fp)
 8010830:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010834:	e0bffe17 	ldw	r2,-8(fp)
 8010838:	10000526 	beq	r2,zero,8010850 <alt_iic_isr_register+0xb4>
 801083c:	e0bff817 	ldw	r2,-32(fp)
 8010840:	e13ffc17 	ldw	r4,-16(fp)
 8010844:	100b883a 	mov	r5,r2
 8010848:	801060c0 	call	801060c <alt_ic_irq_enable>
 801084c:	00000406 	br	8010860 <alt_iic_isr_register+0xc4>
 8010850:	e0bff817 	ldw	r2,-32(fp)
 8010854:	e13ffc17 	ldw	r4,-16(fp)
 8010858:	100b883a 	mov	r5,r2
 801085c:	80106ac0 	call	80106ac <alt_ic_irq_disable>
 8010860:	e0bff715 	stw	r2,-36(fp)
 8010864:	e0bff917 	ldw	r2,-28(fp)
 8010868:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801086c:	e0bffb17 	ldw	r2,-20(fp)
 8010870:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010874:	e0bff717 	ldw	r2,-36(fp)
}
 8010878:	e037883a 	mov	sp,fp
 801087c:	dfc00117 	ldw	ra,4(sp)
 8010880:	df000017 	ldw	fp,0(sp)
 8010884:	dec00204 	addi	sp,sp,8
 8010888:	f800283a 	ret

0801088c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801088c:	defff804 	addi	sp,sp,-32
 8010890:	dfc00715 	stw	ra,28(sp)
 8010894:	df000615 	stw	fp,24(sp)
 8010898:	dc000515 	stw	r16,20(sp)
 801089c:	df000604 	addi	fp,sp,24
 80108a0:	e13ffb15 	stw	r4,-20(fp)
 80108a4:	e17ffc15 	stw	r5,-16(fp)
 80108a8:	e1bffd15 	stw	r6,-12(fp)
 80108ac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80108b0:	e13ffc17 	ldw	r4,-16(fp)
 80108b4:	e17ffd17 	ldw	r5,-12(fp)
 80108b8:	e1bffe17 	ldw	r6,-8(fp)
 80108bc:	800e0080 	call	800e008 <open>
 80108c0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80108c4:	e0bffa17 	ldw	r2,-24(fp)
 80108c8:	10002216 	blt	r2,zero,8010954 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80108cc:	04020074 	movhi	r16,2049
 80108d0:	8406fa04 	addi	r16,r16,7144
 80108d4:	e0bffa17 	ldw	r2,-24(fp)
 80108d8:	1009883a 	mov	r4,r2
 80108dc:	01400304 	movi	r5,12
 80108e0:	800b0800 	call	800b080 <__mulsi3>
 80108e4:	8085883a 	add	r2,r16,r2
 80108e8:	10c00017 	ldw	r3,0(r2)
 80108ec:	e0bffb17 	ldw	r2,-20(fp)
 80108f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80108f4:	04020074 	movhi	r16,2049
 80108f8:	8406fa04 	addi	r16,r16,7144
 80108fc:	e0bffa17 	ldw	r2,-24(fp)
 8010900:	1009883a 	mov	r4,r2
 8010904:	01400304 	movi	r5,12
 8010908:	800b0800 	call	800b080 <__mulsi3>
 801090c:	8085883a 	add	r2,r16,r2
 8010910:	10800104 	addi	r2,r2,4
 8010914:	10c00017 	ldw	r3,0(r2)
 8010918:	e0bffb17 	ldw	r2,-20(fp)
 801091c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010920:	04020074 	movhi	r16,2049
 8010924:	8406fa04 	addi	r16,r16,7144
 8010928:	e0bffa17 	ldw	r2,-24(fp)
 801092c:	1009883a 	mov	r4,r2
 8010930:	01400304 	movi	r5,12
 8010934:	800b0800 	call	800b080 <__mulsi3>
 8010938:	8085883a 	add	r2,r16,r2
 801093c:	10800204 	addi	r2,r2,8
 8010940:	10c00017 	ldw	r3,0(r2)
 8010944:	e0bffb17 	ldw	r2,-20(fp)
 8010948:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801094c:	e13ffa17 	ldw	r4,-24(fp)
 8010950:	800e2bc0 	call	800e2bc <alt_release_fd>
  }
} 
 8010954:	e6ffff04 	addi	sp,fp,-4
 8010958:	dfc00217 	ldw	ra,8(sp)
 801095c:	df000117 	ldw	fp,4(sp)
 8010960:	dc000017 	ldw	r16,0(sp)
 8010964:	dec00304 	addi	sp,sp,12
 8010968:	f800283a 	ret

0801096c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801096c:	defffb04 	addi	sp,sp,-20
 8010970:	dfc00415 	stw	ra,16(sp)
 8010974:	df000315 	stw	fp,12(sp)
 8010978:	df000304 	addi	fp,sp,12
 801097c:	e13ffd15 	stw	r4,-12(fp)
 8010980:	e17ffe15 	stw	r5,-8(fp)
 8010984:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010988:	01020074 	movhi	r4,2049
 801098c:	2106fd04 	addi	r4,r4,7156
 8010990:	e17ffd17 	ldw	r5,-12(fp)
 8010994:	01800044 	movi	r6,1
 8010998:	01c07fc4 	movi	r7,511
 801099c:	801088c0 	call	801088c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80109a0:	01020074 	movhi	r4,2049
 80109a4:	2106fa04 	addi	r4,r4,7144
 80109a8:	e17ffe17 	ldw	r5,-8(fp)
 80109ac:	000d883a 	mov	r6,zero
 80109b0:	01c07fc4 	movi	r7,511
 80109b4:	801088c0 	call	801088c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80109b8:	01020074 	movhi	r4,2049
 80109bc:	21070004 	addi	r4,r4,7168
 80109c0:	e17fff17 	ldw	r5,-4(fp)
 80109c4:	01800044 	movi	r6,1
 80109c8:	01c07fc4 	movi	r7,511
 80109cc:	801088c0 	call	801088c <alt_open_fd>
}  
 80109d0:	e037883a 	mov	sp,fp
 80109d4:	dfc00117 	ldw	ra,4(sp)
 80109d8:	df000017 	ldw	fp,0(sp)
 80109dc:	dec00204 	addi	sp,sp,8
 80109e0:	f800283a 	ret

080109e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80109e4:	defffa04 	addi	sp,sp,-24
 80109e8:	df000515 	stw	fp,20(sp)
 80109ec:	df000504 	addi	fp,sp,20
 80109f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80109f4:	0005303a 	rdctl	r2,status
 80109f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109fc:	e0fffc17 	ldw	r3,-16(fp)
 8010a00:	00bfff84 	movi	r2,-2
 8010a04:	1884703a 	and	r2,r3,r2
 8010a08:	1001703a 	wrctl	status,r2
  
  return context;
 8010a0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010a10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010a14:	e0bfff17 	ldw	r2,-4(fp)
 8010a18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010a1c:	e0bffd17 	ldw	r2,-12(fp)
 8010a20:	10800017 	ldw	r2,0(r2)
 8010a24:	e0fffd17 	ldw	r3,-12(fp)
 8010a28:	18c00117 	ldw	r3,4(r3)
 8010a2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010a30:	e0bffd17 	ldw	r2,-12(fp)
 8010a34:	10800117 	ldw	r2,4(r2)
 8010a38:	e0fffd17 	ldw	r3,-12(fp)
 8010a3c:	18c00017 	ldw	r3,0(r3)
 8010a40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010a44:	e0bffd17 	ldw	r2,-12(fp)
 8010a48:	e0fffd17 	ldw	r3,-12(fp)
 8010a4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010a50:	e0bffd17 	ldw	r2,-12(fp)
 8010a54:	e0fffd17 	ldw	r3,-12(fp)
 8010a58:	10c00015 	stw	r3,0(r2)
 8010a5c:	e0bffb17 	ldw	r2,-20(fp)
 8010a60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010a64:	e0bffe17 	ldw	r2,-8(fp)
 8010a68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010a6c:	e037883a 	mov	sp,fp
 8010a70:	df000017 	ldw	fp,0(sp)
 8010a74:	dec00104 	addi	sp,sp,4
 8010a78:	f800283a 	ret

08010a7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010a7c:	defffb04 	addi	sp,sp,-20
 8010a80:	dfc00415 	stw	ra,16(sp)
 8010a84:	df000315 	stw	fp,12(sp)
 8010a88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010a8c:	d0a00e17 	ldw	r2,-32712(gp)
 8010a90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010a94:	d0a71317 	ldw	r2,-25524(gp)
 8010a98:	10800044 	addi	r2,r2,1
 8010a9c:	d0a71315 	stw	r2,-25524(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010aa0:	00002e06 	br	8010b5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010aa4:	e0bffd17 	ldw	r2,-12(fp)
 8010aa8:	10800017 	ldw	r2,0(r2)
 8010aac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010ab0:	e0bffd17 	ldw	r2,-12(fp)
 8010ab4:	10800403 	ldbu	r2,16(r2)
 8010ab8:	10803fcc 	andi	r2,r2,255
 8010abc:	10000426 	beq	r2,zero,8010ad0 <alt_tick+0x54>
 8010ac0:	d0a71317 	ldw	r2,-25524(gp)
 8010ac4:	1000021e 	bne	r2,zero,8010ad0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010ac8:	e0bffd17 	ldw	r2,-12(fp)
 8010acc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010ad0:	e0bffd17 	ldw	r2,-12(fp)
 8010ad4:	10800217 	ldw	r2,8(r2)
 8010ad8:	d0e71317 	ldw	r3,-25524(gp)
 8010adc:	18801d36 	bltu	r3,r2,8010b54 <alt_tick+0xd8>
 8010ae0:	e0bffd17 	ldw	r2,-12(fp)
 8010ae4:	10800403 	ldbu	r2,16(r2)
 8010ae8:	10803fcc 	andi	r2,r2,255
 8010aec:	1000191e 	bne	r2,zero,8010b54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010af0:	e0bffd17 	ldw	r2,-12(fp)
 8010af4:	10800317 	ldw	r2,12(r2)
 8010af8:	e0fffd17 	ldw	r3,-12(fp)
 8010afc:	18c00517 	ldw	r3,20(r3)
 8010b00:	1809883a 	mov	r4,r3
 8010b04:	103ee83a 	callr	r2
 8010b08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010b0c:	e0bfff17 	ldw	r2,-4(fp)
 8010b10:	1000031e 	bne	r2,zero,8010b20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010b14:	e13ffd17 	ldw	r4,-12(fp)
 8010b18:	80109e40 	call	80109e4 <alt_alarm_stop>
 8010b1c:	00000d06 	br	8010b54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010b20:	e0bffd17 	ldw	r2,-12(fp)
 8010b24:	10c00217 	ldw	r3,8(r2)
 8010b28:	e0bfff17 	ldw	r2,-4(fp)
 8010b2c:	1887883a 	add	r3,r3,r2
 8010b30:	e0bffd17 	ldw	r2,-12(fp)
 8010b34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010b38:	e0bffd17 	ldw	r2,-12(fp)
 8010b3c:	10c00217 	ldw	r3,8(r2)
 8010b40:	d0a71317 	ldw	r2,-25524(gp)
 8010b44:	1880032e 	bgeu	r3,r2,8010b54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010b48:	e0bffd17 	ldw	r2,-12(fp)
 8010b4c:	00c00044 	movi	r3,1
 8010b50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010b54:	e0bffe17 	ldw	r2,-8(fp)
 8010b58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010b5c:	e0fffd17 	ldw	r3,-12(fp)
 8010b60:	d0a00e04 	addi	r2,gp,-32712
 8010b64:	18bfcf1e 	bne	r3,r2,8010aa4 <__alt_data_end+0xfc010aa4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010b68:	0001883a 	nop
}
 8010b6c:	e037883a 	mov	sp,fp
 8010b70:	dfc00117 	ldw	ra,4(sp)
 8010b74:	df000017 	ldw	fp,0(sp)
 8010b78:	dec00204 	addi	sp,sp,8
 8010b7c:	f800283a 	ret

08010b80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8010b80:	deffff04 	addi	sp,sp,-4
 8010b84:	df000015 	stw	fp,0(sp)
 8010b88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010b8c:	000170fa 	wrctl	ienable,zero
}
 8010b90:	e037883a 	mov	sp,fp
 8010b94:	df000017 	ldw	fp,0(sp)
 8010b98:	dec00104 	addi	sp,sp,4
 8010b9c:	f800283a 	ret

08010ba0 <atexit>:
 8010ba0:	200b883a 	mov	r5,r4
 8010ba4:	000d883a 	mov	r6,zero
 8010ba8:	0009883a 	mov	r4,zero
 8010bac:	000f883a 	mov	r7,zero
 8010bb0:	8010c681 	jmpi	8010c68 <__register_exitproc>

08010bb4 <exit>:
 8010bb4:	defffe04 	addi	sp,sp,-8
 8010bb8:	000b883a 	mov	r5,zero
 8010bbc:	dc000015 	stw	r16,0(sp)
 8010bc0:	dfc00115 	stw	ra,4(sp)
 8010bc4:	2021883a 	mov	r16,r4
 8010bc8:	8010d7c0 	call	8010d7c <__call_exitprocs>
 8010bcc:	00820074 	movhi	r2,2049
 8010bd0:	108bae04 	addi	r2,r2,11960
 8010bd4:	11000017 	ldw	r4,0(r2)
 8010bd8:	20800f17 	ldw	r2,60(r4)
 8010bdc:	10000126 	beq	r2,zero,8010be4 <exit+0x30>
 8010be0:	103ee83a 	callr	r2
 8010be4:	8009883a 	mov	r4,r16
 8010be8:	8010f100 	call	8010f10 <_exit>

08010bec <memcmp>:
 8010bec:	01c000c4 	movi	r7,3
 8010bf0:	3980192e 	bgeu	r7,r6,8010c58 <memcmp+0x6c>
 8010bf4:	2144b03a 	or	r2,r4,r5
 8010bf8:	11c4703a 	and	r2,r2,r7
 8010bfc:	10000f26 	beq	r2,zero,8010c3c <memcmp+0x50>
 8010c00:	20800003 	ldbu	r2,0(r4)
 8010c04:	28c00003 	ldbu	r3,0(r5)
 8010c08:	10c0151e 	bne	r2,r3,8010c60 <memcmp+0x74>
 8010c0c:	31bfff84 	addi	r6,r6,-2
 8010c10:	01ffffc4 	movi	r7,-1
 8010c14:	00000406 	br	8010c28 <memcmp+0x3c>
 8010c18:	20800003 	ldbu	r2,0(r4)
 8010c1c:	28c00003 	ldbu	r3,0(r5)
 8010c20:	31bfffc4 	addi	r6,r6,-1
 8010c24:	10c00e1e 	bne	r2,r3,8010c60 <memcmp+0x74>
 8010c28:	21000044 	addi	r4,r4,1
 8010c2c:	29400044 	addi	r5,r5,1
 8010c30:	31fff91e 	bne	r6,r7,8010c18 <__alt_data_end+0xfc010c18>
 8010c34:	0005883a 	mov	r2,zero
 8010c38:	f800283a 	ret
 8010c3c:	20c00017 	ldw	r3,0(r4)
 8010c40:	28800017 	ldw	r2,0(r5)
 8010c44:	1880041e 	bne	r3,r2,8010c58 <memcmp+0x6c>
 8010c48:	31bfff04 	addi	r6,r6,-4
 8010c4c:	21000104 	addi	r4,r4,4
 8010c50:	29400104 	addi	r5,r5,4
 8010c54:	39bff936 	bltu	r7,r6,8010c3c <__alt_data_end+0xfc010c3c>
 8010c58:	303fe91e 	bne	r6,zero,8010c00 <__alt_data_end+0xfc010c00>
 8010c5c:	003ff506 	br	8010c34 <__alt_data_end+0xfc010c34>
 8010c60:	10c5c83a 	sub	r2,r2,r3
 8010c64:	f800283a 	ret

08010c68 <__register_exitproc>:
 8010c68:	00820074 	movhi	r2,2049
 8010c6c:	defffa04 	addi	sp,sp,-24
 8010c70:	108bae04 	addi	r2,r2,11960
 8010c74:	dc000315 	stw	r16,12(sp)
 8010c78:	14000017 	ldw	r16,0(r2)
 8010c7c:	dc400415 	stw	r17,16(sp)
 8010c80:	dfc00515 	stw	ra,20(sp)
 8010c84:	80805217 	ldw	r2,328(r16)
 8010c88:	2023883a 	mov	r17,r4
 8010c8c:	10003626 	beq	r2,zero,8010d68 <__register_exitproc+0x100>
 8010c90:	10c00117 	ldw	r3,4(r2)
 8010c94:	010007c4 	movi	r4,31
 8010c98:	20c00e16 	blt	r4,r3,8010cd4 <__register_exitproc+0x6c>
 8010c9c:	1a400044 	addi	r9,r3,1
 8010ca0:	8800211e 	bne	r17,zero,8010d28 <__register_exitproc+0xc0>
 8010ca4:	18c00084 	addi	r3,r3,2
 8010ca8:	18c7883a 	add	r3,r3,r3
 8010cac:	18c7883a 	add	r3,r3,r3
 8010cb0:	12400115 	stw	r9,4(r2)
 8010cb4:	10c7883a 	add	r3,r2,r3
 8010cb8:	19400015 	stw	r5,0(r3)
 8010cbc:	0005883a 	mov	r2,zero
 8010cc0:	dfc00517 	ldw	ra,20(sp)
 8010cc4:	dc400417 	ldw	r17,16(sp)
 8010cc8:	dc000317 	ldw	r16,12(sp)
 8010ccc:	dec00604 	addi	sp,sp,24
 8010cd0:	f800283a 	ret
 8010cd4:	00800034 	movhi	r2,0
 8010cd8:	10800004 	addi	r2,r2,0
 8010cdc:	10002526 	beq	r2,zero,8010d74 <__register_exitproc+0x10c>
 8010ce0:	01006404 	movi	r4,400
 8010ce4:	d9400015 	stw	r5,0(sp)
 8010ce8:	d9800115 	stw	r6,4(sp)
 8010cec:	d9c00215 	stw	r7,8(sp)
 8010cf0:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8010cf4:	d9400017 	ldw	r5,0(sp)
 8010cf8:	d9800117 	ldw	r6,4(sp)
 8010cfc:	d9c00217 	ldw	r7,8(sp)
 8010d00:	10001c26 	beq	r2,zero,8010d74 <__register_exitproc+0x10c>
 8010d04:	80c05217 	ldw	r3,328(r16)
 8010d08:	10000115 	stw	zero,4(r2)
 8010d0c:	02400044 	movi	r9,1
 8010d10:	10c00015 	stw	r3,0(r2)
 8010d14:	80805215 	stw	r2,328(r16)
 8010d18:	10006215 	stw	zero,392(r2)
 8010d1c:	10006315 	stw	zero,396(r2)
 8010d20:	0007883a 	mov	r3,zero
 8010d24:	883fdf26 	beq	r17,zero,8010ca4 <__alt_data_end+0xfc010ca4>
 8010d28:	18d1883a 	add	r8,r3,r3
 8010d2c:	4211883a 	add	r8,r8,r8
 8010d30:	1211883a 	add	r8,r2,r8
 8010d34:	41802215 	stw	r6,136(r8)
 8010d38:	01000044 	movi	r4,1
 8010d3c:	11806217 	ldw	r6,392(r2)
 8010d40:	20c8983a 	sll	r4,r4,r3
 8010d44:	310cb03a 	or	r6,r6,r4
 8010d48:	11806215 	stw	r6,392(r2)
 8010d4c:	41c04215 	stw	r7,264(r8)
 8010d50:	01800084 	movi	r6,2
 8010d54:	89bfd31e 	bne	r17,r6,8010ca4 <__alt_data_end+0xfc010ca4>
 8010d58:	11806317 	ldw	r6,396(r2)
 8010d5c:	3108b03a 	or	r4,r6,r4
 8010d60:	11006315 	stw	r4,396(r2)
 8010d64:	003fcf06 	br	8010ca4 <__alt_data_end+0xfc010ca4>
 8010d68:	80805304 	addi	r2,r16,332
 8010d6c:	80805215 	stw	r2,328(r16)
 8010d70:	003fc706 	br	8010c90 <__alt_data_end+0xfc010c90>
 8010d74:	00bfffc4 	movi	r2,-1
 8010d78:	003fd106 	br	8010cc0 <__alt_data_end+0xfc010cc0>

08010d7c <__call_exitprocs>:
 8010d7c:	00820074 	movhi	r2,2049
 8010d80:	108bae04 	addi	r2,r2,11960
 8010d84:	10800017 	ldw	r2,0(r2)
 8010d88:	defff404 	addi	sp,sp,-48
 8010d8c:	dd800815 	stw	r22,32(sp)
 8010d90:	d8800015 	stw	r2,0(sp)
 8010d94:	10805204 	addi	r2,r2,328
 8010d98:	dd000615 	stw	r20,24(sp)
 8010d9c:	dc800415 	stw	r18,16(sp)
 8010da0:	dfc00b15 	stw	ra,44(sp)
 8010da4:	df000a15 	stw	fp,40(sp)
 8010da8:	ddc00915 	stw	r23,36(sp)
 8010dac:	dd400715 	stw	r21,28(sp)
 8010db0:	dcc00515 	stw	r19,20(sp)
 8010db4:	dc400315 	stw	r17,12(sp)
 8010db8:	dc000215 	stw	r16,8(sp)
 8010dbc:	2025883a 	mov	r18,r4
 8010dc0:	2829883a 	mov	r20,r5
 8010dc4:	d8800115 	stw	r2,4(sp)
 8010dc8:	05bfffc4 	movi	r22,-1
 8010dcc:	d8800017 	ldw	r2,0(sp)
 8010dd0:	14c05217 	ldw	r19,328(r2)
 8010dd4:	98001d26 	beq	r19,zero,8010e4c <__call_exitprocs+0xd0>
 8010dd8:	dd400117 	ldw	r21,4(sp)
 8010ddc:	98800117 	ldw	r2,4(r19)
 8010de0:	173fffc4 	addi	fp,r2,-1
 8010de4:	e0000d16 	blt	fp,zero,8010e1c <__call_exitprocs+0xa0>
 8010de8:	14000044 	addi	r16,r2,1
 8010dec:	8421883a 	add	r16,r16,r16
 8010df0:	8421883a 	add	r16,r16,r16
 8010df4:	84402004 	addi	r17,r16,128
 8010df8:	9c63883a 	add	r17,r19,r17
 8010dfc:	9c21883a 	add	r16,r19,r16
 8010e00:	a0001e26 	beq	r20,zero,8010e7c <__call_exitprocs+0x100>
 8010e04:	80804017 	ldw	r2,256(r16)
 8010e08:	15001c26 	beq	r2,r20,8010e7c <__call_exitprocs+0x100>
 8010e0c:	e73fffc4 	addi	fp,fp,-1
 8010e10:	843fff04 	addi	r16,r16,-4
 8010e14:	8c7fff04 	addi	r17,r17,-4
 8010e18:	e5bff91e 	bne	fp,r22,8010e00 <__alt_data_end+0xfc010e00>
 8010e1c:	00800034 	movhi	r2,0
 8010e20:	10800004 	addi	r2,r2,0
 8010e24:	10000926 	beq	r2,zero,8010e4c <__call_exitprocs+0xd0>
 8010e28:	98800117 	ldw	r2,4(r19)
 8010e2c:	1000311e 	bne	r2,zero,8010ef4 <__call_exitprocs+0x178>
 8010e30:	98800017 	ldw	r2,0(r19)
 8010e34:	10003426 	beq	r2,zero,8010f08 <__call_exitprocs+0x18c>
 8010e38:	9809883a 	mov	r4,r19
 8010e3c:	a8800015 	stw	r2,0(r21)
 8010e40:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8010e44:	acc00017 	ldw	r19,0(r21)
 8010e48:	983fe41e 	bne	r19,zero,8010ddc <__alt_data_end+0xfc010ddc>
 8010e4c:	dfc00b17 	ldw	ra,44(sp)
 8010e50:	df000a17 	ldw	fp,40(sp)
 8010e54:	ddc00917 	ldw	r23,36(sp)
 8010e58:	dd800817 	ldw	r22,32(sp)
 8010e5c:	dd400717 	ldw	r21,28(sp)
 8010e60:	dd000617 	ldw	r20,24(sp)
 8010e64:	dcc00517 	ldw	r19,20(sp)
 8010e68:	dc800417 	ldw	r18,16(sp)
 8010e6c:	dc400317 	ldw	r17,12(sp)
 8010e70:	dc000217 	ldw	r16,8(sp)
 8010e74:	dec00c04 	addi	sp,sp,48
 8010e78:	f800283a 	ret
 8010e7c:	98800117 	ldw	r2,4(r19)
 8010e80:	80c00017 	ldw	r3,0(r16)
 8010e84:	10bfffc4 	addi	r2,r2,-1
 8010e88:	17001526 	beq	r2,fp,8010ee0 <__call_exitprocs+0x164>
 8010e8c:	80000015 	stw	zero,0(r16)
 8010e90:	183fde26 	beq	r3,zero,8010e0c <__alt_data_end+0xfc010e0c>
 8010e94:	00800044 	movi	r2,1
 8010e98:	1708983a 	sll	r4,r2,fp
 8010e9c:	98806217 	ldw	r2,392(r19)
 8010ea0:	9dc00117 	ldw	r23,4(r19)
 8010ea4:	2084703a 	and	r2,r4,r2
 8010ea8:	1000061e 	bne	r2,zero,8010ec4 <__call_exitprocs+0x148>
 8010eac:	183ee83a 	callr	r3
 8010eb0:	98800117 	ldw	r2,4(r19)
 8010eb4:	15ffc51e 	bne	r2,r23,8010dcc <__alt_data_end+0xfc010dcc>
 8010eb8:	a8800017 	ldw	r2,0(r21)
 8010ebc:	14ffd326 	beq	r2,r19,8010e0c <__alt_data_end+0xfc010e0c>
 8010ec0:	003fc206 	br	8010dcc <__alt_data_end+0xfc010dcc>
 8010ec4:	98806317 	ldw	r2,396(r19)
 8010ec8:	2084703a 	and	r2,r4,r2
 8010ecc:	1000061e 	bne	r2,zero,8010ee8 <__call_exitprocs+0x16c>
 8010ed0:	89400017 	ldw	r5,0(r17)
 8010ed4:	9009883a 	mov	r4,r18
 8010ed8:	183ee83a 	callr	r3
 8010edc:	003ff406 	br	8010eb0 <__alt_data_end+0xfc010eb0>
 8010ee0:	9f000115 	stw	fp,4(r19)
 8010ee4:	003fea06 	br	8010e90 <__alt_data_end+0xfc010e90>
 8010ee8:	89000017 	ldw	r4,0(r17)
 8010eec:	183ee83a 	callr	r3
 8010ef0:	003fef06 	br	8010eb0 <__alt_data_end+0xfc010eb0>
 8010ef4:	98800017 	ldw	r2,0(r19)
 8010ef8:	982b883a 	mov	r21,r19
 8010efc:	1027883a 	mov	r19,r2
 8010f00:	983fb61e 	bne	r19,zero,8010ddc <__alt_data_end+0xfc010ddc>
 8010f04:	003fd106 	br	8010e4c <__alt_data_end+0xfc010e4c>
 8010f08:	0005883a 	mov	r2,zero
 8010f0c:	003ffa06 	br	8010ef8 <__alt_data_end+0xfc010ef8>

08010f10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010f10:	defffd04 	addi	sp,sp,-12
 8010f14:	df000215 	stw	fp,8(sp)
 8010f18:	df000204 	addi	fp,sp,8
 8010f1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010f20:	0001883a 	nop
 8010f24:	e0bfff17 	ldw	r2,-4(fp)
 8010f28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8010f2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010f30:	10000226 	beq	r2,zero,8010f3c <_exit+0x2c>
    ALT_SIM_FAIL();
 8010f34:	002af070 	cmpltui	zero,zero,43969
 8010f38:	00000106 	br	8010f40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8010f3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010f40:	003fff06 	br	8010f40 <__alt_data_end+0xfc010f40>
