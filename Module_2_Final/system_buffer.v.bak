module system_buffer(clk, character_done, toHash, character, go);

parameter IDLE = 4'b0001;
parameter BUFFER = 4'b0010;
parameter END = 4'b0100;

input [15:0] toHash;
input character_done;
output reg [3:0] character;
output reg go;

reg state;
reg value;

always @(posedge clk) begin
	case(state)
		IDLE: if (toHash != 0) begin
					value <= toHash;
					state <= IDLE;
				end
				else state <= IDLE;
		BUFFER: begin
						for (i = 0; i < 4; i++) begin
							character <= value & 0xF;
							go <= 1'b1;
							while (!character_done);
							go <= 1'b0;
						end
		END:
		default: state <= IDLE;


	end